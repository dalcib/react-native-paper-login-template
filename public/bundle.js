 (() => new EventSource("/esbuild").onmessage = () => location.reload())();
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target2) => __defProp(target2, "__esModule", {value: true});
var __commonJS = (callback, module) => () => {
  if (!module) {
    module = {exports: {}};
    callback(module.exports, module);
  }
  return module.exports;
};
var __export = (target2, all) => {
  for (var name in all)
    __defProp(target2, name, {get: all[name], enumerable: true});
};
var __exportStar = (target2, module, desc) => {
  if (module && typeof module === "object" || typeof module === "function") {
    for (let key3 of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target2, key3) && key3 !== "default")
        __defProp(target2, key3, {get: () => module[key3], enumerable: !(desc = __getOwnPropDesc(module, key3)) || desc.enumerable});
  }
  return target2;
};
var __toModule = (module) => {
  return __exportStar(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: true} : {value: module, enumerable: true})), module);
};

// node_modules/object-assign/index.js
var require_object_assign = __commonJS((exports, module) => {
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  "use strict";
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty3 = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val2) {
    if (val2 === null || val2 === void 0) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    return Object(val2);
  }
  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }
      var test1 = new String("abc");
      test1[5] = "de";
      if (Object.getOwnPropertyNames(test1)[0] === "5") {
        return false;
      }
      var test2 = {};
      for (var i = 0; i < 10; i++) {
        test2["_" + String.fromCharCode(i)] = i;
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
        return test2[n];
      });
      if (order2.join("") !== "0123456789") {
        return false;
      }
      var test3 = {};
      "abcdefghijklmnopqrst".split("").forEach(function(letter) {
        test3[letter] = letter;
      });
      if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
        return false;
      }
      return true;
    } catch (err) {
      return false;
    }
  }
  module.exports = shouldUseNative() ? Object.assign : function(target2, source) {
    var from;
    var to = toObject(target2);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);
      for (var key3 in from) {
        if (hasOwnProperty3.call(from, key3)) {
          to[key3] = from[key3];
        }
      }
      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);
        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }
    return to;
  };
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS((exports) => {
  /** @license React v17.0.1
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      var _assign = require_object_assign();
      var ReactVersion = "17.0.1";
      var REACT_ELEMENT_TYPE = 60103;
      var REACT_PORTAL_TYPE = 60106;
      exports.Fragment = 60107;
      exports.StrictMode = 60108;
      exports.Profiler = 60114;
      var REACT_PROVIDER_TYPE = 60109;
      var REACT_CONTEXT_TYPE = 60110;
      var REACT_FORWARD_REF_TYPE = 60112;
      exports.Suspense = 60113;
      var REACT_SUSPENSE_LIST_TYPE = 60120;
      var REACT_MEMO_TYPE = 60115;
      var REACT_LAZY_TYPE = 60116;
      var REACT_BLOCK_TYPE = 60121;
      var REACT_SERVER_BLOCK_TYPE = 60122;
      var REACT_FUNDAMENTAL_TYPE = 60117;
      var REACT_SCOPE_TYPE = 60119;
      var REACT_OPAQUE_ID_TYPE = 60128;
      var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
      var REACT_OFFSCREEN_TYPE = 60130;
      var REACT_LEGACY_HIDDEN_TYPE = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        exports.Fragment = symbolFor("react.fragment");
        exports.StrictMode = symbolFor("react.strict_mode");
        exports.Profiler = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        exports.Suspense = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        REACT_SCOPE_TYPE = symbolFor("react.scope");
        REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
      }
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: 0
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var IsSomeRendererActing = {
        current: false
      };
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner,
        IsSomeRendererActing,
        assign: _assign
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
      }
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning("warn", format, args);
        }
      }
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var emptyObject16 = {};
      {
        Object.freeze(emptyObject16);
      }
      function Component19(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject16;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component19.prototype.isReactComponent = {};
      Component19.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
          {
            throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component19.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info2) {
          Object.defineProperty(Component19.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info2[0], info2[1]);
              return void 0;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component19.prototype;
      function PureComponent8(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject16;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent8.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent8;
      _assign(pureComponentPrototype, Component19.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef2() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentName(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case exports.Fragment:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case exports.Profiler:
            return "Profiler";
          case exports.StrictMode:
            return "StrictMode";
          case exports.Suspense:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
              return getComponentName(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty3 = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty3.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty3.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key3, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key: key3,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement179(type, config, children) {
        var propName;
        var props = {};
        var key3 = null;
        var ref = null;
        var self2 = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            key3 = "" + config.key;
          }
          self2 = config.__self === void 0 ? null : config.__self;
          source = config.__source === void 0 ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty3.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps4 = type.defaultProps;
          for (propName in defaultProps4) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps4[propName];
            }
          }
        }
        {
          if (key3 || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key3) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key3, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement11(element, config, children) {
        if (!!(element === null || element === void 0)) {
          {
            throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
        }
        var propName;
        var props = _assign({}, element.props);
        var key3 = element.key;
        var ref = element.ref;
        var self2 = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            key3 = "" + config.key;
          }
          var defaultProps4;
          if (element.type && element.type.defaultProps) {
            defaultProps4 = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty3.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === void 0 && defaultProps4 !== void 0) {
                props[propName] = defaultProps4[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key3, ref, self2, source, owner, props);
      }
      function isValidElement11(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape2(key3) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key3.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text2) {
        return text2.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        if (typeof element === "object" && element !== null && element.key != null) {
          return escape2("" + element.key);
        }
        return index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (Array.isArray(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement11(mappedChild)) {
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
            }
            array.push(mappedChild);
          }
          return 1;
        }
        var child2;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child2 = children[i];
            nextName = nextNamePrefix + getElementKey(child2, i);
            subtreeCount += mapIntoArray(child2, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child2 = step.value;
              nextName = nextNamePrefix + getElementKey(child2, ii++);
              subtreeCount += mapIntoArray(child2, array, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = "" + children;
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child2) {
          return func.call(context, child2, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child2) {
          return child2;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement11(children)) {
          {
            throw Error("React.Children.only expected to receive a single React element child.");
          }
        }
        return children;
      }
      function createContext28(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === void 0) {
          calculateChangedBits = null;
        } else {
          {
            if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
              error2("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
            }
          }
        }
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _calculateChangedBits: calculateChangedBits,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer2 = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
          };
          Object.defineProperties(Consumer2, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer2;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          var pending = payload;
          pending._status = Pending;
          pending._result = thenable;
          thenable.then(function(moduleObject) {
            if (payload._status === Pending) {
              var defaultExport = moduleObject.default;
              {
                if (defaultExport === void 0) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = defaultExport;
            }
          }, function(error3) {
            if (payload._status === Pending) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error3;
            }
          });
        }
        if (payload._status === Resolved) {
          return payload._result;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          _status: -1,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps4;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps4;
              },
              set: function(newDefaultProps) {
                error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                defaultProps4 = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef26(render3) {
        {
          if (render3 != null && render3.$$typeof === REACT_MEMO_TYPE) {
            error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
          } else if (typeof render3 !== "function") {
            error2("forwardRef requires a render function but was given %s.", render3 === null ? "null" : typeof render3);
          } else {
            if (render3.length !== 0 && render3.length !== 2) {
              error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render3.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render3 != null) {
            if (render3.defaultProps != null || render3.propTypes != null) {
              error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render: render3
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (render3.displayName == null) {
                render3.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var enableScopeAPI = false;
      function isValidElementType2(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
            return true;
          }
        }
        return false;
      }
      function memo20(type, compare2) {
        {
          if (!isValidElementType2(type)) {
            error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare2 === void 0 ? null : compare2
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (type.displayName == null) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) {
          {
            throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useContext30(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        {
          if (unstable_observedBits !== void 0) {
            error2("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
          }
          if (Context._context !== void 0) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) {
              error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context) {
              error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context, unstable_observedBits);
      }
      function useState57(initialState2) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState2);
      }
      function useReducer2(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef49(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect47(create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create3, deps);
      }
      function useLayoutEffect5(create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create3, deps);
      }
      function useCallback27(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo18(create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create3, deps);
      }
      function useImperativeHandle5(ref, create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create3, deps);
      }
      function useDebugValue5(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: _assign({}, props, {
                value: prevLog
              }),
              info: _assign({}, props, {
                value: prevInfo
              }),
              warn: _assign({}, props, {
                value: prevWarn
              }),
              error: _assign({}, props, {
                value: prevError
              }),
              group: _assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: _assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: _assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component20) {
        var prototype = Component20.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case exports.Suspense:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error2("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentName(ReactCurrentOwner.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== void 0) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info2 = getDeclarationErrorAddendum();
        if (!info2) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info2;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== "object") {
          return;
        }
        if (Array.isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child2 = node[i];
            if (isValidElement11(child2)) {
              validateExplicitKey(child2, parentType);
            }
          }
        } else if (isValidElement11(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement11(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentName(type);
            error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0; i < keys.length; i++) {
            var key3 = keys[i];
            if (key3 !== "children" && key3 !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key3);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error2("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType2(type);
        if (!validType) {
          var info2 = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info2 += sourceInfo;
          } else {
            info2 += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (Array.isArray(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
            info2 = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
          }
        }
        var element = createElement179.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }
        if (type === exports.Fragment) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement11.apply(this, arguments);
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      {
        try {
          var frozenObject = Object.freeze({});
          new Map([[frozenObject, null]]);
          new Set([frozenObject]);
        } catch (e) {
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children14 = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children14;
      exports.Component = Component19;
      exports.PureComponent = PureComponent8;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.cloneElement = cloneElement$1;
      exports.createContext = createContext28;
      exports.createElement = createElement$1;
      exports.createFactory = createFactory;
      exports.createRef = createRef2;
      exports.forwardRef = forwardRef26;
      exports.isValidElement = isValidElement11;
      exports.lazy = lazy;
      exports.memo = memo20;
      exports.useCallback = useCallback27;
      exports.useContext = useContext30;
      exports.useDebugValue = useDebugValue5;
      exports.useEffect = useEffect47;
      exports.useImperativeHandle = useImperativeHandle5;
      exports.useLayoutEffect = useLayoutEffect5;
      exports.useMemo = useMemo18;
      exports.useReducer = useReducer2;
      exports.useRef = useRef49;
      exports.useState = useState57;
      exports.version = ReactVersion;
    })();
  }
});

// node_modules/react/index.js
var require_react = __commonJS((exports, module) => {
  "use strict";
  if (false) {
    module.exports = null;
  } else {
    module.exports = require_react_development();
  }
});

// node_modules/react-native-web/node_modules/fbjs/lib/ExecutionEnvironment.js
var require_ExecutionEnvironment = __commonJS((exports, module) => {
  "use strict";
  var canUseDOM19 = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  var ExecutionEnvironment2 = {
    canUseDOM: canUseDOM19,
    canUseWorkers: typeof Worker !== "undefined",
    canUseEventListeners: canUseDOM19 && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM19 && !!window.screen,
    isInWorker: !canUseDOM19
  };
  module.exports = ExecutionEnvironment2;
});

// node_modules/normalize-css-color/index.js
var require_normalize_css_color = __commonJS((exports, module) => {
  function normalizeColor5(color39) {
    var match;
    if (typeof color39 === "number") {
      if (color39 >>> 0 === color39 && color39 >= 0 && color39 <= 4294967295) {
        return color39;
      }
      return null;
    }
    if (match = matchers.hex6.exec(color39)) {
      return parseInt(match[1] + "ff", 16) >>> 0;
    }
    if (names.hasOwnProperty(color39)) {
      return names[color39];
    }
    if (match = matchers.rgb.exec(color39)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
    }
    if (match = matchers.rgba.exec(color39)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }
    if (match = matchers.hex3.exec(color39)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
    }
    if (match = matchers.hex8.exec(color39)) {
      return parseInt(match[1], 16) >>> 0;
    }
    if (match = matchers.hex4.exec(color39)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }
    if (match = matchers.hsl.exec(color39)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
    }
    if (match = matchers.hsla.exec(color39)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }
    return null;
  }
  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }
    if (t > 1) {
      t -= 1;
    }
    if (t < 1 / 6) {
      return p + (q - p) * 6 * t;
    }
    if (t < 1 / 2) {
      return q;
    }
    if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }
    return p;
  }
  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 1 / 3);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 1 / 3);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }
  var NUMBER = "[-+]?\\d*\\.?\\d+";
  var PERCENTAGE = NUMBER + "%";
  function toArray(arrayLike) {
    return Array.prototype.slice.call(arrayLike, 0);
  }
  function call2() {
    return "\\(\\s*(" + toArray(arguments).join(")\\s*,\\s*(") + ")\\s*\\)";
  }
  var matchers = {
    rgb: new RegExp("rgb" + call2(NUMBER, NUMBER, NUMBER)),
    rgba: new RegExp("rgba" + call2(NUMBER, NUMBER, NUMBER, NUMBER)),
    hsl: new RegExp("hsl" + call2(NUMBER, PERCENTAGE, PERCENTAGE)),
    hsla: new RegExp("hsla" + call2(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
    hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#([0-9a-fA-F]{6})$/,
    hex8: /^#([0-9a-fA-F]{8})$/
  };
  function parse255(str) {
    var int = parseInt(str, 10);
    if (int < 0) {
      return 0;
    }
    if (int > 255) {
      return 255;
    }
    return int;
  }
  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }
  function parse1(str) {
    var num = parseFloat(str);
    if (num < 0) {
      return 0;
    }
    if (num > 1) {
      return 255;
    }
    return Math.round(num * 255);
  }
  function parsePercentage(str) {
    var int = parseFloat(str, 10);
    if (int < 0) {
      return 0;
    }
    if (int > 100) {
      return 1;
    }
    return int / 100;
  }
  var names = {
    transparent: 0,
    aliceblue: 4042850303,
    antiquewhite: 4209760255,
    aqua: 16777215,
    aquamarine: 2147472639,
    azure: 4043309055,
    beige: 4126530815,
    bisque: 4293182719,
    black: 255,
    blanchedalmond: 4293643775,
    blue: 65535,
    blueviolet: 2318131967,
    brown: 2771004159,
    burlywood: 3736635391,
    burntsienna: 3934150143,
    cadetblue: 1604231423,
    chartreuse: 2147418367,
    chocolate: 3530104575,
    coral: 4286533887,
    cornflowerblue: 1687547391,
    cornsilk: 4294499583,
    crimson: 3692313855,
    cyan: 16777215,
    darkblue: 35839,
    darkcyan: 9145343,
    darkgoldenrod: 3095792639,
    darkgray: 2846468607,
    darkgreen: 6553855,
    darkgrey: 2846468607,
    darkkhaki: 3182914559,
    darkmagenta: 2332068863,
    darkolivegreen: 1433087999,
    darkorange: 4287365375,
    darkorchid: 2570243327,
    darkred: 2332033279,
    darksalmon: 3918953215,
    darkseagreen: 2411499519,
    darkslateblue: 1211993087,
    darkslategray: 793726975,
    darkslategrey: 793726975,
    darkturquoise: 13554175,
    darkviolet: 2483082239,
    deeppink: 4279538687,
    deepskyblue: 12582911,
    dimgray: 1768516095,
    dimgrey: 1768516095,
    dodgerblue: 512819199,
    firebrick: 2988581631,
    floralwhite: 4294635775,
    forestgreen: 579543807,
    fuchsia: 4278255615,
    gainsboro: 3705462015,
    ghostwhite: 4177068031,
    gold: 4292280575,
    goldenrod: 3668254975,
    gray: 2155905279,
    green: 8388863,
    greenyellow: 2919182335,
    grey: 2155905279,
    honeydew: 4043305215,
    hotpink: 4285117695,
    indianred: 3445382399,
    indigo: 1258324735,
    ivory: 4294963455,
    khaki: 4041641215,
    lavender: 3873897215,
    lavenderblush: 4293981695,
    lawngreen: 2096890111,
    lemonchiffon: 4294626815,
    lightblue: 2916673279,
    lightcoral: 4034953471,
    lightcyan: 3774873599,
    lightgoldenrodyellow: 4210742015,
    lightgray: 3553874943,
    lightgreen: 2431553791,
    lightgrey: 3553874943,
    lightpink: 4290167295,
    lightsalmon: 4288707327,
    lightseagreen: 548580095,
    lightskyblue: 2278488831,
    lightslategray: 2005441023,
    lightslategrey: 2005441023,
    lightsteelblue: 2965692159,
    lightyellow: 4294959359,
    lime: 16711935,
    limegreen: 852308735,
    linen: 4210091775,
    magenta: 4278255615,
    maroon: 2147483903,
    mediumaquamarine: 1724754687,
    mediumblue: 52735,
    mediumorchid: 3126187007,
    mediumpurple: 2473647103,
    mediumseagreen: 1018393087,
    mediumslateblue: 2070474495,
    mediumspringgreen: 16423679,
    mediumturquoise: 1221709055,
    mediumvioletred: 3340076543,
    midnightblue: 421097727,
    mintcream: 4127193855,
    mistyrose: 4293190143,
    moccasin: 4293178879,
    navajowhite: 4292783615,
    navy: 33023,
    oldlace: 4260751103,
    olive: 2155872511,
    olivedrab: 1804477439,
    orange: 4289003775,
    orangered: 4282712319,
    orchid: 3664828159,
    palegoldenrod: 4008225535,
    palegreen: 2566625535,
    paleturquoise: 2951671551,
    palevioletred: 3681588223,
    papayawhip: 4293907967,
    peachpuff: 4292524543,
    peru: 3448061951,
    pink: 4290825215,
    plum: 3718307327,
    powderblue: 2967529215,
    purple: 2147516671,
    rebeccapurple: 1714657791,
    red: 4278190335,
    rosybrown: 3163525119,
    royalblue: 1097458175,
    saddlebrown: 2336560127,
    salmon: 4202722047,
    sandybrown: 4104413439,
    seagreen: 780883967,
    seashell: 4294307583,
    sienna: 2689740287,
    silver: 3233857791,
    skyblue: 2278484991,
    slateblue: 1784335871,
    slategray: 1887473919,
    slategrey: 1887473919,
    snow: 4294638335,
    springgreen: 16744447,
    steelblue: 1182971135,
    tan: 3535047935,
    teal: 8421631,
    thistle: 3636451583,
    tomato: 4284696575,
    turquoise: 1088475391,
    violet: 4001558271,
    wheat: 4125012991,
    white: 4294967295,
    whitesmoke: 4126537215,
    yellow: 4294902015,
    yellowgreen: 2597139199
  };
  function rgba(colorInt) {
    var r = Math.round((colorInt & 4278190080) >>> 24);
    var g = Math.round((colorInt & 16711680) >>> 16);
    var b = Math.round((colorInt & 65280) >>> 8);
    var a = ((colorInt & 255) >>> 0) / 255;
    return {
      r,
      g,
      b,
      a
    };
  }
  normalizeColor5.rgba = rgba;
  module.exports = normalizeColor5;
});

// node_modules/react-native-web/node_modules/fbjs/lib/invariant.js
var require_invariant = __commonJS((exports, module) => {
  "use strict";
  var validateFormat = true ? function(format) {
    if (format === void 0) {
      throw new Error("invariant(...): Second argument must be a string.");
    }
  } : function(format) {
  };
  function invariant45(condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    validateFormat(format);
    if (!condition) {
      var error2;
      if (format === void 0) {
        error2 = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var argIndex = 0;
        error2 = new Error(format.replace(/%s/g, function() {
          return String(args[argIndex++]);
        }));
        error2.name = "Invariant Violation";
      }
      error2.framesToPop = 1;
      throw error2;
    }
  }
  module.exports = invariant45;
});

// node_modules/hyphenate-style-name/index.js
var require_hyphenate_style_name = __commonJS((exports) => {
  __markAsModule(exports);
  __export(exports, {
    default: () => hyphenate_style_name_default
  });
  var uppercasePattern2 = /[A-Z]/g;
  var msPattern = /^ms-/;
  var cache2 = {};
  function toHyphenLower2(match) {
    return "-" + match.toLowerCase();
  }
  function hyphenateStyleName2(name) {
    if (cache2.hasOwnProperty(name)) {
      return cache2[name];
    }
    var hName = name.replace(uppercasePattern2, toHyphenLower2);
    return cache2[name] = msPattern.test(hName) ? "-" + hName : hName;
  }
  var hyphenate_style_name_default = hyphenateStyleName2;
});

// node_modules/inline-style-prefixer/lib/utils/capitalizeString.js
var require_capitalizeString = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = capitalizeString;
  function capitalizeString(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
});

// node_modules/inline-style-prefixer/lib/utils/prefixProperty.js
var require_prefixProperty = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = prefixProperty;
  var _capitalizeString = require_capitalizeString();
  var _capitalizeString2 = _interopRequireDefault(_capitalizeString);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function prefixProperty(prefixProperties, property, style) {
    if (prefixProperties.hasOwnProperty(property)) {
      var newStyle = {};
      var requiredPrefixes = prefixProperties[property];
      var capitalizedProperty = (0, _capitalizeString2.default)(property);
      var keys = Object.keys(style);
      for (var i = 0; i < keys.length; i++) {
        var styleProperty = keys[i];
        if (styleProperty === property) {
          for (var j = 0; j < requiredPrefixes.length; j++) {
            newStyle[requiredPrefixes[j] + capitalizedProperty] = style[property];
          }
        }
        newStyle[styleProperty] = style[styleProperty];
      }
      return newStyle;
    }
    return style;
  }
});

// node_modules/inline-style-prefixer/lib/utils/prefixValue.js
var require_prefixValue = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = prefixValue;
  function prefixValue(plugins, property, value, style, metaData) {
    for (var i = 0, len = plugins.length; i < len; ++i) {
      var processedValue = plugins[i](property, value, style, metaData);
      if (processedValue) {
        return processedValue;
      }
    }
  }
});

// node_modules/inline-style-prefixer/lib/utils/addNewValuesOnly.js
var require_addNewValuesOnly = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = addNewValuesOnly;
  function addIfNew(list2, value) {
    if (list2.indexOf(value) === -1) {
      list2.push(value);
    }
  }
  function addNewValuesOnly(list2, values) {
    if (Array.isArray(values)) {
      for (var i = 0, len = values.length; i < len; ++i) {
        addIfNew(list2, values[i]);
      }
    } else {
      addIfNew(list2, values);
    }
  }
});

// node_modules/inline-style-prefixer/lib/utils/isObject.js
var require_isObject = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isObject;
  function isObject(value) {
    return value instanceof Object && !Array.isArray(value);
  }
});

// node_modules/inline-style-prefixer/lib/createPrefixer.js
var require_createPrefixer = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createPrefixer2;
  var _prefixProperty = require_prefixProperty();
  var _prefixProperty2 = _interopRequireDefault(_prefixProperty);
  var _prefixValue = require_prefixValue();
  var _prefixValue2 = _interopRequireDefault(_prefixValue);
  var _addNewValuesOnly = require_addNewValuesOnly();
  var _addNewValuesOnly2 = _interopRequireDefault(_addNewValuesOnly);
  var _isObject = require_isObject();
  var _isObject2 = _interopRequireDefault(_isObject);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function createPrefixer2(_ref) {
    var prefixMap = _ref.prefixMap, plugins = _ref.plugins;
    return function prefix2(style) {
      for (var property in style) {
        var value = style[property];
        if ((0, _isObject2.default)(value)) {
          style[property] = prefix2(value);
        } else if (Array.isArray(value)) {
          var combinedValue = [];
          for (var i = 0, len = value.length; i < len; ++i) {
            var processedValue = (0, _prefixValue2.default)(plugins, property, value[i], style, prefixMap);
            (0, _addNewValuesOnly2.default)(combinedValue, processedValue || value[i]);
          }
          if (combinedValue.length > 0) {
            style[property] = combinedValue;
          }
        } else {
          var _processedValue = (0, _prefixValue2.default)(plugins, property, value, style, prefixMap);
          if (_processedValue) {
            style[property] = _processedValue;
          }
          style = (0, _prefixProperty2.default)(prefixMap, property, style);
        }
      }
      return style;
    };
  }
});

// node_modules/inline-style-prefixer/lib/plugins/backgroundClip.js
var require_backgroundClip = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = backgroundClip2;
  function backgroundClip2(property, value) {
    if (typeof value === "string" && value === "text") {
      return ["-webkit-text", "text"];
    }
  }
});

// node_modules/css-in-js-utils/lib/isPrefixedValue.js
var require_isPrefixedValue = __commonJS((exports, module) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isPrefixedValue;
  var regex2 = /-webkit-|-moz-|-ms-/;
  function isPrefixedValue(value) {
    return typeof value === "string" && regex2.test(value);
  }
  module.exports = exports["default"];
});

// node_modules/inline-style-prefixer/lib/plugins/crossFade.js
var require_crossFade = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = crossFade2;
  var _isPrefixedValue = require_isPrefixedValue();
  var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var prefixes2 = ["-webkit-", ""];
  function crossFade2(property, value) {
    if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && value.indexOf("cross-fade(") > -1) {
      return prefixes2.map(function(prefix2) {
        return value.replace(/cross-fade\(/g, prefix2 + "cross-fade(");
      });
    }
  }
});

// node_modules/inline-style-prefixer/lib/plugins/cursor.js
var require_cursor = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = cursor2;
  var prefixes2 = ["-webkit-", "-moz-", ""];
  var values = {
    "zoom-in": true,
    "zoom-out": true,
    grab: true,
    grabbing: true
  };
  function cursor2(property, value) {
    if (property === "cursor" && values.hasOwnProperty(value)) {
      return prefixes2.map(function(prefix2) {
        return prefix2 + value;
      });
    }
  }
});

// node_modules/inline-style-prefixer/lib/plugins/filter.js
var require_filter = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = filter4;
  var _isPrefixedValue = require_isPrefixedValue();
  var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var prefixes2 = ["-webkit-", ""];
  function filter4(property, value) {
    if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && value.indexOf("filter(") > -1) {
      return prefixes2.map(function(prefix2) {
        return value.replace(/filter\(/g, prefix2 + "filter(");
      });
    }
  }
});

// node_modules/inline-style-prefixer/lib/plugins/flex.js
var require_flex = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = flex2;
  var values = {
    flex: ["-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex", "flex"],
    "inline-flex": ["-webkit-inline-box", "-moz-inline-box", "-ms-inline-flexbox", "-webkit-inline-flex", "inline-flex"]
  };
  function flex2(property, value) {
    if (property === "display" && values.hasOwnProperty(value)) {
      return values[value];
    }
  }
});

// node_modules/inline-style-prefixer/lib/plugins/flexboxIE.js
var require_flexboxIE = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = flexboxIE2;
  var alternativeValues = {
    "space-around": "distribute",
    "space-between": "justify",
    "flex-start": "start",
    "flex-end": "end"
  };
  var alternativeProps = {
    alignContent: "msFlexLinePack",
    alignSelf: "msFlexItemAlign",
    alignItems: "msFlexAlign",
    justifyContent: "msFlexPack",
    order: "msFlexOrder",
    flexGrow: "msFlexPositive",
    flexShrink: "msFlexNegative",
    flexBasis: "msFlexPreferredSize"
  };
  var flexShorthandMappings = {
    auto: "1 1 auto",
    inherit: "inherit",
    initial: "0 1 auto",
    none: "0 0 auto",
    unset: "unset"
  };
  var isUnitlessNumber = /^\d+(\.\d+)?$/;
  function flexboxIE2(property, value, style) {
    if (Object.prototype.hasOwnProperty.call(alternativeProps, property)) {
      style[alternativeProps[property]] = alternativeValues[value] || value;
    }
    if (property === "flex") {
      if (Object.prototype.hasOwnProperty.call(flexShorthandMappings, value)) {
        style.msFlex = flexShorthandMappings[value];
        return;
      }
      if (isUnitlessNumber.test(value)) {
        style.msFlex = value + " 1 0%";
        return;
      }
      var flexValues = value.split(/\s/);
      switch (flexValues.length) {
        case 1:
          style.msFlex = "1 1 " + value;
          return;
        case 2:
          if (isUnitlessNumber.test(flexValues[1])) {
            style.msFlex = flexValues[0] + " " + flexValues[1] + " 0%";
          } else {
            style.msFlex = flexValues[0] + " 1 " + flexValues[1];
          }
          return;
        default:
          style.msFlex = value;
      }
    }
  }
});

// node_modules/inline-style-prefixer/lib/plugins/flexboxOld.js
var require_flexboxOld = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = flexboxOld2;
  var alternativeValues = {
    "space-around": "justify",
    "space-between": "justify",
    "flex-start": "start",
    "flex-end": "end",
    "wrap-reverse": "multiple",
    wrap: "multiple"
  };
  var alternativeProps = {
    alignItems: "WebkitBoxAlign",
    justifyContent: "WebkitBoxPack",
    flexWrap: "WebkitBoxLines",
    flexGrow: "WebkitBoxFlex"
  };
  function flexboxOld2(property, value, style) {
    if (property === "flexDirection" && typeof value === "string") {
      if (value.indexOf("column") > -1) {
        style.WebkitBoxOrient = "vertical";
      } else {
        style.WebkitBoxOrient = "horizontal";
      }
      if (value.indexOf("reverse") > -1) {
        style.WebkitBoxDirection = "reverse";
      } else {
        style.WebkitBoxDirection = "normal";
      }
    }
    if (alternativeProps.hasOwnProperty(property)) {
      style[alternativeProps[property]] = alternativeValues[value] || value;
    }
  }
});

// node_modules/inline-style-prefixer/lib/plugins/gradient.js
var require_gradient = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = gradient3;
  var _isPrefixedValue = require_isPrefixedValue();
  var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var prefixes2 = ["-webkit-", "-moz-", ""];
  var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/gi;
  function gradient3(property, value) {
    if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && values.test(value)) {
      return prefixes2.map(function(prefix2) {
        return value.replace(values, function(grad) {
          return prefix2 + grad;
        });
      });
    }
  }
});

// node_modules/inline-style-prefixer/lib/plugins/grid.js
var require_grid = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _slicedToArray = function() {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"])
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    return function(arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();
  exports.default = grid3;
  function isSimplePositionValue(value) {
    return typeof value === "number" && !isNaN(value);
  }
  function isComplexSpanValue(value) {
    return typeof value === "string" && value.includes("/");
  }
  var alignmentValues = ["center", "end", "start", "stretch"];
  var displayValues = {
    "inline-grid": ["-ms-inline-grid", "inline-grid"],
    grid: ["-ms-grid", "grid"]
  };
  var propertyConverters = {
    alignSelf: function alignSelf(value, style) {
      if (alignmentValues.indexOf(value) > -1) {
        style.msGridRowAlign = value;
      }
    },
    gridColumn: function gridColumn(value, style) {
      if (isSimplePositionValue(value)) {
        style.msGridColumn = value;
      } else if (isComplexSpanValue(value)) {
        var _value$split = value.split("/"), _value$split2 = _slicedToArray(_value$split, 2), start = _value$split2[0], end = _value$split2[1];
        propertyConverters.gridColumnStart(+start, style);
        var _end$split = end.split(/ ?span /), _end$split2 = _slicedToArray(_end$split, 2), maybeSpan = _end$split2[0], maybeNumber = _end$split2[1];
        if (maybeSpan === "") {
          propertyConverters.gridColumnEnd(+start + +maybeNumber, style);
        } else {
          propertyConverters.gridColumnEnd(+end, style);
        }
      } else {
        propertyConverters.gridColumnStart(value, style);
      }
    },
    gridColumnEnd: function gridColumnEnd(value, style) {
      var msGridColumn = style.msGridColumn;
      if (isSimplePositionValue(value) && isSimplePositionValue(msGridColumn)) {
        style.msGridColumnSpan = value - msGridColumn;
      }
    },
    gridColumnStart: function gridColumnStart(value, style) {
      if (isSimplePositionValue(value)) {
        style.msGridColumn = value;
      }
    },
    gridRow: function gridRow(value, style) {
      if (isSimplePositionValue(value)) {
        style.msGridRow = value;
      } else if (isComplexSpanValue(value)) {
        var _value$split3 = value.split("/"), _value$split4 = _slicedToArray(_value$split3, 2), start = _value$split4[0], end = _value$split4[1];
        propertyConverters.gridRowStart(+start, style);
        var _end$split3 = end.split(/ ?span /), _end$split4 = _slicedToArray(_end$split3, 2), maybeSpan = _end$split4[0], maybeNumber = _end$split4[1];
        if (maybeSpan === "") {
          propertyConverters.gridRowEnd(+start + +maybeNumber, style);
        } else {
          propertyConverters.gridRowEnd(+end, style);
        }
      } else {
        propertyConverters.gridRowStart(value, style);
      }
    },
    gridRowEnd: function gridRowEnd(value, style) {
      var msGridRow = style.msGridRow;
      if (isSimplePositionValue(value) && isSimplePositionValue(msGridRow)) {
        style.msGridRowSpan = value - msGridRow;
      }
    },
    gridRowStart: function gridRowStart(value, style) {
      if (isSimplePositionValue(value)) {
        style.msGridRow = value;
      }
    },
    gridTemplateColumns: function gridTemplateColumns(value, style) {
      style.msGridColumns = value;
    },
    gridTemplateRows: function gridTemplateRows(value, style) {
      style.msGridRows = value;
    },
    justifySelf: function justifySelf(value, style) {
      if (alignmentValues.indexOf(value) > -1) {
        style.msGridColumnAlign = value;
      }
    }
  };
  function grid3(property, value, style) {
    if (property === "display" && value in displayValues) {
      return displayValues[value];
    }
    if (property in propertyConverters) {
      var propertyConverter = propertyConverters[property];
      propertyConverter(value, style);
    }
  }
});

// node_modules/inline-style-prefixer/lib/plugins/imageSet.js
var require_imageSet = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = imageSet2;
  var _isPrefixedValue = require_isPrefixedValue();
  var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var prefixes2 = ["-webkit-", ""];
  function imageSet2(property, value) {
    if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && value.indexOf("image-set(") > -1) {
      return prefixes2.map(function(prefix2) {
        return value.replace(/image-set\(/g, prefix2 + "image-set(");
      });
    }
  }
});

// node_modules/inline-style-prefixer/lib/plugins/logical.js
var require_logical = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = logical2;
  var alternativeProps = {
    marginBlockStart: ["WebkitMarginBefore"],
    marginBlockEnd: ["WebkitMarginAfter"],
    marginInlineStart: ["WebkitMarginStart", "MozMarginStart"],
    marginInlineEnd: ["WebkitMarginEnd", "MozMarginEnd"],
    paddingBlockStart: ["WebkitPaddingBefore"],
    paddingBlockEnd: ["WebkitPaddingAfter"],
    paddingInlineStart: ["WebkitPaddingStart", "MozPaddingStart"],
    paddingInlineEnd: ["WebkitPaddingEnd", "MozPaddingEnd"],
    borderBlockStart: ["WebkitBorderBefore"],
    borderBlockStartColor: ["WebkitBorderBeforeColor"],
    borderBlockStartStyle: ["WebkitBorderBeforeStyle"],
    borderBlockStartWidth: ["WebkitBorderBeforeWidth"],
    borderBlockEnd: ["WebkitBorderAfter"],
    borderBlockEndColor: ["WebkitBorderAfterColor"],
    borderBlockEndStyle: ["WebkitBorderAfterStyle"],
    borderBlockEndWidth: ["WebkitBorderAfterWidth"],
    borderInlineStart: ["WebkitBorderStart", "MozBorderStart"],
    borderInlineStartColor: ["WebkitBorderStartColor", "MozBorderStartColor"],
    borderInlineStartStyle: ["WebkitBorderStartStyle", "MozBorderStartStyle"],
    borderInlineStartWidth: ["WebkitBorderStartWidth", "MozBorderStartWidth"],
    borderInlineEnd: ["WebkitBorderEnd", "MozBorderEnd"],
    borderInlineEndColor: ["WebkitBorderEndColor", "MozBorderEndColor"],
    borderInlineEndStyle: ["WebkitBorderEndStyle", "MozBorderEndStyle"],
    borderInlineEndWidth: ["WebkitBorderEndWidth", "MozBorderEndWidth"]
  };
  function logical2(property, value, style) {
    if (Object.prototype.hasOwnProperty.call(alternativeProps, property)) {
      var alternativePropList = alternativeProps[property];
      for (var i = 0, len = alternativePropList.length; i < len; ++i) {
        style[alternativePropList[i]] = value;
      }
    }
  }
});

// node_modules/inline-style-prefixer/lib/plugins/position.js
var require_position = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = position2;
  function position2(property, value) {
    if (property === "position" && value === "sticky") {
      return ["-webkit-sticky", "sticky"];
    }
  }
});

// node_modules/inline-style-prefixer/lib/plugins/sizing.js
var require_sizing = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = sizing2;
  var prefixes2 = ["-webkit-", "-moz-", ""];
  var properties = {
    maxHeight: true,
    maxWidth: true,
    width: true,
    height: true,
    columnWidth: true,
    minWidth: true,
    minHeight: true
  };
  var values = {
    "min-content": true,
    "max-content": true,
    "fill-available": true,
    "fit-content": true,
    "contain-floats": true
  };
  function sizing2(property, value) {
    if (properties.hasOwnProperty(property) && values.hasOwnProperty(value)) {
      return prefixes2.map(function(prefix2) {
        return prefix2 + value;
      });
    }
  }
});

// node_modules/css-in-js-utils/lib/hyphenateProperty.js
var require_hyphenateProperty = __commonJS((exports, module) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = hyphenateProperty;
  var _hyphenateStyleName = require_hyphenate_style_name();
  var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function hyphenateProperty(property) {
    return (0, _hyphenateStyleName2.default)(property);
  }
  module.exports = exports["default"];
});

// node_modules/inline-style-prefixer/lib/plugins/transition.js
var require_transition = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = transition3;
  var _hyphenateProperty = require_hyphenateProperty();
  var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);
  var _isPrefixedValue = require_isPrefixedValue();
  var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
  var _capitalizeString = require_capitalizeString();
  var _capitalizeString2 = _interopRequireDefault(_capitalizeString);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var properties = {
    transition: true,
    transitionProperty: true,
    WebkitTransition: true,
    WebkitTransitionProperty: true,
    MozTransition: true,
    MozTransitionProperty: true
  };
  var prefixMapping = {
    Webkit: "-webkit-",
    Moz: "-moz-",
    ms: "-ms-"
  };
  function prefixValue(value, propertyPrefixMap) {
    if ((0, _isPrefixedValue2.default)(value)) {
      return value;
    }
    var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);
    for (var i = 0, len = multipleValues.length; i < len; ++i) {
      var singleValue = multipleValues[i];
      var values = [singleValue];
      for (var property in propertyPrefixMap) {
        var dashCaseProperty = (0, _hyphenateProperty2.default)(property);
        if (singleValue.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== "order") {
          var prefixes2 = propertyPrefixMap[property];
          for (var j = 0, pLen = prefixes2.length; j < pLen; ++j) {
            values.unshift(singleValue.replace(dashCaseProperty, prefixMapping[prefixes2[j]] + dashCaseProperty));
          }
        }
      }
      multipleValues[i] = values.join(",");
    }
    return multipleValues.join(",");
  }
  function transition3(property, value, style, propertyPrefixMap) {
    if (typeof value === "string" && properties.hasOwnProperty(property)) {
      var outputValue = prefixValue(value, propertyPrefixMap);
      var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(val2) {
        return !/-moz-|-ms-/.test(val2);
      }).join(",");
      if (property.indexOf("Webkit") > -1) {
        return webkitOutput;
      }
      var mozOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(val2) {
        return !/-webkit-|-ms-/.test(val2);
      }).join(",");
      if (property.indexOf("Moz") > -1) {
        return mozOutput;
      }
      style["Webkit" + (0, _capitalizeString2.default)(property)] = webkitOutput;
      style["Moz" + (0, _capitalizeString2.default)(property)] = mozOutput;
      return outputValue;
    }
  }
});

// node_modules/react-native-web/node_modules/fbjs/lib/emptyFunction.js
var require_emptyFunction = __commonJS((exports, module) => {
  "use strict";
  function makeEmptyFunction(arg) {
    return function() {
      return arg;
    };
  }
  var emptyFunction8 = function emptyFunction9() {
  };
  emptyFunction8.thatReturns = makeEmptyFunction;
  emptyFunction8.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction8.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction8.thatReturnsNull = makeEmptyFunction(null);
  emptyFunction8.thatReturnsThis = function() {
    return this;
  };
  emptyFunction8.thatReturnsArgument = function(arg) {
    return arg;
  };
  module.exports = emptyFunction8;
});

// node_modules/react-native-web/node_modules/fbjs/lib/warning.js
var require_warning = __commonJS((exports, module) => {
  "use strict";
  var emptyFunction8 = require_emptyFunction();
  function printWarning(format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var argIndex = 0;
    var message2 = "Warning: " + format.replace(/%s/g, function() {
      return args[argIndex++];
    });
    if (typeof console !== "undefined") {
      console.error(message2);
    }
    try {
      throw new Error(message2);
    } catch (x) {
    }
  }
  var warning6 = true ? function(condition, format) {
    if (format === void 0) {
      throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }
      printWarning.apply(void 0, [format].concat(args));
    }
  } : emptyFunction8;
  module.exports = warning6;
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS((exports) => {
  /** @license React v0.20.1
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      var enableSchedulerDebugging = false;
      var enableProfiling = true;
      var requestHostCallback;
      var requestHostTimeout;
      var cancelHostTimeout;
      var requestPaint;
      var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      if (typeof window === "undefined" || typeof MessageChannel !== "function") {
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
          if (_callback !== null) {
            try {
              var currentTime = exports.unstable_now();
              var hasRemainingTime = true;
              _callback(hasRemainingTime, currentTime);
              _callback = null;
            } catch (e) {
              setTimeout(_flushCallback, 0);
              throw e;
            }
          }
        };
        requestHostCallback = function(cb) {
          if (_callback !== null) {
            setTimeout(requestHostCallback, 0, cb);
          } else {
            _callback = cb;
            setTimeout(_flushCallback, 0);
          }
        };
        requestHostTimeout = function(cb, ms2) {
          _timeoutID = setTimeout(cb, ms2);
        };
        cancelHostTimeout = function() {
          clearTimeout(_timeoutID);
        };
        exports.unstable_shouldYield = function() {
          return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function() {
        };
      } else {
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== "undefined") {
          var requestAnimationFrame2 = window.requestAnimationFrame;
          var cancelAnimationFrame2 = window.cancelAnimationFrame;
          if (typeof requestAnimationFrame2 !== "function") {
            console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
          if (typeof cancelAnimationFrame2 !== "function") {
            console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var yieldInterval = 5;
        var deadline = 0;
        {
          exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
          };
          requestPaint = function() {
          };
        }
        exports.unstable_forceFrameRate = function(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            yieldInterval = Math.floor(1e3 / fps);
          } else {
            yieldInterval = 5;
          }
        };
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            deadline = currentTime + yieldInterval;
            var hasTimeRemaining = true;
            try {
              var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              if (!hasMoreWork) {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              } else {
                port.postMessage(null);
              }
            } catch (error2) {
              port.postMessage(null);
              throw error2;
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            port.postMessage(null);
          }
        };
        requestHostTimeout = function(callback, ms2) {
          taskTimeoutID = _setTimeout(function() {
            callback(exports.unstable_now());
          }, ms2);
        };
        cancelHostTimeout = function() {
          _clearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        };
      }
      function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
      }
      function peek(heap) {
        var first = heap[0];
        return first === void 0 ? null : first;
      }
      function pop(heap) {
        var first = heap[0];
        if (first !== void 0) {
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        } else {
          return null;
        }
      }
      function siftUp(heap, node, i) {
        var index = i;
        while (true) {
          var parentIndex = index - 1 >>> 1;
          var parent = heap[parentIndex];
          if (parent !== void 0 && compare2(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index] = parent;
            index = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while (index < length) {
          var leftIndex = (index + 1) * 2 - 1;
          var left2 = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right2 = heap[rightIndex];
          if (left2 !== void 0 && compare2(left2, node) < 0) {
            if (right2 !== void 0 && compare2(right2, left2) < 0) {
              heap[index] = right2;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              heap[index] = left2;
              heap[leftIndex] = node;
              index = leftIndex;
            }
          } else if (right2 !== void 0 && compare2(right2, node) < 0) {
            heap[index] = right2;
            heap[rightIndex] = node;
            index = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare2(a, b) {
        var diff2 = a.sortIndex - b.sortIndex;
        return diff2 !== 0 ? diff2 : a.id - b.id;
      }
      var NoPriority = 0;
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      var runIdCounter = 0;
      var mainThreadIdCounter = 0;
      var profilingStateSize = 4;
      var sharedProfilingBuffer = typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
      var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
      var PRIORITY = 0;
      var CURRENT_TASK_ID = 1;
      var CURRENT_RUN_ID = 2;
      var QUEUE_SIZE = 3;
      {
        profilingState[PRIORITY] = NoPriority;
        profilingState[QUEUE_SIZE] = 0;
        profilingState[CURRENT_TASK_ID] = 0;
      }
      var INITIAL_EVENT_LOG_SIZE = 131072;
      var MAX_EVENT_LOG_SIZE = 524288;
      var eventLogSize = 0;
      var eventLogBuffer = null;
      var eventLog = null;
      var eventLogIndex = 0;
      var TaskStartEvent = 1;
      var TaskCompleteEvent = 2;
      var TaskErrorEvent = 3;
      var TaskCancelEvent = 4;
      var TaskRunEvent = 5;
      var TaskYieldEvent = 6;
      var SchedulerSuspendEvent = 7;
      var SchedulerResumeEvent = 8;
      function logEvent(entries) {
        if (eventLog !== null) {
          var offset = eventLogIndex;
          eventLogIndex += entries.length;
          if (eventLogIndex + 1 > eventLogSize) {
            eventLogSize *= 2;
            if (eventLogSize > MAX_EVENT_LOG_SIZE) {
              console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
              stopLoggingProfilingEvents();
              return;
            }
            var newEventLog = new Int32Array(eventLogSize * 4);
            newEventLog.set(eventLog);
            eventLogBuffer = newEventLog.buffer;
            eventLog = newEventLog;
          }
          eventLog.set(entries, offset);
        }
      }
      function startLoggingProfilingEvents() {
        eventLogSize = INITIAL_EVENT_LOG_SIZE;
        eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
        eventLog = new Int32Array(eventLogBuffer);
        eventLogIndex = 0;
      }
      function stopLoggingProfilingEvents() {
        var buffer2 = eventLogBuffer;
        eventLogSize = 0;
        eventLogBuffer = null;
        eventLog = null;
        eventLogIndex = 0;
        return buffer2;
      }
      function markTaskStart(task, ms2) {
        {
          profilingState[QUEUE_SIZE]++;
          if (eventLog !== null) {
            logEvent([TaskStartEvent, ms2 * 1e3, task.id, task.priorityLevel]);
          }
        }
      }
      function markTaskCompleted(task, ms2) {
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[QUEUE_SIZE]--;
          if (eventLog !== null) {
            logEvent([TaskCompleteEvent, ms2 * 1e3, task.id]);
          }
        }
      }
      function markTaskCanceled(task, ms2) {
        {
          profilingState[QUEUE_SIZE]--;
          if (eventLog !== null) {
            logEvent([TaskCancelEvent, ms2 * 1e3, task.id]);
          }
        }
      }
      function markTaskErrored(task, ms2) {
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[QUEUE_SIZE]--;
          if (eventLog !== null) {
            logEvent([TaskErrorEvent, ms2 * 1e3, task.id]);
          }
        }
      }
      function markTaskRun(task, ms2) {
        {
          runIdCounter++;
          profilingState[PRIORITY] = task.priorityLevel;
          profilingState[CURRENT_TASK_ID] = task.id;
          profilingState[CURRENT_RUN_ID] = runIdCounter;
          if (eventLog !== null) {
            logEvent([TaskRunEvent, ms2 * 1e3, task.id, runIdCounter]);
          }
        }
      }
      function markTaskYield(task, ms2) {
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[CURRENT_RUN_ID] = 0;
          if (eventLog !== null) {
            logEvent([TaskYieldEvent, ms2 * 1e3, task.id, runIdCounter]);
          }
        }
      }
      function markSchedulerSuspended(ms2) {
        {
          mainThreadIdCounter++;
          if (eventLog !== null) {
            logEvent([SchedulerSuspendEvent, ms2 * 1e3, mainThreadIdCounter]);
          }
        }
      }
      function markSchedulerUnsuspended(ms2) {
        {
          if (eventLog !== null) {
            logEvent([SchedulerResumeEvent, ms2 * 1e3, mainThreadIdCounter]);
          }
        }
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5e3;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      function advanceTimers(currentTime) {
        var timer2 = peek(timerQueue);
        while (timer2 !== null) {
          if (timer2.callback === null) {
            pop(timerQueue);
          } else if (timer2.startTime <= currentTime) {
            pop(timerQueue);
            timer2.sortIndex = timer2.expirationTime;
            push(taskQueue, timer2);
            {
              markTaskStart(timer2, currentTime);
              timer2.isQueued = true;
            }
          } else {
            return;
          }
          timer2 = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        {
          markSchedulerUnsuspended(initialTime2);
        }
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling) {
            try {
              return workLoop(hasTimeRemaining, initialTime2);
            } catch (error2) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                markTaskErrored(currentTask, currentTime);
                currentTask.isQueued = false;
              }
              throw error2;
            }
          } else {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
          {
            var _currentTime = exports.unstable_now();
            markSchedulerSuspended(_currentTime);
          }
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
            break;
          }
          var callback = currentTask.callback;
          if (typeof callback === "function") {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            markTaskRun(currentTask, currentTime);
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
              markTaskYield(currentTask, currentTime);
            } else {
              {
                markTaskCompleted(currentTask, currentTime);
                currentTask.isQueued = false;
              }
              if (currentTask === peek(taskQueue)) {
                pop(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === "object" && options !== null) {
          var delay3 = options.delay;
          if (typeof delay3 === "number" && delay3 > 0) {
            startTime = currentTime + delay3;
          } else {
            startTime = currentTime;
          }
        } else {
          startTime = currentTime;
        }
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime,
          expirationTime,
          sortIndex: -1
        };
        {
          newTask.isQueued = false;
        }
        if (startTime > currentTime) {
          newTask.sortIndex = startTime;
          push(timerQueue, newTask);
          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          {
            markTaskStart(newTask, currentTime);
            newTask.isQueued = true;
          }
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        {
          if (task.isQueued) {
            var currentTime = exports.unstable_now();
            markTaskCanceled(task, currentTime);
            task.isQueued = false;
          }
        }
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = {
        startLoggingProfilingEvents,
        stopLoggingProfilingEvents,
        sharedProfilingBuffer
      };
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_Profiling = unstable_Profiling;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_next = unstable_next;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_requestPaint = unstable_requestPaint;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_wrapCallback = unstable_wrapCallback;
    })();
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS((exports, module) => {
  "use strict";
  if (false) {
    module.exports = null;
  } else {
    module.exports = require_scheduler_development();
  }
});

// node_modules/scheduler/cjs/scheduler-tracing.development.js
var require_scheduler_tracing_development = __commonJS((exports) => {
  /** @license React v0.20.1
   * scheduler-tracing.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      var DEFAULT_THREAD_ID = 0;
      var interactionIDCounter = 0;
      var threadIDCounter = 0;
      exports.__interactionsRef = null;
      exports.__subscriberRef = null;
      {
        exports.__interactionsRef = {
          current: new Set()
        };
        exports.__subscriberRef = {
          current: null
        };
      }
      function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
          return callback();
        } finally {
          exports.__interactionsRef.current = prevInteractions;
        }
      }
      function unstable_getCurrent() {
        {
          return exports.__interactionsRef.current;
        }
      }
      function unstable_getThreadID() {
        return ++threadIDCounter;
      }
      function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
          __count: 1,
          id: interactionIDCounter++,
          name,
          timestamp
        };
        var prevInteractions = exports.__interactionsRef.current;
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
          if (subscriber !== null) {
            subscriber.onInteractionTraced(interaction);
          }
        } finally {
          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(interactions, threadID);
            }
          } finally {
            try {
              returnValue = callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStopped(interactions, threadID);
                }
              } finally {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              }
            }
          }
        }
        return returnValue;
      }
      function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) {
          subscriber.onWorkScheduled(wrappedInteractions, threadID);
        }
        wrappedInteractions.forEach(function(interaction) {
          interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = wrappedInteractions;
          subscriber = exports.__subscriberRef.current;
          try {
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(wrappedInteractions, threadID);
              }
            } finally {
              try {
                returnValue = callback.apply(void 0, arguments);
              } finally {
                exports.__interactionsRef.current = prevInteractions;
                if (subscriber !== null) {
                  subscriber.onWorkStopped(wrappedInteractions, threadID);
                }
              }
            }
            return returnValue;
          } finally {
            if (!hasRun) {
              hasRun = true;
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          }
        }
        wrapped.cancel = function cancel2() {
          subscriber = exports.__subscriberRef.current;
          try {
            if (subscriber !== null) {
              subscriber.onWorkCanceled(wrappedInteractions, threadID);
            }
          } finally {
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count--;
              if (subscriber && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        };
        return wrapped;
      }
      var subscribers = null;
      {
        subscribers = new Set();
      }
      function unstable_subscribe(subscriber) {
        {
          subscribers.add(subscriber);
          if (subscribers.size === 1) {
            exports.__subscriberRef.current = {
              onInteractionScheduledWorkCompleted,
              onInteractionTraced,
              onWorkCanceled,
              onWorkScheduled,
              onWorkStarted,
              onWorkStopped
            };
          }
        }
      }
      function unstable_unsubscribe(subscriber) {
        {
          subscribers.delete(subscriber);
          if (subscribers.size === 0) {
            exports.__subscriberRef.current = null;
          }
        }
      }
      function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onInteractionTraced(interaction);
          } catch (error2) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error2;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          } catch (error2) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error2;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkScheduled(interactions, threadID);
          } catch (error2) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error2;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error2) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error2;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkStopped(interactions, threadID);
          } catch (error2) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error2;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkCanceled(interactions, threadID);
          } catch (error2) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error2;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      exports.unstable_clear = unstable_clear;
      exports.unstable_getCurrent = unstable_getCurrent;
      exports.unstable_getThreadID = unstable_getThreadID;
      exports.unstable_subscribe = unstable_subscribe;
      exports.unstable_trace = unstable_trace;
      exports.unstable_unsubscribe = unstable_unsubscribe;
      exports.unstable_wrap = unstable_wrap;
    })();
  }
});

// node_modules/scheduler/tracing.js
var require_tracing = __commonJS((exports, module) => {
  "use strict";
  if (false) {
    module.exports = null;
  } else {
    module.exports = require_scheduler_tracing_development();
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS((exports) => {
  /** @license React v17.0.1
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      var React284 = require_react();
      var _assign = require_object_assign();
      var Scheduler = require_scheduler();
      var tracing = require_tracing();
      var ReactSharedInternals = React284.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning("warn", format, args);
        }
      }
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      if (!React284) {
        {
          throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
        }
      }
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment12 = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var FundamentalComponent = 20;
      var ScopeComponent = 21;
      var Block = 22;
      var OffscreenComponent = 23;
      var LegacyHiddenComponent = 24;
      var enableProfilerTimer = true;
      var enableFundamentalAPI = false;
      var enableNewReconciler = false;
      var warnAboutStringRefs = false;
      var allNativeEvents = new Set();
      var registrationNameDependencies = {};
      var possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        {
          if (registrationNameDependencies[registrationName]) {
            error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
          }
        }
        registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          if (registrationName === "onDoubleClick") {
            possibleRegistrationNames.ondblclick = registrationName;
          }
        }
        for (var i = 0; i < dependencies.length; i++) {
          allNativeEvents.add(dependencies[i]);
        }
      }
      var canUseDOM19 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
      var RESERVED = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var ROOT_ATTRIBUTE_NAME = "data-reactroot";
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var hasOwnProperty3 = Object.prototype.hasOwnProperty;
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty3.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty3.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          error2("Invalid attribute name: `%s`", attributeName);
        }
        return false;
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
          return true;
        }
        return false;
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
          return false;
        }
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix3 = name.toLowerCase().slice(0, 5);
              return prefix3 !== "data-" && prefix3 !== "aria-";
            }
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
          return true;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        }
        return false;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL2;
        this.removeEmptyString = removeEmptyString;
      }
      var properties = {};
      var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
      });
      [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
      });
      [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
      });
      [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
      });
      [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
      });
      [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn2 = false;
      function sanitizeURL(url) {
        {
          if (!didWarn2 && isJavaScriptProtocol.test(url)) {
            didWarn2 = true;
            error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
          }
        }
      }
      function getValueForProperty(node, name, expected, propertyInfo) {
        {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
          } else {
            if (propertyInfo.sanitizeURL) {
              sanitizeURL("" + expected);
            }
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node.hasAttribute(attributeName)) {
                var value = node.getAttribute(attributeName);
                if (value === "") {
                  return true;
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return value;
                }
                if (value === "" + expected) {
                  return expected;
                }
                return value;
              }
            } else if (node.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return node.getAttribute(attributeName);
              }
              if (propertyInfo.type === BOOLEAN) {
                return expected;
              }
              stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue;
            } else if (stringValue === "" + expected) {
              return expected;
            } else {
              return stringValue;
            }
          }
        }
      }
      function getValueForAttribute(node, name, expected) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (isOpaqueHydratingObject(expected)) {
            return expected;
          }
          if (!node.hasAttribute(name)) {
            return expected === void 0 ? void 0 : null;
          }
          var value = node.getAttribute(name);
          if (value === "" + expected) {
            return expected;
          }
          return value;
        }
      }
      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          return;
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
          value = null;
        }
        if (isCustomComponentTag || propertyInfo === null) {
          if (isAttributeNameSafe(name)) {
            var _attributeName = name;
            if (value === null) {
              node.removeAttribute(_attributeName);
            } else {
              node.setAttribute(_attributeName, "" + value);
            }
          }
          return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          if (value === null) {
            var type = propertyInfo.type;
            node[propertyName] = type === BOOLEAN ? false : "";
          } else {
            node[propertyName] = value;
          }
          return;
        }
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) {
          node.removeAttribute(attributeName);
        } else {
          var _type = propertyInfo.type;
          var attributeValue;
          if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
            attributeValue = "";
          } else {
            {
              attributeValue = "" + value;
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL(attributeValue.toString());
            }
          }
          if (attributeNamespace) {
            node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
          } else {
            node.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = 60103;
      var REACT_PORTAL_TYPE = 60106;
      var REACT_FRAGMENT_TYPE = 60107;
      var REACT_STRICT_MODE_TYPE = 60108;
      var REACT_PROFILER_TYPE = 60114;
      var REACT_PROVIDER_TYPE = 60109;
      var REACT_CONTEXT_TYPE = 60110;
      var REACT_FORWARD_REF_TYPE = 60112;
      var REACT_SUSPENSE_TYPE = 60113;
      var REACT_SUSPENSE_LIST_TYPE = 60120;
      var REACT_MEMO_TYPE = 60115;
      var REACT_LAZY_TYPE = 60116;
      var REACT_BLOCK_TYPE = 60121;
      var REACT_SERVER_BLOCK_TYPE = 60122;
      var REACT_FUNDAMENTAL_TYPE = 60117;
      var REACT_SCOPE_TYPE = 60119;
      var REACT_OPAQUE_ID_TYPE = 60128;
      var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
      var REACT_OFFSCREEN_TYPE = 60130;
      var REACT_LEGACY_HIDDEN_TYPE = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
        REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
        REACT_PROFILER_TYPE = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        REACT_SCOPE_TYPE = symbolFor("react.scope");
        REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
      }
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: _assign({}, props, {
                value: prevLog
              }),
              info: _assign({}, props, {
                value: prevInfo
              }),
              warn: _assign({}, props, {
                value: prevWarn
              }),
              error: _assign({}, props, {
                value: prevError
              }),
              group: _assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: _assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: _assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeNativeComponentFrame(ctor, true);
        }
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component19) {
        var prototype = Component19.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case Block:
            return describeFunctionComponentFrame(fiber.type._render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info2 = "";
          var node = workInProgress2;
          do {
            info2 += describeFiber(node);
            node = node.return;
          } while (node);
          return info2;
        } catch (x) {
          return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentName(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
              return getComponentName(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner.type);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }
          return getStackByFiberInDevAndProd(current);
        }
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }
      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }
      function getIsRendering() {
        {
          return isRendering;
        }
      }
      function toString(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "object":
          case "string":
          case "undefined":
            return value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        {
          if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
            error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
          }
          if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
            error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
          }
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = "";
        if (!node) {
          return value;
        }
        if (isCheckable(node)) {
          value = node.checked ? "true" : "false";
        } else {
          value = node.value;
        }
        return value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = "" + node[valueField];
        if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
          return;
        }
        var get4 = descriptor.get, set4 = descriptor.set;
        Object.defineProperty(node, valueField, {
          configurable: true,
          get: function() {
            return get4.call(this);
          },
          set: function(value) {
            currentValue = "" + value;
            set4.call(this, value);
          }
        });
        Object.defineProperty(node, valueField, {
          enumerable: descriptor.enumerable
        });
        var tracker = {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            currentValue = "" + value;
          },
          stopTracking: function() {
            detachTracker(node);
            delete node[valueField];
          }
        };
        return tracker;
      }
      function track(node) {
        if (getTracker(node)) {
          return;
        }
        node._valueTracker = trackValueOnNode(node);
      }
      function updateValueIfChanged(node) {
        if (!node) {
          return false;
        }
        var tracker = getTracker(node);
        if (!tracker) {
          return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      }
      function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : void 0);
        if (typeof doc === "undefined") {
          return null;
        }
        try {
          return doc.activeElement || doc.body;
        } catch (e) {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = false;
      var didWarnCheckedDefaultChecked = false;
      var didWarnControlledToUncontrolled = false;
      var didWarnUncontrolledToControlled = false;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({}, props, {
          defaultChecked: void 0,
          defaultValue: void 0,
          value: void 0,
          checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        {
          checkControlledValueProps("input", props);
          if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
            error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
            error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
          }
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) {
          setValueForProperty(node, "checked", checked, false);
        }
      }
      function updateWrapper(element, props) {
        var node = element;
        {
          var controlled = isControlled(props);
          if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
          }
          if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
          }
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
          if (type === "number") {
            if (value === 0 && node.value === "" || node.value != value) {
              node.value = toString(value);
            }
          } else if (node.value !== toString(value)) {
            node.value = toString(value);
          }
        } else if (type === "submit" || type === "reset") {
          node.removeAttribute("value");
          return;
        }
        {
          if (props.hasOwnProperty("value")) {
            setDefaultValue(node, props.type, value);
          } else if (props.hasOwnProperty("defaultValue")) {
            setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
          }
        }
        {
          if (props.checked == null && props.defaultChecked != null) {
            node.defaultChecked = !!props.defaultChecked;
          }
        }
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type;
          var isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === void 0 || props.value === null)) {
            return;
          }
          var initialValue = toString(node._wrapperState.initialValue);
          if (!isHydrating2) {
            {
              if (initialValue !== node.value) {
                node.value = initialValue;
              }
            }
          }
          {
            node.defaultValue = initialValue;
          }
        }
        var name = node.name;
        if (name !== "") {
          node.name = "";
        }
        {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!node._wrapperState.initialChecked;
        }
        if (name !== "") {
          node.name = name;
        }
      }
      function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          var group3 = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
          for (var i = 0; i < group3.length; i++) {
            var otherNode = group3[i];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            var otherProps = getFiberCurrentPropsFromNode(otherNode);
            if (!otherProps) {
              {
                throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
            }
            updateValueIfChanged(otherNode);
            updateWrapper(otherNode, otherProps);
          }
        }
      }
      function setDefaultValue(node, type, value) {
        if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
          if (value == null) {
            node.defaultValue = toString(node._wrapperState.initialValue);
          } else if (node.defaultValue !== toString(value)) {
            node.defaultValue = toString(value);
          }
        }
      }
      var didWarnSelectedSetOnOption = false;
      var didWarnInvalidChild = false;
      function flattenChildren(children) {
        var content = "";
        React284.Children.forEach(children, function(child2) {
          if (child2 == null) {
            return;
          }
          content += child2;
        });
        return content;
      }
      function validateProps(element, props) {
        {
          if (typeof props.children === "object" && props.children !== null) {
            React284.Children.forEach(props.children, function(child2) {
              if (child2 == null) {
                return;
              }
              if (typeof child2 === "string" || typeof child2 === "number") {
                return;
              }
              if (typeof child2.type !== "string") {
                return;
              }
              if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error2("Only strings and numbers are supported as <option> children.");
              }
            });
          }
          if (props.selected != null && !didWarnSelectedSetOnOption) {
            error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
          }
        }
      }
      function postMountWrapper$1(element, props) {
        if (props.value != null) {
          element.setAttribute("value", toString(getToStringValue(props.value)));
        }
      }
      function getHostProps$1(element, props) {
        var hostProps = _assign({
          children: void 0
        }, props);
        var content = flattenChildren(props.children);
        if (content) {
          hostProps.children = content;
        }
        return hostProps;
      }
      var didWarnValueDefaultValue$1;
      {
        didWarnValueDefaultValue$1 = false;
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          return "\n\nCheck the render method of `" + ownerName + "`.";
        }
        return "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i = 0; i < valuePropNames.length; i++) {
            var propName = valuePropNames[i];
            if (props[propName] == null) {
              continue;
            }
            var isArray2 = Array.isArray(props[propName]);
            if (props.multiple && !isArray2) {
              error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            } else if (!props.multiple && isArray2) {
              error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options2 = node.options;
        if (multiple) {
          var selectedValues = propValue;
          var selectedValue = {};
          for (var i = 0; i < selectedValues.length; i++) {
            selectedValue["$" + selectedValues[i]] = true;
          }
          for (var _i = 0; _i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            if (options2[_i].selected !== selected) {
              options2[_i].selected = selected;
            }
            if (selected && setDefaultSelected) {
              options2[_i].defaultSelected = true;
            }
          }
        } else {
          var _selectedValue = toString(getToStringValue(propValue));
          var defaultSelected = null;
          for (var _i2 = 0; _i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = true;
              if (setDefaultSelected) {
                options2[_i2].defaultSelected = true;
              }
              return;
            }
            if (defaultSelected === null && !options2[_i2].disabled) {
              defaultSelected = options2[_i2];
            }
          }
          if (defaultSelected !== null) {
            defaultSelected.selected = true;
          }
        }
      }
      function getHostProps$2(element, props) {
        return _assign({}, props, {
          value: void 0
        });
      }
      function initWrapperState$1(element, props) {
        var node = element;
        {
          checkSelectPropTypes(props);
        }
        node._wrapperState = {
          wasMultiple: !!props.multiple
        };
        {
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
            error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
          }
        }
      }
      function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        }
      }
      function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (wasMultiple !== !!props.multiple) {
          if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          } else {
            updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
          }
        }
      }
      function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        }
      }
      var didWarnValDefaultVal = false;
      function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) {
          {
            throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
        }
        var hostProps = _assign({}, props, {
          value: void 0,
          defaultValue: void 0,
          children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node = element;
        {
          checkControlledValueProps("textarea", props);
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
            error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
          }
        }
        var initialValue = props.value;
        if (initialValue == null) {
          var children = props.children, defaultValue = props.defaultValue;
          if (children != null) {
            {
              error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            {
              if (!(defaultValue == null)) {
                {
                  throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
              }
              if (Array.isArray(children)) {
                if (!(children.length <= 1)) {
                  {
                    throw Error("<textarea> can only have at most one child.");
                  }
                }
                children = children[0];
              }
              defaultValue = children;
            }
          }
          if (defaultValue == null) {
            defaultValue = "";
          }
          initialValue = defaultValue;
        }
        node._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString(value);
          if (newValue !== node.value) {
            node.value = newValue;
          }
          if (props.defaultValue == null && node.defaultValue !== newValue) {
            node.defaultValue = newValue;
          }
        }
        if (defaultValue != null) {
          node.defaultValue = toString(defaultValue);
        }
      }
      function postMountWrapper$3(element, props) {
        var node = element;
        var textContent = node.textContent;
        if (textContent === node._wrapperState.initialValue) {
          if (textContent !== "" && textContent !== null) {
            node.value = textContent;
          }
        }
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
      var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
      var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
      };
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
          return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
          return HTML_NAMESPACE;
        }
        return parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
          return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
              return func(arg0, arg1, arg2, arg3);
            });
          };
        } else {
          return func;
        }
      };
      var reusableSVGContainer;
      var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
          if (!("innerHTML" in node)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
            reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
            var svgNode = reusableSVGContainer.firstChild;
            while (node.firstChild) {
              node.removeChild(node.firstChild);
            }
            while (svgNode.firstChild) {
              node.appendChild(svgNode.firstChild);
            }
            return;
          }
        }
        node.innerHTML = html;
      });
      var ELEMENT_NODE = 1;
      var TEXT_NODE = 3;
      var COMMENT_NODE = 8;
      var DOCUMENT_NODE = 9;
      var DOCUMENT_FRAGMENT_NODE = 11;
      var setTextContent = function(node, text2) {
        if (text2) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text2;
            return;
          }
        }
        node.textContent = text2;
      };
      var shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      };
      var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey3(prefix3, key3) {
        return prefix3 + key3.charAt(0).toUpperCase() + key3.substring(1);
      }
      var prefixes2 = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes2.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey3(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue2(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value === "boolean" || value === "";
        if (isEmpty) {
          return "";
        }
        if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
          return value + "px";
        }
        return ("" + value).trim();
      }
      var uppercasePattern2 = /([A-Z])/g;
      var msPattern = /^ms-/;
      function hyphenateStyleName2(name) {
        return name.replace(uppercasePattern2, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        };
        var warnHyphenatedStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error2("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
        };
        var warnBadVendoredStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
        };
        var warnStyleValueWithSemicolon = function(name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
        };
        var warnStyleValueIsNaN = function(name, value) {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          error2("`NaN` is an invalid value for the `%s` css style property.", name);
        };
        var warnStyleValueIsInfinity = function(name, value) {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          error2("`Infinity` is an invalid value for the `%s` css style property.", name);
        };
        warnValidStyle = function(name, value) {
          if (name.indexOf("-") > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === "number") {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value);
            }
          }
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles152) {
        {
          var serialized = "";
          var delimiter = "";
          for (var styleName in styles152) {
            if (!styles152.hasOwnProperty(styleName)) {
              continue;
            }
            var styleValue = styles152[styleName];
            if (styleValue != null) {
              var isCustomProperty = styleName.indexOf("--") === 0;
              serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName2(styleName)) + ":";
              serialized += dangerousStyleValue2(styleName, styleValue, isCustomProperty);
              delimiter = ";";
            }
          }
          return serialized || null;
        }
      }
      function setValueForStyles2(node, styles152) {
        var style2 = node.style;
        for (var styleName in styles152) {
          if (!styles152.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty = styleName.indexOf("--") === 0;
          {
            if (!isCustomProperty) {
              warnValidStyle$1(styleName, styles152[styleName]);
            }
          }
          var styleValue = dangerousStyleValue2(styleName, styles152[styleName], isCustomProperty);
          if (styleName === "float") {
            styleName = "cssFloat";
          }
          if (isCustomProperty) {
            style2.setProperty(styleName, styleValue);
          } else {
            style2[styleName] = styleValue;
          }
        }
      }
      function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
      }
      function expandShorthandMap(styles152) {
        var expanded = {};
        for (var key3 in styles152) {
          var longhands = shorthandToLonghand[key3] || [key3];
          for (var i = 0; i < longhands.length; i++) {
            expanded[longhands[i]] = key3;
          }
        }
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles) {
            return;
          }
          var expandedUpdates = expandShorthandMap(styleUpdates);
          var expandedStyles = expandShorthandMap(nextStyles);
          var warnedAbout = {};
          for (var key3 in expandedUpdates) {
            var originalKey = expandedUpdates[key3];
            var correctOriginalKey = expandedStyles[key3];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey]) {
                continue;
              }
              warnedAbout[warningKey] = true;
              error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
      };
      var voidElementTags = _assign({
        menuitem: true
      }, omittedCloseTags);
      var HTML = "__html";
      function assertValidProps(tag3, props) {
        if (!props) {
          return;
        }
        if (voidElementTags[tag3]) {
          if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
            {
              throw Error(tag3 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
        }
        if (props.dangerouslySetInnerHTML != null) {
          if (!(props.children == null)) {
            {
              throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
          }
          if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
            {
              throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
        }
        {
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
            error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
          }
        }
        if (!(props.style == null || typeof props.style === "object")) {
          {
            throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) {
          return typeof props.is === "string";
        }
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      };
      var ariaProperties = {
        "aria-current": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      };
      var warnedProperties = {};
      var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (name !== correctName) {
              error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
              warnedProperties[name] = true;
              return true;
            }
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties[name] = true;
              return false;
            }
            if (name !== standardName) {
              error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties[name] = true;
              return true;
            }
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key3 in props) {
            var isValid = validateProperty(type, key3);
            if (!isValid) {
              invalidProps.push(key3);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          } else if (invalidProps.length > 1) {
            error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
      }
      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) {
              error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            } else {
              error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
            }
          }
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {};
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (eventRegistry != null) {
            var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies2.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null) {
              error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              error2("Unknown event handler property `%s`. It will be ignored.", name);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true;
          }
          if (lowerCasedName === "innerhtml") {
            error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "aria") {
            error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
            error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "number" && isNaN(value)) {
            error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
          }
          var propertyInfo = getPropertyInfo(name);
          var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (!isReserved && name !== lowerCasedName) {
            error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) {
              error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            } else {
              error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (isReserved) {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
          }
          if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
          }
          return true;
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key3 in props) {
            var isValid = validateProperty$1(type, key3, props[key3], eventRegistry);
            if (!isValid) {
              unknownProps.push(key3);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          } else if (unknownProps.length > 1) {
            error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
      var IS_NON_DELEGATED = 1 << 1;
      var IS_CAPTURE_PHASE = 1 << 2;
      var IS_REPLAYED = 1 << 4;
      var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
      function getEventTarget(nativeEvent) {
        var target2 = nativeEvent.target || nativeEvent.srcElement || window;
        if (target2.correspondingUseElement) {
          target2 = target2.correspondingUseElement;
        }
        return target2.nodeType === TEXT_NODE ? target2.parentNode : target2;
      }
      var restoreImpl = null;
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target2) {
        var internalInstance = getInstanceFromNode(target2);
        if (!internalInstance) {
          return;
        }
        if (!(typeof restoreImpl === "function")) {
          {
            throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var stateNode = internalInstance.stateNode;
        if (stateNode) {
          var _props = getFiberCurrentPropsFromNode(stateNode);
          restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target2) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target2);
          } else {
            restoreQueue = [target2];
          }
        } else {
          restoreTarget = target2;
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }
        var target2 = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target2);
        if (queuedTargets) {
          for (var i = 0; i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }
      var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
      };
      var discreteUpdatesImpl = function(fn, a, b, c, d) {
        return fn(a, b, c, d);
      };
      var flushDiscreteUpdatesImpl = function() {
      };
      var batchedEventUpdatesImpl = batchedUpdatesImpl;
      var isInsideEventHandler = false;
      var isBatchingEventUpdates = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          flushDiscreteUpdatesImpl();
          restoreStateIfNeeded();
        }
      }
      function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) {
          return fn(bookkeeping);
        }
        isInsideEventHandler = true;
        try {
          return batchedUpdatesImpl(fn, bookkeeping);
        } finally {
          isInsideEventHandler = false;
          finishEventHandler();
        }
      }
      function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) {
          return fn(a, b);
        }
        isBatchingEventUpdates = true;
        try {
          return batchedEventUpdatesImpl(fn, a, b);
        } finally {
          isBatchingEventUpdates = false;
          finishEventHandler();
        }
      }
      function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
          return discreteUpdatesImpl(fn, a, b, c, d);
        } finally {
          isInsideEventHandler = prevIsInsideEventHandler;
          if (!isInsideEventHandler) {
            finishEventHandler();
          }
        }
      }
      function flushDiscreteUpdatesIfNeeded(timeStamp) {
        {
          if (!isInsideEventHandler) {
            flushDiscreteUpdatesImpl();
          }
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
      }
      function isInteractive(tag3) {
        return tag3 === "button" || tag3 === "input" || tag3 === "select" || tag3 === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) {
          return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) {
          return null;
        }
        var listener3 = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }
        if (!(!listener3 || typeof listener3 === "function")) {
          {
            throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener3 + "` type.");
          }
        }
        return listener3;
      }
      var passiveBrowserEventsSupported = false;
      if (canUseDOM19) {
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (e) {
          passiveBrowserEventsSupported = false;
        }
      }
      function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error3) {
          this.onError(error3);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");
          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            if (!(typeof document !== "undefined")) {
              {
                throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
            }
            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback2, false);
              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback2() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context, funcArgs);
              didError = false;
            }
            var error3;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event4) {
              error3 = event4.error;
              didSetError = true;
              if (error3 === null && event4.colno === 0 && event4.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event4.defaultPrevented) {
                if (error3 != null && typeof error3 === "object") {
                  try {
                    error3._suppressLogging = true;
                  } catch (inner) {
                  }
                }
              }
            }
            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback2, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }
            if (didCall && didError) {
              if (!didSetError) {
                error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
              } else if (isCrossOriginError) {
                error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
              }
              this.onError(error3);
            }
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
              restoreAfterDispatch();
              return invokeGuardedCallbackProd.apply(this, arguments);
            }
          };
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function(error3) {
          hasError = true;
          caughtError = error3;
        }
      };
      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
          var error3 = clearCaughtError();
          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error3;
          }
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error3 = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error3;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error3 = caughtError;
          hasError = false;
          caughtError = null;
          return error3;
        } else {
          {
            {
              throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
      }
      function get3(key3) {
        return key3._reactInternals;
      }
      function has2(key3) {
        return key3._reactInternals !== void 0;
      }
      function set3(key3, value) {
        key3._reactInternals = value;
      }
      var NoFlags = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var DidCapture = 64;
      var Ref = 128;
      var Snapshot = 256;
      var Passive = 512;
      var PassiveUnmountPendingDev = 8192;
      var Hydrating = 1024;
      var HydratingAndUpdate = 1028;
      var LifecycleEffectMask = 932;
      var HostEffectMask = 2047;
      var Incomplete = 2048;
      var ShouldCapture = 4096;
      var ForceUpdateForLegacySuspense = 16384;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node;
          do {
            node = nextNode;
            if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
              nearestMounted = node.return;
            }
            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }
        if (node.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            if (current2 !== null) {
              suspenseState = current2.memoizedState;
            }
          }
          if (suspenseState !== null) {
            return suspenseState.dehydrated;
          }
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) {
              error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
            }
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get3(component);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (!(nearestMounted !== null)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a = fiber;
        var b = alternate;
        while (true) {
          var parentA = a.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child2 = parentA.child;
            while (child2) {
              if (child2 === a) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child2 === b) {
                assertIsMounted(parentA);
                return alternate;
              }
              child2 = child2.sibling;
            }
            {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                {
                  throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
          }
          if (!(a.alternate === b)) {
            {
              throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        if (!(a.tag === HostRoot)) {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
        if (a.stateNode.current === a) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) {
          return null;
        }
        var node = currentParent;
        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === currentParent) {
            return null;
          }
          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) {
          return null;
        }
        var node = currentParent;
        while (true) {
          if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
            return node;
          } else if (node.child && node.tag !== HostPortal) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === currentParent) {
            return null;
          }
          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;
        while (node !== null) {
          if (node === parentFiber || node === parentFiberAlternate) {
            return true;
          }
          node = node.return;
        }
        return false;
      }
      var attemptUserBlockingHydration;
      function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
      }
      var hasScheduledReplayAttempt = false;
      var queuedDiscreteEvents = [];
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = new Map();
      var queuedPointerCaptures = new Map();
      var queuedExplicitHydrationTargets = [];
      function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
      }
      var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags: eventSystemFlags | IS_REPLAYED,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            if (_fiber2 !== null) {
              attemptContinuousHydration(_fiber2);
            }
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
          targetContainers.push(targetContainer);
        }
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag3 = nearestMounted.tag;
            if (tag3 === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance;
                attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                  Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                });
                return;
              }
            } else if (tag3 === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (root2.hydrate) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false;
        }
        var targetContainers = queuedEvent.targetContainers;
        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0];
          var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn !== null) {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key3, map3) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
          map3.delete(key3);
        }
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        while (queuedDiscreteEvents.length > 0) {
          var nextDiscreteEvent = queuedDiscreteEvents[0];
          if (nextDiscreteEvent.blockedOn !== null) {
            var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
            if (_fiber4 !== null) {
              attemptUserBlockingHydration(_fiber4);
            }
            break;
          }
          var targetContainers = nextDiscreteEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              nextDiscreteEvent.blockedOn = nextBlockedOn;
              break;
            }
            targetContainers.shift();
          }
          if (nextDiscreteEvent.blockedOn === null) {
            queuedDiscreteEvents.shift();
          }
        }
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
          queuedFocus = null;
        }
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
          queuedDrag = null;
        }
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
          queuedMouse = null;
        }
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true;
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
          }
        }
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i = 1; i < queuedDiscreteEvents.length; i++) {
            var queuedEvent = queuedDiscreteEvents[i];
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
            }
          }
        }
        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        }
        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        }
        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        }
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          if (queuedTarget.blockedOn === unblocked) {
            queuedTarget.blockedOn = null;
          }
        }
        while (queuedExplicitHydrationTargets.length > 0) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null) {
            break;
          } else {
            attemptExplicitHydrationTarget(nextExplicitTarget);
            if (nextExplicitTarget.blockedOn === null) {
              queuedExplicitHydrationTargets.shift();
            }
          }
        }
      }
      var DiscreteEvent = 0;
      var UserBlockingEvent = 1;
      var ContinuousEvent = 2;
      function makePrefixMap(styleProp, eventName) {
        var prefixes3 = {};
        prefixes3[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes3["Webkit" + styleProp] = "webkit" + eventName;
        prefixes3["Moz" + styleProp] = "moz" + eventName;
        return prefixes3;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      };
      var prefixedEventNames = {};
      var style = {};
      if (canUseDOM19) {
        style = document.createElement("div").style;
        if (!("AnimationEvent" in window)) {
          delete vendorPrefixes.animationend.animation;
          delete vendorPrefixes.animationiteration.animation;
          delete vendorPrefixes.animationstart.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete vendorPrefixes.transitionend.transition;
        }
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName];
        } else if (!vendorPrefixes[eventName]) {
          return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
            return prefixedEventNames[eventName] = prefixMap[styleProp];
          }
        }
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend");
      var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
      var ANIMATION_START = getVendorPrefixedEventName("animationstart");
      var TRANSITION_END = getVendorPrefixedEventName("transitionend");
      var topLevelEventsToReactNames = new Map();
      var eventPriorities = new Map();
      var discreteEventPairsForSimpleEventPlugin = [
        "cancel",
        "cancel",
        "click",
        "click",
        "close",
        "close",
        "contextmenu",
        "contextMenu",
        "copy",
        "copy",
        "cut",
        "cut",
        "auxclick",
        "auxClick",
        "dblclick",
        "doubleClick",
        "dragend",
        "dragEnd",
        "dragstart",
        "dragStart",
        "drop",
        "drop",
        "focusin",
        "focus",
        "focusout",
        "blur",
        "input",
        "input",
        "invalid",
        "invalid",
        "keydown",
        "keyDown",
        "keypress",
        "keyPress",
        "keyup",
        "keyUp",
        "mousedown",
        "mouseDown",
        "mouseup",
        "mouseUp",
        "paste",
        "paste",
        "pause",
        "pause",
        "play",
        "play",
        "pointercancel",
        "pointerCancel",
        "pointerdown",
        "pointerDown",
        "pointerup",
        "pointerUp",
        "ratechange",
        "rateChange",
        "reset",
        "reset",
        "seeked",
        "seeked",
        "submit",
        "submit",
        "touchcancel",
        "touchCancel",
        "touchend",
        "touchEnd",
        "touchstart",
        "touchStart",
        "volumechange",
        "volumeChange"
      ];
      var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
      var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
      var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
      function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
        for (var i = 0; i < eventTypes.length; i += 2) {
          var topEvent = eventTypes[i];
          var event4 = eventTypes[i + 1];
          var capitalizedEvent = event4[0].toUpperCase() + event4.slice(1);
          var reactName = "on" + capitalizedEvent;
          eventPriorities.set(topEvent, priority);
          topLevelEventsToReactNames.set(topEvent, reactName);
          registerTwoPhaseEvent(reactName, [topEvent]);
        }
      }
      function setEventPriorities(eventTypes, priority) {
        for (var i = 0; i < eventTypes.length; i++) {
          eventPriorities.set(eventTypes[i], priority);
        }
      }
      function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName);
        return priority === void 0 ? ContinuousEvent : priority;
      }
      function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        setEventPriorities(otherDiscreteEvents, DiscreteEvent);
      }
      var Scheduler_now = Scheduler.unstable_now;
      {
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
          {
            throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
          }
        }
      }
      var ImmediatePriority = 99;
      var UserBlockingPriority = 98;
      var NormalPriority = 97;
      var LowPriority = 96;
      var IdlePriority = 95;
      var NoPriority = 90;
      var initialTimeMs = Scheduler_now();
      var SyncLanePriority = 15;
      var SyncBatchedLanePriority = 14;
      var InputDiscreteHydrationLanePriority = 13;
      var InputDiscreteLanePriority = 12;
      var InputContinuousHydrationLanePriority = 11;
      var InputContinuousLanePriority = 10;
      var DefaultHydrationLanePriority = 9;
      var DefaultLanePriority = 8;
      var TransitionHydrationPriority = 7;
      var TransitionPriority = 6;
      var RetryLanePriority = 5;
      var SelectiveHydrationLanePriority = 4;
      var IdleHydrationLanePriority = 3;
      var IdleLanePriority = 2;
      var OffscreenLanePriority = 1;
      var NoLanePriority = 0;
      var TotalLanes = 31;
      var NoLanes = 0;
      var NoLane = 0;
      var SyncLane = 1;
      var SyncBatchedLane = 2;
      var InputDiscreteHydrationLane = 4;
      var InputDiscreteLanes = 24;
      var InputContinuousHydrationLane = 32;
      var InputContinuousLanes = 192;
      var DefaultHydrationLane = 256;
      var DefaultLanes = 3584;
      var TransitionHydrationLane = 4096;
      var TransitionLanes = 4186112;
      var RetryLanes = 62914560;
      var SomeRetryLane = 33554432;
      var SelectiveHydrationLane = 67108864;
      var NonIdleLanes = 134217727;
      var IdleHydrationLane = 134217728;
      var IdleLanes = 805306368;
      var OffscreenLane = 1073741824;
      var NoTimestamp = -1;
      function setCurrentUpdateLanePriority(newLanePriority) {
      }
      var return_highestLanePriority = DefaultLanePriority;
      function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
          return_highestLanePriority = SyncLanePriority;
          return SyncLane;
        }
        if ((SyncBatchedLane & lanes) !== NoLanes) {
          return_highestLanePriority = SyncBatchedLanePriority;
          return SyncBatchedLane;
        }
        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
          return_highestLanePriority = InputDiscreteHydrationLanePriority;
          return InputDiscreteHydrationLane;
        }
        var inputDiscreteLanes = InputDiscreteLanes & lanes;
        if (inputDiscreteLanes !== NoLanes) {
          return_highestLanePriority = InputDiscreteLanePriority;
          return inputDiscreteLanes;
        }
        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
          return_highestLanePriority = InputContinuousHydrationLanePriority;
          return InputContinuousHydrationLane;
        }
        var inputContinuousLanes = InputContinuousLanes & lanes;
        if (inputContinuousLanes !== NoLanes) {
          return_highestLanePriority = InputContinuousLanePriority;
          return inputContinuousLanes;
        }
        if ((lanes & DefaultHydrationLane) !== NoLanes) {
          return_highestLanePriority = DefaultHydrationLanePriority;
          return DefaultHydrationLane;
        }
        var defaultLanes = DefaultLanes & lanes;
        if (defaultLanes !== NoLanes) {
          return_highestLanePriority = DefaultLanePriority;
          return defaultLanes;
        }
        if ((lanes & TransitionHydrationLane) !== NoLanes) {
          return_highestLanePriority = TransitionHydrationPriority;
          return TransitionHydrationLane;
        }
        var transitionLanes = TransitionLanes & lanes;
        if (transitionLanes !== NoLanes) {
          return_highestLanePriority = TransitionPriority;
          return transitionLanes;
        }
        var retryLanes = RetryLanes & lanes;
        if (retryLanes !== NoLanes) {
          return_highestLanePriority = RetryLanePriority;
          return retryLanes;
        }
        if (lanes & SelectiveHydrationLane) {
          return_highestLanePriority = SelectiveHydrationLanePriority;
          return SelectiveHydrationLane;
        }
        if ((lanes & IdleHydrationLane) !== NoLanes) {
          return_highestLanePriority = IdleHydrationLanePriority;
          return IdleHydrationLane;
        }
        var idleLanes = IdleLanes & lanes;
        if (idleLanes !== NoLanes) {
          return_highestLanePriority = IdleLanePriority;
          return idleLanes;
        }
        if ((OffscreenLane & lanes) !== NoLanes) {
          return_highestLanePriority = OffscreenLanePriority;
          return OffscreenLane;
        }
        {
          error2("Should have found matching lanes. This is a bug in React.");
        }
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
      }
      function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch (schedulerPriorityLevel) {
          case ImmediatePriority:
            return SyncLanePriority;
          case UserBlockingPriority:
            return InputContinuousLanePriority;
          case NormalPriority:
          case LowPriority:
            return DefaultLanePriority;
          case IdlePriority:
            return IdleLanePriority;
          default:
            return NoLanePriority;
        }
      }
      function lanePriorityToSchedulerPriority(lanePriority) {
        switch (lanePriority) {
          case SyncLanePriority:
          case SyncBatchedLanePriority:
            return ImmediatePriority;
          case InputDiscreteHydrationLanePriority:
          case InputDiscreteLanePriority:
          case InputContinuousHydrationLanePriority:
          case InputContinuousLanePriority:
            return UserBlockingPriority;
          case DefaultHydrationLanePriority:
          case DefaultLanePriority:
          case TransitionHydrationPriority:
          case TransitionPriority:
          case SelectiveHydrationLanePriority:
          case RetryLanePriority:
            return NormalPriority;
          case IdleHydrationLanePriority:
          case IdleLanePriority:
          case OffscreenLanePriority:
            return IdlePriority;
          case NoLanePriority:
            return NoPriority;
          default: {
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
          }
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes) {
          return_highestLanePriority = NoLanePriority;
          return NoLanes;
        }
        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root2.expiredLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        if (expiredLanes !== NoLanes) {
          nextLanes = expiredLanes;
          nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              nextLanePriority = return_highestLanePriority;
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                nextLanePriority = return_highestLanePriority;
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
              nextLanePriority = return_highestLanePriority;
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
                nextLanePriority = return_highestLanePriority;
              }
            }
          }
        }
        if (nextLanes === NoLanes) {
          return NoLanes;
        }
        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
          getHighestPriorityLanes(wipLanes);
          var wipLanePriority = return_highestLanePriority;
          if (nextLanePriority <= wipLanePriority) {
            return wipLanes;
          } else {
            return_highestLanePriority = nextLanePriority;
          }
        }
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes) {
          var entanglements = root2.entanglements;
          var lanes = nextLanes & entangledLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            nextLanes |= entanglements[index2];
            lanes &= ~lane;
          }
        }
        return nextLanes;
      }
      function getMostRecentEventTime(root2, lanes) {
        var eventTimes = root2.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          var eventTime = eventTimes[index2];
          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime;
          }
          lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;
        if (priority >= InputContinuousLanePriority) {
          return currentTime + 250;
        } else if (priority >= TransitionPriority) {
          return currentTime + 5e3;
        } else {
          return NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        var pendingLanes = root2.pendingLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = pendingLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          var expirationTime = expirationTimes[index2];
          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index2] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root2.expiredLanes |= lane;
          }
          lanes &= ~lane;
        }
      }
      function getLanesToRetrySynchronouslyOnError(root2) {
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }
        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }
        return NoLanes;
      }
      function returnNextLanesPriority() {
        return return_highestLanePriority;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function findUpdateLane(lanePriority, wipLanes) {
        switch (lanePriority) {
          case NoLanePriority:
            break;
          case SyncLanePriority:
            return SyncLane;
          case SyncBatchedLanePriority:
            return SyncBatchedLane;
          case InputDiscreteLanePriority: {
            var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
            if (_lane === NoLane) {
              return findUpdateLane(InputContinuousLanePriority, wipLanes);
            }
            return _lane;
          }
          case InputContinuousLanePriority: {
            var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
            if (_lane2 === NoLane) {
              return findUpdateLane(DefaultLanePriority, wipLanes);
            }
            return _lane2;
          }
          case DefaultLanePriority: {
            var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
            if (_lane3 === NoLane) {
              _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (_lane3 === NoLane) {
                _lane3 = pickArbitraryLane(DefaultLanes);
              }
            }
            return _lane3;
          }
          case TransitionPriority:
          case RetryLanePriority:
            break;
          case IdleLanePriority:
            var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(IdleLanes);
            }
            return lane;
        }
        {
          {
            throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
          }
        }
      }
      function findTransitionLane(wipLanes, pendingLanes) {
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
        if (lane === NoLane) {
          lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(TransitionLanes);
          }
        }
        return lane;
      }
      function findRetryLane(wipLanes) {
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
        if (lane === NoLane) {
          lane = pickArbitraryLane(RetryLanes);
        }
        return lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function getLowestPriorityLane(lanes) {
        var index2 = 31 - clz32(lanes);
        return index2 < 0 ? NoLanes : 1 << index2;
      }
      function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
      }
      function isSubsetOfLanes(set4, subset) {
        return (set4 & subset) === subset;
      }
      function mergeLanes(a, b) {
        return a | b;
      }
      function removeLanes(set4, subset) {
        return set4 & ~subset;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a, b) {
        return a !== NoLane && a < b ? a : b;
      }
      function createLaneMap(initial) {
        var laneMap = [];
        for (var i = 0; i < TotalLanes; i++) {
          laneMap.push(initial);
        }
        return laneMap;
      }
      function markRootUpdated(root2, updateLane, eventTime) {
        root2.pendingLanes |= updateLane;
        var higherPriorityLanes = updateLane - 1;
        root2.suspendedLanes &= higherPriorityLanes;
        root2.pingedLanes &= higherPriorityLanes;
        var eventTimes = root2.eventTimes;
        var index2 = laneToIndex(updateLane);
        eventTimes[index2] = eventTime;
      }
      function markRootSuspended(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes;
        root2.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = suspendedLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          expirationTimes[index2] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes, eventTime) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markDiscreteUpdatesExpired(root2) {
        root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
      }
      function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
      }
      function markRootMutableRead(root2, updateLane) {
        root2.mutableReadLanes |= updateLane & root2.pendingLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes;
        root2.suspendedLanes = 0;
        root2.pingedLanes = 0;
        root2.expiredLanes &= remainingLanes;
        root2.mutableReadLanes &= remainingLanes;
        root2.entangledLanes &= remainingLanes;
        var entanglements = root2.entanglements;
        var eventTimes = root2.eventTimes;
        var expirationTimes = root2.expirationTimes;
        var lanes = noLongerPendingLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          entanglements[index2] = NoLanes;
          eventTimes[index2] = NoTimestamp;
          expirationTimes[index2] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        root2.entangledLanes |= entangledLanes;
        var entanglements = root2.entanglements;
        var lanes = entangledLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          entanglements[index2] |= entangledLanes;
          lanes &= ~lane;
        }
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log2 = Math.log;
      var LN2 = Math.LN2;
      function clz32Fallback(lanes) {
        if (lanes === 0) {
          return 32;
        }
        return 31 - (log2(lanes) / LN2 | 0) | 0;
      }
      var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
      var _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName);
        var listenerWrapper;
        switch (eventPriority) {
          case DiscreteEvent:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case UserBlockingEvent:
            listenerWrapper = dispatchUserBlockingUpdate;
            break;
          case ContinuousEvent:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        {
          flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        }
        discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
      }
      function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
        {
          runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) {
          return;
        }
        var allowReplay = true;
        {
          allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
        }
        if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
          queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          return;
        }
        var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          if (allowReplay) {
            clearIfContinuousEvent(domEventName, nativeEvent);
          }
          return;
        }
        if (allowReplay) {
          if (isReplayableDiscreteEvent(domEventName)) {
            queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null) {
            targetInst = null;
          } else {
            var tag3 = nearestMounted.tag;
            if (tag3 === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                return instance;
              }
              targetInst = null;
            } else if (tag3 === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (root2.hydrate) {
                return getContainerFromFiber(nearestMounted);
              }
              targetInst = null;
            } else if (nearestMounted !== targetInst) {
              targetInst = null;
            }
          }
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
        return null;
      }
      function addEventBubbleListener(target2, eventType, listener3) {
        target2.addEventListener(eventType, listener3, false);
        return listener3;
      }
      function addEventCaptureListener(target2, eventType, listener3) {
        target2.addEventListener(eventType, listener3, true);
        return listener3;
      }
      function addEventCaptureListenerWithPassiveFlag(target2, eventType, listener3, passive) {
        target2.addEventListener(eventType, listener3, {
          capture: true,
          passive
        });
        return listener3;
      }
      function addEventBubbleListenerWithPassiveFlag(target2, eventType, listener3, passive) {
        target2.addEventListener(eventType, listener3, {
          passive
        });
        return listener3;
      }
      var root = null;
      var startText = null;
      var fallbackText = null;
      function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
      }
      function reset2() {
        root = null;
        startText = null;
        fallbackText = null;
      }
      function getData() {
        if (fallbackText) {
          return fallbackText;
        }
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for (start = 0; start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }
        var sliceTail = end > 1 ? 1 - end : void 0;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
      }
      function getText() {
        if ("value" in root) {
          return root.value;
        }
        return root.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
          charCode = nativeEvent.charCode;
          if (charCode === 0 && keyCode === 13) {
            charCode = 13;
          }
        } else {
          charCode = keyCode;
        }
        if (charCode === 10) {
          charCode = 13;
        }
        if (charCode >= 32 || charCode === 13) {
          return charCode;
        }
        return 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var _propName in Interface) {
            if (!Interface.hasOwnProperty(_propName)) {
              continue;
            }
            var normalize = Interface[_propName];
            if (normalize) {
              this[_propName] = normalize(nativeEvent);
            } else {
              this[_propName] = nativeEvent[_propName];
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        _assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event4 = this.nativeEvent;
            if (!event4) {
              return;
            }
            if (event4.preventDefault) {
              event4.preventDefault();
            } else if (typeof event4.returnValue !== "unknown") {
              event4.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event4 = this.nativeEvent;
            if (!event4) {
              return;
            }
            if (event4.stopPropagation) {
              event4.stopPropagation();
            } else if (typeof event4.cancelBubble !== "unknown") {
              event4.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {
          },
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event4) {
          return event4.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var SyntheticEvent = createSyntheticEvent(EventInterface);
      var UIEventInterface = _assign({}, EventInterface, {
        view: 0,
        detail: 0
      });
      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
      var lastMovementX;
      var lastMovementY;
      var lastMouseEvent;
      function updateMouseMovementPolyfillState(event4) {
        if (event4 !== lastMouseEvent) {
          if (lastMouseEvent && event4.type === "mousemove") {
            lastMovementX = event4.screenX - lastMouseEvent.screenX;
            lastMovementY = event4.screenY - lastMouseEvent.screenY;
          } else {
            lastMovementX = 0;
            lastMovementY = 0;
          }
          lastMouseEvent = event4;
        }
      }
      var MouseEventInterface = _assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event4) {
          if (event4.relatedTarget === void 0)
            return event4.fromElement === event4.srcElement ? event4.toElement : event4.fromElement;
          return event4.relatedTarget;
        },
        movementX: function(event4) {
          if ("movementX" in event4) {
            return event4.movementX;
          }
          updateMouseMovementPolyfillState(event4);
          return lastMovementX;
        },
        movementY: function(event4) {
          if ("movementY" in event4) {
            return event4.movementY;
          }
          return lastMovementY;
        }
      });
      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
      var DragEventInterface = _assign({}, MouseEventInterface, {
        dataTransfer: 0
      });
      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
      var FocusEventInterface = _assign({}, UIEventInterface, {
        relatedTarget: 0
      });
      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
      var AnimationEventInterface = _assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
      var ClipboardEventInterface = _assign({}, EventInterface, {
        clipboardData: function(event4) {
          return "clipboardData" in event4 ? event4.clipboardData : window.clipboardData;
        }
      });
      var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
      var CompositionEventInterface = _assign({}, EventInterface, {
        data: 0
      });
      var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
      var SyntheticInputEvent = SyntheticCompositionEvent;
      var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key3 = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key3 !== "Unidentified") {
            return key3;
          }
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
          return translateToKey[nativeEvent.keyCode] || "Unidentified";
        }
        return "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = _assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event4) {
          if (event4.type === "keypress") {
            return getEventCharCode(event4);
          }
          return 0;
        },
        keyCode: function(event4) {
          if (event4.type === "keydown" || event4.type === "keyup") {
            return event4.keyCode;
          }
          return 0;
        },
        which: function(event4) {
          if (event4.type === "keypress") {
            return getEventCharCode(event4);
          }
          if (event4.type === "keydown" || event4.type === "keyup") {
            return event4.keyCode;
          }
          return 0;
        }
      });
      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
      var PointerEventInterface = _assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      });
      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
      var TouchEventInterface = _assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      });
      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
      var TransitionEventInterface = _assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
      var WheelEventInterface = _assign({}, MouseEventInterface, {
        deltaX: function(event4) {
          return "deltaX" in event4 ? event4.deltaX : "wheelDeltaX" in event4 ? -event4.wheelDeltaX : 0;
        },
        deltaY: function(event4) {
          return "deltaY" in event4 ? event4.deltaY : "wheelDeltaY" in event4 ? -event4.wheelDeltaY : "wheelDelta" in event4 ? -event4.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
      var END_KEYCODES = [9, 13, 27, 32];
      var START_KEYCODE = 229;
      var canUseCompositionEvent = canUseDOM19 && "CompositionEvent" in window;
      var documentMode = null;
      if (canUseDOM19 && "documentMode" in document) {
        documentMode = document.documentMode;
      }
      var canUseTextInputEvent = canUseDOM19 && "TextEvent" in window && !documentMode;
      var useFallbackCompositionData = canUseDOM19 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
      var SPACEBAR_CODE = 32;
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) {
          return detail.data;
        }
        return null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = false;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(domEventName);
        } else if (!isComposing) {
          if (isFallbackCompositionStart(domEventName, nativeEvent)) {
            eventType = "onCompositionStart";
          }
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
          eventType = "onCompositionEnd";
        }
        if (!eventType) {
          return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          if (!isComposing && eventType === "onCompositionStart") {
            isComposing = initialize(nativeEventTarget);
          } else if (eventType === "onCompositionEnd") {
            if (isComposing) {
              fallbackData = getData();
            }
          }
        }
        var listeners3 = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners3.length > 0) {
          var event4 = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: event4,
            listeners: listeners3
          });
          if (fallbackData) {
            event4.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event4.data = customData;
            }
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            if (which !== SPACEBAR_CODE) {
              return null;
            }
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            var chars = nativeEvent.data;
            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null;
            }
            return chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            reset2();
            isComposing = false;
            return chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char;
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which);
              }
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) {
          chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        } else {
          chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
        }
        if (!chars) {
          return null;
        }
        var listeners3 = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners3.length > 0) {
          var event4 = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: event4,
            listeners: listeners3
          });
          event4.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") {
          return !!supportedInputTypes[elem.type];
        }
        if (nodeName === "textarea") {
          return true;
        }
        return false;
      }
      /**
       * Checks if an event is supported in the current execution environment.
       *
       * NOTE: This will not work correctly for non-generic events such as `change`,
       * `reset`, `load`, `error`, and `select`.
       *
       * Borrows from Modernizr.
       *
       * @param {string} eventNameSuffix Event name, e.g. "click".
       * @return {boolean} True if the event is supported.
       * @internal
       * @license Modernizr 3.0.0pre (Custom Build) | MIT
       */
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM19) {
          return false;
        }
        var eventName = "on" + eventNameSuffix;
        var isSupported2 = eventName in document;
        if (!isSupported2) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;");
          isSupported2 = typeof element[eventName] === "function";
        }
        return isSupported2;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target2) {
        enqueueStateRestore(target2);
        var listeners3 = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners3.length > 0) {
          var event4 = new SyntheticEvent("onChange", "change", null, nativeEvent, target2);
          dispatchQueue.push({
            event: event4,
            listeners: listeners3
          });
        }
      }
      var activeElement = null;
      var activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) {
          return targetInst;
        }
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") {
          return targetInst;
        }
      }
      var isInputEventSupported = false;
      if (canUseDOM19) {
        isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
      }
      function startWatchingForValueChange(target2, targetInst) {
        activeElement = target2;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        if (!activeElement) {
          return;
        }
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
      }
      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") {
          return;
        }
        if (getInstIfValueChanged(activeElementInst)) {
          manualDispatchChangeEvent(nativeEvent);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target2, targetInst) {
        if (domEventName === "focusin") {
          stopWatchingForValueChange();
          startWatchingForValueChange(target2, targetInst);
        } else if (domEventName === "focusout") {
          stopWatchingForValueChange();
        }
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
          return getInstIfValueChanged(activeElementInst);
        }
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== "number") {
          return;
        }
        {
          setDefaultValue(node, "number", node.value);
        }
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }
        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        if (handleEventFunc) {
          handleEventFunc(domEventName, targetNode, targetInst);
        }
        if (domEventName === "focusout") {
          handleControlledInputBlur(targetNode);
        }
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related) {
            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
              return;
            }
          }
        }
        if (!isOutEvent && !isOverEvent) {
          return;
        }
        var win2;
        if (nativeEventTarget.window === nativeEventTarget) {
          win2 = nativeEventTarget;
        } else {
          var doc = nativeEventTarget.ownerDocument;
          if (doc) {
            win2 = doc.defaultView || doc.parentWindow;
          } else {
            win2 = window;
          }
        }
        var from;
        var to;
        if (isOutEvent) {
          var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
          from = targetInst;
          to = _related ? getClosestInstanceFromNode(_related) : null;
          if (to !== null) {
            var nearestMounted = getNearestMountedFiber(to);
            if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
              to = null;
            }
          }
        } else {
          from = null;
          to = targetInst;
        }
        if (from === to) {
          return;
        }
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
          SyntheticEventCtor = SyntheticPointerEvent;
          leaveEventType = "onPointerLeave";
          enterEventType = "onPointerEnter";
          eventTypePrefix = "pointer";
        }
        var fromNode = from == null ? win2 : getNodeFromInstance(from);
        var toNode = to == null ? win2 : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null;
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
          var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
          enterEvent.target = toNode;
          enterEvent.relatedTarget = fromNode;
          enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is === "function" ? Object.is : is;
      var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i = 0; i < keysA.length; i++) {
          if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
            return false;
          }
        }
        return true;
      }
      function getLeafNode(node) {
        while (node && node.firstChild) {
          node = node.firstChild;
        }
        return node;
      }
      function getSiblingNode(node) {
        while (node) {
          if (node.nextSibling) {
            return node.nextSibling;
          }
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset) {
        var node = getLeafNode(root2);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node) {
          if (node.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node.textContent.length;
            if (nodeStart <= offset && nodeEnd >= offset) {
              return {
                node,
                offset: offset - nodeStart
              };
            }
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win2 = ownerDocument && ownerDocument.defaultView || window;
        var selection2 = win2.getSelection && win2.getSelection();
        if (!selection2 || selection2.rangeCount === 0) {
          return null;
        }
        var anchorNode = selection2.anchorNode, anchorOffset = selection2.anchorOffset, focusNode = selection2.focusNode, focusOffset = selection2.focusOffset;
        try {
          anchorNode.nodeType;
          focusNode.nodeType;
        } catch (e) {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer:
          while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
        if (start === -1 || end === -1) {
          return null;
        }
        return {
          start,
          end
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win2 = doc && doc.defaultView || window;
        if (!win2.getSelection) {
          return;
        }
        var selection2 = win2.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
        if (!selection2.extend && start > end) {
          var temp = end;
          end = start;
          start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
          if (selection2.rangeCount === 1 && selection2.anchorNode === startMarker.node && selection2.anchorOffset === startMarker.offset && selection2.focusNode === endMarker.node && selection2.focusOffset === endMarker.offset) {
            return;
          }
          var range = doc.createRange();
          range.setStart(startMarker.node, startMarker.offset);
          selection2.removeAllRanges();
          if (start > end) {
            selection2.addRange(range);
            selection2.extend(endMarker.node, endMarker.offset);
          } else {
            range.setEnd(endMarker.node, endMarker.offset);
            selection2.addRange(range);
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false;
        } else if (outerNode === innerNode) {
          return true;
        } else if (isTextNode(outerNode)) {
          return false;
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode);
        } else if ("contains" in outerNode) {
          return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
          return false;
        }
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe2) {
        try {
          return typeof iframe2.contentWindow.location.href === "string";
        } catch (err) {
          return false;
        }
      }
      function getActiveElementDeep() {
        var win2 = window;
        var element = getActiveElement();
        while (element instanceof win2.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win2 = element.contentWindow;
          } else {
            return element;
          }
          element = getActiveElement(win2.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            setSelection3(priorFocusedElem, priorSelectionRange);
          }
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while (ancestor = ancestor.parentNode) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            }
          }
          if (typeof priorFocusedElem.focus === "function") {
            priorFocusedElem.focus();
          }
          for (var i = 0; i < ancestors.length; i++) {
            var info2 = ancestors[i];
            info2.element.scrollLeft = info2.left;
            info2.element.scrollTop = info2.top;
          }
        }
      }
      function getSelection(input) {
        var selection2;
        if ("selectionStart" in input) {
          selection2 = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else {
          selection2 = getOffsets(input);
        }
        return selection2 || {
          start: 0,
          end: 0
        };
      }
      function setSelection3(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === void 0) {
          end = start;
        }
        if ("selectionStart" in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else {
          setOffsets(input, offsets);
        }
      }
      var skipSelectionChangeEvent = canUseDOM19 && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      var lastSelection = null;
      var mouseDown = false;
      function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node)) {
          return {
            start: node.selectionStart,
            end: node.selectionEnd
          };
        } else {
          var win2 = node.ownerDocument && node.ownerDocument.defaultView || window;
          var selection2 = win2.getSelection();
          return {
            anchorNode: selection2.anchorNode,
            anchorOffset: selection2.anchorOffset,
            focusNode: selection2.focusNode,
            focusOffset: selection2.focusOffset
          };
        }
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
          return;
        }
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
          lastSelection = currentSelection;
          var listeners3 = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
          if (listeners3.length > 0) {
            var event4 = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: event4,
              listeners: listeners3
            });
            event4.target = activeElement$1;
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }
            break;
          case "focusout":
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false;
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent) {
              break;
            }
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === void 0) {
          return;
        }
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (getEventCharCode(nativeEvent) === 0) {
              return;
            }
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (nativeEvent.button === 2) {
              return;
            }
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        {
          var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
          var _listeners2 = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
          if (_listeners2.length > 0) {
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: _event,
              listeners: _listeners2
            });
          }
        }
      }
      registerSimpleEvents();
      registerEvents$2();
      registerEvents$1();
      registerEvents$3();
      registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        if (shouldProcessPolyfillPlugins) {
          extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
      var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event4, listener3, currentTarget) {
        var type = event4.type || "unknown-event";
        event4.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener3, void 0, event4);
        event4.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event4, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) {
          for (var i = dispatchListeners.length - 1; i >= 0; i--) {
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener3 = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event4.isPropagationStopped()) {
              return;
            }
            executeDispatch(event4, listener3, currentTarget);
            previousInstance = instance;
          }
        } else {
          for (var _i = 0; _i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event4.isPropagationStopped()) {
              return;
            }
            executeDispatch(event4, _listener, _currentTarget);
            previousInstance = _instance;
          }
        }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for (var i = 0; i < dispatchQueue.length; i++) {
          var _dispatchQueue$i = dispatchQueue[i], event4 = _dispatchQueue$i.event, listeners3 = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event4, listeners3, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        {
          if (rootContainerElement[listeningMarker]) {
            return;
          }
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) {
              listenToNativeEvent(domEventName, false, rootContainerElement, null);
            }
            listenToNativeEvent(domEventName, true, rootContainerElement, null);
          });
        }
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
        var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
        var target2 = rootContainerElement;
        if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
          target2 = rootContainerElement.ownerDocument;
        }
        if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
          if (domEventName !== "scroll") {
            return;
          }
          eventSystemFlags |= IS_NON_DELEGATED;
          target2 = targetElement;
        }
        var listenerSet = getEventListenerSet(target2);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target2, domEventName, eventSystemFlags, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener3 = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
        var isPassiveListener = void 0;
        if (passiveBrowserEventsSupported) {
          if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
            isPassiveListener = true;
          }
        }
        targetContainer = targetContainer;
        var unsubscribeListener;
        if (isCapturePhaseListener) {
          if (isPassiveListener !== void 0) {
            unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener3, isPassiveListener);
          } else {
            unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener3);
          }
        } else {
          if (isPassiveListener !== void 0) {
            unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener3, isPassiveListener);
          } else {
            unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener3);
          }
        }
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node = targetInst;
            mainLoop:
              while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
          }
        }
        batchedEventUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener3, currentTarget) {
        return {
          instance,
          listener: listener3,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners3 = [];
        var instance = targetFiber;
        var lastHostComponent = null;
        while (instance !== null) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag3 = _instance2.tag;
          if (tag3 === HostComponent && stateNode !== null) {
            lastHostComponent = stateNode;
            if (reactEventName !== null) {
              var listener3 = getListener(instance, reactEventName);
              if (listener3 != null) {
                listeners3.push(createDispatchListener(instance, listener3, lastHostComponent));
              }
            }
          }
          if (accumulateTargetOnly) {
            break;
          }
          instance = instance.return;
        }
        return listeners3;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners3 = [];
        var instance = targetFiber;
        while (instance !== null) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag3 = _instance3.tag;
          if (tag3 === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            var captureListener = getListener(instance, captureName);
            if (captureListener != null) {
              listeners3.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
            var bubbleListener = getListener(instance, reactName);
            if (bubbleListener != null) {
              listeners3.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        return listeners3;
      }
      function getParent(inst) {
        if (inst === null) {
          return null;
        }
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) {
          return inst;
        }
        return null;
      }
      function getLowestCommonAncestor2(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }
        var depthB = 0;
        for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }
        while (depthA - depthB > 0) {
          nodeA = getParent(nodeA);
          depthA--;
        }
        while (depthB - depthA > 0) {
          nodeB = getParent(nodeB);
          depthB--;
        }
        var depth = depthA;
        while (depth--) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
            return nodeA;
          }
          nodeA = getParent(nodeA);
          nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event4, target2, common, inCapturePhase) {
        var registrationName = event4._reactName;
        var listeners3 = [];
        var instance = target2;
        while (instance !== null) {
          if (instance === common) {
            break;
          }
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag3 = _instance4.tag;
          if (alternate !== null && alternate === common) {
            break;
          }
          if (tag3 === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              if (captureListener != null) {
                listeners3.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              if (bubbleListener != null) {
                listeners3.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
          }
          instance = instance.return;
        }
        if (listeners3.length !== 0) {
          dispatchQueue.push({
            event: event4,
            listeners: listeners3
          });
        }
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor2(from, to) : null;
        if (from !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        }
        if (to !== null && enterEvent !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
        }
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = false;
      var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
      var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
      var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
      var AUTOFOCUS = "autoFocus";
      var CHILDREN = "children";
      var STYLE = "style";
      var HTML$1 = "__html";
      var HTML_NAMESPACE$1 = Namespaces.html;
      var warnedUnknownTags;
      var suppressHydrationWarning;
      var validatePropertiesInDevelopment;
      var warnForTextDifference;
      var warnForPropDifference;
      var warnForExtraAttributes;
      var warnForInvalidEventListener;
      var canDiffStyleForHydrationWarning;
      var normalizeMarkupForTextOrAttribute;
      var normalizeHTML;
      {
        warnedUnknownTags = {
          dialog: true,
          webview: true
        };
        validatePropertiesInDevelopment = function(type, props) {
          validateProperties(type, props);
          validateProperties$1(type, props);
          validateProperties$2(type, props, {
            registrationNameDependencies,
            possibleRegistrationNames
          });
        };
        canDiffStyleForHydrationWarning = canUseDOM19 && !document.documentMode;
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        normalizeMarkupForTextOrAttribute = function(markup) {
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        };
        warnForTextDifference = function(serverText, clientText) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          didWarnInvalidHydration = true;
          error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
        };
        warnForPropDifference = function(propName, serverValue, clientValue) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
          var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          if (normalizedServerValue === normalizedClientValue) {
            return;
          }
          didWarnInvalidHydration = true;
          error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
        };
        warnForExtraAttributes = function(attributeNames) {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          });
          error2("Extra attributes from the server: %s", names);
        };
        warnForInvalidEventListener = function(registrationName, listener3) {
          if (listener3 === false) {
            error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
          } else {
            error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener3);
          }
        };
        normalizeHTML = function(parent, html) {
          var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
          testElement.innerHTML = html;
          return testElement.innerHTML;
        };
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop() {
      }
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop;
      }
      function setInitialDOMProperties(tag3, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps) {
          if (!nextProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = nextProps[propKey];
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            setValueForStyles2(domElement, nextProp);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            if (nextHtml != null) {
              setInnerHTML(domElement, nextHtml);
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              var canSetTextContent = tag3 !== "textarea" || nextProp !== "";
              if (canSetTextContent) {
                setTextContent(domElement, nextProp);
              }
            } else if (typeof nextProp === "number") {
              setTextContent(domElement, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (nextProp != null) {
            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
          }
        }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i = 0; i < updatePayload.length; i += 2) {
          var propKey = updatePayload[i];
          var propValue = updatePayload[i + 1];
          if (propKey === STYLE) {
            setValueForStyles2(domElement, propValue);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            setInnerHTML(domElement, propValue);
          } else if (propKey === CHILDREN) {
            setTextContent(domElement, propValue);
          } else {
            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
          }
        }
      }
      function createElement179(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag;
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) {
          namespaceURI = getIntrinsicNamespace(type);
        }
        if (namespaceURI === HTML_NAMESPACE$1) {
          {
            isCustomComponentTag = isCustomComponent(type, props);
            if (!isCustomComponentTag && type !== type.toLowerCase()) {
              error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            }
          }
          if (type === "script") {
            var div = ownerDocument.createElement("div");
            div.innerHTML = "<script></script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is === "string") {
            domElement = ownerDocument.createElement(type, {
              is: props.is
            });
          } else {
            domElement = ownerDocument.createElement(type);
            if (type === "select") {
              var node = domElement;
              if (props.multiple) {
                node.multiple = true;
              } else if (props.size) {
                node.size = props.size;
              }
            }
          }
        } else {
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        }
        {
          if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
              warnedUnknownTags[type] = true;
              error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
          }
        }
        return domElement;
      }
      function createTextNode(text2, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text2);
      }
      function setInitialProperties(domElement, tag3, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag3, rawProps);
        {
          validatePropertiesInDevelopment(tag3, rawProps);
        }
        var props;
        switch (tag3) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i = 0; i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            }
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            props = getHostProps(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            props = getHostProps$1(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            props = getHostProps$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            props = getHostProps$3(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        assertValidProps(tag3, props);
        setInitialDOMProperties(tag3, domElement, rootContainerElement, props, isCustomComponentTag);
        switch (tag3) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, false);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            if (typeof props.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
      }
      function diffProperties(domElement, tag3, lastRawProps, nextRawProps, rootContainerElement) {
        {
          validatePropertiesInDevelopment(tag3, nextRawProps);
        }
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch (tag3) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps);
            nextProps = getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "option":
            lastProps = getHostProps$1(domElement, lastRawProps);
            nextProps = getHostProps$1(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$2(domElement, lastRawProps);
            nextProps = getHostProps$2(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$3(domElement, lastRawProps);
            nextProps = getHostProps$3(domElement, nextRawProps);
            updatePayload = [];
            break;
          default:
            lastProps = lastRawProps;
            nextProps = nextRawProps;
            if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        assertValidProps(tag3, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
            continue;
          }
          if (propKey === STYLE) {
            var lastStyle = lastProps[propKey];
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (!updatePayload) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, null);
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = lastProps != null ? lastProps[propKey] : void 0;
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
            continue;
          }
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            if (lastProp) {
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = [];
                }
                updatePayload.push(propKey, styleUpdates);
              }
              styleUpdates = nextProp;
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                (updatePayload = updatePayload || []).push(propKey, nextHtml);
              }
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string" || typeof nextProp === "number") {
              (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
            if (!updatePayload && lastProp !== nextProp) {
              updatePayload = [];
            }
          } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
            nextProp.toString();
          } else {
            (updatePayload = updatePayload || []).push(propKey, nextProp);
          }
        }
        if (styleUpdates) {
          {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
          }
          (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag3, lastRawProps, nextRawProps) {
        if (tag3 === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
          updateChecked(domElement, nextRawProps);
        }
        var wasCustomComponentTag = isCustomComponent(tag3, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag3, nextRawProps);
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        switch (tag3) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null;
          }
          return possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag3, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        {
          suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
          isCustomComponentTag = isCustomComponent(tag3, rawProps);
          validatePropertiesInDevelopment(tag3, rawProps);
        }
        switch (tag3) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i = 0; i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            }
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag3, rawProps);
        {
          extraAttributeNames = new Set();
          var attributes = domElement.attributes;
          for (var _i = 0; _i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "data-reactroot":
                break;
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = rawProps[propKey];
          if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              if (domElement.textContent !== nextProp) {
                if (!suppressHydrationWarning) {
                  warnForTextDifference(domElement.textContent, nextProp);
                }
                updatePayload = [CHILDREN, nextProp];
              }
            } else if (typeof nextProp === "number") {
              if (domElement.textContent !== "" + nextProp) {
                if (!suppressHydrationWarning) {
                  warnForTextDifference(domElement.textContent, nextProp);
                }
                updatePayload = [CHILDREN, "" + nextProp];
              }
            }
          } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (typeof isCustomComponentTag === "boolean") {
            var serverValue = void 0;
            var propertyInfo = getPropertyInfo(propKey);
            if (suppressHydrationWarning)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
              ;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var serverHTML = domElement.innerHTML;
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml);
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              }
            } else if (propKey === STYLE) {
              extraAttributeNames.delete(propKey);
              if (canDiffStyleForHydrationWarning) {
                var expectedStyle = createDangerousStringForStyles(nextProp);
                serverValue = domElement.getAttribute("style");
                if (expectedStyle !== serverValue) {
                  warnForPropDifference(propKey, serverValue, expectedStyle);
                }
              }
            } else if (isCustomComponentTag) {
              extraAttributeNames.delete(propKey.toLowerCase());
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
              var isMismatchDueToBadCasing = false;
              if (propertyInfo !== null) {
                extraAttributeNames.delete(propertyInfo.attributeName);
                serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
              } else {
                var ownNamespace = parentNamespace;
                if (ownNamespace === HTML_NAMESPACE$1) {
                  ownNamespace = getIntrinsicNamespace(tag3);
                }
                if (ownNamespace === HTML_NAMESPACE$1) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                } else {
                  var standardName = getPossibleStandardName(propKey);
                  if (standardName !== null && standardName !== propKey) {
                    isMismatchDueToBadCasing = true;
                    extraAttributeNames.delete(standardName);
                  }
                  extraAttributeNames.delete(propKey);
                }
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
              }
              if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            }
          }
        }
        {
          if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
            warnForExtraAttributes(extraAttributeNames);
          }
        }
        switch (tag3) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, true);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            if (typeof rawProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text2) {
        var isDifferent = textNode.nodeValue !== text2;
        return isDifferent;
      }
      function warnForUnmatchedText(textNode, text2) {
        {
          warnForTextDifference(textNode.nodeValue, text2);
        }
      }
      function warnForDeletedHydratableElement(parentNode, child2) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error2("Did not expect server HTML to contain a <%s> in <%s>.", child2.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child2) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child2.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag3, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error2("Expected server HTML to contain a matching <%s> in <%s>.", tag3, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text2) {
        {
          if (text2 === "") {
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text2, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag3, props) {
        switch (tag3) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      };
      var updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
        var inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          "foreignObject",
          "desc",
          "title"
        ];
        var buttonScopeTags = inScopeTags.concat(["button"]);
        var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
        var emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag3) {
          var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
          var info2 = {
            tag: tag3
          };
          if (inScopeTags.indexOf(tag3) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag3) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          if (specialTags.indexOf(tag3) !== -1 && tag3 !== "address" && tag3 !== "div" && tag3 !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.current = info2;
          if (tag3 === "form") {
            ancestorInfo.formTag = info2;
          }
          if (tag3 === "a") {
            ancestorInfo.aTagInScope = info2;
          }
          if (tag3 === "button") {
            ancestorInfo.buttonTagInScope = info2;
          }
          if (tag3 === "nobr") {
            ancestorInfo.nobrTagInScope = info2;
          }
          if (tag3 === "p") {
            ancestorInfo.pTagInButtonScope = info2;
          }
          if (tag3 === "li") {
            ancestorInfo.listItemTagAutoclosing = info2;
          }
          if (tag3 === "dd" || tag3 === "dt") {
            ancestorInfo.dlItemTagAutoclosing = info2;
          }
          return ancestorInfo;
        };
        var isTagValidWithParent = function(tag3, parentTag) {
          switch (parentTag) {
            case "select":
              return tag3 === "option" || tag3 === "optgroup" || tag3 === "#text";
            case "optgroup":
              return tag3 === "option" || tag3 === "#text";
            case "option":
              return tag3 === "#text";
            case "tr":
              return tag3 === "th" || tag3 === "td" || tag3 === "style" || tag3 === "script" || tag3 === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag3 === "tr" || tag3 === "style" || tag3 === "script" || tag3 === "template";
            case "colgroup":
              return tag3 === "col" || tag3 === "template";
            case "table":
              return tag3 === "caption" || tag3 === "colgroup" || tag3 === "tbody" || tag3 === "tfoot" || tag3 === "thead" || tag3 === "style" || tag3 === "script" || tag3 === "template";
            case "head":
              return tag3 === "base" || tag3 === "basefont" || tag3 === "bgsound" || tag3 === "link" || tag3 === "meta" || tag3 === "title" || tag3 === "noscript" || tag3 === "noframes" || tag3 === "style" || tag3 === "script" || tag3 === "template";
            case "html":
              return tag3 === "head" || tag3 === "body" || tag3 === "frameset";
            case "frameset":
              return tag3 === "frame";
            case "#document":
              return tag3 === "html";
          }
          switch (tag3) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return true;
        };
        var findInvalidAncestorForTag = function(tag3, ancestorInfo) {
          switch (tag3) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        };
        var didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current;
          var parentTag = parentInfo && parentInfo.tag;
          if (childText != null) {
            if (childTag != null) {
              error2("validateDOMNesting: when childText is passed, childTag should be null");
            }
            childTag = "#text";
          }
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!invalidParentOrAncestor) {
            return;
          }
          var ancestorTag = invalidParentOrAncestor.tag;
          var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          var tagDisplayName = childTag;
          var whitespaceInfo = "";
          if (childTag === "#text") {
            if (/\S/.test(childText)) {
              tagDisplayName = "Text nodes";
            } else {
              tagDisplayName = "Whitespace text nodes";
              whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
          } else {
            tagDisplayName = "<" + childTag + ">";
          }
          if (invalidParent) {
            var info2 = "";
            if (ancestorTag === "table" && childTag === "tr") {
              info2 += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            }
            error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info2);
          } else {
            error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1;
      {
        SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
      }
      var SUSPENSE_START_DATA = "$";
      var SUSPENSE_END_DATA = "/$";
      var SUSPENSE_PENDING_START_DATA = "$?";
      var SUSPENSE_FALLBACK_START_DATA = "$!";
      var STYLE$1 = "style";
      var eventsEnabled = null;
      var selectionInformation = null;
      function shouldAutoFocusHostComponent(type, props) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
        }
        return false;
      }
      function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase();
          var ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext;
          var namespace = getChildNamespace(parentHostContextDev.namespace, type);
          var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
      }
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          validateDOMNesting(type, null, hostContextDev.ancestorInfo);
          if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement179(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      }
      function appendInitialChild(parentInstance, child2) {
        parentInstance.appendChild(child2);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text2, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text2, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text2, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      }
      var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
      var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
      var noTimeout = -1;
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        if (shouldAutoFocusHostComponent(type, newProps)) {
          domElement.focus();
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateFiberProps(domElement, newProps);
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child2) {
        parentInstance.appendChild(child2);
      }
      function appendChildToContainer(container, child2) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
          parentNode = container.parentNode;
          parentNode.insertBefore(child2, container);
        } else {
          parentNode = container;
          parentNode.appendChild(child2);
        }
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
          trapClickOnNonInteractiveElement(parentNode);
        }
      }
      function insertBefore(parentInstance, child2, beforeChild) {
        parentInstance.insertBefore(child2, beforeChild);
      }
      function insertInContainerBefore(container, child2, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child2, beforeChild);
        } else {
          container.insertBefore(child2, beforeChild);
        }
      }
      function removeChild(parentInstance, child2) {
        parentInstance.removeChild(child2);
      }
      function removeChildFromContainer(container, child2) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child2);
        } else {
          container.removeChild(child2);
        }
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        if (typeof style2.setProperty === "function") {
          style2.setProperty("display", "none", "important");
        } else {
          style2.display = "none";
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue2("display", display);
      }
      function unhideTextInstance(textInstance, text2) {
        textInstance.nodeValue = text2;
      }
      function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) {
          container.textContent = "";
        } else if (container.nodeType === DOCUMENT_NODE) {
          var body = container.body;
          if (body != null) {
            body.textContent = "";
          }
        }
      }
      function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
          return null;
        }
        return instance;
      }
      function canHydrateTextInstance(instance, text2) {
        if (text2 === "" || instance.nodeType !== TEXT_NODE) {
          return null;
        }
        return instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getNextHydratable(node) {
        for (; node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break;
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        return diffHydratedProperties(instance, type, props, parentNamespace);
      }
      function hydrateTextInstance(textInstance, text2, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text2);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data2 = node.data;
            if (data2 === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node);
              } else {
                depth--;
              }
            } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
              depth++;
            }
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data2 = node.data;
            if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0) {
                return node;
              } else {
                depth--;
              }
            } else if (data2 === SUSPENSE_END_DATA) {
              depth++;
            }
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text2) {
        {
          warnForUnmatchedText(textInstance, text2);
        }
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text2) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForUnmatchedText(textInstance, text2);
        }
      }
      function didNotHydrateContainerInstance(parentContainer, instance) {
        {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentContainer, instance);
          }
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentInstance, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentInstance, instance);
          }
        }
      }
      function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        {
          warnForInsertedHydratedElement(parentContainer, type);
        }
      }
      function didNotFindHydratableContainerTextInstance(parentContainer, text2) {
        {
          warnForInsertedHydratedText(parentContainer, text2);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedElement(parentInstance, type);
        }
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text2) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedText(parentInstance, text2);
        }
      }
      function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
          ;
      }
      var clientId = 0;
      function makeClientIdInDEV(warnOnAccessInDEV) {
        var id2 = "r:" + (clientId++).toString(36);
        return {
          toString: function() {
            warnOnAccessInDEV();
            return id2;
          },
          valueOf: function() {
            warnOnAccessInDEV();
            return id2;
          }
        };
      }
      function isOpaqueHydratingObject(value) {
        return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
      }
      function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
          $$typeof: REACT_OPAQUE_ID_TYPE,
          toString: attemptToReadValue,
          valueOf: attemptToReadValue
        };
      }
      function preparePortalMount(portalInstance) {
        {
          listenToAllSupportedEvents(portalInstance);
        }
      }
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = "__reactFiber$" + randomKey;
      var internalPropsKey = "__reactProps$" + randomKey;
      var internalContainerInstanceKey = "__reactContainer$" + randomKey;
      var internalEventHandlersKey = "__reactEvents$" + randomKey;
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) {
          return targetInst;
        }
        var parentNode = targetNode.parentNode;
        while (parentNode) {
          targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
          if (targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
              var suspenseInstance = getParentSuspenseInstance(targetNode);
              while (suspenseInstance !== null) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst) {
                  return targetSuspenseInst;
                }
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
          if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
            return inst;
          } else {
            return null;
          }
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst.stateNode;
        }
        {
          {
            throw Error("getNodeFromInstance: Invalid argument.");
          }
        }
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === void 0) {
          elementListenerSet = node[internalEventHandlersKey] = new Set();
        }
        return elementListenerSet;
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has3 = Function.call.bind(Object.prototype.hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has3(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error2("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor2, fiber) {
        if (index < 0) {
          {
            error2("Unexpected pop.");
          }
          return;
        }
        {
          if (fiber !== fiberStack[index]) {
            error2("Unexpected Fiber popped.");
          }
        }
        cursor2.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }
      function push(cursor2, value, fiber) {
        index++;
        valueStack[index] = cursor2.current;
        {
          fiberStack[index] = fiber;
        }
        cursor2.current = value;
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component19, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component19)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key3 in contextTypes) {
            context[key3] = unmaskedContext[key3];
          }
          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          if (instance) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return context;
        }
      }
      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== void 0;
        }
      }
      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (!(contextStackCursor.current === emptyContextObject)) {
            {
              throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentName(type) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              {
                throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
          }
          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return _assign({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance) {
            {
              throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress2);
            pop(contextStackCursor, workInProgress2);
            push(contextStackCursor, mergedContext, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else {
            pop(didPerformWorkStackCursor, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
            {
              throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component19 = node.type;
                if (isContextProvider(Component19)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          {
            {
              throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
      }
      var LegacyRoot = 0;
      var BlockingRoot = 1;
      var ConcurrentRoot = 2;
      var rendererID = null;
      var injectedHook = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }
        var hook2 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook2.isDisabled) {
          return true;
        }
        if (!hook2.supportsFiber) {
          {
            error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
          }
          return true;
        }
        try {
          rendererID = hook2.inject(internals);
          injectedHook = hook2;
        } catch (err) {
          {
            error2("React instrumentation encountered an error: %s.", err);
          }
        }
        return true;
      }
      function onScheduleRoot(root2, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root2, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error2("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitRoot(root2, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
            } else {
              injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error2("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error2("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
      {
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
          {
            throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
          }
        }
      }
      var fakeCallbackNode = {};
      var ImmediatePriority$1 = 99;
      var UserBlockingPriority$2 = 98;
      var NormalPriority$1 = 97;
      var LowPriority$1 = 96;
      var IdlePriority$1 = 95;
      var NoPriority$1 = 90;
      var shouldYield = Scheduler_shouldYield;
      var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
      };
      var syncQueue = null;
      var immediateQueueCallbackNode = null;
      var isFlushingSyncQueue = false;
      var initialTimeMs$1 = Scheduler_now$1();
      var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
        return Scheduler_now$1() - initialTimeMs$1;
      };
      function getCurrentPriorityLevel() {
        switch (Scheduler_getCurrentPriorityLevel()) {
          case Scheduler_ImmediatePriority:
            return ImmediatePriority$1;
          case Scheduler_UserBlockingPriority:
            return UserBlockingPriority$2;
          case Scheduler_NormalPriority:
            return NormalPriority$1;
          case Scheduler_LowPriority:
            return LowPriority$1;
          case Scheduler_IdlePriority:
            return IdlePriority$1;
          default: {
            {
              throw Error("Unknown priority level.");
            }
          }
        }
      }
      function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch (reactPriorityLevel) {
          case ImmediatePriority$1:
            return Scheduler_ImmediatePriority;
          case UserBlockingPriority$2:
            return Scheduler_UserBlockingPriority;
          case NormalPriority$1:
            return Scheduler_NormalPriority;
          case LowPriority$1:
            return Scheduler_LowPriority;
          case IdlePriority$1:
            return Scheduler_IdlePriority;
          default: {
            {
              throw Error("Unknown priority level.");
            }
          }
        }
      }
      function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
      }
      function scheduleCallback(reactPriorityLevel, callback, options2) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options2);
      }
      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
          immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else {
          syncQueue.push(callback);
        }
        return fakeCallbackNode;
      }
      function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) {
          Scheduler_cancelCallback(callbackNode);
        }
      }
      function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
          var node = immediateQueueCallbackNode;
          immediateQueueCallbackNode = null;
          Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
      }
      function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i = 0;
          {
            try {
              var _isSync2 = true;
              var _queue = syncQueue;
              runWithPriority$1(ImmediatePriority$1, function() {
                for (; i < _queue.length; i++) {
                  var callback = _queue[i];
                  do {
                    callback = callback(_isSync2);
                  } while (callback !== null);
                }
              });
              syncQueue = null;
            } catch (error3) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
              throw error3;
            } finally {
              isFlushingSyncQueue = false;
            }
          }
        }
      }
      var ReactVersion = "17.0.1";
      var NoMode = 0;
      var StrictMode = 1;
      var BlockingMode = 2;
      var ConcurrentMode = 4;
      var ProfileMode = 8;
      var DebugTracingMode = 16;
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = 0;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;
          while (node !== null) {
            if (node.mode & StrictMode) {
              maybeStrictRoot = node;
            }
            node = node.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function(set4) {
          var array = [];
          set4.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = new Set();
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = new Set();
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = new Set();
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = new Map();
        var didWarnAboutLegacyContext = new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === void 0) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
              setCurrentFiber(firstFiber);
              error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map();
        };
      }
      function resolveDefaultProps(Component19, baseProps) {
        if (Component19 && Component19.defaultProps) {
          var props = _assign({}, baseProps);
          var defaultProps4 = Component19.defaultProps;
          for (var propName in defaultProps4) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps4[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      var MAX_SIGNED_31_BIT_INT = 1073741823;
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastContextWithAllBitsObserved = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
              error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
            }
            context._currentRenderer = rendererSigil;
          }
        }
      }
      function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        {
          context._currentValue = currentValue;
        }
      }
      function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) {
          return 0;
        } else {
          var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          {
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
              error2("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            }
          }
          return changedBits | 0;
        }
      }
      function scheduleWorkOnParentPath(parent, renderLanes2) {
        var node = parent;
        while (node !== null) {
          var alternate = node.alternate;
          if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
            node.childLanes = mergeLanes(node.childLanes, renderLanes2);
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          } else {
            break;
          }
          node = node.return;
        }
      }
      function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
        var fiber = workInProgress2.child;
        if (fiber !== null) {
          fiber.return = workInProgress2;
        }
        while (fiber !== null) {
          var nextFiber = void 0;
          var list2 = fiber.dependencies;
          if (list2 !== null) {
            nextFiber = fiber.child;
            var dependency = list2.firstContext;
            while (dependency !== null) {
              if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                if (fiber.tag === ClassComponent) {
                  var update2 = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                  update2.tag = ForceUpdate;
                  enqueueUpdate(fiber, update2);
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                }
                scheduleWorkOnParentPath(fiber.return, renderLanes2);
                list2.lanes = mergeLanes(list2.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;
          if (firstContext !== null) {
            if (includesSomeLane(dependencies.lanes, renderLanes2)) {
              markWorkInProgressReceivedUpdate();
            }
            dependencies.firstContext = null;
          }
        }
      }
      function readContext(context, observedBits) {
        {
          if (isDisallowedContextReadInDEV) {
            error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
        }
        if (lastContextWithAllBitsObserved === context)
          ;
        else if (observedBits === false || observedBits === 0)
          ;
        else {
          var resolvedObservedBits;
          if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
            lastContextWithAllBitsObserved = context;
            resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
          } else {
            resolvedObservedBits = observedBits;
          }
          var contextItem = {
            context,
            observedBits: resolvedObservedBits,
            next: null
          };
          if (lastContextDependency === null) {
            if (!(currentlyRenderingFiber !== null)) {
              {
                throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem,
              responders: null
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return context._currentValue;
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function initializeUpdateQueue(fiber) {
        var queue2 = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null
          },
          effects: null
        };
        fiber.updateQueue = queue2;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue2 = workInProgress2.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue2 === currentQueue) {
          var clone2 = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone2;
        }
      }
      function createUpdate(eventTime, lane) {
        var update2 = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update2;
      }
      function enqueueUpdate(fiber, update2) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return;
        }
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) {
          update2.next = update2;
        } else {
          update2.next = pending.next;
          pending.next = update2;
        }
        sharedQueue.pending = update2;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue2 = workInProgress2.updateQueue;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue2 === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue2.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update2 = firstBaseUpdate;
              do {
                var clone2 = {
                  eventTime: update2.eventTime,
                  lane: update2.lane,
                  tag: update2.tag,
                  payload: update2.payload,
                  callback: update2.callback,
                  next: null
                };
                if (newLast === null) {
                  newFirst = newLast = clone2;
                } else {
                  newLast.next = clone2;
                  newLast = clone2;
                }
                update2 = update2.next;
              } while (update2 !== null);
              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }
            queue2 = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = queue2;
            return;
          }
        }
        var lastBaseUpdate = queue2.lastBaseUpdate;
        if (lastBaseUpdate === null) {
          queue2.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }
        queue2.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue2, update2, prevState, nextProps, instance) {
        switch (update2.tag) {
          case ReplaceState: {
            var payload = update2.payload;
            if (typeof payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    reenableLogs();
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          }
          case UpdateState: {
            var _payload = update2.payload;
            var partialState;
            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    reenableLogs();
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === void 0) {
              return prevState;
            }
            return _assign({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue2 = workInProgress2.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue2.shared;
        }
        var firstBaseUpdate = queue2.firstBaseUpdate;
        var lastBaseUpdate = queue2.lastBaseUpdate;
        var pendingQueue = queue2.shared.pending;
        if (pendingQueue !== null) {
          queue2.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }
              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue2.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update2 = firstBaseUpdate;
          do {
            var updateLane = update2.lane;
            var updateEventTime = update2.eventTime;
            if (!isSubsetOfLanes(renderLanes2, updateLane)) {
              var clone2 = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update2.tag,
                payload: update2.payload,
                callback: update2.callback,
                next: null
              };
              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone2;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone2;
              }
              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  lane: NoLane,
                  tag: update2.tag,
                  payload: update2.payload,
                  callback: update2.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue2, update2, newState, props, instance);
              var callback = update2.callback;
              if (callback !== null) {
                workInProgress2.flags |= Callback;
                var effects = queue2.effects;
                if (effects === null) {
                  queue2.effects = [update2];
                } else {
                  effects.push(update2);
                }
              }
            }
            update2 = update2.next;
            if (update2 === null) {
              pendingQueue = queue2.shared.pending;
              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update2 = _firstPendingUpdate;
                queue2.lastBaseUpdate = _lastPendingUpdate;
                queue2.shared.pending = null;
              }
            }
          } while (true);
          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }
          queue2.baseState = newBaseState;
          queue2.firstBaseUpdate = newFirstBaseUpdate;
          queue2.lastBaseUpdate = newLastBaseUpdate;
          markSkippedUpdateLanes(newLanes);
          workInProgress2.lanes = newLanes;
          workInProgress2.memoizedState = newState;
        }
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context) {
        if (!(typeof callback === "function")) {
          {
            throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
          }
        }
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) {
          for (var i = 0; i < effects.length; i++) {
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }
      var fakeInternalInstance = {};
      var isArray = Array.isArray;
      var emptyRefsObject = new React284.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set();
        didWarnAboutUninitializedState = new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
        didWarnAboutDirectlyAssigningPropsToState = new Set();
        didWarnAboutUndefinedDerivedState = new Set();
        didWarnAboutContextTypeAndContextTypes = new Set();
        didWarnAboutInvalidateContextType = new Set();
        var didWarnOnInvalidCallback = new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }
          var key3 = callerName + "_" + callback;
          if (!didWarnOnInvalidCallback.has(key3)) {
            didWarnOnInvalidCallback.add(key3);
            error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        };
        warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentName(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
          }
        };
        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            {
              {
                throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            }
          }
        });
        Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState;
        {
          if (workInProgress2.mode & StrictMode) {
            disableLogs();
            try {
              getDerivedStateFromProps(nextProps, prevState);
            } finally {
              reenableLogs();
            }
          }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
        workInProgress2.memoizedState = memoizedState;
        if (workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get3(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update2 = createUpdate(eventTime, lane);
          update2.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update2.callback = callback;
          }
          enqueueUpdate(fiber, update2);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get3(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update2 = createUpdate(eventTime, lane);
          update2.tag = ReplaceState;
          update2.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update2.callback = callback;
          }
          enqueueUpdate(fiber, update2);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get3(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update2 = createUpdate(eventTime, lane);
          update2.tag = ForceUpdate;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update2.callback = callback;
          }
          enqueueUpdate(fiber, update2);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                reenableLogs();
              }
            }
          }
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (shouldUpdate === void 0) {
              error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentName(ctor) || "Component";
          var renderPresent = instance.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            } else {
              error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
            }
          }
          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
          }
          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
          }
          if (instance.propTypes) {
            error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
          }
          if (instance.contextType) {
            error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
          }
          {
            if (instance.contextTypes) {
              error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
            }
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
            }
          }
          if (typeof instance.componentShouldUpdate === "function") {
            error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
          }
          if (typeof instance.componentDidUnmount === "function") {
            error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
          }
          if (typeof instance.componentDidReceiveProps === "function") {
            error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }
          if (typeof instance.componentWillRecieveProps === "function") {
            error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }
          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }
          var hasMutatedProps = instance.props !== newProps;
          if (instance.props !== void 0 && hasMutatedProps) {
            error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
          }
          if (instance.defaultProps) {
            error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
          }
          if (typeof instance.getDerivedStateFromProps === "function") {
            error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof instance.getDerivedStateFromError === "function") {
            error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          }
          var _state = instance.state;
          if (_state && (typeof _state !== "object" || isArray(_state))) {
            error2("%s.state: must be set to an object or null", name);
          }
          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
          }
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater;
        workInProgress2.stateNode = instance;
        set3(instance, workInProgress2);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              if (contextType === void 0) {
                addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== void 0) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }
              error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
            }
          }
        }
        if (typeof contextType === "object" && contextType !== null) {
          context = readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        {
          if (workInProgress2.mode & StrictMode) {
            disableLogs();
            try {
              new ctor(props, context);
            } finally {
              reenableLogs();
            }
          }
        }
        var instance = new ctor(props, context);
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentName(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }
          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentName(ctor) || "Component";
              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }
        if (oldState !== instance.state) {
          {
            error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        if (instance.state !== oldState) {
          {
            var componentName = getComponentName(workInProgress2.type) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        {
          checkClassInstance(workInProgress2, ctor, newProps);
        }
        var instance = workInProgress2.stateNode;
        instance.props = newProps;
        instance.state = workInProgress2.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) {
          instance.context = readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
          }
          if (workInProgress2.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
          }
          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
          }
        }
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress2, instance);
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
          workInProgress2.flags |= Update;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps;
        var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }
          if (typeof instance.componentDidUpdate === "function") {
            workInProgress2.flags |= Update;
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress2.flags |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function(child2, returnFiber) {
      };
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function(child2, returnFiber) {
          if (child2 === null || typeof child2 !== "object") {
            return;
          }
          if (!child2._store || child2._store.validated || child2.key != null) {
            return;
          }
          if (!(typeof child2._store === "object")) {
            {
              throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          child2._store.validated = true;
          var componentName = getComponentName(returnFiber.type) || "Component";
          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }
          ownerHasKeyUseWarning[componentName] = true;
          error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
        };
      }
      var isArray$1 = Array.isArray;
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error2('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              if (!(ownerFiber.tag === ClassComponent)) {
                {
                  throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
              }
              inst = ownerFiber.stateNode;
            }
            if (!inst) {
              {
                throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
              return current2.ref;
            }
            var ref = function(value) {
              var refs = inst.refs;
              if (refs === emptyRefsObject) {
                refs = inst.refs = {};
              }
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            if (!(typeof mixedRef === "string")) {
              {
                throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
            }
            if (!element._owner) {
              {
                throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          {
            {
              throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
        }
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentName(returnFiber.type) || "Component";
          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }
          ownerHasFunctionTypeWarning[componentName] = true;
          error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var last = returnFiber.lastEffect;
          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
          childToDelete.nextEffect = null;
          childToDelete.flags = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone2 = createWorkInProgress(fiber, pendingProps);
          clone2.index = 0;
          clone2.sibling = null;
          return clone2;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.flags = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags = Placement;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags = Placement;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          if (current2 !== null) {
            if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
              var existing = useFiber(current2, element.props);
              existing.ref = coerceRef(returnFiber, current2, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current2, element);
          created.return = returnFiber;
          return created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key3) {
          if (current2 === null || current2.tag !== Fragment12) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key3);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
            }
            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              _created3.return = returnFiber;
              return _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key3 = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key3 !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key3) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key3);
                  }
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key3) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
            }
            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              if (key3 !== null) {
                return null;
              }
              return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                }
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
            }
            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function warnOnInvalidKey(child2, knownKeys, returnFiber) {
          {
            if (typeof child2 !== "object" || child2 === null) {
              return knownKeys;
            }
            switch (child2.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child2, returnFiber);
                var key3 = child2.key;
                if (typeof key3 !== "string") {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key3);
                  break;
                }
                if (!knownKeys.has(key3)) {
                  knownKeys.add(key3);
                  break;
                }
                error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key3);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;
            for (var i = 0; i < newChildren.length; i++) {
              var child2 = newChildren[i];
              knownKeys = warnOnInvalidKey(child2, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child3) {
              return deleteChild(returnFiber, child3);
            });
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (!(typeof iteratorFn === "function")) {
            {
              throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (; !_step.done; _step = _newChildren.next()) {
                var child2 = _step.value;
                knownKeys = warnOnInvalidKey(child2, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (!(newChildren != null)) {
            {
              throw Error("An iterable object provided no iterator.");
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child3) {
              return deleteChild(returnFiber, child3);
            });
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key3 = element.key;
          var child2 = currentFirstChild;
          while (child2 !== null) {
            if (child2.key === key3) {
              switch (child2.tag) {
                case Fragment12: {
                  if (element.type === REACT_FRAGMENT_TYPE) {
                    deleteRemainingChildren(returnFiber, child2.sibling);
                    var existing = useFiber(child2, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                  break;
                }
                case Block:
                default: {
                  if (child2.elementType === element.type || isCompatibleFamilyForHotReloading(child2, element)) {
                    deleteRemainingChildren(returnFiber, child2.sibling);
                    var _existing3 = useFiber(child2, element.props);
                    _existing3.ref = coerceRef(returnFiber, child2, element);
                    _existing3.return = returnFiber;
                    {
                      _existing3._debugSource = element._source;
                      _existing3._debugOwner = element._owner;
                    }
                    return _existing3;
                  }
                  break;
                }
              }
              deleteRemainingChildren(returnFiber, child2);
              break;
            } else {
              deleteChild(returnFiber, child2);
            }
            child2 = child2.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key3 = portal.key;
          var child2 = currentFirstChild;
          while (child2 !== null) {
            if (child2.key === key3) {
              if (child2.tag === HostPortal && child2.stateNode.containerInfo === portal.containerInfo && child2.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child2.sibling);
                var existing = useFiber(child2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child2);
                break;
              }
            } else {
              deleteChild(returnFiber, child2);
            }
            child2 = child2.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          var isObject = typeof newChild === "object" && newChild !== null;
          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
          }
          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }
          if (isArray$1(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
          }
          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
          }
          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
            switch (returnFiber.tag) {
              case ClassComponent: {
                {
                  var instance = returnFiber.stateNode;
                  if (instance.render._isMockFunction) {
                    break;
                  }
                }
              }
              case Block:
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                {
                  {
                    throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                  }
                }
              }
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current2, workInProgress2) {
        if (!(current2 === null || workInProgress2.child === current2.child)) {
          {
            throw Error("Resuming work not yet implemented.");
          }
        }
        if (workInProgress2.child === null) {
          return;
        }
        var currentChild = workInProgress2.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress2.child = newChild;
        newChild.return = workInProgress2;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress2;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress2, lanes) {
        var child2 = workInProgress2.child;
        while (child2 !== null) {
          resetWorkInProgress(child2, lanes);
          child2 = child2.sibling;
        }
      }
      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) {
          {
            throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        return c;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);
        if (context === nextContext) {
          return;
        }
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag3) {
        return (parentContext & flag3) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }
          return false;
        }
        var props = workInProgress2.memoizedProps;
        if (props.fallback === void 0) {
          return false;
        }
        if (props.unstable_avoidThisFallback !== true) {
          return true;
        }
        if (hasInvisibleParent) {
          return false;
        }
        return true;
      }
      function findFirstSuspended(row) {
        var node = row;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;
            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row) {
            return null;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      var NoFlags$1 = 0;
      var HasEffect = 1;
      var Layout = 2;
      var Passive$1 = 4;
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
      }
      function deleteHydratableInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot:
              didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
              break;
            case HostComponent:
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
              break;
          }
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.flags = Deletion;
        if (returnFiber.lastEffect !== null) {
          returnFiber.lastEffect.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type);
                  break;
                case HostText:
                  var text2 = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text2);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                  break;
                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;
                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps);
                  break;
              }
              break;
            }
            default:
              return;
          }
        }
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type);
            if (instance !== null) {
              fiber.stateNode = instance;
              return true;
            }
            return false;
          }
          case HostText: {
            var text2 = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text2);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }
            return false;
          }
          case SuspenseComponent: {
            return false;
          }
          default:
            return false;
        }
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
          nextInstance = getNextHydratableSibling(firstAttemptedInstance);
          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        {
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
              }
            }
          }
        }
        return shouldUpdate;
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          {
            throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
          parent = parent.return;
        }
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        var type = fiber.type;
        if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            deleteHydratableInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
      }
      function getIsHydrating() {
        return isHydrating;
      }
      var workInProgressSources = [];
      var rendererSigil$1;
      {
        rendererSigil$1 = {};
      }
      function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
      }
      function resetWorkInProgressVersions() {
        for (var i = 0; i < workInProgressSources.length; i++) {
          var mutableSource = workInProgressSources[i];
          {
            mutableSource._workInProgressVersionPrimary = null;
          }
        }
        workInProgressSources.length = 0;
      }
      function getWorkInProgressVersion(mutableSource) {
        {
          return mutableSource._workInProgressVersionPrimary;
        }
      }
      function setWorkInProgressVersion(mutableSource, version2) {
        {
          mutableSource._workInProgressVersionPrimary = version2;
        }
        workInProgressSources.push(mutableSource);
      }
      function warnAboutMultipleRenderersDEV(mutableSource) {
        {
          {
            if (mutableSource._currentPrimaryRenderer == null) {
              mutableSource._currentPrimaryRenderer = rendererSigil$1;
            } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
              error2("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
            }
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnAboutUseOpaqueIdentifier;
      {
        didWarnAboutUseOpaqueIdentifier = {};
        didWarnAboutMismatchedHooksForComponent = new Set();
      }
      var renderLanes = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
            error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentName(currentlyRenderingFiber$1.type);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table3 = "";
              var secondColumnStart = 30;
              for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i];
                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i + 1 + ". " + oldHookName;
                while (row.length < secondColumnStart) {
                  row += " ";
                }
                row += newHookName + "\n";
                table3 += row;
              }
              error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table3);
            }
          }
        }
      }
      function throwInvalidHookError() {
        {
          {
            throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
          if (objectIs(nextDeps[i], prevDeps[i])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component19, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress2;
        {
          hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = NoLanes;
        {
          if (current2 !== null && current2.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component19(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
              {
                throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
            }
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress2.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component19(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress2._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
        }
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) {
          {
            throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
        }
        return children;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        workInProgress2.flags &= ~(Passive | Update);
        current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          var hook2 = currentlyRenderingFiber$1.memoizedState;
          while (hook2 !== null) {
            var queue2 = hook2.queue;
            if (queue2 !== null) {
              queue2.pending = null;
            }
            hook2 = hook2.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          isUpdatingOpaqueValueInRenderPhase = false;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
      }
      function mountWorkInProgressHook() {
        var hook2 = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook2;
        } else {
          workInProgressHook = workInProgressHook.next = hook2;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          if (current2 !== null) {
            nextCurrentHook = current2.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }
        var nextWorkInProgressHook;
        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (!(nextCurrentHook !== null)) {
            {
              throw Error("Rendered more hooks than during the previous render.");
            }
          }
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null
        };
      }
      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook2 = mountWorkInProgressHook();
        var initialState2;
        if (init !== void 0) {
          initialState2 = init(initialArg);
        } else {
          initialState2 = initialArg;
        }
        hook2.memoizedState = hook2.baseState = initialState2;
        var queue2 = hook2.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState2
        };
        var dispatch = queue2.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue2);
        return [hook2.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook2 = updateWorkInProgressHook();
        var queue2 = hook2.queue;
        if (!(queue2 !== null)) {
          {
            throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
        }
        queue2.lastRenderedReducer = reducer;
        var current2 = currentHook;
        var baseQueue = current2.baseQueue;
        var pendingQueue = queue2.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }
          {
            if (current2.baseQueue !== baseQueue) {
              error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            }
          }
          current2.baseQueue = baseQueue = pendingQueue;
          queue2.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = current2.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update2 = first;
          do {
            var updateLane = update2.lane;
            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone2 = {
                lane: updateLane,
                action: update2.action,
                eagerReducer: update2.eagerReducer,
                eagerState: update2.eagerState,
                next: null
              };
              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone2;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone2;
              }
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  lane: NoLane,
                  action: update2.action,
                  eagerReducer: update2.eagerReducer,
                  eagerState: update2.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update2.eagerReducer === reducer) {
                newState = update2.eagerState;
              } else {
                var action = update2.action;
                newState = reducer(newState, action);
              }
            }
            update2 = update2.next;
          } while (update2 !== null && update2 !== first);
          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }
          if (!objectIs(newState, hook2.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook2.memoizedState = newState;
          hook2.baseState = newBaseState;
          hook2.baseQueue = newBaseQueueLast;
          queue2.lastRenderedState = newState;
        }
        var dispatch = queue2.dispatch;
        return [hook2.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook2 = updateWorkInProgressHook();
        var queue2 = hook2.queue;
        if (!(queue2 !== null)) {
          {
            throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
        }
        queue2.lastRenderedReducer = reducer;
        var dispatch = queue2.dispatch;
        var lastRenderPhaseUpdate = queue2.pending;
        var newState = hook2.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue2.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update2 = firstRenderPhaseUpdate;
          do {
            var action = update2.action;
            newState = reducer(newState, action);
            update2 = update2.next;
          } while (update2 !== firstRenderPhaseUpdate);
          if (!objectIs(newState, hook2.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook2.memoizedState = newState;
          if (hook2.baseQueue === null) {
            hook2.baseState = newState;
          }
          queue2.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
        {
          warnAboutMultipleRenderersDEV(source);
        }
        var getVersion = source._getVersion;
        var version2 = getVersion(source._source);
        var isSafeToReadFromSource = false;
        var currentRenderVersion = getWorkInProgressVersion(source);
        if (currentRenderVersion !== null) {
          isSafeToReadFromSource = currentRenderVersion === version2;
        } else {
          isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
          if (isSafeToReadFromSource) {
            setWorkInProgressVersion(source, version2);
          }
        }
        if (isSafeToReadFromSource) {
          var snapshot = getSnapshot(source._source);
          {
            if (typeof snapshot === "function") {
              error2("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
            }
          }
          return snapshot;
        } else {
          markSourceAsDirty(source);
          {
            {
              throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
            }
          }
        }
      }
      function useMutableSource(hook2, source, getSnapshot, subscribe) {
        var root2 = getWorkInProgressRoot();
        if (!(root2 !== null)) {
          {
            throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
        }
        var getVersion = source._getVersion;
        var version2 = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current;
        var _dispatcher$useState = dispatcher.useState(function() {
          return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
        }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
        var snapshot = currentSnapshot;
        var stateHook = workInProgressHook;
        var memoizedState = hook2.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook2.memoizedState = {
          refs,
          source,
          subscribe
        };
        dispatcher.useEffect(function() {
          refs.getSnapshot = getSnapshot;
          refs.setSnapshot = setSnapshot;
          var maybeNewVersion = getVersion(source._source);
          if (!objectIs(version2, maybeNewVersion)) {
            var maybeNewSnapshot = getSnapshot(source._source);
            {
              if (typeof maybeNewSnapshot === "function") {
                error2("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
              }
            }
            if (!objectIs(snapshot, maybeNewSnapshot)) {
              setSnapshot(maybeNewSnapshot);
              var lane = requestUpdateLane(fiber);
              markRootMutableRead(root2, lane);
            }
            markRootEntangled(root2, root2.mutableReadLanes);
          }
        }, [getSnapshot, source, subscribe]);
        dispatcher.useEffect(function() {
          var handleChange = function() {
            var latestGetSnapshot = refs.getSnapshot;
            var latestSetSnapshot = refs.setSnapshot;
            try {
              latestSetSnapshot(latestGetSnapshot(source._source));
              var lane = requestUpdateLane(fiber);
              markRootMutableRead(root2, lane);
            } catch (error3) {
              latestSetSnapshot(function() {
                throw error3;
              });
            }
          };
          var unsubscribe = subscribe(source._source, handleChange);
          {
            if (typeof unsubscribe !== "function") {
              error2("Mutable source subscribe function must return an unsubscribe function.");
            }
          }
          return unsubscribe;
        }, [source, subscribe]);
        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
          var newQueue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: snapshot
          };
          newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
          stateHook.queue = newQueue;
          stateHook.baseQueue = null;
          snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
          stateHook.memoizedState = stateHook.baseState = snapshot;
        }
        return snapshot;
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
        var hook2 = mountWorkInProgressHook();
        hook2.memoizedState = {
          refs: {
            getSnapshot,
            setSnapshot: null
          },
          source,
          subscribe
        };
        return useMutableSource(hook2, source, getSnapshot, subscribe);
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
        var hook2 = updateWorkInProgressHook();
        return useMutableSource(hook2, source, getSnapshot, subscribe);
      }
      function mountState(initialState2) {
        var hook2 = mountWorkInProgressHook();
        if (typeof initialState2 === "function") {
          initialState2 = initialState2();
        }
        hook2.memoizedState = hook2.baseState = initialState2;
        var queue2 = hook2.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState2
        };
        var dispatch = queue2.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue2);
        return [hook2.memoizedState, dispatch];
      }
      function updateState(initialState2) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState2) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag3, create3, destroy, deps) {
        var effect = {
          tag: tag3,
          create: create3,
          destroy,
          deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook2 = mountWorkInProgressHook();
        var ref = {
          current: initialValue
        };
        {
          Object.seal(ref);
        }
        hook2.memoizedState = ref;
        return ref;
      }
      function updateRef(initialValue) {
        var hook2 = updateWorkInProgressHook();
        return hook2.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create3, deps) {
        var hook2 = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook2.memoizedState = pushEffect(HasEffect | hookFlags, create3, void 0, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create3, deps) {
        var hook2 = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var destroy = void 0;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;
          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              pushEffect(hookFlags, create3, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook2.memoizedState = pushEffect(HasEffect | hookFlags, create3, destroy, nextDeps);
      }
      function mountEffect(create3, deps) {
        {
          if (typeof jest !== "undefined") {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return mountEffectImpl(Update | Passive, Passive$1, create3, deps);
      }
      function updateEffect(create3, deps) {
        {
          if (typeof jest !== "undefined") {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return updateEffectImpl(Update | Passive, Passive$1, create3, deps);
      }
      function mountLayoutEffect(create3, deps) {
        return mountEffectImpl(Update, Layout, create3, deps);
      }
      function updateLayoutEffect(create3, deps) {
        return updateEffectImpl(Update, Layout, create3, deps);
      }
      function imperativeHandleEffect(create3, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;
          var _inst = create3();
          refCallback(_inst);
          return function() {
            refCallback(null);
          };
        } else if (ref !== null && ref !== void 0) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }
          var _inst2 = create3();
          refObject.current = _inst2;
          return function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create3, deps) {
        {
          if (typeof create3 !== "function") {
            error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
          }
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create3, deps) {
        {
          if (typeof create3 !== "function") {
            error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
          }
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook2 = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        hook2.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook2 = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook2.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        hook2.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook2 = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var nextValue = nextCreate();
        hook2.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook2 = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook2.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        var nextValue = nextCreate();
        hook2.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;
          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }
      function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;
          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }
      function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;
          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }
      function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        {
          runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(true);
          });
          runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setPending(false);
              callback();
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          });
        }
      }
      function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
        var start = startTransition.bind(null, setPending);
        mountRef(start);
        return [start, isPending];
      }
      function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [start, isPending];
      }
      function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [start, isPending];
      }
      var isUpdatingOpaqueValueInRenderPhase = false;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase;
        }
      }
      function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        {
          var name = getComponentName(fiber.type) || "Unknown";
          if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error2("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
          }
        }
      }
      function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        if (getIsHydrating()) {
          var didUpgrade = false;
          var fiber = currentlyRenderingFiber$1;
          var readValue = function() {
            if (!didUpgrade) {
              didUpgrade = true;
              {
                isUpdatingOpaqueValueInRenderPhase = true;
                setId(makeId());
                isUpdatingOpaqueValueInRenderPhase = false;
                warnOnOpaqueIdentifierAccessInDEV(fiber);
              }
            }
            {
              {
                throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
              }
            }
          };
          var id2 = makeOpaqueHydratingObject(readValue);
          var setId = mountState(id2)[1];
          if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
            currentlyRenderingFiber$1.flags |= Update | Passive;
            pushEffect(HasEffect | Passive$1, function() {
              setId(makeId());
            }, void 0, null);
          }
          return id2;
        } else {
          var _id = makeId();
          mountState(_id);
          return _id;
        }
      }
      function updateOpaqueIdentifier() {
        var id2 = updateState()[0];
        return id2;
      }
      function rerenderOpaqueIdentifier() {
        var id2 = rerenderState()[0];
        return id2;
      }
      function dispatchAction(fiber, queue2, action) {
        {
          if (typeof arguments[3] === "function") {
            error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update2 = {
          lane,
          action,
          eagerReducer: null,
          eagerState: null,
          next: null
        };
        var pending = queue2.pending;
        if (pending === null) {
          update2.next = update2;
        } else {
          update2.next = pending.next;
          pending.next = update2;
        }
        queue2.pending = update2;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        } else {
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue2.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue2.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update2.eagerReducer = lastRenderedReducer;
                update2.eagerState = eagerState;
                if (objectIs(eagerState, currentState)) {
                  return;
                }
              } catch (error3) {
              } finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          {
            if (typeof jest !== "undefined") {
              warnIfNotScopedWithMatchingAct(fiber);
              warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
          }
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        };
        var warnInvalidHookAccess = function() {
          error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context, observedBits) {
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState2) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            mountHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context, observedBits) {
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState2) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context, observedBits) {
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState2) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return updateOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context, observedBits) {
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState2) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState2) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState2) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState2) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var profilerStartTime = -1;
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      function transferActualDuration(fiber) {
        var child2 = fiber.child;
        while (child2) {
          fiber.actualDuration += child2.actualDuration;
          child2 = child2.sibling;
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        if (current2 === null) {
          workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
        }
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component19, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component19.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component19));
            }
          }
        }
        var render4 = Component19.render;
        var ref = workInProgress2.ref;
        var nextChildren;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
          if (workInProgress2.mode & StrictMode) {
            disableLogs();
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
            } finally {
              reenableLogs();
            }
          }
          setIsRendering(false);
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component19, nextProps, updateLanes, renderLanes2) {
        if (current2 === null) {
          var type = Component19.type;
          if (isSimpleFunctionComponent(type) && Component19.compare === null && Component19.defaultProps === void 0) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress2.tag = SimpleMemoComponent;
            workInProgress2.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress2, type);
            }
            return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
            }
          }
          var child2 = createFiberFromTypeAndProps(Component19.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          child2.ref = workInProgress2.ref;
          child2.return = workInProgress2;
          workInProgress2.child = child2;
          return child2;
        }
        {
          var _type = Component19.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
          }
        }
        var currentChild = current2.child;
        if (!includesSomeLane(updateLanes, renderLanes2)) {
          var prevProps = currentChild.memoizedProps;
          var compare2 = Component19.compare;
          compare2 = compare2 !== null ? compare2 : shallowEqual;
          if (compare2(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress2.ref;
        newChild.return = workInProgress2;
        workInProgress2.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component19, nextProps, updateLanes, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                outerMemoType = init(payload);
              } catch (x) {
                outerMemoType = null;
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
              }
            }
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
            didReceiveUpdate = false;
            if (!includesSomeLane(renderLanes2, updateLanes)) {
              workInProgress2.lanes = current2.lanes;
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            }
          }
        }
        return updateFunctionComponent(current2, workInProgress2, Component19, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes
            };
            workInProgress2.memoizedState = nextState;
            pushRenderLanes(workInProgress2, renderLanes2);
          } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
            var nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else {
              nextBaseLanes = renderLanes2;
            }
            {
              markSpawnedWork(OffscreenLane);
            }
            workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
            var _nextState = {
              baseLanes: nextBaseLanes
            };
            workInProgress2.memoizedState = _nextState;
            pushRenderLanes(workInProgress2, nextBaseLanes);
            return null;
          } else {
            var _nextState2 = {
              baseLanes: NoLanes
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          }
        } else {
          var _subtreeRenderLanes;
          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
            workInProgress2.memoizedState = null;
          } else {
            _subtreeRenderLanes = renderLanes2;
          }
          pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      var updateLegacyHiddenComponent = updateOffscreenComponent;
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          var stateNode = workInProgress2.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
          workInProgress2.flags |= Ref;
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component19, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component19.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component19));
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component19, true);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, Component19, nextProps, context, renderLanes2);
          if (workInProgress2.mode & StrictMode) {
            disableLogs();
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component19, nextProps, context, renderLanes2);
            } finally {
              reenableLogs();
            }
          }
          setIsRendering(false);
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component19, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component19.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component19));
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component19)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        var shouldUpdate;
        if (instance === null) {
          if (current2 !== null) {
            current2.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          constructClassInstance(workInProgress2, Component19, nextProps);
          mountClassInstance(workInProgress2, Component19, nextProps, renderLanes2);
          shouldUpdate = true;
        } else if (current2 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress2, Component19, nextProps, renderLanes2);
        } else {
          shouldUpdate = updateClassInstance(current2, workInProgress2, Component19, nextProps, renderLanes2);
        }
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component19, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
            }
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component19, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component19, false);
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component19.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                instance.render();
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
        }
        workInProgress2.flags |= PerformedWork;
        if (current2 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        workInProgress2.memoizedState = instance.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component19, true);
        }
        return workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        if (root2.pendingContext) {
          pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
        } else if (root2.context) {
          pushTopLevelContextObject(workInProgress2, root2.context, false);
        }
        pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        pushHostRootContext(workInProgress2);
        var updateQueue = workInProgress2.updateQueue;
        if (!(current2 !== null && updateQueue !== null)) {
          {
            throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var nextProps = workInProgress2.pendingProps;
        var prevState = workInProgress2.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current2, workInProgress2);
        processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState;
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
          resetHydrationState();
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var root2 = workInProgress2.stateNode;
        if (root2.hydrate && enterHydrationState(workInProgress2)) {
          {
            var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
            if (mutableSourceEagerHydrationData != null) {
              for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                var mutableSource = mutableSourceEagerHydrationData[i];
                var version2 = mutableSourceEagerHydrationData[i + 1];
                setWorkInProgressVersion(mutableSource, version2);
              }
            }
          }
          var child2 = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          workInProgress2.child = child2;
          var node = child2;
          while (node) {
            node.flags = node.flags & ~Placement | Hydrating;
            node = node.sibling;
          }
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          resetHydrationState();
        }
        return workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        var type = workInProgress2.type;
        var nextProps = workInProgress2.pendingProps;
        var prevProps = current2 !== null ? current2.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress2.flags |= ContentReset;
        }
        markRef(current2, workInProgress2);
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
        var props = workInProgress2.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component19 = init(payload);
        workInProgress2.type = Component19;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component19);
        var resolvedProps = resolveDefaultProps(Component19, props);
        var child2;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress2, Component19);
              workInProgress2.type = Component19 = resolveFunctionForHotReloading(Component19);
            }
            child2 = updateFunctionComponent(null, workInProgress2, Component19, resolvedProps, renderLanes2);
            return child2;
          }
          case ClassComponent: {
            {
              workInProgress2.type = Component19 = resolveClassForHotReloading(Component19);
            }
            child2 = updateClassComponent(null, workInProgress2, Component19, resolvedProps, renderLanes2);
            return child2;
          }
          case ForwardRef: {
            {
              workInProgress2.type = Component19 = resolveForwardRefForHotReloading(Component19);
            }
            child2 = updateForwardRef(null, workInProgress2, Component19, resolvedProps, renderLanes2);
            return child2;
          }
          case MemoComponent: {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component19.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component19));
                }
              }
            }
            child2 = updateMemoComponent(null, workInProgress2, Component19, resolveDefaultProps(Component19.type, resolvedProps), updateLanes, renderLanes2);
            return child2;
          }
        }
        var hint = "";
        {
          if (Component19 !== null && typeof Component19 === "object" && Component19.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        {
          {
            throw Error("Element type is invalid. Received a promise that resolves to: " + Component19 + ". Lazy element type must resolve to a class or function." + hint);
          }
        }
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component19, nextProps, renderLanes2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
        workInProgress2.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component19)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        constructClassInstance(workInProgress2, Component19, nextProps);
        mountClassInstance(workInProgress2, Component19, nextProps, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component19, true, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component19, renderLanes2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
        var props = workInProgress2.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component19, false);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value;
        {
          if (Component19.prototype && typeof Component19.prototype.render === "function") {
            var componentName = getComponentName(Component19) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
              error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress2.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
          }
          setIsRendering(true);
          ReactCurrentOwner$1.current = workInProgress2;
          value = renderWithHooks(null, workInProgress2, Component19, props, context, renderLanes2);
          setIsRendering(false);
        }
        workInProgress2.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            var _componentName = getComponentName(Component19) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
          {
            var _componentName2 = getComponentName(Component19) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress2.tag = ClassComponent;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          var hasContext = false;
          if (isContextProvider(Component19)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
          initializeUpdateQueue(workInProgress2);
          var getDerivedStateFromProps = Component19.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, Component19, getDerivedStateFromProps, props);
          }
          adoptClassInstance(workInProgress2, value);
          mountClassInstance(workInProgress2, Component19, props, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component19, true, hasContext, renderLanes2);
        } else {
          workInProgress2.tag = FunctionComponent;
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                value = renderWithHooks(null, workInProgress2, Component19, props, context, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
          }
          reconcileChildren(null, workInProgress2, value, renderLanes2);
          {
            validateFunctionComponentInDev(workInProgress2, Component19);
          }
          return workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component19) {
        {
          if (Component19) {
            if (Component19.childContextTypes) {
              error2("%s(...): childContextTypes cannot be defined on a function component.", Component19.displayName || Component19.name || "Component");
            }
          }
          if (workInProgress2.ref !== null) {
            var info2 = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info2 += "\n\nCheck the render method of `" + ownerName + "`.";
            }
            var warningKey = ownerName || workInProgress2._debugID || "";
            var debugSource = workInProgress2._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info2);
            }
          }
          if (typeof Component19.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentName(Component19) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }
          if (typeof Component19.contextType === "object" && Component19.contextType !== null) {
            var _componentName4 = getComponentName(Component19) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error2("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null) {
            return false;
          }
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        {
          if (shouldSuspend(workInProgress2)) {
            workInProgress2.flags |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
          showFallback = true;
          workInProgress2.flags &= ~DidCapture;
        } else {
          if (current2 === null || current2.memoizedState !== null) {
            if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress2, suspenseContext);
        if (current2 === null) {
          if (nextProps.fallback !== void 0) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var primaryChildFragment = workInProgress2.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
            var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var _primaryChildFragment = workInProgress2.child;
            _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            workInProgress2.lanes = SomeRetryLane;
            {
              markSpawnedWork(SomeRetryLane);
            }
            return _fallbackFragment;
          } else {
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
          }
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            if (showFallback) {
              var _nextFallbackChildren2 = nextProps.fallback;
              var _nextPrimaryChildren2 = nextProps.children;
              var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
              var _primaryChildFragment3 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return _fallbackChildFragment;
            } else {
              var _nextPrimaryChildren3 = nextProps.children;
              var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment4;
            }
          } else {
            if (showFallback) {
              var _nextFallbackChildren3 = nextProps.fallback;
              var _nextPrimaryChildren4 = nextProps.children;
              var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
              var _primaryChildFragment5 = workInProgress2.child;
              var _prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
              _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return _fallbackChildFragment2;
            } else {
              var _nextPrimaryChildren5 = nextProps.children;
              var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment6;
            }
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
        primaryChildFragment.return = workInProgress2;
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var progressedPrimaryFragment = workInProgress2.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        } else {
          primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        }
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & BlockingMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes2;
        }
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
          currentFallbackChildFragment.nextEffect = null;
          currentFallbackChildFragment.flags = Deletion;
          workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
        }
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }
          var progressedLastEffect = primaryChildFragment.lastEffect;
          if (progressedLastEffect !== null) {
            workInProgress2.firstEffect = primaryChildFragment.firstEffect;
            workInProgress2.lastEffect = progressedLastEffect;
            progressedLastEffect.nextEffect = null;
          } else {
            workInProgress2.firstEffect = workInProgress2.lastEffect = null;
          }
        } else {
          primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function scheduleWorkOnFiber(fiber, renderLanes2) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
        }
        scheduleWorkOnParentPath(fiber.return, renderLanes2);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        var node = firstChild;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              scheduleWorkOnFiber(node, renderLanes2);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleWorkOnFiber(node, renderLanes2);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress2) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index2) {
        {
          var isArray2 = Array.isArray(childSlot);
          var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
          if (isArray2 || isIterable) {
            var type = isArray2 ? "array" : "iterable";
            error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;
                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }
                    _i++;
                  }
                }
              } else {
                error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress2.memoizedState;
        if (renderState === null) {
          workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode,
            lastEffect: lastEffectBeforeRendering
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
          renderState.lastEffect = lastEffectBeforeRendering;
        }
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress2.flags |= DidCapture;
        } else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress2, suspenseContext);
        if ((workInProgress2.mode & BlockingMode) === NoMode) {
          workInProgress2.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress2.child;
                workInProgress2.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
              break;
            }
            case "backwards": {
              var _tail = null;
              var row = workInProgress2.child;
              workInProgress2.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
              break;
            }
            case "together": {
              initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
              break;
            }
            default: {
              workInProgress2.memoizedState = null;
            }
          }
        }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        if (current2 === null) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type;
        var context = providerType._context;
        var newProps = workInProgress2.pendingProps;
        var oldProps = workInProgress2.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }
          var providerPropTypes = workInProgress2.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress2, newValue);
        if (oldProps !== null) {
          var oldValue = oldProps.value;
          var changedBits = calculateChangedBits(context, newValue, oldValue);
          if (changedBits === 0) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          } else {
            propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        {
          if (context._context === void 0) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress2.pendingProps;
        var render4 = newProps.children;
        {
          if (typeof render4 !== "function") {
            error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          newChildren = render4(newValue);
          setIsRendering(false);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          workInProgress2.dependencies = current2.dependencies;
        }
        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress2.lanes);
        if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
          return null;
        } else {
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }
          current2.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var last = returnFiber.lastEffect;
          if (last !== null) {
            last.nextEffect = current2;
            returnFiber.lastEffect = current2;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = current2;
          }
          current2.nextEffect = null;
          current2.flags = Deletion;
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        var updateLanes = workInProgress2.lanes;
        {
          if (workInProgress2._debugNeedsRemount && current2 !== null) {
            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
          }
        }
        if (current2 !== null) {
          var oldProps = current2.memoizedProps;
          var newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
            didReceiveUpdate = true;
          } else if (!includesSomeLane(renderLanes2, updateLanes)) {
            didReceiveUpdate = false;
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component19 = workInProgress2.type;
                if (isContextProvider(Component19)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                pushProvider(workInProgress2, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child2 = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child2 !== null) {
                      return child2.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          } else {
            if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
        }
        workInProgress2.lanes = NoLanes;
        switch (workInProgress2.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          }
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
          }
          case FunctionComponent: {
            var _Component = workInProgress2.type;
            var unresolvedProps = workInProgress2.pendingProps;
            var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component2 = workInProgress2.type;
            var _unresolvedProps = workInProgress2.pendingProps;
            var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type;
            var _unresolvedProps2 = workInProgress2.pendingProps;
            var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment12:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type;
            var _unresolvedProps3 = workInProgress2.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
          }
          case IncompleteClassComponent: {
            var _Component3 = workInProgress2.type;
            var _unresolvedProps4 = workInProgress2.pendingProps;
            var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          }
          case FundamentalComponent: {
            break;
          }
          case ScopeComponent: {
            break;
          }
          case Block: {
            break;
          }
          case OffscreenComponent: {
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
          case LegacyHiddenComponent: {
            return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        {
          {
            throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref;
      }
      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          var node = workInProgress2.child;
          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        };
        updateHostContainer = function(workInProgress2) {
        };
        updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var oldProps = current2.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          var instance = workInProgress2.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload;
          if (updatePayload) {
            markUpdate(workInProgress2);
          }
        };
        updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress2);
          }
        };
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) {
          return;
        }
        switch (renderState.tailMode) {
          case "hidden": {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case "collapsed": {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment12:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            return null;
          case ClassComponent: {
            var Component19 = workInProgress2.type;
            if (isContextProvider(Component19)) {
              popContext(workInProgress2);
            }
            return null;
          }
          case HostRoot: {
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var fiberRoot = workInProgress2.stateNode;
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated) {
                markUpdate(workInProgress2);
              } else if (!fiberRoot.hydrate) {
                workInProgress2.flags |= Snapshot;
              }
            }
            updateHostContainer(workInProgress2);
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null) {
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
              if (current2.ref !== workInProgress2.ref) {
                markRef$1(workInProgress2);
              }
            } else {
              if (!newProps) {
                if (!(workInProgress2.stateNode !== null)) {
                  {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                return null;
              }
              var currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress2);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, false, false);
                workInProgress2.stateNode = instance;
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress2);
                }
              }
              if (workInProgress2.ref !== null) {
                markRef$1(workInProgress2);
              }
            }
            return null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                if (!(workInProgress2.stateNode !== null)) {
                  {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress2);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
              }
            }
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if ((workInProgress2.flags & DidCapture) !== NoFlags) {
              workInProgress2.lanes = renderLanes2;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = false;
            if (current2 === null) {
              if (workInProgress2.memoizedProps.fallback !== void 0) {
                popHydrationState(workInProgress2);
              }
            } else {
              var prevState = current2.memoizedState;
              prevDidTimeout = prevState !== null;
            }
            if (nextDidTimeout && !prevDidTimeout) {
              if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                  renderDidSuspend();
                } else {
                  renderDidSuspendDelayIfPossible();
                }
              }
            }
            {
              if (nextDidTimeout || prevDidTimeout) {
                workInProgress2.flags |= Update;
              }
            }
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            updateHostContainer(workInProgress2);
            if (current2 === null) {
              preparePortalMount(workInProgress2.stateNode.containerInfo);
            }
            return null;
          case ContextProvider:
            popProvider(workInProgress2);
            return null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress2);
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              return null;
            }
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended) {
                  var row = workInProgress2.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress2.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThennables = suspended.updateQueue;
                      if (newThennables !== null) {
                        workInProgress2.updateQueue = newThennables;
                        workInProgress2.flags |= Update;
                      }
                      if (renderState.lastEffect === null) {
                        workInProgress2.firstEffect = null;
                      }
                      workInProgress2.lastEffect = renderState.lastEffect;
                      resetChildFibers(workInProgress2, renderLanes2);
                      pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now() > getRenderTargetTime()) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                  {
                    markSpawnedWork(SomeRetryLane);
                  }
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  var _newThennables = _suspended.updateQueue;
                  if (_newThennables !== null) {
                    workInProgress2.updateQueue = _newThennables;
                    workInProgress2.flags |= Update;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                    var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                    if (lastEffect !== null) {
                      lastEffect.nextEffect = null;
                    }
                    return null;
                  }
                } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                  {
                    markSpawnedWork(SomeRetryLane);
                  }
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress2.child;
                workInProgress2.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress2.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.lastEffect = workInProgress2.lastEffect;
              renderState.renderingStartTime = now();
              next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress2, suspenseContext);
              return next;
            }
            return null;
          }
          case FundamentalComponent: {
            break;
          }
          case ScopeComponent: {
            break;
          }
          case Block:
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            if (current2 !== null) {
              var _nextState = workInProgress2.memoizedState;
              var _prevState = current2.memoizedState;
              var prevIsHidden = _prevState !== null;
              var nextIsHidden = _nextState !== null;
              if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                workInProgress2.flags |= Update;
              }
            }
            return null;
          }
        }
        {
          {
            throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function unwindWork(workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case ClassComponent: {
            var Component19 = workInProgress2.type;
            if (isContextProvider(Component19)) {
              popContext(workInProgress2);
            }
            var flags = workInProgress2.flags;
            if (flags & ShouldCapture) {
              workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case HostRoot: {
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            if (!((_flags & DidCapture) === NoFlags)) {
              {
                throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
              }
            }
            workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
            return workInProgress2;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var _flags2 = workInProgress2.flags;
            if (_flags2 & ShouldCapture) {
              workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            return null;
          case ContextProvider:
            popProvider(workInProgress2);
            return null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress2);
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            popProvider(interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      function createCapturedValue(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source)
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return true;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === false) {
            return;
          }
          var error3 = errorInfo.value;
          if (true) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";
            if (error3 != null && error3._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }
              console["error"](error3);
            }
            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);
            if (errorBoundaryName) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          } else {
            console["error"](error3);
          }
        } catch (e) {
          setTimeout(function() {
            throw e;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update2 = createUpdate(NoTimestamp, lane);
        update2.tag = CaptureUpdate;
        update2.payload = {
          element: null
        };
        var error3 = errorInfo.value;
        update2.callback = function() {
          onUncaughtError(error3);
          logCapturedError(fiber, errorInfo);
        };
        return update2;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update2 = createUpdate(NoTimestamp, lane);
        update2.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;
          update2.payload = function() {
            logCapturedError(fiber, errorInfo);
            return getDerivedStateFromError(error$1);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update2.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
              logCapturedError(fiber, errorInfo);
            }
            var error$12 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$12, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                }
              }
            }
          };
        } else {
          update2.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
          };
        }
        return update2;
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root2.pingCache = new PossiblyWeakMap$1();
          threadIDs = new Set();
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);
          if (threadIDs === void 0) {
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          }
        }
        if (!threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          wakeable.then(ping, ping);
        }
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;
          if ((sourceFiber.mode & BlockingMode) === NoMode) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
          var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
          var _workInProgress = returnFiber;
          do {
            if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
              var wakeables = _workInProgress.updateQueue;
              if (wakeables === null) {
                var updateQueue = new Set();
                updateQueue.add(wakeable);
                _workInProgress.updateQueue = updateQueue;
              } else {
                wakeables.add(wakeable);
              }
              if ((_workInProgress.mode & BlockingMode) === NoMode) {
                _workInProgress.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update2 = createUpdate(NoTimestamp, SyncLane);
                    update2.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update2);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                return;
              }
              attachPingListener(root2, wakeable, rootRenderLanes);
              _workInProgress.flags |= ShouldCapture;
              _workInProgress.lanes = rootRenderLanes;
              return;
            }
            _workInProgress = _workInProgress.return;
          } while (_workInProgress !== null);
          value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
        }
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, _update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress2.type;
              var instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update2);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
      }
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        instance.props = current2.memoizedProps;
        instance.state = current2.memoizedState;
        {
          instance.componentWillUnmount();
        }
      };
      function safelyCallComponentWillUnmount(current2, instance) {
        {
          invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
          if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current2, unmountError);
          }
        }
      }
      function safelyDetachRef(current2) {
        var ref = current2.ref;
        if (ref !== null) {
          if (typeof ref === "function") {
            {
              invokeGuardedCallback(null, ref, null, null);
              if (hasCaughtError()) {
                var refError = clearCaughtError();
                captureCommitPhaseError(current2, refError);
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current2, destroy) {
        {
          invokeGuardedCallback(null, destroy, null);
          if (hasCaughtError()) {
            var error3 = clearCaughtError();
            captureCommitPhaseError(current2, error3);
          }
        }
      }
      function commitBeforeMutationLifeCycles(current2, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block: {
            return;
          }
          case ClassComponent: {
            if (finishedWork.flags & Snapshot) {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps;
                var prevState = current2.memoizedState;
                var instance = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
            }
            return;
          }
          case HostRoot: {
            {
              if (finishedWork.flags & Snapshot) {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
            }
            return;
          }
          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            return;
        }
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function commitHookEffectListUnmount(tag3, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & tag3) === tag3) {
              var destroy = effect.destroy;
              effect.destroy = void 0;
              if (destroy !== void 0) {
                destroy();
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(tag3, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & tag3) === tag3) {
              var create3 = effect.create;
              effect.destroy = create3();
              {
                var destroy = effect.destroy;
                if (destroy !== void 0 && typeof destroy !== "function") {
                  var addendum = void 0;
                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }
                  error2("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            var _effect = effect, next = _effect.next, tag3 = _effect.tag;
            if ((tag3 & Passive$1) !== NoFlags$1 && (tag3 & HasEffect) !== NoFlags$1) {
              enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
              enqueuePendingPassiveHookEffectMount(finishedWork, effect);
            }
            effect = next;
          } while (effect !== firstEffect);
        }
      }
      function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block: {
            {
              commitHookEffectListMount(Layout | HasEffect, finishedWork);
            }
            schedulePassiveEffects(finishedWork);
            return;
          }
          case ClassComponent: {
            var instance = finishedWork.stateNode;
            if (finishedWork.flags & Update) {
              if (current2 === null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                {
                  instance.componentDidMount();
                }
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                var prevState = current2.memoizedState;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                {
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              }
            }
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                  }
                  if (instance.state !== finishedWork.memoizedState) {
                    error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                  }
                }
              }
              commitUpdateQueue(finishedWork, updateQueue, instance);
            }
            return;
          }
          case HostRoot: {
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }
              commitUpdateQueue(finishedWork, _updateQueue, _instance);
            }
            return;
          }
          case HostComponent: {
            var _instance2 = finishedWork.stateNode;
            if (current2 === null && finishedWork.flags & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props);
            }
            return;
          }
          case HostText: {
            return;
          }
          case HostPortal: {
            return;
          }
          case Profiler: {
            {
              var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
              var effectDuration = finishedWork.stateNode.effectDuration;
              var commitTime2 = getCommitTime();
              if (typeof onRender === "function") {
                {
                  onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                }
              }
            }
            return;
          }
          case SuspenseComponent: {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            return;
          }
          case SuspenseListComponent:
          case IncompleteClassComponent:
          case FundamentalComponent:
          case ScopeComponent:
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return;
        }
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        {
          var node = finishedWork;
          while (true) {
            if (node.tag === HostComponent) {
              var instance = node.stateNode;
              if (isHidden) {
                hideInstance(instance);
              } else {
                unhideInstance(node.stateNode, node.memoizedProps);
              }
            } else if (node.tag === HostText) {
              var _instance3 = node.stateNode;
              if (isHidden) {
                hideTextInstance(_instance3);
              } else {
                unhideTextInstance(_instance3, node.memoizedProps);
              }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === finishedWork) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref === "function") {
            ref(instanceToUse);
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function commitDetachRef(current2) {
        var currentRef = current2.ref;
        if (currentRef !== null) {
          if (typeof currentRef === "function") {
            currentRef(null);
          } else {
            currentRef.current = null;
          }
        }
      }
      function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
        onCommitUnmount(current2);
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block: {
            var updateQueue = current2.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                  var _effect2 = effect, destroy = _effect2.destroy, tag3 = _effect2.tag;
                  if (destroy !== void 0) {
                    if ((tag3 & Passive$1) !== NoFlags$1) {
                      enqueuePendingPassiveHookEffectUnmount(current2, effect);
                    } else {
                      {
                        safelyCallDestroy(current2, destroy);
                      }
                    }
                  }
                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }
            return;
          }
          case ClassComponent: {
            safelyDetachRef(current2);
            var instance = current2.stateNode;
            if (typeof instance.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(current2, instance);
            }
            return;
          }
          case HostComponent: {
            safelyDetachRef(current2);
            return;
          }
          case HostPortal: {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            return;
          }
          case FundamentalComponent: {
            return;
          }
          case DehydratedFragment: {
            return;
          }
          case ScopeComponent: {
            return;
          }
        }
      }
      function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
        var node = root2;
        while (true) {
          commitUnmount(finishedRoot, node);
          if (node.child !== null && node.tag !== HostPortal) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === root2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === root2) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function detachFiberMutation(fiber) {
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        {
          fiber._debugOwner = null;
        }
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        {
          {
            throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch (parentFiber.tag) {
          case HostComponent:
            parent = parentStateNode;
            isContainer = false;
            break;
          case HostRoot:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;
          case HostPortal:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;
          case FundamentalComponent:
          default: {
            {
              throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        if (parentFiber.flags & ContentReset) {
          resetTextContent(parent);
          parentFiber.flags &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork);
        if (isContainer) {
          insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        } else {
          insertOrAppendPlacementNode(finishedWork, before, parent);
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag3 = node.tag;
        var isHost = tag3 === HostComponent || tag3 === HostText;
        if (isHost || enableFundamentalAPI) {
          var stateNode = isHost ? node.stateNode : node.stateNode.instance;
          if (before) {
            insertInContainerBefore(parent, stateNode, before);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag3 === HostPortal)
          ;
        else {
          var child2 = node.child;
          if (child2 !== null) {
            insertOrAppendPlacementNodeIntoContainer(child2, before, parent);
            var sibling = child2.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag3 = node.tag;
        var isHost = tag3 === HostComponent || tag3 === HostText;
        if (isHost || enableFundamentalAPI) {
          var stateNode = isHost ? node.stateNode : node.stateNode.instance;
          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag3 === HostPortal)
          ;
        else {
          var child2 = node.child;
          if (child2 !== null) {
            insertOrAppendPlacementNode(child2, before, parent);
            var sibling = child2.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
        var node = current2;
        var currentParentIsValid = false;
        var currentParent;
        var currentParentIsContainer;
        while (true) {
          if (!currentParentIsValid) {
            var parent = node.return;
            findParent:
              while (true) {
                if (!(parent !== null)) {
                  {
                    throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var parentStateNode = parent.stateNode;
                switch (parent.tag) {
                  case HostComponent:
                    currentParent = parentStateNode;
                    currentParentIsContainer = false;
                    break findParent;
                  case HostRoot:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                  case HostPortal:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                }
                parent = parent.return;
              }
            currentParentIsValid = true;
          }
          if (node.tag === HostComponent || node.tag === HostText) {
            commitNestedUnmounts(finishedRoot, node);
            if (currentParentIsContainer) {
              removeChildFromContainer(currentParent, node.stateNode);
            } else {
              removeChild(currentParent, node.stateNode);
            }
          } else if (node.tag === HostPortal) {
            if (node.child !== null) {
              currentParent = node.stateNode.containerInfo;
              currentParentIsContainer = true;
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else {
            commitUnmount(finishedRoot, node);
            if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
          }
          if (node === current2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === current2) {
              return;
            }
            node = node.return;
            if (node.tag === HostPortal) {
              currentParentIsValid = false;
            }
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
        {
          unmountHostComponents(finishedRoot, current2);
        }
        var alternate = current2.alternate;
        detachFiberMutation(current2);
        if (alternate !== null) {
          detachFiberMutation(alternate);
        }
      }
      function commitWork(current2, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block: {
            {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
            }
            return;
          }
          case ClassComponent: {
            return;
          }
          case HostComponent: {
            var instance = finishedWork.stateNode;
            if (instance != null) {
              var newProps = finishedWork.memoizedProps;
              var oldProps = current2 !== null ? current2.memoizedProps : newProps;
              var type = finishedWork.type;
              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps);
              }
            }
            return;
          }
          case HostText: {
            if (!(finishedWork.stateNode !== null)) {
              {
                throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps;
            var oldText = current2 !== null ? current2.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }
          case HostRoot: {
            {
              var _root = finishedWork.stateNode;
              if (_root.hydrate) {
                _root.hydrate = false;
                commitHydratedContainer(_root.containerInfo);
              }
            }
            return;
          }
          case Profiler: {
            return;
          }
          case SuspenseComponent: {
            commitSuspenseComponent(finishedWork);
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case SuspenseListComponent: {
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case IncompleteClassComponent: {
            return;
          }
          case FundamentalComponent: {
            break;
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            var newState = finishedWork.memoizedState;
            var isHidden = newState !== null;
            hideOrUnhideAllChildren(finishedWork, isHidden);
            return;
          }
        }
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState !== null) {
          markCommitTimeOfFallback();
          {
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
          }
        }
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance);
              }
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
          }
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              {
                if (wakeable.__reactDoNotTraceInteractions !== true) {
                  retry = tracing.unstable_wrap(retry);
                }
              }
              retryCache.add(wakeable);
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
        if (current2 !== null) {
          var oldState = current2.memoizedState;
          if (oldState === null || oldState.dehydrated !== null) {
            var newState = finishedWork.memoizedState;
            return newState !== null && newState.dehydrated === null;
          }
        }
        return false;
      }
      function commitResetTextContent(current2) {
        resetTextContent(current2.stateNode);
      }
      var COMPONENT_TYPE = 0;
      var HAS_PSEUDO_CLASS_TYPE = 1;
      var ROLE_TYPE = 2;
      var TEST_NAME_TYPE = 3;
      var TEXT_TYPE = 4;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1("selector.component");
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
        ROLE_TYPE = symbolFor$1("selector.role");
        TEST_NAME_TYPE = symbolFor$1("selector.test_id");
        TEXT_TYPE = symbolFor$1("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
      }
      var ceil2 = Math.ceil;
      var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
      var NoContext = 0;
      var BatchedContext = 1;
      var EventContext = 2;
      var DiscreteEventContext = 4;
      var LegacyUnbatchedContext = 8;
      var RenderContext = 16;
      var CommitContext = 32;
      var RetryAfterError = 64;
      var RootIncomplete = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var subtreeRenderLanes = NoLanes;
      var subtreeRenderLanesCursor = createCursor(NoLanes);
      var workInProgressRootExitStatus = RootIncomplete;
      var workInProgressRootFatalError = null;
      var workInProgressRootIncludedLanes = NoLanes;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var mostRecentlyUpdatedRoot = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var nextEffect = null;
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsRenderPriority = NoPriority$1;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveHookEffectsMount = [];
      var pendingPassiveHookEffectsUnmount = [];
      var rootsWithPendingDiscreteUpdates = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var spawnedWorkDuringRender = null;
      var currentEventTime = NoTimestamp;
      var currentEventWipLanes = NoLanes;
      var currentEventPendingLanes = NoLanes;
      var isFlushingPassiveEffects = false;
      var focusedInstanceHandle = null;
      var shouldFireAfterActiveInstanceBlur = false;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return now();
        }
        if (currentEventTime !== NoTimestamp) {
          return currentEventTime;
        }
        currentEventTime = now();
        return currentEventTime;
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) {
          return SyncLane;
        } else if ((mode & ConcurrentMode) === NoMode) {
          return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
        }
        if (currentEventWipLanes === NoLanes) {
          currentEventWipLanes = workInProgressRootIncludedLanes;
        }
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (currentEventPendingLanes !== NoLanes) {
            currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
          }
          return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        }
        var schedulerPriority = getCurrentPriorityLevel();
        var lane;
        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
          lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        } else {
          var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
          lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }
        return lane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) {
          return SyncLane;
        } else if ((mode & ConcurrentMode) === NoMode) {
          return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
        }
        if (currentEventWipLanes === NoLanes) {
          currentEventWipLanes = workInProgressRootIncludedLanes;
        }
        return findRetryLane(currentEventWipLanes);
      }
      function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root2 === null) {
          warnAboutUpdateOnUnmountedFiberInDEV(fiber);
          return null;
        }
        markRootUpdated(root2, lane, eventTime);
        if (root2 === workInProgressRoot) {
          {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
          }
          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
            markRootSuspended$1(root2, workInProgressRootRenderLanes);
          }
        }
        var priorityLevel = getCurrentPriorityLevel();
        if (lane === SyncLane) {
          if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            schedulePendingInteractions(root2, lane);
            performSyncWorkOnRoot(root2);
          } else {
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, lane);
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        } else {
          if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
            if (rootsWithPendingDiscreteUpdates === null) {
              rootsWithPendingDiscreteUpdates = new Set([root2]);
            } else {
              rootsWithPendingDiscreteUpdates.add(root2);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
          schedulePendingInteractions(root2, lane);
        }
        mostRecentlyUpdatedRoot = root2;
      }
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }
        {
          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
          }
          node = parent;
          parent = parent.return;
        }
        if (node.tag === HostRoot) {
          var root2 = node.stateNode;
          return root2;
        } else {
          return null;
        }
      }
      function ensureRootIsScheduled(root2, currentTime) {
        var existingCallbackNode = root2.callbackNode;
        markStarvedLanesAsExpired(root2, currentTime);
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        var newCallbackPriority = returnNextLanesPriority();
        if (nextLanes === NoLanes) {
          if (existingCallbackNode !== null) {
            cancelCallback(existingCallbackNode);
            root2.callbackNode = null;
            root2.callbackPriority = NoLanePriority;
          }
          return;
        }
        if (existingCallbackNode !== null) {
          var existingCallbackPriority = root2.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority) {
            return;
          }
          cancelCallback(existingCallbackNode);
        }
        var newCallbackNode;
        if (newCallbackPriority === SyncLanePriority) {
          newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
        } else if (newCallbackPriority === SyncBatchedLanePriority) {
          newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
        } else {
          var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
          newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
        }
        root2.callbackPriority = newCallbackPriority;
        root2.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root2) {
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          {
            throw Error("Should not already be working.");
          }
        }
        var originalCallbackNode = root2.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
          if (root2.callbackNode !== originalCallbackNode) {
            return null;
          }
        }
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) {
          return null;
        }
        var exitStatus = renderRootConcurrent(root2, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
          prepareFreshStack(root2, NoLanes);
        } else if (exitStatus !== RootIncomplete) {
          if (exitStatus === RootErrored) {
            executionContext |= RetryAfterError;
            if (root2.hydrate) {
              root2.hydrate = false;
              clearContainer(root2.containerInfo);
            }
            lanes = getLanesToRetrySynchronouslyOnError(root2);
            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root2, lanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          finishConcurrentRender(root2, exitStatus, lanes);
        }
        ensureRootIsScheduled(root2, now());
        if (root2.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root2);
        }
        return null;
      }
      function finishConcurrentRender(root2, exitStatus, lanes) {
        switch (exitStatus) {
          case RootIncomplete:
          case RootFatalErrored: {
            {
              {
                throw Error("Root did not complete. This is a bug in React.");
              }
            }
          }
          case RootErrored: {
            commitRoot(root2);
            break;
          }
          case RootSuspended: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes) {
                  break;
                }
                var suspendedLanes = root2.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  var eventTime = requestEventTime();
                  markRootPinged(root2, suspendedLanes);
                  break;
                }
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                break;
              }
            }
            commitRoot(root2);
            break;
          }
          case RootSuspendedWithDelay: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyTransitions(lanes)) {
              break;
            }
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
              var eventTimeMs = mostRecentEventTime;
              var timeElapsedMs = now() - eventTimeMs;
              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root2);
            break;
          }
          case RootCompleted: {
            commitRoot(root2);
            break;
          }
          default: {
            {
              {
                throw Error("Unknown root exit status.");
              }
            }
          }
        }
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          {
            throw Error("Should not already be working.");
          }
        }
        flushPassiveEffects();
        var lanes;
        var exitStatus;
        if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
          lanes = workInProgressRootRenderLanes;
          exitStatus = renderRootSync(root2, lanes);
          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            lanes = getNextLanes(root2, lanes);
            exitStatus = renderRootSync(root2, lanes);
          }
        } else {
          lanes = getNextLanes(root2, NoLanes);
          exitStatus = renderRootSync(root2, lanes);
        }
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          executionContext |= RetryAfterError;
          if (root2.hydrate) {
            root2.hydrate = false;
            clearContainer(root2.containerInfo);
          }
          lanes = getLanesToRetrySynchronouslyOnError(root2);
          if (lanes !== NoLanes) {
            exitStatus = renderRootSync(root2, lanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root2, NoLanes);
          markRootSuspended$1(root2, lanes);
          ensureRootIsScheduled(root2, now());
          throw fatalError;
        }
        var finishedWork = root2.current.alternate;
        root2.finishedWork = finishedWork;
        root2.finishedLanes = lanes;
        commitRoot(root2);
        ensureRootIsScheduled(root2, now());
        return null;
      }
      function flushDiscreteUpdates() {
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              error2("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            }
          }
          return;
        }
        flushPendingDiscreteUpdates();
        flushPassiveEffects();
      }
      function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
          var roots = rootsWithPendingDiscreteUpdates;
          rootsWithPendingDiscreteUpdates = null;
          roots.forEach(function(root2) {
            markDiscreteUpdatesExpired(root2);
            ensureRootIsScheduled(root2, now());
          });
        }
        flushSyncCallbackQueue();
      }
      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      }
      function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      }
      function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        {
          try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
      }
      function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      }
      function flushSync(fn, a) {
        var prevExecutionContext = executionContext;
        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
          {
            error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
          }
          return fn(a);
        }
        executionContext |= BatchedContext;
        {
          try {
            if (fn) {
              return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
            } else {
              return void 0;
            }
          } finally {
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
          }
        }
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root2.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;
          while (interruptedWork !== null) {
            unwindInterruptedWork(interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }
        workInProgressRoot = root2;
        workInProgress = createWorkInProgress(root2.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        {
          spawnedWorkDuringRender = null;
        }
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
      }
      function handleError(root2, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();
            ReactCurrentOwner$2.current = null;
            if (erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
            }
            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
            completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            if (workInProgress === erroredWork && erroredWork !== null) {
              erroredWork = erroredWork.return;
              workInProgress = erroredWork;
            } else {
              erroredWork = workInProgress;
            }
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function pushInteractions(root2) {
        {
          var prevInteractions = tracing.__interactionsRef.current;
          tracing.__interactionsRef.current = root2.memoizedInteractions;
          return prevInteractions;
        }
      }
      function popInteractions(prevInteractions) {
        {
          tracing.__interactionsRef.current = prevInteractions;
        }
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }
      function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) {
          workInProgressRootExitStatus = RootErrored;
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootIncomplete;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          prepareFreshStack(root2, lanes);
          startWorkOnPendingInteractions(root2, lanes);
        }
        var prevInteractions = pushInteractions(root2);
        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) {
          {
            {
              throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          resetRenderTimer();
          prepareFreshStack(root2, lanes);
          startWorkOnPendingInteractions(root2, lanes);
        }
        var prevInteractions = pushInteractions(root2);
        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
          return RootIncomplete;
        } else {
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next;
        }
        ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate;
          var returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = void 0;
            if ((completedWork.mode & ProfileMode) === NoMode) {
              next = completeWork(current2, completedWork, subtreeRenderLanes);
            } else {
              startProfilerTimer(completedWork);
              next = completeWork(current2, completedWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }
            resetCurrentFiber();
            if (next !== null) {
              workInProgress = next;
              return;
            }
            resetChildLanes(completedWork);
            if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
              if (returnFiber.firstEffect === null) {
                returnFiber.firstEffect = completedWork.firstEffect;
              }
              if (completedWork.lastEffect !== null) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                }
                returnFiber.lastEffect = completedWork.lastEffect;
              }
              var flags = completedWork.flags;
              if (flags > PerformedWork) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = completedWork;
                } else {
                  returnFiber.firstEffect = completedWork;
                }
                returnFiber.lastEffect = completedWork;
              }
            }
          } else {
            var _next = unwindWork(completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask;
              workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              var actualDuration = completedWork.actualDuration;
              var child2 = completedWork.child;
              while (child2 !== null) {
                actualDuration += child2.actualDuration;
                child2 = child2.sibling;
              }
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null) {
              returnFiber.firstEffect = returnFiber.lastEffect = null;
              returnFiber.flags |= Incomplete;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }
      function resetChildLanes(completedWork) {
        if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
          return;
        }
        var newChildLanes = NoLanes;
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
          var child2 = completedWork.child;
          while (child2 !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child2.lanes, child2.childLanes));
            if (shouldBubbleActualDurations) {
              actualDuration += child2.actualDuration;
            }
            treeBaseDuration += child2.treeBaseDuration;
            child2 = child2.sibling;
          }
          var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
          if (isTimedOutSuspense) {
            var primaryChildFragment = completedWork.child;
            if (primaryChildFragment !== null) {
              treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
          }
          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;
          while (_child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
            _child = _child.sibling;
          }
        }
        completedWork.childLanes = newChildLanes;
      }
      function commitRoot(root2) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
        return null;
      }
      function commitRootImpl(root2, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          {
            throw Error("Should not already be working.");
          }
        }
        var finishedWork = root2.finishedWork;
        var lanes = root2.finishedLanes;
        if (finishedWork === null) {
          return null;
        }
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        if (!(finishedWork !== root2.current)) {
          {
            throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        root2.callbackNode = null;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root2, remainingLanes);
        if (rootsWithPendingDiscreteUpdates !== null) {
          if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
            rootsWithPendingDiscreteUpdates.delete(root2);
          }
        }
        if (root2 === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }
        var firstEffect;
        if (finishedWork.flags > PerformedWork) {
          if (finishedWork.lastEffect !== null) {
            finishedWork.lastEffect.nextEffect = finishedWork;
            firstEffect = finishedWork.firstEffect;
          } else {
            firstEffect = finishedWork;
          }
        } else {
          firstEffect = finishedWork.firstEffect;
        }
        if (firstEffect !== null) {
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root2);
          ReactCurrentOwner$2.current = null;
          focusedInstanceHandle = prepareForCommit(root2.containerInfo);
          shouldFireAfterActiveInstanceBlur = false;
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitBeforeMutationEffects, null);
              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var error3 = clearCaughtError();
                captureCommitPhaseError(nextEffect, error3);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          focusedInstanceHandle = null;
          {
            recordCommitTime();
          }
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error = clearCaughtError();
                captureCommitPhaseError(nextEffect, _error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          resetAfterCommit(root2.containerInfo);
          root2.current = finishedWork;
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error2 = clearCaughtError();
                captureCommitPhaseError(nextEffect, _error2);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          nextEffect = null;
          requestPaint();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
        } else {
          root2.current = finishedWork;
          {
            recordCommitTime();
          }
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root2;
          pendingPassiveEffectsLanes = lanes;
          pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
          nextEffect = firstEffect;
          while (nextEffect !== null) {
            var nextNextEffect = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            if (nextEffect.flags & Deletion) {
              detachFiberAfterEffects(nextEffect);
            }
            nextEffect = nextNextEffect;
          }
        }
        remainingLanes = root2.pendingLanes;
        if (remainingLanes !== NoLanes) {
          {
            if (spawnedWorkDuringRender !== null) {
              var expirationTimes = spawnedWorkDuringRender;
              spawnedWorkDuringRender = null;
              for (var i = 0; i < expirationTimes.length; i++) {
                scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
              }
            }
            schedulePendingInteractions(root2, remainingLanes);
          }
        } else {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        {
          if (!rootDidHavePassiveEffects) {
            finishPendingInteractions(root2, lanes);
          }
        }
        if (remainingLanes === SyncLane) {
          if (root2 === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root2;
          }
        } else {
          nestedUpdateCount = 0;
        }
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        {
          onCommitRoot$1();
        }
        ensureRootIsScheduled(root2, now());
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var _error3 = firstUncaughtError;
          firstUncaughtError = null;
          throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
          return null;
        }
        flushSyncCallbackQueue();
        return null;
      }
      function commitBeforeMutationEffects() {
        while (nextEffect !== null) {
          var current2 = nextEffect.alternate;
          if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
            if ((nextEffect.flags & Deletion) !== NoFlags) {
              if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                shouldFireAfterActiveInstanceBlur = true;
              }
            } else {
              if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                shouldFireAfterActiveInstanceBlur = true;
              }
            }
          }
          var flags = nextEffect.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(nextEffect);
            commitBeforeMutationLifeCycles(current2, nextEffect);
            resetCurrentFiber();
          }
          if ((flags & Passive) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          nextEffect = nextEffect.nextEffect;
        }
      }
      function commitMutationEffects(root2, renderPriorityLevel) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var flags = nextEffect.flags;
          if (flags & ContentReset) {
            commitResetTextContent(nextEffect);
          }
          if (flags & Ref) {
            var current2 = nextEffect.alternate;
            if (current2 !== null) {
              commitDetachRef(current2);
            }
          }
          var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
          switch (primaryFlags) {
            case Placement: {
              commitPlacement(nextEffect);
              nextEffect.flags &= ~Placement;
              break;
            }
            case PlacementAndUpdate: {
              commitPlacement(nextEffect);
              nextEffect.flags &= ~Placement;
              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }
            case Hydrating: {
              nextEffect.flags &= ~Hydrating;
              break;
            }
            case HydratingAndUpdate: {
              nextEffect.flags &= ~Hydrating;
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }
            case Update: {
              var _current3 = nextEffect.alternate;
              commitWork(_current3, nextEffect);
              break;
            }
            case Deletion: {
              commitDeletion(root2, nextEffect);
              break;
            }
          }
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }
      function commitLayoutEffects(root2, committedLanes) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var flags = nextEffect.flags;
          if (flags & (Update | Callback)) {
            var current2 = nextEffect.alternate;
            commitLifeCycles(root2, current2, nextEffect);
          }
          {
            if (flags & Ref) {
              commitAttachRef(nextEffect);
            }
          }
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }
      function flushPassiveEffects() {
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
          var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
          pendingPassiveEffectsRenderPriority = NoPriority$1;
          {
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
          }
        }
        return false;
      }
      function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback(NormalPriority$1, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
      function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        {
          fiber.flags |= PassiveUnmountPendingDev;
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.flags |= PassiveUnmountPendingDev;
          }
        }
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback(NormalPriority$1, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
      function invokePassiveEffectCreate(effect) {
        var create3 = effect.create;
        effect.destroy = create3();
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var root2 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          {
            throw Error("Cannot flush passive effects while already rendering.");
          }
        }
        {
          isFlushingPassiveEffects = true;
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root2);
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];
        for (var i = 0; i < unmountEffects.length; i += 2) {
          var _effect = unmountEffects[i];
          var fiber = unmountEffects[i + 1];
          var destroy = _effect.destroy;
          _effect.destroy = void 0;
          {
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.flags &= ~PassiveUnmountPendingDev;
            }
          }
          if (typeof destroy === "function") {
            {
              setCurrentFiber(fiber);
              {
                invokeGuardedCallback(null, destroy, null);
              }
              if (hasCaughtError()) {
                if (!(fiber !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var error3 = clearCaughtError();
                captureCommitPhaseError(fiber, error3);
              }
              resetCurrentFiber();
            }
          }
        }
        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];
        for (var _i = 0; _i < mountEffects.length; _i += 2) {
          var _effect2 = mountEffects[_i];
          var _fiber = mountEffects[_i + 1];
          {
            setCurrentFiber(_fiber);
            {
              invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            }
            if (hasCaughtError()) {
              if (!(_fiber !== null)) {
                {
                  throw Error("Should be working on an effect.");
                }
              }
              var _error4 = clearCaughtError();
              captureCommitPhaseError(_fiber, _error4);
            }
            resetCurrentFiber();
          }
        }
        var effect = root2.current.firstEffect;
        while (effect !== null) {
          var nextNextEffect = effect.nextEffect;
          effect.nextEffect = null;
          if (effect.flags & Deletion) {
            detachFiberAfterEffects(effect);
          }
          effect = nextNextEffect;
        }
        {
          popInteractions(prevInteractions);
          finishPendingInteractions(root2, lanes);
        }
        {
          isFlushingPassiveEffects = false;
        }
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue();
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }
      function prepareToThrowUncaughtError(error3) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error3;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
        var errorInfo = createCapturedValue(error3, sourceFiber);
        var update2 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update2);
        var eventTime = requestEventTime();
        var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root2 !== null) {
          markRootUpdated(root2, SyncLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
          schedulePendingInteractions(root2, SyncLane);
        }
      }
      function captureCommitPhaseError(sourceFiber, error3) {
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error3);
          return;
        }
        var fiber = sourceFiber.return;
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error3);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(error3, sourceFiber);
              var update2 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              enqueueUpdate(fiber, update2);
              var eventTime = requestEventTime();
              var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
              if (root2 !== null) {
                markRootUpdated(root2, SyncLane, eventTime);
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, SyncLane);
              } else {
                if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  try {
                    instance.componentDidCatch(error3, errorInfo);
                  } catch (errorToIgnore) {
                  }
                }
              }
              return;
            }
          }
          fiber = fiber.return;
        }
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }
        var eventTime = requestEventTime();
        markRootPinged(root2, pingedLanes);
        if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root2, NoLanes);
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }
        ensureRootIsScheduled(root2, eventTime);
        schedulePendingInteractions(root2, pingedLanes);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }
        var eventTime = requestEventTime();
        var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root2 !== null) {
          markRootUpdated(root2, retryLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
          schedulePendingInteractions(root2, retryLane);
        }
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        {
          retryCache = boundaryFiber.stateNode;
        }
        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil2(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          {
            {
              throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
          }
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }
          if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
            return;
          }
          var tag3 = fiber.tag;
          if (tag3 !== IndeterminateComponent && tag3 !== HostRoot && tag3 !== ClassComponent && tag3 !== FunctionComponent && tag3 !== ForwardRef && tag3 !== MemoComponent && tag3 !== SimpleMemoComponent && tag3 !== Block) {
            return;
          }
          var componentName = getComponentName(fiber.type) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
          }
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
      var didWarnStateUpdateForUnmountedComponent = null;
      function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        {
          var tag3 = fiber.tag;
          if (tag3 !== HostRoot && tag3 !== ClassComponent && tag3 !== FunctionComponent && tag3 !== ForwardRef && tag3 !== MemoComponent && tag3 !== SimpleMemoComponent && tag3 !== Block) {
            return;
          }
          if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
            return;
          }
          var componentName = getComponentName(fiber.type) || "ReactComponent";
          if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForUnmountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
          }
          if (isFlushingPassiveEffects)
            ;
          else {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error2("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag3 === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }
            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              throw replayError;
            } else {
              throw originalError;
            }
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = new Set();
      }
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                  error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
              case ClassComponent: {
                if (!didWarnAboutUpdateInRender) {
                  error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
            }
          }
        }
      }
      var IsThisRendererActing = {
        current: false
      };
      function warnIfNotScopedWithMatchingAct(fiber) {
        {
          if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error2("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        {
          if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            error2("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
          }
        }
      }
      function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        {
          if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
      var didWarnAboutUnmockedScheduler = false;
      function warnIfUnmockedScheduler(fiber) {
        {
          if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
              didWarnAboutUnmockedScheduler = true;
              error2(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
            }
          }
        }
      }
      function computeThreadID(root2, lane) {
        return lane * 1e3 + root2.interactionThreadID;
      }
      function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) {
          spawnedWorkDuringRender = [lane];
        } else {
          spawnedWorkDuringRender.push(lane);
        }
      }
      function scheduleInteractions(root2, lane, interactions) {
        if (interactions.size > 0) {
          var pendingInteractionMap = root2.pendingInteractionMap;
          var pendingInteractions = pendingInteractionMap.get(lane);
          if (pendingInteractions != null) {
            interactions.forEach(function(interaction) {
              if (!pendingInteractions.has(interaction)) {
                interaction.__count++;
              }
              pendingInteractions.add(interaction);
            });
          } else {
            pendingInteractionMap.set(lane, new Set(interactions));
            interactions.forEach(function(interaction) {
              interaction.__count++;
            });
          }
          var subscriber = tracing.__subscriberRef.current;
          if (subscriber !== null) {
            var threadID = computeThreadID(root2, lane);
            subscriber.onWorkScheduled(interactions, threadID);
          }
        }
      }
      function schedulePendingInteractions(root2, lane) {
        scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
      }
      function startWorkOnPendingInteractions(root2, lanes) {
        var interactions = new Set();
        root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
          if (includesSomeLane(lanes, scheduledLane)) {
            scheduledInteractions.forEach(function(interaction) {
              return interactions.add(interaction);
            });
          }
        });
        root2.memoizedInteractions = interactions;
        if (interactions.size > 0) {
          var subscriber = tracing.__subscriberRef.current;
          if (subscriber !== null) {
            var threadID = computeThreadID(root2, lanes);
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error3) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error3;
              });
            }
          }
        }
      }
      function finishPendingInteractions(root2, committedLanes) {
        var remainingLanesAfterCommit = root2.pendingLanes;
        var subscriber;
        try {
          subscriber = tracing.__subscriberRef.current;
          if (subscriber !== null && root2.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(root2, committedLanes);
            subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
          }
        } catch (error3) {
          scheduleCallback(ImmediatePriority$1, function() {
            throw error3;
          });
        } finally {
          var pendingInteractionMap = root2.pendingInteractionMap;
          pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
            if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
              pendingInteractionMap.delete(lane);
              scheduledInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error3) {
                    scheduleCallback(ImmediatePriority$1, function() {
                      throw error3;
                    });
                  }
                }
              });
            }
          });
        }
      }
      function shouldForceFlushFallbacksInDEV() {
        return actingUpdatesScopeDepth > 0;
      }
      var actingUpdatesScopeDepth = 0;
      function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function(handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            if (type !== null && type !== void 0 && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                if (type.displayName !== void 0) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== "function") {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet();
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update2) {
        {
          if (resolveFamily === null) {
            return;
          }
          var staleFamilies = update2.staleFamilies, updatedFamilies = update2.updatedFamilies;
          flushPassiveEffects();
          flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          flushSync(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate, child2 = fiber.child, sibling = fiber.sibling, tag3 = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag3) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== void 0) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag3 === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
          if (child2 !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child2, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = new Set();
          var types = new Set(families.map(function(family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child2 = fiber.child, sibling = fiber.sibling, tag3 = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag3) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child2 !== null) {
              findHostInstancesForMatchingFibersRecursively(child2, types, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node = fiber;
          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === fiber) {
              return foundHostInstances;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      var debugCounter = 1;
      function FiberNode(tag3, pendingProps, key3, mode) {
        this.tag = tag3;
        this.key = key3;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugID = debugCounter++;
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }
      var createFiber = function(tag3, pendingProps, key3, mode) {
        return new FiberNode(tag3, pendingProps, key3, mode);
      };
      function shouldConstruct$1(Component19) {
        var prototype = Component19.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
      }
      function resolveLazyComponentTag(Component19) {
        if (typeof Component19 === "function") {
          return shouldConstruct$1(Component19) ? ClassComponent : FunctionComponent;
        } else if (Component19 !== void 0 && Component19 !== null) {
          var $$typeof = Component19.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        if (workInProgress2 === null) {
          workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
          workInProgress2.elementType = current2.elementType;
          workInProgress2.type = current2.type;
          workInProgress2.stateNode = current2.stateNode;
          {
            workInProgress2._debugID = current2._debugID;
            workInProgress2._debugSource = current2._debugSource;
            workInProgress2._debugOwner = current2._debugOwner;
            workInProgress2._debugHookTypes = current2._debugHookTypes;
          }
          workInProgress2.alternate = current2;
          current2.alternate = workInProgress2;
        } else {
          workInProgress2.pendingProps = pendingProps;
          workInProgress2.type = current2.type;
          workInProgress2.flags = NoFlags;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          {
            workInProgress2.actualDuration = 0;
            workInProgress2.actualStartTime = -1;
          }
        }
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        {
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
          }
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= Placement;
        workInProgress2.nextEffect = null;
        workInProgress2.firstEffect = null;
        workInProgress2.lastEffect = null;
        var current2 = workInProgress2.alternate;
        if (current2 === null) {
          workInProgress2.childLanes = NoLanes;
          workInProgress2.lanes = renderLanes2;
          workInProgress2.child = null;
          workInProgress2.memoizedProps = null;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.dependencies = null;
          workInProgress2.stateNode = null;
          {
            workInProgress2.selfBaseDuration = 0;
            workInProgress2.treeBaseDuration = 0;
          }
        } else {
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag3) {
        var mode;
        if (tag3 === ConcurrentRoot) {
          mode = ConcurrentMode | BlockingMode | StrictMode;
        } else if (tag3 === BlockingRoot) {
          mode = BlockingMode | StrictMode;
        } else {
          mode = NoMode;
        }
        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key3, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === "function") {
          if (shouldConstruct$1(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key3);
              case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key3);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key3);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key3);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key3);
              case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key3);
              case REACT_SCOPE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                    case REACT_BLOCK_TYPE:
                      fiberTag = Block;
                      break getTag;
                  }
                }
                var info2 = "";
                {
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentName(owner.type) : null;
                  if (ownerName) {
                    info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                {
                  {
                    throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info2);
                  }
                }
              }
            }
        }
        var fiber = createFiber(fiberTag, pendingProps, key3, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key3 = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key3, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key3) {
        var fiber = createFiber(Fragment12, elements, key3, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key3) {
        {
          if (typeof pendingProps.id !== "string") {
            error2('Profiler must specify an "id" as a prop');
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key3, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key3) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key3, mode);
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key3) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key3, mode);
        {
          fiber.type = REACT_SUSPENSE_LIST_TYPE;
        }
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key3) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key3, mode);
        {
          fiber.type = REACT_OFFSCREEN_TYPE;
        }
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromLegacyHidden(pendingProps, mode, lanes, key3) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key3, mode);
        {
          fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        }
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        fiber.type = "DELETED";
        return fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target2, source) {
        if (target2 === null) {
          target2 = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target2.tag = source.tag;
        target2.key = source.key;
        target2.elementType = source.elementType;
        target2.type = source.type;
        target2.stateNode = source.stateNode;
        target2.return = source.return;
        target2.child = source.child;
        target2.sibling = source.sibling;
        target2.index = source.index;
        target2.ref = source.ref;
        target2.pendingProps = source.pendingProps;
        target2.memoizedProps = source.memoizedProps;
        target2.updateQueue = source.updateQueue;
        target2.memoizedState = source.memoizedState;
        target2.dependencies = source.dependencies;
        target2.mode = source.mode;
        target2.flags = source.flags;
        target2.nextEffect = source.nextEffect;
        target2.firstEffect = source.firstEffect;
        target2.lastEffect = source.lastEffect;
        target2.lanes = source.lanes;
        target2.childLanes = source.childLanes;
        target2.alternate = source.alternate;
        {
          target2.actualDuration = source.actualDuration;
          target2.actualStartTime = source.actualStartTime;
          target2.selfBaseDuration = source.selfBaseDuration;
          target2.treeBaseDuration = source.treeBaseDuration;
        }
        target2._debugID = source._debugID;
        target2._debugSource = source._debugSource;
        target2._debugOwner = source._debugOwner;
        target2._debugNeedsRemount = source._debugNeedsRemount;
        target2._debugHookTypes = source._debugHookTypes;
        return target2;
      }
      function FiberRootNode(containerInfo, tag3, hydrate3) {
        this.tag = tag3;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate3;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        {
          this.mutableSourceEagerHydrationData = null;
        }
        {
          this.interactionThreadID = tracing.unstable_getThreadID();
          this.memoizedInteractions = new Set();
          this.pendingInteractionMap = new Map();
        }
        {
          switch (tag3) {
            case BlockingRoot:
              this._debugRootType = "createBlockingRoot()";
              break;
            case ConcurrentRoot:
              this._debugRootType = "createRoot()";
              break;
            case LegacyRoot:
              this._debugRootType = "createLegacyRoot()";
              break;
          }
        }
      }
      function createFiberRoot(containerInfo, tag3, hydrate3, hydrationCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag3, hydrate3);
        var uninitializedFiber = createHostRootFiber(tag3);
        root2.current = uninitializedFiber;
        uninitializedFiber.stateNode = root2;
        initializeUpdateQueue(uninitializedFiber);
        return root2;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version2 = getVersion(mutableSource._source);
        if (root2.mutableSourceEagerHydrationData == null) {
          root2.mutableSourceEagerHydrationData = [mutableSource, version2];
        } else {
          root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
        }
      }
      function createPortal(children, containerInfo, implementation) {
        var key3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key3 == null ? null : "" + key3,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get3(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component19 = fiber.type;
          if (isContextProvider(Component19)) {
            return processChildContext(fiber, Component19, parentContext);
          }
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get3(component);
          if (fiber === void 0) {
            if (typeof component.render === "function") {
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            } else {
              {
                {
                  throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                }
              }
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber);
                if (fiber.mode & StrictMode) {
                  error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag3, hydrate3, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag3, hydrate3);
      }
      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var eventTime = requestEventTime();
        {
          if (typeof jest !== "undefined") {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
          }
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }
        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
          }
        }
        var update2 = createUpdate(eventTime, lane);
        update2.payload = {
          element
        };
        callback = callback === void 0 ? null : callback;
        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
          update2.callback = callback;
        }
        enqueueUpdate(current$1, update2);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) {
          markRetryLaneImpl(alternate, retryLane);
        }
      }
      function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var eventTime = requestEventTime();
        var lane = InputDiscreteHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function runWithPriority$2(priority, fn) {
        try {
          setCurrentUpdateLanePriority(priority);
          return fn();
        } finally {
        }
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        if (hostFiber.tag === FundamentalComponent) {
          return hostFiber.stateNode.instance;
        }
        return hostFiber.stateNode;
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index2) {
          var key3 = path[index2];
          var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
          if (index2 + 1 === path.length) {
            if (Array.isArray(updated)) {
              updated.splice(key3, 1);
            } else {
              delete updated[key3];
            }
            return updated;
          }
          updated[key3] = copyWithDeleteImpl(obj[key3], path, index2 + 1);
          return updated;
        };
        var copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        };
        var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
          var oldKey = oldPath[index2];
          var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
          if (index2 + 1 === oldPath.length) {
            var newKey = newPath[index2];
            updated[newKey] = updated[oldKey];
            if (Array.isArray(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
          }
          return updated;
        };
        var copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i = 0; i < newPath.length - 1; i++) {
              if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };
        var copyWithSetImpl = function(obj, path, index2, value) {
          if (index2 >= path.length) {
            return value;
          }
          var key3 = path[index2];
          var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
          updated[key3] = copyWithSetImpl(obj[key3], path, index2 + 1, value);
          return updated;
        };
        var copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };
        var findHook = function(fiber, id2) {
          var currentHook2 = fiber.memoizedState;
          while (currentHook2 !== null && id2 > 0) {
            currentHook2 = currentHook2.next;
            id2--;
          }
          return currentHook2;
        };
        overrideHookState = function(fiber, id2, path, value) {
          var hook2 = findHook(fiber, id2);
          if (hook2 !== null) {
            var newState = copyWithSet(hook2.memoizedState, path, value);
            hook2.memoizedState = newState;
            hook2.baseState = newState;
            fiber.memoizedProps = _assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };
        overrideHookStateDeletePath = function(fiber, id2, path) {
          var hook2 = findHook(fiber, id2);
          if (hook2 !== null) {
            var newState = copyWithDelete(hook2.memoizedState, path);
            hook2.memoizedState = newState;
            hook2.baseState = newState;
            fiber.memoizedProps = _assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };
        overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
          var hook2 = findHook(fiber, id2);
          if (hook2 !== null) {
            var newState = copyWithRename(hook2.memoizedState, oldPath, newPath);
            hook2.memoizedState = newState;
            hook2.baseState = newState;
            fiber.memoizedProps = _assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        scheduleUpdate = function(fiber) {
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools
        });
      }
      function ReactDOMRoot(container, options2) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
      }
      function ReactDOMBlockingRoot(container, tag3, options2) {
        this._internalRoot = createRootImpl(container, tag3, options2);
      }
      ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        {
          if (typeof arguments[1] === "function") {
            error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
          var container = root2.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
              }
            }
          }
        }
        updateContainer(children, root2, null, null);
      };
      ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
        {
          if (typeof arguments[0] === "function") {
            error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
        }
        var root2 = this._internalRoot;
        var container = root2.containerInfo;
        updateContainer(null, root2, null, function() {
          unmarkContainerAsRoot(container);
        });
      };
      function createRootImpl(container, tag3, options2) {
        var hydrate3 = options2 != null && options2.hydrate === true;
        var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
        var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
        var root2 = createContainer(container, tag3, hydrate3);
        markContainerAsRoot(root2.current, container);
        var containerNodeType = container.nodeType;
        {
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
        }
        if (mutableSources) {
          for (var i = 0; i < mutableSources.length; i++) {
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        }
        return root2;
      }
      function createLegacyRoot(container, options2) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
      }
      function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
      var topLevelUpdateWarnings;
      var warnedAboutHydrateAPI = false;
      {
        topLevelUpdateWarnings = function(container) {
          if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
              }
            }
          }
          var isRootRenderedBySomeReact = !!container._reactRootContainer;
          var rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
          if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
            error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
          }
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
          }
        };
      }
      function getReactRootElementInContainer(container) {
        if (!container) {
          return null;
        }
        if (container.nodeType === DOCUMENT_NODE) {
          return container.documentElement;
        } else {
          return container.firstChild;
        }
      }
      function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
      }
      function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
        if (!shouldHydrate) {
          var warned = false;
          var rootSibling;
          while (rootSibling = container.lastChild) {
            {
              if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                warned = true;
                error2("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
              }
            }
            container.removeChild(rootSibling);
          }
        }
        {
          if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
          }
        }
        return createLegacyRoot(container, shouldHydrate ? {
          hydrate: true
        } : void 0);
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        {
          if (callback !== null && typeof callback !== "function") {
            error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        }
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        {
          topLevelUpdateWarnings(container);
          warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
        }
        var root2 = container._reactRootContainer;
        var fiberRoot;
        if (!root2) {
          root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
          fiberRoot = root2._internalRoot;
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(fiberRoot);
              originalCallback.call(instance);
            };
          }
          unbatchedUpdates(function() {
            updateContainer(children, fiberRoot, parentComponent, callback);
          });
        } else {
          fiberRoot = root2._internalRoot;
          if (typeof callback === "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(fiberRoot);
              _originalCallback.call(instance);
            };
          }
          updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
      }
      function findDOMNode2(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) {
              error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
            }
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }
        {
          return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
        }
      }
      function hydrate2(element, container, callback) {
        if (!isValidContainer(container)) {
          {
            throw Error("Target container is not a DOM element.");
          }
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      }
      function render3(element, container, callback) {
        if (!isValidContainer(container)) {
          {
            throw Error("Target container is not a DOM element.");
          }
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) {
          {
            throw Error("Target container is not a DOM element.");
          }
        }
        if (!(parentComponent != null && has2(parentComponent))) {
          {
            throw Error("parentComponent must be a valid React Component");
          }
        }
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      }
      function unmountComponentAtNode2(container) {
        if (!isValidContainer(container)) {
          {
            throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
          }
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) {
              error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            }
          }
          unbatchedUpdates(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
              container._reactRootContainer = null;
              unmarkContainerAsRoot(container);
            });
          });
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) {
              error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            }
          }
          return false;
        }
      }
      setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
      setAttemptContinuousHydration(attemptContinuousHydration$1);
      setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
      setAttemptHydrationAtPriority(runWithPriority$2);
      var didWarnAboutUnstableCreatePortal = false;
      {
        if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
          error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
      }
      setRestoreImplementation(restoreControlledState$3);
      setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
      function createPortal$1(children, container) {
        var key3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!isValidContainer(container)) {
          {
            throw Error("Target container is not a DOM element.");
          }
        }
        return createPortal(children, container, null, key3);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      function unstable_createPortal(children, container) {
        var key3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        {
          if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
          }
        }
        return createPortal$1(children, container, key3);
      }
      var Internals = {
        Events: [
          getInstanceFromNode,
          getNodeFromInstance,
          getFiberCurrentPropsFromNode,
          enqueueStateRestore,
          restoreStateIfNeeded,
          flushPassiveEffects,
          IsThisRendererActing
        ]
      };
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      {
        if (!foundDevTools && canUseDOM19 && window.top === window.self) {
          if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol2 = window.location.protocol;
            if (/^(https?|file):$/.test(protocol2)) {
              console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol2 === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
            }
          }
        }
      }
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      exports.createPortal = createPortal$1;
      exports.findDOMNode = findDOMNode2;
      exports.flushSync = flushSync;
      exports.hydrate = hydrate2;
      exports.render = render3;
      exports.unmountComponentAtNode = unmountComponentAtNode2;
      exports.unstable_batchedUpdates = batchedUpdates$1;
      exports.unstable_createPortal = unstable_createPortal;
      exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
      exports.version = ReactVersion;
    })();
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS((exports, module) => {
  "use strict";
  if (false) {
    checkDCE();
    module.exports = null;
  } else {
    module.exports = require_react_dom_development();
  }
});

// node_modules/react-native-web/node_modules/fbjs/lib/performance.js
var require_performance = __commonJS((exports, module) => {
  "use strict";
  var ExecutionEnvironment2 = require_ExecutionEnvironment();
  var performance2;
  if (ExecutionEnvironment2.canUseDOM) {
    performance2 = window.performance || window.msPerformance || window.webkitPerformance;
  }
  module.exports = performance2 || {};
});

// node_modules/react-native-web/node_modules/fbjs/lib/performanceNow.js
var require_performanceNow = __commonJS((exports, module) => {
  "use strict";
  var performance2 = require_performance();
  var loadTime = Date.now();
  module.exports = performance2.now ? function() {
    return performance2.now();
  } : function() {
    return Date.now() - loadTime;
  };
});

// node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS((exports) => {
  /** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType2(type) {
        return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment12 = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal2 = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      exports.AsyncMode = AsyncMode;
      exports.ConcurrentMode = ConcurrentMode;
      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment12;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal2;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
      exports.isValidElementType = isValidElementType2;
      exports.typeOf = typeOf;
    })();
  }
});

// node_modules/prop-types/node_modules/react-is/index.js
var require_react_is = __commonJS((exports, module) => {
  "use strict";
  if (false) {
    module.exports = null;
  } else {
    module.exports = require_react_is_development();
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS((exports, module) => {
  "use strict";
  var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  module.exports = ReactPropTypesSecret;
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS((exports, module) => {
  "use strict";
  var printWarning = function() {
  };
  if (true) {
    ReactPropTypesSecret = require_ReactPropTypesSecret();
    loggedTypeFailures = {};
    has2 = Function.call.bind(Object.prototype.hasOwnProperty);
    printWarning = function(text2) {
      var message2 = "Warning: " + text2;
      if (typeof console !== "undefined") {
        console.error(message2);
      }
      try {
        throw new Error(message2);
      } catch (x) {
      }
    };
  }
  var ReactPropTypesSecret;
  var loggedTypeFailures;
  var has2;
  function checkPropTypes(typeSpecs, values, location2, componentName, getStack) {
    if (true) {
      for (var typeSpecName in typeSpecs) {
        if (has2(typeSpecs, typeSpecName)) {
          var error2;
          try {
            if (typeof typeSpecs[typeSpecName] !== "function") {
              var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
              err.name = "Invariant Violation";
              throw err;
            }
            error2 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
          } catch (ex) {
            error2 = ex;
          }
          if (error2 && !(error2 instanceof Error)) {
            printWarning((componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
          }
          if (error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
            loggedTypeFailures[error2.message] = true;
            var stack = getStack ? getStack() : "";
            printWarning("Failed " + location2 + " type: " + error2.message + (stack != null ? stack : ""));
          }
        }
      }
    }
  }
  checkPropTypes.resetWarningCache = function() {
    if (true) {
      loggedTypeFailures = {};
    }
  };
  module.exports = checkPropTypes;
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS((exports, module) => {
  "use strict";
  var ReactIs = require_react_is();
  var assign = require_object_assign();
  var ReactPropTypesSecret = require_ReactPropTypesSecret();
  var checkPropTypes = require_checkPropTypes();
  var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
  var printWarning = function() {
  };
  if (true) {
    printWarning = function(text2) {
      var message2 = "Warning: " + text2;
      if (typeof console !== "undefined") {
        console.error(message2);
      }
      try {
        throw new Error(message2);
      } catch (x) {
      }
    };
  }
  function emptyFunctionThatReturnsNull() {
    return null;
  }
  module.exports = function(isValidElement11, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === "function") {
        return iteratorFn;
      }
    }
    var ANONYMOUS = "<<anonymous>>";
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker("array"),
      bool: createPrimitiveTypeChecker("boolean"),
      func: createPrimitiveTypeChecker("function"),
      number: createPrimitiveTypeChecker("number"),
      object: createPrimitiveTypeChecker("object"),
      string: createPrimitiveTypeChecker("string"),
      symbol: createPrimitiveTypeChecker("symbol"),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };
    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function PropTypeError(message2) {
      this.message = message2;
      this.stack = "";
    }
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate2) {
      if (true) {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;
        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
            err.name = "Invariant Violation";
            throw err;
          } else if (typeof console !== "undefined") {
            var cacheKey = componentName + ":" + propName;
            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
              printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
            }
            return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
          }
          return null;
        } else {
          return validate2(props, propName, componentName, location2, propFullName);
        }
      }
      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
      function validate2(props, propName, componentName, location2, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
        }
        return null;
      }
      return createChainableTypeChecker(validate2);
    }
    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
      function validate2(props, propName, componentName, location2, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error2 = typeChecker(propValue, i, componentName, location2, propFullName + "[" + i + "]", ReactPropTypesSecret);
          if (error2 instanceof Error) {
            return error2;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate2);
    }
    function createElementTypeChecker() {
      function validate2(props, propName, componentName, location2, propFullName) {
        var propValue = props[propName];
        if (!isValidElement11(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
        }
        return null;
      }
      return createChainableTypeChecker(validate2);
    }
    function createElementTypeTypeChecker() {
      function validate2(props, propName, componentName, location2, propFullName) {
        var propValue = props[propName];
        if (!ReactIs.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
        }
        return null;
      }
      return createChainableTypeChecker(validate2);
    }
    function createInstanceTypeChecker(expectedClass) {
      function validate2(props, propName, componentName, location2, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
        }
        return null;
      }
      return createChainableTypeChecker(validate2);
    }
    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        if (true) {
          if (arguments.length > 1) {
            printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
          } else {
            printWarning("Invalid argument supplied to oneOf, expected an array.");
          }
        }
        return emptyFunctionThatReturnsNull;
      }
      function validate2(props, propName, componentName, location2, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }
        var valuesString = JSON.stringify(expectedValues, function replacer(key3, value) {
          var type = getPreciseType(value);
          if (type === "symbol") {
            return String(value);
          }
          return value;
        });
        return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
      }
      return createChainableTypeChecker(validate2);
    }
    function createObjectOfTypeChecker(typeChecker) {
      function validate2(props, propName, componentName, location2, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
        }
        for (var key3 in propValue) {
          if (has2(propValue, key3)) {
            var error2 = typeChecker(propValue, key3, componentName, location2, propFullName + "." + key3, ReactPropTypesSecret);
            if (error2 instanceof Error) {
              return error2;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate2);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
        return emptyFunctionThatReturnsNull;
      }
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== "function") {
          printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
          return emptyFunctionThatReturnsNull;
        }
      }
      function validate2(props, propName, componentName, location2, propFullName) {
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker2 = arrayOfTypeCheckers[i2];
          if (checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret) == null) {
            return null;
          }
        }
        return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
      }
      return createChainableTypeChecker(validate2);
    }
    function createNodeChecker() {
      function validate2(props, propName, componentName, location2, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
        }
        return null;
      }
      return createChainableTypeChecker(validate2);
    }
    function createShapeTypeChecker(shapeTypes) {
      function validate2(props, propName, componentName, location2, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        for (var key3 in shapeTypes) {
          var checker = shapeTypes[key3];
          if (!checker) {
            continue;
          }
          var error2 = checker(propValue, key3, componentName, location2, propFullName + "." + key3, ReactPropTypesSecret);
          if (error2) {
            return error2;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate2);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
      function validate2(props, propName, componentName, location2, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        var allKeys = assign({}, props[propName], shapeTypes);
        for (var key3 in allKeys) {
          var checker = shapeTypes[key3];
          if (!checker) {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` key `" + key3 + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
          }
          var error2 = checker(propValue, key3, componentName, location2, propFullName + "." + key3, ReactPropTypesSecret);
          if (error2) {
            return error2;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate2);
    }
    function isNode(propValue) {
      switch (typeof propValue) {
        case "number":
        case "string":
        case "undefined":
          return true;
        case "boolean":
          return !propValue;
        case "object":
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement11(propValue)) {
            return true;
          }
          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }
          return true;
        default:
          return false;
      }
    }
    function isSymbol(propType, propValue) {
      if (propType === "symbol") {
        return true;
      }
      if (!propValue) {
        return false;
      }
      if (propValue["@@toStringTag"] === "Symbol") {
        return true;
      }
      if (typeof Symbol === "function" && propValue instanceof Symbol) {
        return true;
      }
      return false;
    }
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return "array";
      }
      if (propValue instanceof RegExp) {
        return "object";
      }
      if (isSymbol(propType, propValue)) {
        return "symbol";
      }
      return propType;
    }
    function getPreciseType(propValue) {
      if (typeof propValue === "undefined" || propValue === null) {
        return "" + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === "object") {
        if (propValue instanceof Date) {
          return "date";
        } else if (propValue instanceof RegExp) {
          return "regexp";
        }
      }
      return propType;
    }
    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);
      switch (type) {
        case "array":
        case "object":
          return "an " + type;
        case "boolean":
        case "date":
        case "regexp":
          return "a " + type;
        default:
          return type;
      }
    }
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS((exports, module) => {
  if (true) {
    ReactIs = require_react_is();
    throwOnDirectAccess = true;
    module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
  } else {
    module.exports = null();
  }
  var ReactIs;
  var throwOnDirectAccess;
});

// node_modules/create-react-class/factory.js
var require_factory = __commonJS((exports, module) => {
  "use strict";
  var _assign = require_object_assign();
  var emptyObject16 = {};
  if (true) {
    Object.freeze(emptyObject16);
  }
  var validateFormat = function validateFormat2(format) {
  };
  if (true) {
    validateFormat = function validateFormat2(format) {
      if (format === void 0) {
        throw new Error("invariant requires an error message argument");
      }
    };
  }
  function _invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);
    if (!condition) {
      var error2;
      if (format === void 0) {
        error2 = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error2 = new Error(format.replace(/%s/g, function() {
          return args[argIndex++];
        }));
        error2.name = "Invariant Violation";
      }
      error2.framesToPop = 1;
      throw error2;
    }
  }
  var warning6 = function() {
  };
  if (true) {
    printWarning = function printWarning2(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var argIndex = 0;
      var message2 = "Warning: " + format.replace(/%s/g, function() {
        return args[argIndex++];
      });
      if (typeof console !== "undefined") {
        console.error(message2);
      }
      try {
        throw new Error(message2);
      } catch (x) {
      }
    };
    warning6 = function warning7(condition, format) {
      if (format === void 0) {
        throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
      }
      if (format.indexOf("Failed Composite propType: ") === 0) {
        return;
      }
      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }
        printWarning.apply(void 0, [format].concat(args));
      }
    };
  }
  var printWarning;
  var MIXINS_KEY = "mixins";
  function identity(fn) {
    return fn;
  }
  var ReactPropTypeLocationNames;
  if (true) {
    ReactPropTypeLocationNames = {
      prop: "prop",
      context: "context",
      childContext: "child context"
    };
  } else {
    ReactPropTypeLocationNames = {};
  }
  function factory2(ReactComponent, isValidElement11, ReactNoopUpdateQueue) {
    var injectedMixins = [];
    var ReactClassInterface = {
      mixins: "DEFINE_MANY",
      statics: "DEFINE_MANY",
      propTypes: "DEFINE_MANY",
      contextTypes: "DEFINE_MANY",
      childContextTypes: "DEFINE_MANY",
      getDefaultProps: "DEFINE_MANY_MERGED",
      getInitialState: "DEFINE_MANY_MERGED",
      getChildContext: "DEFINE_MANY_MERGED",
      render: "DEFINE_ONCE",
      componentWillMount: "DEFINE_MANY",
      componentDidMount: "DEFINE_MANY",
      componentWillReceiveProps: "DEFINE_MANY",
      shouldComponentUpdate: "DEFINE_ONCE",
      componentWillUpdate: "DEFINE_MANY",
      componentDidUpdate: "DEFINE_MANY",
      componentWillUnmount: "DEFINE_MANY",
      UNSAFE_componentWillMount: "DEFINE_MANY",
      UNSAFE_componentWillReceiveProps: "DEFINE_MANY",
      UNSAFE_componentWillUpdate: "DEFINE_MANY",
      updateComponent: "OVERRIDE_BASE"
    };
    var ReactClassStaticInterface = {
      getDerivedStateFromProps: "DEFINE_MANY_MERGED"
    };
    var RESERVED_SPEC_KEYS = {
      displayName: function(Constructor, displayName) {
        Constructor.displayName = displayName;
      },
      mixins: function(Constructor, mixins) {
        if (mixins) {
          for (var i = 0; i < mixins.length; i++) {
            mixSpecIntoComponent(Constructor, mixins[i]);
          }
        }
      },
      childContextTypes: function(Constructor, childContextTypes) {
        if (true) {
          validateTypeDef(Constructor, childContextTypes, "childContext");
        }
        Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
      },
      contextTypes: function(Constructor, contextTypes) {
        if (true) {
          validateTypeDef(Constructor, contextTypes, "context");
        }
        Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
      },
      getDefaultProps: function(Constructor, getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
        } else {
          Constructor.getDefaultProps = getDefaultProps;
        }
      },
      propTypes: function(Constructor, propTypes) {
        if (true) {
          validateTypeDef(Constructor, propTypes, "prop");
        }
        Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
      },
      statics: function(Constructor, statics) {
        mixStaticSpecIntoComponent(Constructor, statics);
      },
      autobind: function() {
      }
    };
    function validateTypeDef(Constructor, typeDef, location2) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {
          if (true) {
            warning6(typeof typeDef[propName] === "function", "%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.", Constructor.displayName || "ReactClass", ReactPropTypeLocationNames[location2], propName);
          }
        }
      }
    }
    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
      if (ReactClassMixin.hasOwnProperty(name)) {
        _invariant(specPolicy === "OVERRIDE_BASE", "ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.", name);
      }
      if (isAlreadyDefined) {
        _invariant(specPolicy === "DEFINE_MANY" || specPolicy === "DEFINE_MANY_MERGED", "ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);
      }
    }
    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        if (true) {
          var typeofSpec = typeof spec;
          var isMixinValid = typeofSpec === "object" && spec !== null;
          if (true) {
            warning6(isMixinValid, "%s: You're attempting to include a mixin that is either null or not an object. Check the mixins included by the component, as well as any mixins they include themselves. Expected object but got %s.", Constructor.displayName || "ReactClass", spec === null ? null : typeofSpec);
          }
        }
        return;
      }
      _invariant(typeof spec !== "function", "ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object.");
      _invariant(!isValidElement11(spec), "ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");
      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;
      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }
      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }
        if (name === MIXINS_KEY) {
          continue;
        }
        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);
        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction3 = typeof property === "function";
          var shouldAutoBind = isFunction3 && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];
              _invariant(isReactClassMethod && (specPolicy === "DEFINE_MANY_MERGED" || specPolicy === "DEFINE_MANY"), "ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.", specPolicy, name);
              if (specPolicy === "DEFINE_MANY_MERGED") {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === "DEFINE_MANY") {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;
              if (true) {
                if (typeof property === "function" && spec.displayName) {
                  proto[name].displayName = spec.displayName + "_" + name;
                }
              }
            }
          }
        }
      }
    }
    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }
      for (var name in statics) {
        var property = statics[name];
        if (!statics.hasOwnProperty(name)) {
          continue;
        }
        var isReserved = name in RESERVED_SPEC_KEYS;
        _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name);
        var isAlreadyDefined = name in Constructor;
        if (isAlreadyDefined) {
          var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;
          _invariant(specPolicy === "DEFINE_MANY_MERGED", "ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);
          Constructor[name] = createMergedResultFunction(Constructor[name], property);
          return;
        }
        Constructor[name] = property;
      }
    }
    function mergeIntoWithNoDuplicateKeys(one, two) {
      _invariant(one && two && typeof one === "object" && typeof two === "object", "mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.");
      for (var key3 in two) {
        if (two.hasOwnProperty(key3)) {
          _invariant(one[key3] === void 0, "mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.", key3);
          one[key3] = two[key3];
        }
      }
      return one;
    }
    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);
        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }
        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }
    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }
    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);
      if (true) {
        boundMethod.__reactBoundContext = component;
        boundMethod.__reactBoundMethod = method;
        boundMethod.__reactBoundArguments = null;
        var componentName = component.constructor.displayName;
        var _bind = boundMethod.bind;
        boundMethod.bind = function(newThis) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          if (newThis !== component && newThis !== null) {
            if (true) {
              warning6(false, "bind(): React component methods may only be bound to the component instance. See %s", componentName);
            }
          } else if (!args.length) {
            if (true) {
              warning6(false, "bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s", componentName);
            }
            return boundMethod;
          }
          var reboundMethod = _bind.apply(boundMethod, arguments);
          reboundMethod.__reactBoundContext = component;
          reboundMethod.__reactBoundMethod = method;
          reboundMethod.__reactBoundArguments = args;
          return reboundMethod;
        };
      }
      return boundMethod;
    }
    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;
      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }
    var IsMountedPreMixin = {
      componentDidMount: function() {
        this.__isMounted = true;
      }
    };
    var IsMountedPostMixin = {
      componentWillUnmount: function() {
        this.__isMounted = false;
      }
    };
    var ReactClassMixin = {
      replaceState: function(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
      isMounted: function() {
        if (true) {
          warning6(this.__didWarnIsMounted, "%s: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.", this.constructor && this.constructor.displayName || this.name || "Component");
          this.__didWarnIsMounted = true;
        }
        return !!this.__isMounted;
      }
    };
    var ReactClassComponent = function() {
    };
    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
    function createClass(spec) {
      var Constructor = identity(function(props, context, updater) {
        if (true) {
          warning6(this instanceof Constructor, "Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory");
        }
        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }
        this.props = props;
        this.context = context;
        this.refs = emptyObject16;
        this.updater = updater || ReactNoopUpdateQueue;
        this.state = null;
        var initialState2 = this.getInitialState ? this.getInitialState() : null;
        if (true) {
          if (initialState2 === void 0 && this.getInitialState._isMockFunction) {
            initialState2 = null;
          }
        }
        _invariant(typeof initialState2 === "object" && !Array.isArray(initialState2), "%s.getInitialState(): must return an object or null", Constructor.displayName || "ReactCompositeComponent");
        this.state = initialState2;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);
      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }
      if (true) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps.isReactClassApproved = {};
        }
        if (Constructor.prototype.getInitialState) {
          Constructor.prototype.getInitialState.isReactClassApproved = {};
        }
      }
      _invariant(Constructor.prototype.render, "createClass(...): Class specification must implement a `render` method.");
      if (true) {
        warning6(!Constructor.prototype.componentShouldUpdate, "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", spec.displayName || "A component");
        warning6(!Constructor.prototype.componentWillRecieveProps, "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", spec.displayName || "A component");
        warning6(!Constructor.prototype.UNSAFE_componentWillRecieveProps, "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", spec.displayName || "A component");
      }
      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }
      return Constructor;
    }
    return createClass;
  }
  module.exports = factory2;
});

// node_modules/create-react-class/index.js
var require_create_react_class = __commonJS((exports, module) => {
  "use strict";
  var React284 = require_react();
  var factory2 = require_factory();
  if (typeof React284 === "undefined") {
    throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");
  }
  var ReactNoopUpdateQueue = new React284.Component().updater;
  module.exports = factory2(React284.Component, React284.isValidElement, ReactNoopUpdateQueue);
});

// node_modules/fbjs/lib/ExecutionEnvironment.js
var require_ExecutionEnvironment2 = __commonJS((exports, module) => {
  "use strict";
  var canUseDOM19 = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  var ExecutionEnvironment2 = {
    canUseDOM: canUseDOM19,
    canUseWorkers: typeof Worker !== "undefined",
    canUseEventListeners: canUseDOM19 && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM19 && !!window.screen,
    isInWorker: !canUseDOM19
  };
  module.exports = ExecutionEnvironment2;
});

// node_modules/deepmerge/dist/umd.js
var require_umd = __commonJS((exports, module) => {
  (function(global2, factory2) {
    typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory2() : typeof define === "function" && define.amd ? define(factory2) : (global2 = global2 || self, global2.deepmerge = factory2());
  })(exports, function() {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val2) {
      return Array.isArray(val2) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target2, source, options) {
      return target2.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key3, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key3);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target2) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target2).filter(function(symbol) {
        return target2.propertyIsEnumerable(symbol);
      }) : [];
    }
    function getKeys(target2) {
      return Object.keys(target2).concat(getEnumerableOwnPropertySymbols(target2));
    }
    function mergeObject(target2, source, options) {
      var destination = {};
      if (options.isMergeableObject(target2)) {
        getKeys(target2).forEach(function(key3) {
          destination[key3] = cloneUnlessOtherwiseSpecified(target2[key3], options);
        });
      }
      getKeys(source).forEach(function(key3) {
        if (!options.isMergeableObject(source[key3]) || !target2[key3]) {
          destination[key3] = cloneUnlessOtherwiseSpecified(source[key3], options);
        } else {
          destination[key3] = getMergeFunction(key3, options)(target2[key3], source[key3], options);
        }
      });
      return destination;
    }
    function deepmerge(target2, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target2);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target2, source, options);
      } else {
        return mergeObject(target2, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    return deepmerge_1;
  });
});

// node_modules/@callstack/react-theme-provider/lib/createThemeProvider.js
var require_createThemeProvider = __commonJS((exports) => {
  "use strict";
  exports.__esModule = true;
  exports.default = void 0;
  var React284 = _interopRequireWildcard(require_react());
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key3 in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key3)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key3) : {};
            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key3, desc);
            } else {
              newObj[key3] = obj[key3];
            }
          }
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _inheritsLoose28(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  function _defineProperty61(obj, key3, value) {
    if (key3 in obj) {
      Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
    } else {
      obj[key3] = value;
    }
    return obj;
  }
  function createThemeProvider(defaultTheme, ThemeContext3) {
    var _class, _temp;
    return _temp = _class = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose28(ThemeProvider4, _React$Component);
      function ThemeProvider4() {
        return _React$Component.apply(this, arguments) || this;
      }
      var _proto = ThemeProvider4.prototype;
      _proto.render = function render3() {
        return React284.createElement(ThemeContext3.Provider, {
          value: this.props.theme
        }, this.props.children);
      };
      return ThemeProvider4;
    }(React284.Component), _defineProperty61(_class, "defaultProps", {
      theme: defaultTheme
    }), _temp;
  }
  var _default = createThemeProvider;
  exports.default = _default;
});

// node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development2 = __commonJS((exports) => {
  /** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType2(type) {
        return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment12 = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal2 = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      exports.AsyncMode = AsyncMode;
      exports.ConcurrentMode = ConcurrentMode;
      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment12;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal2;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
      exports.isValidElementType = isValidElementType2;
      exports.typeOf = typeOf;
    })();
  }
});

// node_modules/hoist-non-react-statics/node_modules/react-is/index.js
var require_react_is2 = __commonJS((exports, module) => {
  "use strict";
  if (false) {
    module.exports = null;
  } else {
    module.exports = require_react_is_development2();
  }
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS((exports, module) => {
  "use strict";
  var reactIs = require_react_is2();
  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    $$typeof: true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    $$typeof: true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
  TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
  function getStatics(component) {
    if (reactIs.isMemo(component)) {
      return MEMO_STATICS;
    }
    return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
  }
  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;
  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== "string") {
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);
        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }
      var keys = getOwnPropertyNames(sourceComponent);
      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }
      var targetStatics = getStatics(targetComponent);
      var sourceStatics = getStatics(sourceComponent);
      for (var i = 0; i < keys.length; ++i) {
        var key3 = keys[i];
        if (!KNOWN_STATICS[key3] && !(blacklist && blacklist[key3]) && !(sourceStatics && sourceStatics[key3]) && !(targetStatics && targetStatics[key3])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key3);
          try {
            defineProperty(targetComponent, key3, descriptor);
          } catch (e) {
          }
        }
      }
    }
    return targetComponent;
  }
  module.exports = hoistNonReactStatics;
});

// node_modules/@callstack/react-theme-provider/lib/createWithTheme.js
var require_createWithTheme = __commonJS((exports) => {
  "use strict";
  exports.__esModule = true;
  exports.default = void 0;
  var React284 = _interopRequireWildcard(require_react());
  var _deepmerge = _interopRequireDefault(require_umd());
  var _hoistNonReactStatics = _interopRequireDefault(require_hoist_non_react_statics_cjs());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key3 in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key3)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key3) : {};
            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key3, desc);
            } else {
              newObj[key3] = obj[key3];
            }
          }
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _extends99() {
    _extends99 = Object.assign || function(target2) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key3 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key3)) {
            target2[key3] = source[key3];
          }
        }
      }
      return target2;
    };
    return _extends99.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose19(source, excluded) {
    if (source == null)
      return {};
    var target2 = {};
    var sourceKeys = Object.keys(source);
    var key3, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key3 = sourceKeys[i];
      if (excluded.indexOf(key3) >= 0)
        continue;
      target2[key3] = source[key3];
    }
    return target2;
  }
  function _assertThisInitialized3(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _inheritsLoose28(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  function _defineProperty61(obj, key3, value) {
    if (key3 in obj) {
      Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
    } else {
      obj[key3] = value;
    }
    return obj;
  }
  var createWithTheme = function createWithTheme2(ThemeProvider4, ThemeContext3) {
    return function withTheme2(Comp) {
      var ThemedComponent = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose28(ThemedComponent2, _React$Component);
        function ThemedComponent2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
          _defineProperty61(_assertThisInitialized3(_this), "_previous", void 0);
          _defineProperty61(_assertThisInitialized3(_this), "_merge", function(a, b) {
            var previous = _this._previous;
            if (previous && previous.a === a && previous.b === b) {
              return previous.result;
            }
            var result = a && b && a !== b ? (0, _deepmerge.default)(a, b) : a || b;
            _this._previous = {
              a,
              b,
              result
            };
            return result;
          });
          return _this;
        }
        var _proto = ThemedComponent2.prototype;
        _proto.render = function render3() {
          var _this2 = this;
          var _this$props = this.props, _reactThemeProviderForwardedRef = _this$props._reactThemeProviderForwardedRef, rest = _objectWithoutPropertiesLoose19(_this$props, ["_reactThemeProviderForwardedRef"]);
          return React284.createElement(ThemeContext3.Consumer, null, function(theme2) {
            return React284.createElement(Comp, _extends99({}, rest, {
              theme: _this2._merge(theme2, rest.theme),
              ref: _reactThemeProviderForwardedRef
            }));
          });
        };
        return ThemedComponent2;
      }(React284.Component);
      var ResultComponent = React284.forwardRef(function(props, ref) {
        return React284.createElement(ThemedComponent, _extends99({}, props, {
          _reactThemeProviderForwardedRef: ref
        }));
      });
      ResultComponent.displayName = "withTheme(" + (Comp.displayName || Comp.name) + ")";
      (0, _hoistNonReactStatics.default)(ResultComponent, Comp);
      return ResultComponent;
    };
  };
  var _default = createWithTheme;
  exports.default = _default;
});

// node_modules/@callstack/react-theme-provider/lib/createTheming.js
var require_createTheming = __commonJS((exports) => {
  "use strict";
  exports.__esModule = true;
  exports.default = createTheming2;
  var React284 = _interopRequireWildcard(require_react());
  var _deepmerge = _interopRequireDefault(require_umd());
  var _createThemeProvider = _interopRequireDefault(require_createThemeProvider());
  var _createWithTheme = _interopRequireDefault(require_createWithTheme());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key3 in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key3)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key3) : {};
            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key3, desc);
            } else {
              newObj[key3] = obj[key3];
            }
          }
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function createTheming2(defaultTheme) {
    var ThemeContext3 = React284.createContext(defaultTheme);
    var ThemeProvider4 = (0, _createThemeProvider.default)(defaultTheme, ThemeContext3);
    var withTheme2 = (0, _createWithTheme.default)(ThemeProvider4, ThemeContext3);
    var useTheme3 = function useTheme4(overrides) {
      var theme2 = React284.useContext(ThemeContext3);
      var result = React284.useMemo(function() {
        return theme2 && overrides ? (0, _deepmerge.default)(theme2, overrides) : theme2 || overrides;
      }, [theme2, overrides]);
      return result;
    };
    return {
      ThemeContext: ThemeContext3,
      ThemeProvider: ThemeProvider4,
      withTheme: withTheme2,
      useTheme: useTheme3
    };
  }
});

// node_modules/@callstack/react-theme-provider/lib/index.js
var require_lib = __commonJS((exports) => {
  "use strict";
  exports.__esModule = true;
  var _createTheming = _interopRequireDefault(require_createTheming());
  exports.createTheming = _createTheming.default;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
});

// node_modules/color-name/index.js
var require_color_name = __commonJS((exports, module) => {
  "use strict";
  module.exports = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 134, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 250, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 221],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [112, 128, 144],
    slategrey: [112, 128, 144],
    snow: [255, 250, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 50]
  };
});

// node_modules/simple-swizzle/node_modules/is-arrayish/index.js
var require_is_arrayish = __commonJS((exports, module) => {
  module.exports = function isArrayish(obj) {
    if (!obj || typeof obj === "string") {
      return false;
    }
    return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
  };
});

// node_modules/simple-swizzle/index.js
var require_simple_swizzle = __commonJS((exports, module) => {
  "use strict";
  var isArrayish = require_is_arrayish();
  var concat = Array.prototype.concat;
  var slice2 = Array.prototype.slice;
  var swizzle = module.exports = function swizzle2(args) {
    var results = [];
    for (var i = 0, len = args.length; i < len; i++) {
      var arg = args[i];
      if (isArrayish(arg)) {
        results = concat.call(results, slice2.call(arg));
      } else {
        results.push(arg);
      }
    }
    return results;
  };
  swizzle.wrap = function(fn) {
    return function() {
      return fn(swizzle(arguments));
    };
  };
});

// node_modules/color-string/index.js
var require_color_string = __commonJS((exports, module) => {
  var colorNames = require_color_name();
  var swizzle = require_simple_swizzle();
  var reverseNames = {};
  for (var name in colorNames) {
    if (colorNames.hasOwnProperty(name)) {
      reverseNames[colorNames[name]] = name;
    }
  }
  var cs = module.exports = {
    to: {},
    get: {}
  };
  cs.get = function(string) {
    var prefix2 = string.substring(0, 3).toLowerCase();
    var val2;
    var model;
    switch (prefix2) {
      case "hsl":
        val2 = cs.get.hsl(string);
        model = "hsl";
        break;
      case "hwb":
        val2 = cs.get.hwb(string);
        model = "hwb";
        break;
      default:
        val2 = cs.get.rgb(string);
        model = "rgb";
        break;
    }
    if (!val2) {
      return null;
    }
    return {model, value: val2};
  };
  cs.get.rgb = function(string) {
    if (!string) {
      return null;
    }
    var abbr = /^#([a-f0-9]{3,4})$/i;
    var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
    var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var keyword = /(\D+)/;
    var rgb = [0, 0, 0, 1];
    var match;
    var i;
    var hexAlpha;
    if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];
      for (i = 0; i < 3; i++) {
        var i2 = i * 2;
        rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
      }
      if (hexAlpha) {
        rgb[3] = parseInt(hexAlpha, 16) / 255;
      }
    } else if (match = string.match(abbr)) {
      match = match[1];
      hexAlpha = match[3];
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i] + match[i], 16);
      }
      if (hexAlpha) {
        rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
      }
    } else if (match = string.match(rgba)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i + 1], 0);
      }
      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(per)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }
      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(keyword)) {
      if (match[1] === "transparent") {
        return [0, 0, 0, 0];
      }
      rgb = colorNames[match[1]];
      if (!rgb) {
        return null;
      }
      rgb[3] = 1;
      return rgb;
    } else {
      return null;
    }
    for (i = 0; i < 3; i++) {
      rgb[i] = clamp(rgb[i], 0, 255);
    }
    rgb[3] = clamp(rgb[3], 0, 1);
    return rgb;
  };
  cs.get.hsl = function(string) {
    if (!string) {
      return null;
    }
    var hsl = /^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var match = string.match(hsl);
    if (match) {
      var alpha2 = parseFloat(match[4]);
      var h = (parseFloat(match[1]) + 360) % 360;
      var s = clamp(parseFloat(match[2]), 0, 100);
      var l = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha2) ? 1 : alpha2, 0, 1);
      return [h, s, l, a];
    }
    return null;
  };
  cs.get.hwb = function(string) {
    if (!string) {
      return null;
    }
    var hwb = /^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var match = string.match(hwb);
    if (match) {
      var alpha2 = parseFloat(match[4]);
      var h = (parseFloat(match[1]) % 360 + 360) % 360;
      var w2 = clamp(parseFloat(match[2]), 0, 100);
      var b = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha2) ? 1 : alpha2, 0, 1);
      return [h, w2, b, a];
    }
    return null;
  };
  cs.to.hex = function() {
    var rgba = swizzle(arguments);
    return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
  };
  cs.to.rgb = function() {
    var rgba = swizzle(arguments);
    return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
  };
  cs.to.rgb.percent = function() {
    var rgba = swizzle(arguments);
    var r = Math.round(rgba[0] / 255 * 100);
    var g = Math.round(rgba[1] / 255 * 100);
    var b = Math.round(rgba[2] / 255 * 100);
    return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g + "%, " + b + "%)" : "rgba(" + r + "%, " + g + "%, " + b + "%, " + rgba[3] + ")";
  };
  cs.to.hsl = function() {
    var hsla = swizzle(arguments);
    return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
  };
  cs.to.hwb = function() {
    var hwba = swizzle(arguments);
    var a = "";
    if (hwba.length >= 4 && hwba[3] !== 1) {
      a = ", " + hwba[3];
    }
    return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
  };
  cs.to.keyword = function(rgb) {
    return reverseNames[rgb.slice(0, 3)];
  };
  function clamp(num, min3, max3) {
    return Math.min(Math.max(min3, num), max3);
  }
  function hexDouble(num) {
    var str = num.toString(16).toUpperCase();
    return str.length < 2 ? "0" + str : str;
  }
});

// node_modules/color-convert/conversions.js
var require_conversions = __commonJS((exports, module) => {
  var cssKeywords = require_color_name();
  var reverseKeywords = {};
  for (var key3 in cssKeywords) {
    if (cssKeywords.hasOwnProperty(key3)) {
      reverseKeywords[cssKeywords[key3]] = key3;
    }
  }
  var convert = module.exports = {
    rgb: {channels: 3, labels: "rgb"},
    hsl: {channels: 3, labels: "hsl"},
    hsv: {channels: 3, labels: "hsv"},
    hwb: {channels: 3, labels: "hwb"},
    cmyk: {channels: 4, labels: "cmyk"},
    xyz: {channels: 3, labels: "xyz"},
    lab: {channels: 3, labels: "lab"},
    lch: {channels: 3, labels: "lch"},
    hex: {channels: 1, labels: ["hex"]},
    keyword: {channels: 1, labels: ["keyword"]},
    ansi16: {channels: 1, labels: ["ansi16"]},
    ansi256: {channels: 1, labels: ["ansi256"]},
    hcg: {channels: 3, labels: ["h", "c", "g"]},
    apple: {channels: 3, labels: ["r16", "g16", "b16"]},
    gray: {channels: 1, labels: ["gray"]}
  };
  for (var model in convert) {
    if (convert.hasOwnProperty(model)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      channels = convert[model].channels;
      labels = convert[model].labels;
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", {value: channels});
      Object.defineProperty(convert[model], "labels", {value: labels});
    }
  }
  var channels;
  var labels;
  convert.rgb.hsl = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min3 = Math.min(r, g, b);
    var max3 = Math.max(r, g, b);
    var delta2 = max3 - min3;
    var h;
    var s;
    var l;
    if (max3 === min3) {
      h = 0;
    } else if (r === max3) {
      h = (g - b) / delta2;
    } else if (g === max3) {
      h = 2 + (b - r) / delta2;
    } else if (b === max3) {
      h = 4 + (r - g) / delta2;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    l = (min3 + max3) / 2;
    if (max3 === min3) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta2 / (max3 + min3);
    } else {
      s = delta2 / (2 - max3 - min3);
    }
    return [h, s * 100, l * 100];
  };
  convert.rgb.hsv = function(rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff2 = v - Math.min(r, g, b);
    var diffc = function(c) {
      return (v - c) / 6 / diff2 + 1 / 2;
    };
    if (diff2 === 0) {
      h = s = 0;
    } else {
      s = diff2 / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [
      h * 360,
      s * 100,
      v * 100
    ];
  };
  convert.rgb.hwb = function(rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w2 = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w2 * 100, b * 100];
  };
  convert.rgb.cmyk = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c;
    var m2;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m2 = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m2 * 100, y * 100, k * 100];
  };
  function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
  }
  convert.rgb.keyword = function(rgb) {
    var reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    var currentClosestDistance = Infinity;
    var currentClosestKeyword;
    for (var keyword in cssKeywords) {
      if (cssKeywords.hasOwnProperty(keyword)) {
        var value = cssKeywords[keyword];
        var distance = comparativeDistance(rgb, value);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
  };
  convert.rgb.xyz = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };
  convert.rgb.lab = function(rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.hsl.rgb = function(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val2;
    if (s === 0) {
      val2 = l * 255;
      return [val2, val2, val2];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    t1 = 2 * l - t2;
    rgb = [0, 0, 0];
    for (var i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val2 = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val2 = t2;
      } else if (3 * t3 < 2) {
        val2 = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val2 = t1;
      }
      rgb[i] = val2 * 255;
    }
    return rgb;
  };
  convert.hsl.hsv = function(hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert.hsv.rgb = function(hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert.hsv.hsl = function(hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };
  convert.hwb.rgb = function(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    n = wh + f * (v - wh);
    var r;
    var g;
    var b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert.cmyk.rgb = function(cmyk) {
    var c = cmyk[0] / 100;
    var m2 = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m2 * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.rgb = function(xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
    g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
    b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.lab = function(xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.lab.xyz = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };
  convert.lab.lch = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };
  convert.lch.lab = function(lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [l, a, b];
  };
  convert.rgb.ansi16 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
    value = Math.round(value / 50);
    if (value === 0) {
      return 30;
    }
    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
      ansi += 60;
    }
    return ansi;
  };
  convert.hsv.ansi16 = function(args) {
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };
  convert.rgb.ansi256 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };
  convert.ansi16.rgb = function(args) {
    var color39 = args % 10;
    if (color39 === 0 || color39 === 7) {
      if (args > 50) {
        color39 += 3.5;
      }
      color39 = color39 / 10.5 * 255;
      return [color39, color39, color39];
    }
    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color39 & 1) * mult * 255;
    var g = (color39 >> 1 & 1) * mult * 255;
    var b = (color39 >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert.ansi256.rgb = function(args) {
    if (args >= 232) {
      var c = (args - 232) * 10 + 8;
      return [c, c, c];
    }
    args -= 16;
    var rem2;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem2 = args % 36) / 6) / 5 * 255;
    var b = rem2 % 6 / 5 * 255;
    return [r, g, b];
  };
  convert.rgb.hex = function(args) {
    var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
    var string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.hex.rgb = function(args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    var colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map(function(char) {
        return char + char;
      }).join("");
    }
    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 255;
    var g = integer >> 8 & 255;
    var b = integer & 255;
    return [r, g, b];
  };
  convert.rgb.hcg = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max3 = Math.max(Math.max(r, g), b);
    var min3 = Math.min(Math.min(r, g), b);
    var chroma = max3 - min3;
    var grayscale;
    var hue;
    if (chroma < 1) {
      grayscale = min3 / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max3 === r) {
      hue = (g - b) / chroma % 6;
    } else if (max3 === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma + 4;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function(hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = 1;
    var f = 0;
    if (l < 0.5) {
      c = 2 * s * l;
    } else {
      c = 2 * s * (1 - l);
    }
    if (c < 1) {
      f = (l - 0.5 * c) / (1 - c);
    }
    return [hsl[0], c * 100, f * 100];
  };
  convert.hsv.hcg = function(hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;
    if (c < 1) {
      f = (v - c) / (1 - c);
    }
    return [hsv[0], c * 100, f * 100];
  };
  convert.hcg.rgb = function(hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    if (c === 0) {
      return [g * 255, g * 255, g * 255];
    }
    var pure = [0, 0, 0];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w2 = 1 - v;
    var mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w2;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w2;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w2;
    }
    mg = (1 - c) * g;
    return [
      (c * pure[0] + mg) * 255,
      (c * pure[1] + mg) * 255,
      (c * pure[2] + mg) * 255
    ];
  };
  convert.hcg.hsv = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1 - c);
    var f = 0;
    if (v > 0) {
      f = c / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert.hcg.hsl = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1 - c) + 0.5 * c;
    var s = 0;
    if (l > 0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert.hcg.hwb = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };
  convert.hwb.hcg = function(hwb) {
    var w2 = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w2;
    var g = 0;
    if (c < 1) {
      g = (v - c) / (1 - c);
    }
    return [hwb[0], c * 100, g * 100];
  };
  convert.apple.rgb = function(apple3) {
    return [apple3[0] / 65535 * 255, apple3[1] / 65535 * 255, apple3[2] / 65535 * 255];
  };
  convert.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function(args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert.gray.hsl = convert.gray.hsv = function(args) {
    return [0, 0, args[0]];
  };
  convert.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function(gray) {
    var val2 = Math.round(gray[0] / 100 * 255) & 255;
    var integer = (val2 << 16) + (val2 << 8) + val2;
    var string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.rgb.gray = function(rgb) {
    var val2 = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val2 / 255 * 100];
  };
});

// node_modules/color-convert/route.js
var require_route = __commonJS((exports, module) => {
  var conversions = require_conversions();
  function buildGraph() {
    var graph2 = {};
    var models = Object.keys(conversions);
    for (var len = models.length, i = 0; i < len; i++) {
      graph2[models[i]] = {
        distance: -1,
        parent: null
      };
    }
    return graph2;
  }
  function deriveBFS(fromModel) {
    var graph2 = buildGraph();
    var queue2 = [fromModel];
    graph2[fromModel].distance = 0;
    while (queue2.length) {
      var current = queue2.pop();
      var adjacents = Object.keys(conversions[current]);
      for (var len = adjacents.length, i = 0; i < len; i++) {
        var adjacent = adjacents[i];
        var node = graph2[adjacent];
        if (node.distance === -1) {
          node.distance = graph2[current].distance + 1;
          node.parent = current;
          queue2.unshift(adjacent);
        }
      }
    }
    return graph2;
  }
  function link3(from, to) {
    return function(args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph2) {
    var path = [graph2[toModel].parent, toModel];
    var fn = conversions[graph2[toModel].parent][toModel];
    var cur = graph2[toModel].parent;
    while (graph2[cur].parent) {
      path.unshift(graph2[cur].parent);
      fn = link3(conversions[graph2[cur].parent][cur], fn);
      cur = graph2[cur].parent;
    }
    fn.conversion = path;
    return fn;
  }
  module.exports = function(fromModel) {
    var graph2 = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph2);
    for (var len = models.length, i = 0; i < len; i++) {
      var toModel = models[i];
      var node = graph2[toModel];
      if (node.parent === null) {
        continue;
      }
      conversion[toModel] = wrapConversion(toModel, graph2);
    }
    return conversion;
  };
});

// node_modules/color-convert/index.js
var require_color_convert = __commonJS((exports, module) => {
  var conversions = require_conversions();
  var route = require_route();
  var convert = {};
  var models = Object.keys(conversions);
  function wrapRaw(fn) {
    var wrappedFn = function(args) {
      if (args === void 0 || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      return fn(args);
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn) {
    var wrappedFn = function(args) {
      if (args === void 0 || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      var result = fn(args);
      if (typeof result === "object") {
        for (var len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  models.forEach(function(fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], "channels", {value: conversions[fromModel].channels});
    Object.defineProperty(convert[fromModel], "labels", {value: conversions[fromModel].labels});
    var routes2 = route(fromModel);
    var routeModels = Object.keys(routes2);
    routeModels.forEach(function(toModel) {
      var fn = routes2[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  module.exports = convert;
});

// node_modules/color/index.js
var require_color = __commonJS((exports, module) => {
  "use strict";
  var colorString = require_color_string();
  var convert = require_color_convert();
  var _slice = [].slice;
  var skippedModels = [
    "keyword",
    "gray",
    "hex"
  ];
  var hashedModelKeys = {};
  Object.keys(convert).forEach(function(model) {
    hashedModelKeys[_slice.call(convert[model].labels).sort().join("")] = model;
  });
  var limiters = {};
  function Color3(obj, model) {
    if (!(this instanceof Color3)) {
      return new Color3(obj, model);
    }
    if (model && model in skippedModels) {
      model = null;
    }
    if (model && !(model in convert)) {
      throw new Error("Unknown model: " + model);
    }
    var i;
    var channels;
    if (obj == null) {
      this.model = "rgb";
      this.color = [0, 0, 0];
      this.valpha = 1;
    } else if (obj instanceof Color3) {
      this.model = obj.model;
      this.color = obj.color.slice();
      this.valpha = obj.valpha;
    } else if (typeof obj === "string") {
      var result = colorString.get(obj);
      if (result === null) {
        throw new Error("Unable to parse color from string: " + obj);
      }
      this.model = result.model;
      channels = convert[this.model].channels;
      this.color = result.value.slice(0, channels);
      this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
    } else if (obj.length) {
      this.model = model || "rgb";
      channels = convert[this.model].channels;
      var newArr = _slice.call(obj, 0, channels);
      this.color = zeroArray(newArr, channels);
      this.valpha = typeof obj[channels] === "number" ? obj[channels] : 1;
    } else if (typeof obj === "number") {
      obj &= 16777215;
      this.model = "rgb";
      this.color = [
        obj >> 16 & 255,
        obj >> 8 & 255,
        obj & 255
      ];
      this.valpha = 1;
    } else {
      this.valpha = 1;
      var keys = Object.keys(obj);
      if ("alpha" in obj) {
        keys.splice(keys.indexOf("alpha"), 1);
        this.valpha = typeof obj.alpha === "number" ? obj.alpha : 0;
      }
      var hashedKeys = keys.sort().join("");
      if (!(hashedKeys in hashedModelKeys)) {
        throw new Error("Unable to parse color from object: " + JSON.stringify(obj));
      }
      this.model = hashedModelKeys[hashedKeys];
      var labels = convert[this.model].labels;
      var color39 = [];
      for (i = 0; i < labels.length; i++) {
        color39.push(obj[labels[i]]);
      }
      this.color = zeroArray(color39);
    }
    if (limiters[this.model]) {
      channels = convert[this.model].channels;
      for (i = 0; i < channels; i++) {
        var limit = limiters[this.model][i];
        if (limit) {
          this.color[i] = limit(this.color[i]);
        }
      }
    }
    this.valpha = Math.max(0, Math.min(1, this.valpha));
    if (Object.freeze) {
      Object.freeze(this);
    }
  }
  Color3.prototype = {
    toString: function() {
      return this.string();
    },
    toJSON: function() {
      return this[this.model]();
    },
    string: function(places) {
      var self2 = this.model in colorString.to ? this : this.rgb();
      self2 = self2.round(typeof places === "number" ? places : 1);
      var args = self2.valpha === 1 ? self2.color : self2.color.concat(this.valpha);
      return colorString.to[self2.model](args);
    },
    percentString: function(places) {
      var self2 = this.rgb().round(typeof places === "number" ? places : 1);
      var args = self2.valpha === 1 ? self2.color : self2.color.concat(this.valpha);
      return colorString.to.rgb.percent(args);
    },
    array: function() {
      return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
    },
    object: function() {
      var result = {};
      var channels = convert[this.model].channels;
      var labels = convert[this.model].labels;
      for (var i = 0; i < channels; i++) {
        result[labels[i]] = this.color[i];
      }
      if (this.valpha !== 1) {
        result.alpha = this.valpha;
      }
      return result;
    },
    unitArray: function() {
      var rgb = this.rgb().color;
      rgb[0] /= 255;
      rgb[1] /= 255;
      rgb[2] /= 255;
      if (this.valpha !== 1) {
        rgb.push(this.valpha);
      }
      return rgb;
    },
    unitObject: function() {
      var rgb = this.rgb().object();
      rgb.r /= 255;
      rgb.g /= 255;
      rgb.b /= 255;
      if (this.valpha !== 1) {
        rgb.alpha = this.valpha;
      }
      return rgb;
    },
    round: function(places) {
      places = Math.max(places || 0, 0);
      return new Color3(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
    },
    alpha: function(val2) {
      if (arguments.length) {
        return new Color3(this.color.concat(Math.max(0, Math.min(1, val2))), this.model);
      }
      return this.valpha;
    },
    red: getset("rgb", 0, maxfn(255)),
    green: getset("rgb", 1, maxfn(255)),
    blue: getset("rgb", 2, maxfn(255)),
    hue: getset(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, function(val2) {
      return (val2 % 360 + 360) % 360;
    }),
    saturationl: getset("hsl", 1, maxfn(100)),
    lightness: getset("hsl", 2, maxfn(100)),
    saturationv: getset("hsv", 1, maxfn(100)),
    value: getset("hsv", 2, maxfn(100)),
    chroma: getset("hcg", 1, maxfn(100)),
    gray: getset("hcg", 2, maxfn(100)),
    white: getset("hwb", 1, maxfn(100)),
    wblack: getset("hwb", 2, maxfn(100)),
    cyan: getset("cmyk", 0, maxfn(100)),
    magenta: getset("cmyk", 1, maxfn(100)),
    yellow: getset("cmyk", 2, maxfn(100)),
    black: getset("cmyk", 3, maxfn(100)),
    x: getset("xyz", 0, maxfn(100)),
    y: getset("xyz", 1, maxfn(100)),
    z: getset("xyz", 2, maxfn(100)),
    l: getset("lab", 0, maxfn(100)),
    a: getset("lab", 1),
    b: getset("lab", 2),
    keyword: function(val2) {
      if (arguments.length) {
        return new Color3(val2);
      }
      return convert[this.model].keyword(this.color);
    },
    hex: function(val2) {
      if (arguments.length) {
        return new Color3(val2);
      }
      return colorString.to.hex(this.rgb().round().color);
    },
    rgbNumber: function() {
      var rgb = this.rgb().color;
      return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
    },
    luminosity: function() {
      var rgb = this.rgb().color;
      var lum = [];
      for (var i = 0; i < rgb.length; i++) {
        var chan = rgb[i] / 255;
        lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
      }
      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    },
    contrast: function(color210) {
      var lum1 = this.luminosity();
      var lum2 = color210.luminosity();
      if (lum1 > lum2) {
        return (lum1 + 0.05) / (lum2 + 0.05);
      }
      return (lum2 + 0.05) / (lum1 + 0.05);
    },
    level: function(color210) {
      var contrastRatio = this.contrast(color210);
      if (contrastRatio >= 7.1) {
        return "AAA";
      }
      return contrastRatio >= 4.5 ? "AA" : "";
    },
    isDark: function() {
      var rgb = this.rgb().color;
      var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1e3;
      return yiq < 128;
    },
    isLight: function() {
      return !this.isDark();
    },
    negate: function() {
      var rgb = this.rgb();
      for (var i = 0; i < 3; i++) {
        rgb.color[i] = 255 - rgb.color[i];
      }
      return rgb;
    },
    lighten: function(ratio) {
      var hsl = this.hsl();
      hsl.color[2] += hsl.color[2] * ratio;
      return hsl;
    },
    darken: function(ratio) {
      var hsl = this.hsl();
      hsl.color[2] -= hsl.color[2] * ratio;
      return hsl;
    },
    saturate: function(ratio) {
      var hsl = this.hsl();
      hsl.color[1] += hsl.color[1] * ratio;
      return hsl;
    },
    desaturate: function(ratio) {
      var hsl = this.hsl();
      hsl.color[1] -= hsl.color[1] * ratio;
      return hsl;
    },
    whiten: function(ratio) {
      var hwb = this.hwb();
      hwb.color[1] += hwb.color[1] * ratio;
      return hwb;
    },
    blacken: function(ratio) {
      var hwb = this.hwb();
      hwb.color[2] += hwb.color[2] * ratio;
      return hwb;
    },
    grayscale: function() {
      var rgb = this.rgb().color;
      var val2 = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
      return Color3.rgb(val2, val2, val2);
    },
    fade: function(ratio) {
      return this.alpha(this.valpha - this.valpha * ratio);
    },
    opaquer: function(ratio) {
      return this.alpha(this.valpha + this.valpha * ratio);
    },
    rotate: function(degrees) {
      var hsl = this.hsl();
      var hue = hsl.color[0];
      hue = (hue + degrees) % 360;
      hue = hue < 0 ? 360 + hue : hue;
      hsl.color[0] = hue;
      return hsl;
    },
    mix: function(mixinColor, weight2) {
      if (!mixinColor || !mixinColor.rgb) {
        throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
      }
      var color1 = mixinColor.rgb();
      var color210 = this.rgb();
      var p = weight2 === void 0 ? 0.5 : weight2;
      var w2 = 2 * p - 1;
      var a = color1.alpha() - color210.alpha();
      var w1 = ((w2 * a === -1 ? w2 : (w2 + a) / (1 + w2 * a)) + 1) / 2;
      var w22 = 1 - w1;
      return Color3.rgb(w1 * color1.red() + w22 * color210.red(), w1 * color1.green() + w22 * color210.green(), w1 * color1.blue() + w22 * color210.blue(), color1.alpha() * p + color210.alpha() * (1 - p));
    }
  };
  Object.keys(convert).forEach(function(model) {
    if (skippedModels.indexOf(model) !== -1) {
      return;
    }
    var channels = convert[model].channels;
    Color3.prototype[model] = function() {
      if (this.model === model) {
        return new Color3(this);
      }
      if (arguments.length) {
        return new Color3(arguments, model);
      }
      var newAlpha = typeof arguments[channels] === "number" ? channels : this.valpha;
      return new Color3(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
    };
    Color3[model] = function(color39) {
      if (typeof color39 === "number") {
        color39 = zeroArray(_slice.call(arguments), channels);
      }
      return new Color3(color39, model);
    };
  });
  function roundTo(num, places) {
    return Number(num.toFixed(places));
  }
  function roundToPlace(places) {
    return function(num) {
      return roundTo(num, places);
    };
  }
  function getset(model, channel, modifier) {
    model = Array.isArray(model) ? model : [model];
    model.forEach(function(m2) {
      (limiters[m2] || (limiters[m2] = []))[channel] = modifier;
    });
    model = model[0];
    return function(val2) {
      var result;
      if (arguments.length) {
        if (modifier) {
          val2 = modifier(val2);
        }
        result = this[model]();
        result.color[channel] = val2;
        return result;
      }
      result = this[model]().color[channel];
      if (modifier) {
        result = modifier(result);
      }
      return result;
    };
  }
  function maxfn(max3) {
    return function(v) {
      return Math.max(0, Math.min(max3, v));
    };
  }
  function assertArray(val2) {
    return Array.isArray(val2) ? val2 : [val2];
  }
  function zeroArray(arr, length) {
    for (var i = 0; i < length; i++) {
      if (typeof arr[i] !== "number") {
        arr[i] = 0;
      }
    }
    return arr;
  }
  module.exports = Color3;
});

// node_modules/fontfaceobserver/fontfaceobserver.standalone.js
var require_fontfaceobserver_standalone = __commonJS((exports, module) => {
  (function() {
    function l(a, b) {
      document.addEventListener ? a.addEventListener("scroll", b, false) : a.attachEvent("scroll", b);
    }
    function m2(a) {
      document.body ? a() : document.addEventListener ? document.addEventListener("DOMContentLoaded", function c() {
        document.removeEventListener("DOMContentLoaded", c);
        a();
      }) : document.attachEvent("onreadystatechange", function k() {
        if (document.readyState == "interactive" || document.readyState == "complete")
          document.detachEvent("onreadystatechange", k), a();
      });
    }
    ;
    function t(a) {
      this.a = document.createElement("div");
      this.a.setAttribute("aria-hidden", "true");
      this.a.appendChild(document.createTextNode(a));
      this.b = document.createElement("span");
      this.c = document.createElement("span");
      this.h = document.createElement("span");
      this.f = document.createElement("span");
      this.g = -1;
      this.b.style.cssText = "max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
      this.c.style.cssText = "max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
      this.f.style.cssText = "max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
      this.h.style.cssText = "display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";
      this.b.appendChild(this.h);
      this.c.appendChild(this.f);
      this.a.appendChild(this.b);
      this.a.appendChild(this.c);
    }
    function u(a, b) {
      a.a.style.cssText = "max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;white-space:nowrap;font-synthesis:none;font:" + b + ";";
    }
    function z(a) {
      var b = a.a.offsetWidth, c = b + 100;
      a.f.style.width = c + "px";
      a.c.scrollLeft = c;
      a.b.scrollLeft = a.b.scrollWidth + 100;
      return a.g !== b ? (a.g = b, true) : false;
    }
    function A3(a, b) {
      function c() {
        var a2 = k;
        z(a2) && a2.a.parentNode && b(a2.g);
      }
      var k = a;
      l(a.b, c);
      l(a.c, c);
      z(a);
    }
    ;
    function B3(a, b) {
      var c = b || {};
      this.family = a;
      this.style = c.style || "normal";
      this.weight = c.weight || "normal";
      this.stretch = c.stretch || "normal";
    }
    var C2 = null, D = null, E = null, F = null;
    function G() {
      if (D === null)
        if (J() && /Apple/.test(window.navigator.vendor)) {
          var a = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))(?:\.([0-9]+))/.exec(window.navigator.userAgent);
          D = !!a && 603 > parseInt(a[1], 10);
        } else
          D = false;
      return D;
    }
    function J() {
      F === null && (F = !!document.fonts);
      return F;
    }
    function K() {
      if (E === null) {
        var a = document.createElement("div");
        try {
          a.style.font = "condensed 100px sans-serif";
        } catch (b) {
        }
        E = a.style.font !== "";
      }
      return E;
    }
    function L(a, b) {
      return [a.style, a.weight, K() ? a.stretch : "", "100px", b].join(" ");
    }
    B3.prototype.load = function(a, b) {
      var c = this, k = a || "BESbswy", r = 0, n = b || 3e3, H = new Date().getTime();
      return new Promise(function(a2, b2) {
        if (J() && !G()) {
          var M = new Promise(function(a3, b3) {
            function e() {
              new Date().getTime() - H >= n ? b3(Error("" + n + "ms timeout exceeded")) : document.fonts.load(L(c, '"' + c.family + '"'), k).then(function(c2) {
                1 <= c2.length ? a3() : setTimeout(e, 25);
              }, b3);
            }
            e();
          }), N = new Promise(function(a3, c2) {
            r = setTimeout(function() {
              c2(Error("" + n + "ms timeout exceeded"));
            }, n);
          });
          Promise.race([N, M]).then(function() {
            clearTimeout(r);
            a2(c);
          }, b2);
        } else
          m2(function() {
            function v() {
              var b3;
              if (b3 = f != -1 && g != -1 || f != -1 && h != -1 || g != -1 && h != -1)
                (b3 = f != g && f != h && g != h) || (C2 === null && (b3 = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent), C2 = !!b3 && (536 > parseInt(b3[1], 10) || parseInt(b3[1], 10) === 536 && 11 >= parseInt(b3[2], 10))), b3 = C2 && (f == w2 && g == w2 && h == w2 || f == x && g == x && h == x || f == y && g == y && h == y)), b3 = !b3;
              b3 && (d.parentNode && d.parentNode.removeChild(d), clearTimeout(r), a2(c));
            }
            function I2() {
              if (new Date().getTime() - H >= n)
                d.parentNode && d.parentNode.removeChild(d), b2(Error("" + n + "ms timeout exceeded"));
              else {
                var a3 = document.hidden;
                if (a3 === true || a3 === void 0)
                  f = e.a.offsetWidth, g = p.a.offsetWidth, h = q.a.offsetWidth, v();
                r = setTimeout(I2, 50);
              }
            }
            var e = new t(k), p = new t(k), q = new t(k), f = -1, g = -1, h = -1, w2 = -1, x = -1, y = -1, d = document.createElement("div");
            d.dir = "ltr";
            u(e, L(c, "sans-serif"));
            u(p, L(c, "serif"));
            u(q, L(c, "monospace"));
            d.appendChild(e.a);
            d.appendChild(p.a);
            d.appendChild(q.a);
            document.body.appendChild(d);
            w2 = e.a.offsetWidth;
            x = p.a.offsetWidth;
            y = q.a.offsetWidth;
            I2();
            A3(e, function(a3) {
              f = a3;
              v();
            });
            u(e, L(c, '"' + c.family + '",sans-serif'));
            A3(p, function(a3) {
              g = a3;
              v();
            });
            u(p, L(c, '"' + c.family + '",serif'));
            A3(q, function(a3) {
              h = a3;
              v();
            });
            u(q, L(c, '"' + c.family + '",monospace'));
          });
      });
    };
    typeof module === "object" ? module.exports = B3 : (window.FontFaceObserver = B3, window.FontFaceObserver.prototype.load = B3.prototype.load);
  })();
});

// node_modules/lodash.isstring/index.js
var require_lodash = __commonJS((exports, module) => {
  var stringTag = "[object String]";
  var objectProto = Object.prototype;
  var objectToString = objectProto.toString;
  var isArray = Array.isArray;
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function isString2(value) {
    return typeof value == "string" || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
  }
  module.exports = isString2;
});

// node_modules/lodash.omit/index.js
var require_lodash2 = __commonJS((exports, module) => {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var INFINITY = 1 / 0;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var symbolTag = "[object Symbol]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var freeGlobal = typeof window == "object" && window && window.Object === Object && window;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }
  function arrayIncludesWith(array, value, comparator) {
    var index = -1, length = array ? array.length : 0;
    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }
  function arrayMap(array, iteratee) {
    var index = -1, length = array ? array.length : 0, result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return baseFindIndex(array, baseIsNaN, fromIndex);
    }
    var index = fromIndex - 1, length = array.length;
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  function baseIsNaN(value) {
    return value !== value;
  }
  function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  function cacheHas(cache2, key3) {
    return cache2.has(key3);
  }
  function getValue(object, key3) {
    return object == null ? void 0 : object[key3];
  }
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e) {
      }
    }
    return result;
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  var arrayProto = Array.prototype;
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var funcToString = funcProto.toString;
  var hasOwnProperty3 = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  var Symbol2 = root.Symbol;
  var getPrototype = overArg(Object.getPrototypeOf, Object);
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var splice = arrayProto.splice;
  var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var nativeMax = Math.max;
  var Map2 = getNative(root, "Map");
  var nativeCreate = getNative(Object, "create");
  function Hash(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }
  function hashDelete(key3) {
    return this.has(key3) && delete this.__data__[key3];
  }
  function hashGet(key3) {
    var data2 = this.__data__;
    if (nativeCreate) {
      var result = data2[key3];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty3.call(data2, key3) ? data2[key3] : void 0;
  }
  function hashHas(key3) {
    var data2 = this.__data__;
    return nativeCreate ? data2[key3] !== void 0 : hasOwnProperty3.call(data2, key3);
  }
  function hashSet(key3, value) {
    var data2 = this.__data__;
    data2[key3] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
  }
  function listCacheDelete(key3) {
    var data2 = this.__data__, index = assocIndexOf(data2, key3);
    if (index < 0) {
      return false;
    }
    var lastIndex = data2.length - 1;
    if (index == lastIndex) {
      data2.pop();
    } else {
      splice.call(data2, index, 1);
    }
    return true;
  }
  function listCacheGet(key3) {
    var data2 = this.__data__, index = assocIndexOf(data2, key3);
    return index < 0 ? void 0 : data2[index][1];
  }
  function listCacheHas(key3) {
    return assocIndexOf(this.__data__, key3) > -1;
  }
  function listCacheSet(key3, value) {
    var data2 = this.__data__, index = assocIndexOf(data2, key3);
    if (index < 0) {
      data2.push([key3, value]);
    } else {
      data2[index][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.__data__ = {
      hash: new Hash(),
      map: new (Map2 || ListCache)(),
      string: new Hash()
    };
  }
  function mapCacheDelete(key3) {
    return getMapData(this, key3)["delete"](key3);
  }
  function mapCacheGet(key3) {
    return getMapData(this, key3).get(key3);
  }
  function mapCacheHas(key3) {
    return getMapData(this, key3).has(key3);
  }
  function mapCacheSet(key3, value) {
    getMapData(this, key3).set(key3, value);
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function SetCache(values) {
    var index = -1, length = values ? values.length : 0;
    this.__data__ = new MapCache();
    while (++index < length) {
      this.add(values[index]);
    }
  }
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  function arrayLikeKeys(value, inherited) {
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for (var key3 in value) {
      if ((inherited || hasOwnProperty3.call(value, key3)) && !(skipIndexes && (key3 == "length" || isIndex(key3, length)))) {
        result.push(key3);
      }
    }
    return result;
  }
  function assocIndexOf(array, key3) {
    var length = array.length;
    while (length--) {
      if (eq3(array[length][0], key3)) {
        return length;
      }
    }
    return -1;
  }
  function baseDifference(array, values, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
    if (!length) {
      return result;
    }
    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }
    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }
    outer:
      while (++index < length) {
        var value = array[index], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
    return result;
  }
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern2 = isFunction3(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern2.test(toSource(value));
  }
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object), result = [];
    for (var key3 in object) {
      if (!(key3 == "constructor" && (isProto || !hasOwnProperty3.call(object, key3)))) {
        result.push(key3);
      }
    }
    return result;
  }
  function basePick(object, props) {
    object = Object(object);
    return basePickBy(object, props, function(value, key3) {
      return key3 in object;
    });
  }
  function basePickBy(object, props, predicate) {
    var index = -1, length = props.length, result = {};
    while (++index < length) {
      var key3 = props[index], value = object[key3];
      if (predicate(value, key3)) {
        result[key3] = value;
      }
    }
    return result;
  }
  function baseRest(func, start) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }
  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }
  function getMapData(map3, key3) {
    var data2 = map3.__data__;
    return isKeyable(key3) ? data2[typeof key3 == "string" ? "string" : "hash"] : data2.map;
  }
  function getNative(object, key3) {
    var value = getValue(object, key3);
    return baseIsNative(value) ? value : void 0;
  }
  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    var result = [];
    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }
    return result;
  };
  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  }
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key3 in Object(object)) {
        result.push(key3);
      }
    }
    return result;
  }
  function toKey(value) {
    if (typeof value == "string" || isSymbol(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  function eq3(value, other) {
    return value === other || value !== value && other !== other;
  }
  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty3.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
  }
  var isArray = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction3(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  function isFunction3(value) {
    var tag3 = isObject(value) ? objectToString.call(value) : "";
    return tag3 == funcTag || tag3 == genTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }
  var omit2 = baseRest(function(object, props) {
    if (object == null) {
      return {};
    }
    props = arrayMap(baseFlatten(props, 1), toKey);
    return basePick(object, baseDifference(getAllKeysIn(object), props));
  });
  function stubArray() {
    return [];
  }
  module.exports = omit2;
});

// node_modules/lodash.pick/index.js
var require_lodash3 = __commonJS((exports, module) => {
  var INFINITY = 1 / 0;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var symbolTag = "[object Symbol]";
  var freeGlobal = typeof window == "object" && window && window.Object === Object && window;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  function arrayMap(array, iteratee) {
    var index = -1, length = array ? array.length : 0, result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  var objectProto = Object.prototype;
  var hasOwnProperty3 = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var Symbol2 = root.Symbol;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
  var nativeMax = Math.max;
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  function basePick(object, props) {
    object = Object(object);
    return basePickBy(object, props, function(value, key3) {
      return key3 in object;
    });
  }
  function basePickBy(object, props, predicate) {
    var index = -1, length = props.length, result = {};
    while (++index < length) {
      var key3 = props[index], value = object[key3];
      if (predicate(value, key3)) {
        result[key3] = value;
      }
    }
    return result;
  }
  function baseRest(func, start) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }
  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  function toKey(value) {
    if (typeof value == "string" || isSymbol(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty3.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
  }
  var isArray = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction3(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  function isFunction3(value) {
    var tag3 = isObject(value) ? objectToString.call(value) : "";
    return tag3 == funcTag || tag3 == genTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }
  var pick3 = baseRest(function(object, props) {
    return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
  });
  module.exports = pick3;
});

// node_modules/@expo/vector-icons/MaterialCommunityIcons.js
var require_MaterialCommunityIcons = __commonJS((exports) => {
  __markAsModule(exports);
  __export(exports, {
    default: () => MaterialCommunityIcons_default4
  });
  var MaterialCommunityIcons_default4 = MaterialCommunityIcons_default3;
});

// node_modules/react-native-paper/lib/module/assets/back-chevron.png
var require_back_chevron = __commonJS((exports, module) => {
  module.exports = "/assets/back-chevron-JA374TVW.png";
});

// node_modules/@react-navigation/native/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development3 = __commonJS((exports) => {
  /** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType2(type) {
        return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment12 = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal2 = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      exports.AsyncMode = AsyncMode;
      exports.ConcurrentMode = ConcurrentMode;
      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment12;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal2;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
      exports.isValidElementType = isValidElementType2;
      exports.typeOf = typeOf;
    })();
  }
});

// node_modules/@react-navigation/native/node_modules/react-is/index.js
var require_react_is3 = __commonJS((exports, module) => {
  "use strict";
  if (false) {
    module.exports = null;
  } else {
    module.exports = require_react_is_development3();
  }
});

// node_modules/escape-string-regexp/index.js
var require_escape_string_regexp = __commonJS((exports, module) => {
  "use strict";
  module.exports = (string) => {
    if (typeof string !== "string") {
      throw new TypeError("Expected a string");
    }
    return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
  };
});

// node_modules/strict-uri-encode/index.js
var require_strict_uri_encode = __commonJS((exports, module) => {
  "use strict";
  module.exports = (str) => encodeURIComponent(str).replace(/[!'()*]/g, (x) => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);
});

// node_modules/decode-uri-component/index.js
var require_decode_uri_component = __commonJS((exports, module) => {
  "use strict";
  var token = "%[a-f0-9]{2}";
  var singleMatcher = new RegExp(token, "gi");
  var multiMatcher = new RegExp("(" + token + ")+", "gi");
  function decodeComponents(components2, split) {
    try {
      return decodeURIComponent(components2.join(""));
    } catch (err) {
    }
    if (components2.length === 1) {
      return components2;
    }
    split = split || 1;
    var left2 = components2.slice(0, split);
    var right2 = components2.slice(split);
    return Array.prototype.concat.call([], decodeComponents(left2), decodeComponents(right2));
  }
  function decode(input) {
    try {
      return decodeURIComponent(input);
    } catch (err) {
      var tokens = input.match(singleMatcher);
      for (var i = 1; i < tokens.length; i++) {
        input = decodeComponents(tokens, i).join("");
        tokens = input.match(singleMatcher);
      }
      return input;
    }
  }
  function customDecodeURIComponent(input) {
    var replaceMap = {
      "%FE%FF": "\uFFFD\uFFFD",
      "%FF%FE": "\uFFFD\uFFFD"
    };
    var match = multiMatcher.exec(input);
    while (match) {
      try {
        replaceMap[match[0]] = decodeURIComponent(match[0]);
      } catch (err) {
        var result = decode(match[0]);
        if (result !== match[0]) {
          replaceMap[match[0]] = result;
        }
      }
      match = multiMatcher.exec(input);
    }
    replaceMap["%C2"] = "\uFFFD";
    var entries = Object.keys(replaceMap);
    for (var i = 0; i < entries.length; i++) {
      var key3 = entries[i];
      input = input.replace(new RegExp(key3, "g"), replaceMap[key3]);
    }
    return input;
  }
  module.exports = function(encodedURI) {
    if (typeof encodedURI !== "string") {
      throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
    }
    try {
      encodedURI = encodedURI.replace(/\+/g, " ");
      return decodeURIComponent(encodedURI);
    } catch (err) {
      return customDecodeURIComponent(encodedURI);
    }
  };
});

// node_modules/split-on-first/index.js
var require_split_on_first = __commonJS((exports, module) => {
  "use strict";
  module.exports = (string, separator) => {
    if (!(typeof string === "string" && typeof separator === "string")) {
      throw new TypeError("Expected the arguments to be of type `string`");
    }
    if (separator === "") {
      return [string];
    }
    const separatorIndex = string.indexOf(separator);
    if (separatorIndex === -1) {
      return [string];
    }
    return [
      string.slice(0, separatorIndex),
      string.slice(separatorIndex + separator.length)
    ];
  };
});

// node_modules/filter-obj/index.js
var require_filter_obj = __commonJS((exports, module) => {
  "use strict";
  module.exports = function(obj, predicate) {
    var ret = {};
    var keys = Object.keys(obj);
    var isArr = Array.isArray(predicate);
    for (var i = 0; i < keys.length; i++) {
      var key3 = keys[i];
      var val2 = obj[key3];
      if (isArr ? predicate.indexOf(key3) !== -1 : predicate(key3, val2, obj)) {
        ret[key3] = val2;
      }
    }
    return ret;
  };
});

// node_modules/query-string/index.js
var require_query_string = __commonJS((exports) => {
  "use strict";
  var strictUriEncode = require_strict_uri_encode();
  var decodeComponent = require_decode_uri_component();
  var splitOnFirst = require_split_on_first();
  var filterObject = require_filter_obj();
  var isNullOrUndefined = (value) => value === null || value === void 0;
  function encoderForArrayFormat(options) {
    switch (options.arrayFormat) {
      case "index":
        return (key3) => (result, value) => {
          const index = result.length;
          if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
            return result;
          }
          if (value === null) {
            return [...result, [encode(key3, options), "[", index, "]"].join("")];
          }
          return [
            ...result,
            [encode(key3, options), "[", encode(index, options), "]=", encode(value, options)].join("")
          ];
        };
      case "bracket":
        return (key3) => (result, value) => {
          if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
            return result;
          }
          if (value === null) {
            return [...result, [encode(key3, options), "[]"].join("")];
          }
          return [...result, [encode(key3, options), "[]=", encode(value, options)].join("")];
        };
      case "comma":
      case "separator":
        return (key3) => (result, value) => {
          if (value === null || value === void 0 || value.length === 0) {
            return result;
          }
          if (result.length === 0) {
            return [[encode(key3, options), "=", encode(value, options)].join("")];
          }
          return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
        };
      default:
        return (key3) => (result, value) => {
          if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
            return result;
          }
          if (value === null) {
            return [...result, encode(key3, options)];
          }
          return [...result, [encode(key3, options), "=", encode(value, options)].join("")];
        };
    }
  }
  function parserForArrayFormat(options) {
    let result;
    switch (options.arrayFormat) {
      case "index":
        return (key3, value, accumulator) => {
          result = /\[(\d*)\]$/.exec(key3);
          key3 = key3.replace(/\[\d*\]$/, "");
          if (!result) {
            accumulator[key3] = value;
            return;
          }
          if (accumulator[key3] === void 0) {
            accumulator[key3] = {};
          }
          accumulator[key3][result[1]] = value;
        };
      case "bracket":
        return (key3, value, accumulator) => {
          result = /(\[\])$/.exec(key3);
          key3 = key3.replace(/\[\]$/, "");
          if (!result) {
            accumulator[key3] = value;
            return;
          }
          if (accumulator[key3] === void 0) {
            accumulator[key3] = [value];
            return;
          }
          accumulator[key3] = [].concat(accumulator[key3], value);
        };
      case "comma":
      case "separator":
        return (key3, value, accumulator) => {
          const isArray = typeof value === "string" && value.includes(options.arrayFormatSeparator);
          const isEncodedArray = typeof value === "string" && !isArray && decode(value, options).includes(options.arrayFormatSeparator);
          value = isEncodedArray ? decode(value, options) : value;
          const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map((item) => decode(item, options)) : value === null ? value : decode(value, options);
          accumulator[key3] = newValue;
        };
      default:
        return (key3, value, accumulator) => {
          if (accumulator[key3] === void 0) {
            accumulator[key3] = value;
            return;
          }
          accumulator[key3] = [].concat(accumulator[key3], value);
        };
    }
  }
  function validateArrayFormatSeparator(value) {
    if (typeof value !== "string" || value.length !== 1) {
      throw new TypeError("arrayFormatSeparator must be single character string");
    }
  }
  function encode(value, options) {
    if (options.encode) {
      return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
    }
    return value;
  }
  function decode(value, options) {
    if (options.decode) {
      return decodeComponent(value);
    }
    return value;
  }
  function keysSorter(input) {
    if (Array.isArray(input)) {
      return input.sort();
    }
    if (typeof input === "object") {
      return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map((key3) => input[key3]);
    }
    return input;
  }
  function removeHash(input) {
    const hashStart = input.indexOf("#");
    if (hashStart !== -1) {
      input = input.slice(0, hashStart);
    }
    return input;
  }
  function getHash(url) {
    let hash3 = "";
    const hashStart = url.indexOf("#");
    if (hashStart !== -1) {
      hash3 = url.slice(hashStart);
    }
    return hash3;
  }
  function extract(input) {
    input = removeHash(input);
    const queryStart = input.indexOf("?");
    if (queryStart === -1) {
      return "";
    }
    return input.slice(queryStart + 1);
  }
  function parseValue(value, options) {
    if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === "string" && value.trim() !== "")) {
      value = Number(value);
    } else if (options.parseBooleans && value !== null && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
      value = value.toLowerCase() === "true";
    }
    return value;
  }
  function parse2(query2, options) {
    options = Object.assign({
      decode: true,
      sort: true,
      arrayFormat: "none",
      arrayFormatSeparator: ",",
      parseNumbers: false,
      parseBooleans: false
    }, options);
    validateArrayFormatSeparator(options.arrayFormatSeparator);
    const formatter = parserForArrayFormat(options);
    const ret = Object.create(null);
    if (typeof query2 !== "string") {
      return ret;
    }
    query2 = query2.trim().replace(/^[?#&]/, "");
    if (!query2) {
      return ret;
    }
    for (const param of query2.split("&")) {
      if (param === "") {
        continue;
      }
      let [key3, value] = splitOnFirst(options.decode ? param.replace(/\+/g, " ") : param, "=");
      value = value === void 0 ? null : ["comma", "separator"].includes(options.arrayFormat) ? value : decode(value, options);
      formatter(decode(key3, options), value, ret);
    }
    for (const key3 of Object.keys(ret)) {
      const value = ret[key3];
      if (typeof value === "object" && value !== null) {
        for (const k of Object.keys(value)) {
          value[k] = parseValue(value[k], options);
        }
      } else {
        ret[key3] = parseValue(value, options);
      }
    }
    if (options.sort === false) {
      return ret;
    }
    return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key3) => {
      const value = ret[key3];
      if (Boolean(value) && typeof value === "object" && !Array.isArray(value)) {
        result[key3] = keysSorter(value);
      } else {
        result[key3] = value;
      }
      return result;
    }, Object.create(null));
  }
  exports.extract = extract;
  exports.parse = parse2;
  exports.stringify = (object, options) => {
    if (!object) {
      return "";
    }
    options = Object.assign({
      encode: true,
      strict: true,
      arrayFormat: "none",
      arrayFormatSeparator: ","
    }, options);
    validateArrayFormatSeparator(options.arrayFormatSeparator);
    const shouldFilter = (key3) => options.skipNull && isNullOrUndefined(object[key3]) || options.skipEmptyString && object[key3] === "";
    const formatter = encoderForArrayFormat(options);
    const objectCopy = {};
    for (const key3 of Object.keys(object)) {
      if (!shouldFilter(key3)) {
        objectCopy[key3] = object[key3];
      }
    }
    const keys = Object.keys(objectCopy);
    if (options.sort !== false) {
      keys.sort(options.sort);
    }
    return keys.map((key3) => {
      const value = object[key3];
      if (value === void 0) {
        return "";
      }
      if (value === null) {
        return encode(key3, options);
      }
      if (Array.isArray(value)) {
        return value.reduce(formatter(key3), []).join("&");
      }
      return encode(key3, options) + "=" + encode(value, options);
    }).filter((x) => x.length > 0).join("&");
  };
  exports.parseUrl = (url, options) => {
    options = Object.assign({
      decode: true
    }, options);
    const [url_, hash3] = splitOnFirst(url, "#");
    return Object.assign({
      url: url_.split("?")[0] || "",
      query: parse2(extract(url), options)
    }, options && options.parseFragmentIdentifier && hash3 ? {fragmentIdentifier: decode(hash3, options)} : {});
  };
  exports.stringifyUrl = (object, options) => {
    options = Object.assign({
      encode: true,
      strict: true
    }, options);
    const url = removeHash(object.url).split("?")[0] || "";
    const queryFromUrl = exports.extract(object.url);
    const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});
    const query2 = Object.assign(parsedQueryFromUrl, object.query);
    let queryString3 = exports.stringify(query2, options);
    if (queryString3) {
      queryString3 = `?${queryString3}`;
    }
    let hash3 = getHash(object.url);
    if (object.fragmentIdentifier) {
      hash3 = `#${encode(object.fragmentIdentifier, options)}`;
    }
    return `${url}${queryString3}${hash3}`;
  };
  exports.pick = (input, filter4, options) => {
    options = Object.assign({
      parseFragmentIdentifier: true
    }, options);
    const {url, query: query2, fragmentIdentifier} = exports.parseUrl(input, options);
    return exports.stringifyUrl({
      url,
      query: filterObject(query2, filter4),
      fragmentIdentifier
    }, options);
  };
  exports.exclude = (input, filter4, options) => {
    const exclusionFilter = Array.isArray(filter4) ? (key3) => !filter4.includes(key3) : (key3, value) => !filter4(key3, value);
    return exports.pick(input, exclusionFilter, options);
  };
});

// node_modules/setimmediate/setImmediate.js
var require_setImmediate = __commonJS((exports) => {
  (function(global2, undefined2) {
    "use strict";
    if (global2.setImmediate) {
      return;
    }
    var nextHandle = 1;
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global2.document;
    var registerImmediate;
    function setImmediate2(callback) {
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i + 1];
      }
      var task = {callback, args};
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }
    function clearImmediate(handle) {
      delete tasksByHandle[handle];
    }
    function run2(task) {
      var callback = task.callback;
      var args = task.args;
      switch (args.length) {
        case 0:
          callback();
          break;
        case 1:
          callback(args[0]);
          break;
        case 2:
          callback(args[0], args[1]);
          break;
        case 3:
          callback(args[0], args[1], args[2]);
          break;
        default:
          callback.apply(undefined2, args);
          break;
      }
    }
    function runIfPresent(handle) {
      if (currentlyRunningATask) {
        setTimeout(runIfPresent, 0, handle);
      } else {
        var task = tasksByHandle[handle];
        if (task) {
          currentlyRunningATask = true;
          try {
            run2(task);
          } finally {
            clearImmediate(handle);
            currentlyRunningATask = false;
          }
        }
      }
    }
    function installNextTickImplementation() {
      registerImmediate = function(handle) {
        process.nextTick(function() {
          runIfPresent(handle);
        });
      };
    }
    function canUsePostMessage() {
      if (global2.postMessage && !global2.importScripts) {
        var postMessageIsAsynchronous = true;
        var oldOnMessage = global2.onmessage;
        global2.onmessage = function() {
          postMessageIsAsynchronous = false;
        };
        global2.postMessage("", "*");
        global2.onmessage = oldOnMessage;
        return postMessageIsAsynchronous;
      }
    }
    function installPostMessageImplementation() {
      var messagePrefix = "setImmediate$" + Math.random() + "$";
      var onGlobalMessage = function(event4) {
        if (event4.source === global2 && typeof event4.data === "string" && event4.data.indexOf(messagePrefix) === 0) {
          runIfPresent(+event4.data.slice(messagePrefix.length));
        }
      };
      if (global2.addEventListener) {
        global2.addEventListener("message", onGlobalMessage, false);
      } else {
        global2.attachEvent("onmessage", onGlobalMessage);
      }
      registerImmediate = function(handle) {
        global2.postMessage(messagePrefix + handle, "*");
      };
    }
    function installMessageChannelImplementation() {
      var channel = new MessageChannel();
      channel.port1.onmessage = function(event4) {
        var handle = event4.data;
        runIfPresent(handle);
      };
      registerImmediate = function(handle) {
        channel.port2.postMessage(handle);
      };
    }
    function installReadyStateChangeImplementation() {
      var html = doc.documentElement;
      registerImmediate = function(handle) {
        var script2 = doc.createElement("script");
        script2.onreadystatechange = function() {
          runIfPresent(handle);
          script2.onreadystatechange = null;
          html.removeChild(script2);
          script2 = null;
        };
        html.appendChild(script2);
      };
    }
    function installSetTimeoutImplementation() {
      registerImmediate = function(handle) {
        setTimeout(runIfPresent, 0, handle);
      };
    }
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global2);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global2;
    if ({}.toString.call(global2.process) === "[object process]") {
      installNextTickImplementation();
    } else if (canUsePostMessage()) {
      installPostMessageImplementation();
    } else if (global2.MessageChannel) {
      installMessageChannelImplementation();
    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
      installReadyStateChangeImplementation();
    } else {
      installSetTimeoutImplementation();
    }
    attachTo.setImmediate = setImmediate2;
    attachTo.clearImmediate = clearImmediate;
  })(typeof self === "undefined" ? typeof window === "undefined" ? exports : window : self);
});

// node_modules/react-native-screens/lib/module/index.js
var require_module = __commonJS((exports) => {
  __markAsModule(exports);
  __export(exports, {
    NativeScreen: () => NativeScreen,
    NativeScreenContainer: () => NativeScreenContainer,
    Screen: () => Screen3,
    ScreenContainer: () => ScreenContainer2,
    ScreenStack: () => ScreenStack,
    ScreenStackHeaderBackButtonImage: () => ScreenStackHeaderBackButtonImage,
    ScreenStackHeaderCenterView: () => ScreenStackHeaderCenterView,
    ScreenStackHeaderConfig: () => ScreenStackHeaderConfig,
    ScreenStackHeaderLeftView: () => ScreenStackHeaderLeftView,
    ScreenStackHeaderRightView: () => ScreenStackHeaderRightView,
    enableScreens: () => enableScreens,
    screensEnabled: () => screensEnabled2,
    shouldUseActivityState: () => shouldUseActivityState3
  });
  var import_react68 = __toModule(require_react());
  function _extends99() {
    _extends99 = Object.assign || function(target2) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key3 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key3)) {
            target2[key3] = source[key3];
          }
        }
      }
      return target2;
    };
    return _extends99.apply(this, arguments);
  }
  var ENABLE_SCREENS = true;
  function enableScreens(shouldEnableScreens = true) {
    ENABLE_SCREENS = shouldEnableScreens;
  }
  function screensEnabled2() {
    return ENABLE_SCREENS;
  }
  var NativeScreen = class extends import_react68.default.Component {
    render() {
      let {
        active,
        activityState,
        style,
        enabled = true,
        ...rest
      } = this.props;
      if (active !== void 0 && activityState === void 0) {
        activityState = active !== 0 ? 2 : 0;
      }
      return /* @__PURE__ */ import_react68.default.createElement(View_default, _extends99({
        style: [style, ENABLE_SCREENS && enabled && activityState !== 2 ? {
          display: "none"
        } : null]
      }, rest));
    }
  };
  var Screen3 = Animated_default.createAnimatedComponent(NativeScreen);
  var ScreenContainer2 = View_default;
  var NativeScreenContainer = View_default;
  var ScreenStack = View_default;
  var ScreenStackHeaderBackButtonImage = View_default;
  var ScreenStackHeaderLeftView = View_default;
  var ScreenStackHeaderRightView = View_default;
  var ScreenStackHeaderCenterView = View_default;
  var ScreenStackHeaderConfig = View_default;
  var shouldUseActivityState3 = true;
});

// node_modules/@react-navigation/stack/lib/module/views/assets/back-icon.png
var require_back_icon = __commonJS((exports, module) => {
  module.exports = "/assets/back-icon-DBPL4PAY.png";
});

// node_modules/@react-navigation/stack/lib/module/views/assets/back-icon-mask.png
var require_back_icon_mask = __commonJS((exports, module) => {
  module.exports = "/assets/back-icon-mask-77OE5VDT.png";
});

// src/assets/background_dot.png
var require_background_dot = __commonJS((exports, module) => {
  module.exports = "/assets/background_dot-5MSGVFWW.png";
});

// src/assets/logo.png
var require_logo = __commonJS((exports, module) => {
  module.exports = "/assets/logo-OUIKRVNU.png";
});

// src/assets/arrow_back.png
var require_arrow_back = __commonJS((exports, module) => {
  module.exports = "/assets/arrow_back-ZWNGDALQ.png";
});

// node_modules/@react-navigation/drawer/lib/module/views/assets/toggle-drawer-icon.png
var require_toggle_drawer_icon = __commonJS((exports, module) => {
  module.exports = "/assets/toggle-drawer-icon-3FSG7IXR.png";
});

// node_modules/fbjs/lib/invariant.js
var require_invariant2 = __commonJS((exports, module) => {
  "use strict";
  var validateFormat = true ? function(format) {
  } : function(format) {
    if (format === void 0) {
      throw new Error("invariant(...): Second argument must be a string.");
    }
  };
  function invariant45(condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    validateFormat(format);
    if (!condition) {
      var error2;
      if (format === void 0) {
        error2 = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var argIndex = 0;
        error2 = new Error(format.replace(/%s/g, function() {
          return String(args[argIndex++]);
        }));
        error2.name = "Invariant Violation";
      }
      error2.framesToPop = 1;
      throw error2;
    }
  }
  module.exports = invariant45;
});

// node_modules/fbjs/lib/areEqual.js
var require_areEqual = __commonJS((exports, module) => {
  "use strict";
  var aStackPool = [];
  var bStackPool = [];
  /**
   * Checks if two values are equal. Values may be primitives, arrays, or objects.
   * Returns true if both arguments have the same keys and values.
   *
   * @see http://underscorejs.org
   * @copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
   * @license MIT
   */
  function areEqual(a, b) {
    var aStack = aStackPool.length ? aStackPool.pop() : [];
    var bStack = bStackPool.length ? bStackPool.pop() : [];
    var result = eq3(a, b, aStack, bStack);
    aStack.length = 0;
    bStack.length = 0;
    aStackPool.push(aStack);
    bStackPool.push(bStack);
    return result;
  }
  function eq3(a, b, aStack, bStack) {
    if (a === b) {
      return a !== 0 || 1 / a == 1 / b;
    }
    if (a == null || b == null) {
      return false;
    }
    if (typeof a != "object" || typeof b != "object") {
      return false;
    }
    var objToStr = Object.prototype.toString;
    var className = objToStr.call(a);
    if (className != objToStr.call(b)) {
      return false;
    }
    switch (className) {
      case "[object String]":
        return a == String(b);
      case "[object Number]":
        return isNaN(a) || isNaN(b) ? false : a == Number(b);
      case "[object Date]":
      case "[object Boolean]":
        return +a == +b;
      case "[object RegExp]":
        return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
    }
    var length = aStack.length;
    while (length--) {
      if (aStack[length] == a) {
        return bStack[length] == b;
      }
    }
    aStack.push(a);
    bStack.push(b);
    var size = 0;
    if (className === "[object Array]") {
      size = a.length;
      if (size !== b.length) {
        return false;
      }
      while (size--) {
        if (!eq3(a[size], b[size], aStack, bStack)) {
          return false;
        }
      }
    } else {
      if (a.constructor !== b.constructor) {
        return false;
      }
      if (a.hasOwnProperty("valueOf") && b.hasOwnProperty("valueOf")) {
        return a.valueOf() == b.valueOf();
      }
      var keys = Object.keys(a);
      if (keys.length != Object.keys(b).length) {
        return false;
      }
      for (var i = 0; i < keys.length; i++) {
        if (!eq3(a[keys[i]], b[keys[i]], aStack, bStack)) {
          return false;
        }
      }
    }
    aStack.pop();
    bStack.pop();
    return true;
  }
  module.exports = areEqual;
});

// src/assets/avatar.png
var require_avatar = __commonJS((exports, module) => {
  module.exports = "/assets/avatar-MC3KDE5V.png";
});

// src/assets/email-icon.png
var require_email_icon = __commonJS((exports, module) => {
  module.exports = "/assets/email-icon-7BEZT6DG.png";
});

// src/assets/favorite.png
var require_favorite = __commonJS((exports, module) => {
  module.exports = "/assets/favorite-RELK7QWK.png";
});

// src/assets/chameleon.jpg
var require_chameleon = __commonJS((exports, module) => {
  module.exports = "/assets/chameleon-2Q3XZ5FT.jpg";
});

// src/assets/wrecked-ship.jpg
var require_wrecked_ship = __commonJS((exports, module) => {
  module.exports = "/assets/wrecked-ship-B64AIDPM.jpg";
});

// src/assets/forest.jpg
var require_forest = __commonJS((exports, module) => {
  module.exports = "/assets/forest-KK322T75.jpg";
});

// src/assets/strawberries.jpg
var require_strawberries = __commonJS((exports, module) => {
  module.exports = "/assets/strawberries-Y23DJZSO.jpg";
});

// src/assets/city.jpg
var require_city = __commonJS((exports, module) => {
  module.exports = "/assets/city-FICWNFWM.jpg";
});

// node_modules/@expo-google-fonts/roboto/Roboto_100Thin.ttf
var require_Roboto_100Thin = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_100Thin-OEPGM3T7.ttf";
});

// node_modules/@expo-google-fonts/roboto/Roboto_100Thin_Italic.ttf
var require_Roboto_100Thin_Italic = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_100Thin_Italic-OX754AZN.ttf";
});

// node_modules/@expo-google-fonts/roboto/Roboto_300Light.ttf
var require_Roboto_300Light = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_300Light-SLGDW34U.ttf";
});

// node_modules/@expo-google-fonts/roboto/Roboto_300Light_Italic.ttf
var require_Roboto_300Light_Italic = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_300Light_Italic-UBCA6YFJ.ttf";
});

// node_modules/@expo-google-fonts/roboto/Roboto_400Regular.ttf
var require_Roboto_400Regular = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_400Regular-BFWJERNW.ttf";
});

// node_modules/@expo-google-fonts/roboto/Roboto_400Regular_Italic.ttf
var require_Roboto_400Regular_Italic = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_400Regular_Italic-3RTVMETX.ttf";
});

// node_modules/@expo-google-fonts/roboto/Roboto_500Medium.ttf
var require_Roboto_500Medium = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_500Medium-6Z4DAEGV.ttf";
});

// node_modules/@expo-google-fonts/roboto/Roboto_500Medium_Italic.ttf
var require_Roboto_500Medium_Italic = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_500Medium_Italic-4TRR4VOS.ttf";
});

// node_modules/@expo-google-fonts/roboto/Roboto_700Bold.ttf
var require_Roboto_700Bold = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_700Bold-HXLRGEJ7.ttf";
});

// node_modules/@expo-google-fonts/roboto/Roboto_700Bold_Italic.ttf
var require_Roboto_700Bold_Italic = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_700Bold_Italic-MC4YMC37.ttf";
});

// node_modules/@expo-google-fonts/roboto/Roboto_900Black.ttf
var require_Roboto_900Black = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_900Black-5ZJPPT4O.ttf";
});

// node_modules/@expo-google-fonts/roboto/Roboto_900Black_Italic.ttf
var require_Roboto_900Black_Italic = __commonJS((exports, module) => {
  module.exports = "/assets/Roboto_900Black_Italic-SS5EPJKR.ttf";
});

// node_modules/expo/build/launch/registerRootComponent.web.js
var React30 = __toModule(require_react());

// node_modules/react-native-web/dist/modules/AccessibilityUtil/buttonLikeRoles.js
var buttonLikeRoles = {
  button: true,
  menuitem: true
};
var buttonLikeRoles_default = buttonLikeRoles;

// node_modules/react-native-web/dist/modules/AccessibilityUtil/isDisabled.js
var isDisabled = function isDisabled2(props) {
  return props.disabled || Array.isArray(props.accessibilityStates) && props.accessibilityStates.indexOf("disabled") > -1;
};
var isDisabled_default = isDisabled;

// node_modules/react-native-web/dist/modules/AccessibilityUtil/propsToAriaRole.js
var accessibilityRoleToWebRole = {
  adjustable: "slider",
  button: "button",
  header: "heading",
  image: "img",
  imagebutton: null,
  keyboardkey: null,
  label: null,
  link: "link",
  none: "presentation",
  search: "search",
  summary: "region",
  text: null
};
var propsToAriaRole = function propsToAriaRole2(_ref) {
  var accessibilityRole = _ref.accessibilityRole;
  if (accessibilityRole) {
    var inferredRole = accessibilityRoleToWebRole[accessibilityRole];
    if (inferredRole !== null) {
      return inferredRole || accessibilityRole;
    }
  }
};
var propsToAriaRole_default = propsToAriaRole;

// node_modules/react-native-web/dist/modules/AccessibilityUtil/propsToAccessibilityComponent.js
var roleComponents = {
  article: "article",
  banner: "header",
  blockquote: "blockquote",
  code: "code",
  complementary: "aside",
  contentinfo: "footer",
  deletion: "del",
  emphasis: "em",
  figure: "figure",
  insertion: "ins",
  form: "form",
  link: "a",
  list: "ul",
  listitem: "li",
  main: "main",
  navigation: "nav",
  region: "section",
  strong: "strong"
};
var emptyObject = {};
var propsToAccessibilityComponent = function propsToAccessibilityComponent2(props) {
  if (props === void 0) {
    props = emptyObject;
  }
  if (props.accessibilityRole === "label") {
    return "label";
  }
  if (props.href != null) {
    return "a";
  }
  var role = propsToAriaRole_default(props);
  if (role) {
    if (role === "heading") {
      var level = props["aria-level"];
      if (level != null) {
        return "h" + level;
      }
      return "h1";
    }
    return roleComponents[role];
  }
};
var propsToAccessibilityComponent_default = propsToAccessibilityComponent;

// node_modules/react-native-web/dist/modules/AccessibilityUtil/index.js
var AccessibilityUtil = {
  buttonLikeRoles: buttonLikeRoles_default,
  isDisabled: isDisabled_default,
  propsToAccessibilityComponent: propsToAccessibilityComponent_default,
  propsToAriaRole: propsToAriaRole_default
};
var AccessibilityUtil_default = AccessibilityUtil;

// node_modules/react-native-web/dist/exports/StyleSheet/createStyleResolver.js
var import_ExecutionEnvironment5 = __toModule(require_ExecutionEnvironment());

// node_modules/react-native-web/dist/exports/StyleSheet/createCSSStyleSheet.js
var import_ExecutionEnvironment = __toModule(require_ExecutionEnvironment());
function createCSSStyleSheet(id2) {
  if (import_ExecutionEnvironment.canUseDOM) {
    var element = document.getElementById(id2);
    if (element != null) {
      return element.sheet;
    } else {
      var _element = document.createElement("style");
      _element.setAttribute("id", id2);
      var head2 = document.head;
      if (head2) {
        head2.insertBefore(_element, head2.firstChild);
      }
      return _element.sheet;
    }
  } else {
    return null;
  }
}

// node_modules/react-native-web/dist/modules/unitlessNumbers/index.js
var unitlessNumbers = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexOrder: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  fontWeight: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowGap: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnGap: true,
  gridColumnStart: true,
  lineClamp: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true,
  scale: true,
  scaleX: true,
  scaleY: true,
  scaleZ: true,
  shadowOpacity: true
};
var prefixes = ["ms", "Moz", "O", "Webkit"];
var prefixKey = function prefixKey2(prefix2, key3) {
  return prefix2 + key3.charAt(0).toUpperCase() + key3.substring(1);
};
Object.keys(unitlessNumbers).forEach(function(prop) {
  prefixes.forEach(function(prefix2) {
    unitlessNumbers[prefixKey(prefix2, prop)] = unitlessNumbers[prop];
  });
});
var unitlessNumbers_default = unitlessNumbers;

// node_modules/react-native-web/dist/modules/isWebColor/index.js
var isWebColor = function isWebColor2(color39) {
  return color39 === "currentcolor" || color39 === "currentColor" || color39 === "inherit" || color39.indexOf("var(") === 0;
};
var isWebColor_default = isWebColor;

// node_modules/react-native-web/dist/exports/processColor/index.js
var import_normalize_css_color = __toModule(require_normalize_css_color());
var processColor = function processColor2(color39) {
  if (color39 === void 0 || color39 === null) {
    return color39;
  }
  var int32Color = (0, import_normalize_css_color.default)(color39);
  if (int32Color === void 0 || int32Color === null) {
    return void 0;
  }
  int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;
  return int32Color;
};
var processColor_default = processColor;

// node_modules/react-native-web/dist/modules/normalizeColor/index.js
var normalizeColor2 = function normalizeColor3(color39, opacity3) {
  if (opacity3 === void 0) {
    opacity3 = 1;
  }
  if (color39 == null)
    return;
  if (typeof color39 === "string" && isWebColor_default(color39)) {
    return color39;
  }
  var colorInt = processColor_default(color39);
  if (colorInt != null) {
    var r = colorInt >> 16 & 255;
    var g = colorInt >> 8 & 255;
    var b = colorInt & 255;
    var a = (colorInt >> 24 & 255) / 255;
    var alpha2 = (a * opacity3).toFixed(2);
    return "rgba(" + r + "," + g + "," + b + "," + alpha2 + ")";
  }
};
var normalizeColor_default = normalizeColor2;

// node_modules/react-native-web/dist/exports/StyleSheet/normalizeValueWithProperty.js
var colorProps = {
  backgroundColor: true,
  borderColor: true,
  borderTopColor: true,
  borderRightColor: true,
  borderBottomColor: true,
  borderLeftColor: true,
  color: true,
  shadowColor: true,
  textDecorationColor: true,
  textShadowColor: true
};
function normalizeValueWithProperty(value, property) {
  var returnValue = value;
  if ((property == null || !unitlessNumbers_default[property]) && typeof value === "number") {
    returnValue = value + "px";
  } else if (property != null && colorProps[property]) {
    returnValue = normalizeColor_default(value);
  }
  return returnValue;
}

// node_modules/react-native-web/dist/exports/StyleSheet/resolveShadowValue.js
var defaultOffset = {
  height: 0,
  width: 0
};
var resolveShadowValue = function resolveShadowValue2(style) {
  var shadowColor = style.shadowColor, shadowOffset = style.shadowOffset, shadowOpacity = style.shadowOpacity, shadowRadius = style.shadowRadius;
  var _ref = shadowOffset || defaultOffset, height = _ref.height, width = _ref.width;
  var offsetX = normalizeValueWithProperty(width);
  var offsetY = normalizeValueWithProperty(height);
  var blurRadius = normalizeValueWithProperty(shadowRadius || 0);
  var color39 = normalizeColor_default(shadowColor || "black", shadowOpacity);
  if (color39 != null && offsetX != null && offsetY != null && blurRadius != null) {
    return offsetX + " " + offsetY + " " + blurRadius + " " + color39;
  }
};
var resolveShadowValue_default = resolveShadowValue;

// node_modules/react-native-web/dist/exports/StyleSheet/createCompileableStyle.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
var defaultOffset2 = {
  height: 0,
  width: 0
};
function boxShadowReducer(resolvedStyle, style) {
  var boxShadow = style.boxShadow;
  var shadow2 = resolveShadowValue_default(style);
  if (shadow2 != null) {
    resolvedStyle.boxShadow = boxShadow ? boxShadow + ", " + shadow2 : shadow2;
  }
}
function textShadowReducer(resolvedStyle, style) {
  var textShadowColor = style.textShadowColor, textShadowOffset = style.textShadowOffset, textShadowRadius = style.textShadowRadius;
  var _ref = textShadowOffset || defaultOffset2, height = _ref.height, width = _ref.width;
  var radius2 = textShadowRadius || 0;
  var offsetX = normalizeValueWithProperty(width);
  var offsetY = normalizeValueWithProperty(height);
  var blurRadius = normalizeValueWithProperty(radius2);
  var color39 = normalizeValueWithProperty(textShadowColor, "textShadowColor");
  if (color39 && (height !== 0 || width !== 0 || radius2 !== 0) && offsetX != null && offsetY != null && blurRadius != null) {
    resolvedStyle.textShadow = offsetX + " " + offsetY + " " + blurRadius + " " + color39;
  }
}
var createCompileableStyle = function createCompileableStyle2(styles152) {
  var shadowColor = styles152.shadowColor, shadowOffset = styles152.shadowOffset, shadowOpacity = styles152.shadowOpacity, shadowRadius = styles152.shadowRadius, textShadowColor = styles152.textShadowColor, textShadowOffset = styles152.textShadowOffset, textShadowRadius = styles152.textShadowRadius, nextStyles = _objectWithoutPropertiesLoose(styles152, ["shadowColor", "shadowOffset", "shadowOpacity", "shadowRadius", "textShadowColor", "textShadowOffset", "textShadowRadius"]);
  if (shadowColor != null || shadowOffset != null || shadowOpacity != null || shadowRadius != null) {
    boxShadowReducer(nextStyles, styles152);
  }
  if (textShadowColor != null || textShadowOffset != null || textShadowRadius != null) {
    textShadowReducer(nextStyles, styles152);
  }
  return nextStyles;
};
var createCompileableStyle_default = createCompileableStyle;

// node_modules/react-native-web/dist/exports/StyleSheet/createOrderedCSSStyleSheet.js
var slice = Array.prototype.slice;
function createOrderedCSSStyleSheet(sheet) {
  var groups = {};
  var selectors = {};
  if (sheet != null) {
    var group3;
    slice.call(sheet.cssRules).forEach(function(cssRule, i) {
      var cssText = cssRule.cssText;
      if (cssText.indexOf("stylesheet-group") > -1) {
        group3 = decodeGroupRule(cssRule);
        groups[group3] = {
          start: i,
          rules: [cssText]
        };
      } else {
        var selectorText = getSelectorText(cssText);
        if (selectorText != null) {
          selectors[selectorText] = true;
          groups[group3].rules.push(cssText);
        }
      }
    });
  }
  function sheetInsert(sheet2, group4, text2) {
    var orderedGroups = getOrderedGroups(groups);
    var groupIndex = orderedGroups.indexOf(group4);
    var nextGroupIndex = groupIndex + 1;
    var nextGroup = orderedGroups[nextGroupIndex];
    var position2 = nextGroup != null && groups[nextGroup].start != null ? groups[nextGroup].start : sheet2.cssRules.length;
    var isInserted = insertRuleAt(sheet2, text2, position2);
    if (isInserted) {
      if (groups[group4].start == null) {
        groups[group4].start = position2;
      }
      for (var i = nextGroupIndex; i < orderedGroups.length; i += 1) {
        var groupNumber = orderedGroups[i];
        var previousStart = groups[groupNumber].start;
        groups[groupNumber].start = previousStart + 1;
      }
    }
    return isInserted;
  }
  var OrderedCSSStyleSheet = {
    getTextContent: function getTextContent() {
      return getOrderedGroups(groups).map(function(group4) {
        var rules = groups[group4].rules;
        return rules.join("\n");
      }).join("\n");
    },
    insert: function insert(cssText, groupValue) {
      var group4 = Number(groupValue);
      if (groups[group4] == null) {
        var markerRule = encodeGroupRule(group4);
        groups[group4] = {
          start: null,
          rules: [markerRule]
        };
        if (sheet != null) {
          sheetInsert(sheet, group4, markerRule);
        }
      }
      var selectorText = getSelectorText(cssText);
      if (selectorText != null && selectors[selectorText] == null) {
        selectors[selectorText] = true;
        groups[group4].rules.push(cssText);
        if (sheet != null) {
          var isInserted = sheetInsert(sheet, group4, cssText);
          if (!isInserted) {
            groups[group4].rules.pop();
          }
        }
      }
    }
  };
  return OrderedCSSStyleSheet;
}
function encodeGroupRule(group3) {
  return '[stylesheet-group="' + group3 + '"]{}';
}
function decodeGroupRule(cssRule) {
  return Number(cssRule.selectorText.split(/["']/)[1]);
}
function getOrderedGroups(obj) {
  return Object.keys(obj).map(Number).sort(function(a, b) {
    return a > b ? 1 : -1;
  });
}
var pattern = /\s*([,])\s*/g;
function getSelectorText(cssText) {
  var selector = cssText.split("{")[0].trim();
  return selector !== "" ? selector.replace(pattern, "$1") : null;
}
function insertRuleAt(root, cssText, position2) {
  try {
    root.insertRule(cssText, position2);
    return true;
  } catch (e) {
    return false;
  }
}

// node_modules/react-native-web/dist/modules/flattenArray/index.js
function flattenArray(array) {
  function flattenDown(array2, result) {
    for (var i = 0; i < array2.length; i++) {
      var value = array2[i];
      if (Array.isArray(value)) {
        flattenDown(value, result);
      } else if (value != null && value !== false) {
        result.push(value);
      }
    }
    return result;
  }
  return flattenDown(array, []);
}
var flattenArray_default = flattenArray;

// node_modules/react-native-web/dist/exports/StyleSheet/ReactNativePropRegistry.js
var emptyObject2 = {};
var objects = {};
var prefix = "r";
var uniqueID = 1;
var createKey = function createKey2(id2) {
  return prefix + "-" + id2;
};
var ReactNativePropRegistry = /* @__PURE__ */ function() {
  function ReactNativePropRegistry2() {
  }
  ReactNativePropRegistry2.register = function register(object) {
    var id2 = uniqueID++;
    if (true) {
      Object.freeze(object);
    }
    var key3 = createKey(id2);
    objects[key3] = object;
    return id2;
  };
  ReactNativePropRegistry2.getByID = function getByID(id2) {
    if (!id2) {
      return emptyObject2;
    }
    var key3 = createKey(id2);
    var object = objects[key3];
    if (!object) {
      console.warn("Invalid style with id `" + id2 + "`. Skipping ...");
      return emptyObject2;
    }
    return object;
  };
  return ReactNativePropRegistry2;
}();

// node_modules/react-native-web/dist/exports/StyleSheet/flattenStyle.js
var import_invariant = __toModule(require_invariant());
function getStyle(style) {
  if (typeof style === "number") {
    return ReactNativePropRegistry.getByID(style);
  }
  return style;
}
function flattenStyle(style) {
  if (!style) {
    return void 0;
  }
  if (true) {
    (0, import_invariant.default)(style !== true, "style may be false but not true");
  }
  if (!Array.isArray(style)) {
    return getStyle(style);
  }
  var result = {};
  for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
    var computedStyle = flattenStyle(style[i]);
    if (computedStyle) {
      for (var key3 in computedStyle) {
        var value = computedStyle[key3];
        result[key3] = value;
      }
    }
  }
  return result;
}
var flattenStyle_default = flattenStyle;

// node_modules/react-native-web/dist/exports/I18nManager/index.js
var import_ExecutionEnvironment2 = __toModule(require_ExecutionEnvironment());
var doLeftAndRightSwapInRTL = true;
var isPreferredLanguageRTL = false;
var isRTLAllowed = true;
var isRTLForced = false;
var isRTL = function isRTL2() {
  if (isRTLForced) {
    return true;
  }
  return isRTLAllowed && isPreferredLanguageRTL;
};
var onDirectionChange = function onDirectionChange2() {
  if (import_ExecutionEnvironment2.default.canUseDOM) {
    if (document.documentElement && document.documentElement.setAttribute) {
      document.documentElement.setAttribute("dir", isRTL() ? "rtl" : "ltr");
    }
  }
};
var I18nManager = {
  allowRTL: function allowRTL(bool) {
    isRTLAllowed = bool;
    onDirectionChange();
  },
  forceRTL: function forceRTL(bool) {
    isRTLForced = bool;
    onDirectionChange();
  },
  getConstants: function getConstants() {
    return {
      doLeftAndRightSwapInRTL,
      isRTL: isRTL()
    };
  },
  setPreferredLanguageRTL: function setPreferredLanguageRTL(bool) {
    isPreferredLanguageRTL = bool;
    onDirectionChange();
  },
  swapLeftAndRightInRTL: function swapLeftAndRightInRTL(bool) {
    doLeftAndRightSwapInRTL = bool;
  }
};
var I18nManager_default = I18nManager;

// node_modules/react-native-web/dist/modules/multiplyStyleLengthValue/index.js
var CSS_UNIT_RE = /^[+-]?\d*(?:\.\d+)?(?:[Ee][+-]?\d+)?(%|\w*)/;
var getUnit = function getUnit2(str) {
  return str.match(CSS_UNIT_RE)[1];
};
var isNumeric = function isNumeric2(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
};
var multiplyStyleLengthValue = function multiplyStyleLengthValue2(value, multiple) {
  if (typeof value === "string") {
    var number = parseFloat(value) * multiple;
    var unit = getUnit(value);
    return "" + number + unit;
  } else if (isNumeric(value)) {
    return value * multiple;
  }
};
var multiplyStyleLengthValue_default = multiplyStyleLengthValue;

// node_modules/react-native-web/dist/exports/StyleSheet/i18nStyle.js
var emptyObject3 = {};
var borderTopLeftRadius = "borderTopLeftRadius";
var borderTopRightRadius = "borderTopRightRadius";
var borderBottomLeftRadius = "borderBottomLeftRadius";
var borderBottomRightRadius = "borderBottomRightRadius";
var borderLeftColor = "borderLeftColor";
var borderLeftStyle = "borderLeftStyle";
var borderLeftWidth = "borderLeftWidth";
var borderRightColor = "borderRightColor";
var borderRightStyle = "borderRightStyle";
var borderRightWidth = "borderRightWidth";
var right = "right";
var marginLeft = "marginLeft";
var marginRight = "marginRight";
var paddingLeft = "paddingLeft";
var paddingRight = "paddingRight";
var left = "left";
var PROPERTIES_FLIP = {
  borderTopLeftRadius: borderTopRightRadius,
  borderTopRightRadius: borderTopLeftRadius,
  borderBottomLeftRadius: borderBottomRightRadius,
  borderBottomRightRadius: borderBottomLeftRadius,
  borderLeftColor: borderRightColor,
  borderLeftStyle: borderRightStyle,
  borderLeftWidth: borderRightWidth,
  borderRightColor: borderLeftColor,
  borderRightStyle: borderLeftStyle,
  borderRightWidth: borderLeftWidth,
  left: right,
  marginLeft: marginRight,
  marginRight: marginLeft,
  paddingLeft: paddingRight,
  paddingRight: paddingLeft,
  right: left
};
var PROPERTIES_I18N = {
  borderTopStartRadius: borderTopLeftRadius,
  borderTopEndRadius: borderTopRightRadius,
  borderBottomStartRadius: borderBottomLeftRadius,
  borderBottomEndRadius: borderBottomRightRadius,
  borderStartColor: borderLeftColor,
  borderStartStyle: borderLeftStyle,
  borderStartWidth: borderLeftWidth,
  borderEndColor: borderRightColor,
  borderEndStyle: borderRightStyle,
  borderEndWidth: borderRightWidth,
  end: right,
  marginStart: marginLeft,
  marginEnd: marginRight,
  paddingStart: paddingLeft,
  paddingEnd: paddingRight,
  start: left
};
var PROPERTIES_VALUE = {
  clear: true,
  float: true,
  textAlign: true
};
var additiveInverse = function additiveInverse2(value) {
  return multiplyStyleLengthValue_default(value, -1);
};
var i18nStyle = function i18nStyle2(originalStyle) {
  var _I18nManager$getConst = I18nManager_default.getConstants(), doLeftAndRightSwapInRTL2 = _I18nManager$getConst.doLeftAndRightSwapInRTL, isRTL4 = _I18nManager$getConst.isRTL;
  var style = originalStyle || emptyObject3;
  var frozenProps = {};
  var nextStyle = {};
  for (var originalProp in style) {
    if (!Object.prototype.hasOwnProperty.call(style, originalProp)) {
      continue;
    }
    var originalValue = style[originalProp];
    var prop = originalProp;
    var value = originalValue;
    if (PROPERTIES_I18N.hasOwnProperty(originalProp)) {
      var convertedProp = PROPERTIES_I18N[originalProp];
      prop = isRTL4 ? PROPERTIES_FLIP[convertedProp] : convertedProp;
    } else if (isRTL4 && doLeftAndRightSwapInRTL2 && PROPERTIES_FLIP[originalProp]) {
      prop = PROPERTIES_FLIP[originalProp];
    }
    if (PROPERTIES_VALUE.hasOwnProperty(originalProp)) {
      if (originalValue === "start") {
        value = isRTL4 ? "right" : "left";
      } else if (originalValue === "end") {
        value = isRTL4 ? "left" : "right";
      } else if (isRTL4 && doLeftAndRightSwapInRTL2) {
        if (originalValue === "left") {
          value = "right";
        } else if (originalValue === "right") {
          value = "left";
        }
      }
    }
    if (prop === "transitionProperty") {
      if (PROPERTIES_I18N.hasOwnProperty(value)) {
        var convertedValue = PROPERTIES_I18N[originalValue];
        value = isRTL4 ? PROPERTIES_FLIP[convertedValue] : convertedValue;
      } else if (isRTL4 && doLeftAndRightSwapInRTL2) {
        var flippedValue = PROPERTIES_FLIP[originalValue];
        if (flippedValue != null) {
          value = flippedValue;
        }
      }
    }
    if (isRTL4 && prop === "textShadowOffset") {
      var invertedValue = additiveInverse(value.width);
      value.width = invertedValue;
      nextStyle[prop] = value;
    } else if (!frozenProps[prop]) {
      nextStyle[prop] = value;
    }
    if (PROPERTIES_I18N[originalProp]) {
      frozenProps[prop] = true;
    }
  }
  return nextStyle;
};
var i18nStyle_default = i18nStyle;

// node_modules/react-native-web/dist/exports/StyleSheet/createReactDOMStyle.js
var import_ExecutionEnvironment3 = __toModule(require_ExecutionEnvironment());

// node_modules/react-native-web/dist/exports/StyleSheet/constants.js
var STYLE_ELEMENT_ID = "react-native-stylesheet";
var STYLE_GROUPS = {
  reset: 0,
  modality: 0.1,
  classicReset: 0.5,
  classic: 1,
  atomic: 2.2,
  custom: {
    borderColor: 2,
    borderRadius: 2,
    borderStyle: 2,
    borderWidth: 2,
    display: 2,
    flex: 2,
    margin: 2,
    overflow: 2,
    overscrollBehavior: 2,
    padding: 2,
    marginHorizontal: 2.1,
    marginVertical: 2.1,
    paddingHorizontal: 2.1,
    paddingVertical: 2.1
  }
};
var STYLE_SHORT_FORM_EXPANSIONS = {
  borderColor: ["borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor"],
  borderRadius: ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"],
  borderStyle: ["borderTopStyle", "borderRightStyle", "borderBottomStyle", "borderLeftStyle"],
  borderWidth: ["borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth"],
  margin: ["marginTop", "marginRight", "marginBottom", "marginLeft"],
  marginHorizontal: ["marginRight", "marginLeft"],
  marginVertical: ["marginTop", "marginBottom"],
  overflow: ["overflowX", "overflowY"],
  overscrollBehavior: ["overscrollBehaviorX", "overscrollBehaviorY"],
  padding: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
  paddingHorizontal: ["paddingRight", "paddingLeft"],
  paddingVertical: ["paddingTop", "paddingBottom"]
};
var MONOSPACE_FONT_STACK = "monospace,monospace";
var SYSTEM_FONT_STACK = '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif';

// node_modules/react-native-web/dist/exports/StyleSheet/createReactDOMStyle.js
var emptyObject4 = {};
var supportsCSS3TextDecoration = !import_ExecutionEnvironment3.canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports("text-decoration-line", "none") || window.CSS.supports("-webkit-text-decoration-line", "none"));
var mapTransform = function mapTransform2(transform) {
  var type = Object.keys(transform)[0];
  var value = transform[type];
  if (type === "matrix" || type === "matrix3d") {
    return type + "(" + value.join(",") + ")";
  } else {
    var normalizedValue = normalizeValueWithProperty(value, type);
    return type + "(" + normalizedValue + ")";
  }
};
var resolveTransform = function resolveTransform2(resolvedStyle, style) {
  var transform = style.transform;
  if (Array.isArray(style.transform)) {
    transform = style.transform.map(mapTransform).join(" ");
  }
  resolvedStyle.transform = transform;
};
var createReactDOMStyle = function createReactDOMStyle2(style) {
  if (!style) {
    return emptyObject4;
  }
  var resolvedStyle = {};
  Object.keys(style).sort().forEach(function(prop) {
    var value = normalizeValueWithProperty(style[prop], prop);
    if (value == null) {
      return;
    }
    switch (prop) {
      case "elevation":
      case "overlayColor":
      case "resizeMode":
      case "tintColor": {
        break;
      }
      case "backgroundClip": {
        if (value === "text") {
          resolvedStyle.backgroundClip = value;
          resolvedStyle.WebkitBackgroundClip = value;
        }
        break;
      }
      case "flex": {
        if (value === -1) {
          resolvedStyle.flexGrow = 0;
          resolvedStyle.flexShrink = 1;
          resolvedStyle.flexBasis = "auto";
        } else {
          resolvedStyle.flex = value;
        }
        break;
      }
      case "font": {
        resolvedStyle[prop] = value.replace("System", SYSTEM_FONT_STACK);
        break;
      }
      case "fontFamily": {
        if (value.indexOf("System") > -1) {
          var stack = value.split(/,\s*/);
          stack[stack.indexOf("System")] = SYSTEM_FONT_STACK;
          resolvedStyle[prop] = stack.join(",");
        } else if (value === "monospace") {
          resolvedStyle[prop] = MONOSPACE_FONT_STACK;
        } else {
          resolvedStyle[prop] = value;
        }
        break;
      }
      case "fontVariant": {
        if (Array.isArray(value) && value.length > 0) {
          resolvedStyle.fontVariant = value.join(" ");
        }
        break;
      }
      case "textAlignVertical": {
        resolvedStyle.verticalAlign = value === "center" ? "middle" : value;
        break;
      }
      case "textDecorationLine": {
        if (!supportsCSS3TextDecoration) {
          resolvedStyle.textDecoration = value;
        } else {
          resolvedStyle.textDecorationLine = value;
        }
        break;
      }
      case "transform":
      case "transformMatrix": {
        resolveTransform(resolvedStyle, style);
        break;
      }
      case "writingDirection": {
        resolvedStyle.direction = value;
        break;
      }
      default: {
        var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];
        if (longFormProperties) {
          longFormProperties.forEach(function(longForm, i) {
            if (typeof style[longForm] === "undefined") {
              resolvedStyle[longForm] = value;
            }
          });
        } else {
          resolvedStyle[prop] = Array.isArray(value) ? value.join(",") : value;
        }
      }
    }
  });
  return resolvedStyle;
};
var createReactDOMStyle_default = createReactDOMStyle;

// node_modules/react-native-web/dist/vendor/hash/index.js
function murmurhash2_32_gc(str, seed2) {
  var l = str.length, h = seed2 ^ l, i = 0, k;
  while (l >= 4) {
    k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
    k = (k & 65535) * 1540483477 + (((k >>> 16) * 1540483477 & 65535) << 16);
    k ^= k >>> 24;
    k = (k & 65535) * 1540483477 + (((k >>> 16) * 1540483477 & 65535) << 16);
    h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16) ^ k;
    l -= 4;
    ++i;
  }
  switch (l) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 255) << 16;
    case 2:
      h ^= (str.charCodeAt(i + 1) & 255) << 8;
    case 1:
      h ^= str.charCodeAt(i) & 255;
      h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16);
  }
  h ^= h >>> 13;
  h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16);
  h ^= h >>> 15;
  return h >>> 0;
}
var hash = function hash2(str) {
  return murmurhash2_32_gc(str, 1).toString(36);
};
var hash_default = hash;

// node_modules/react-native-web/dist/exports/StyleSheet/compile.js
var import_hyphenate_style_name = require_hyphenate_style_name();

// node_modules/react-native-web/dist/modules/prefixStyles/index.js
var import_createPrefixer = __toModule(require_createPrefixer());

// node_modules/react-native-web/dist/modules/prefixStyles/static.js
var import_backgroundClip = __toModule(require_backgroundClip());
var import_crossFade = __toModule(require_crossFade());
var import_cursor = __toModule(require_cursor());
var import_filter = __toModule(require_filter());
var import_flex = __toModule(require_flex());
var import_flexboxIE = __toModule(require_flexboxIE());
var import_flexboxOld = __toModule(require_flexboxOld());
var import_gradient = __toModule(require_gradient());
var import_grid = __toModule(require_grid());
var import_imageSet = __toModule(require_imageSet());
var import_logical = __toModule(require_logical());
var import_position = __toModule(require_position());
var import_sizing = __toModule(require_sizing());
var import_transition = __toModule(require_transition());
var w = ["Webkit"];
var m = ["Moz"];
var ms = ["ms"];
var wm = ["Webkit", "Moz"];
var wms = ["Webkit", "ms"];
var wmms = ["Webkit", "Moz", "ms"];
var static_default = {
  plugins: [import_backgroundClip.default, import_crossFade.default, import_cursor.default, import_filter.default, import_flex.default, import_flexboxIE.default, import_flexboxOld.default, import_gradient.default, import_grid.default, import_imageSet.default, import_logical.default, import_position.default, import_sizing.default, import_transition.default],
  prefixMap: {
    animation: w,
    animationDelay: w,
    animationDirection: w,
    animationFillMode: w,
    animationDuration: w,
    animationIterationCount: w,
    animationName: w,
    animationPlayState: w,
    animationTimingFunction: w,
    appearance: wm,
    userSelect: wmms,
    textEmphasisPosition: w,
    textEmphasis: w,
    textEmphasisStyle: w,
    textEmphasisColor: w,
    boxDecorationBreak: w,
    clipPath: w,
    maskImage: w,
    maskMode: w,
    maskRepeat: w,
    maskPosition: w,
    maskClip: w,
    maskOrigin: w,
    maskSize: w,
    maskComposite: w,
    mask: w,
    maskBorderSource: w,
    maskBorderMode: w,
    maskBorderSlice: w,
    maskBorderWidth: w,
    maskBorderOutset: w,
    maskBorderRepeat: w,
    maskBorder: w,
    maskType: w,
    textDecorationStyle: w,
    textDecorationSkip: w,
    textDecorationLine: w,
    textDecorationColor: w,
    filter: w,
    fontFeatureSettings: w,
    breakAfter: wmms,
    breakBefore: wmms,
    breakInside: wmms,
    columnCount: wm,
    columnFill: wm,
    columnGap: wm,
    columnRule: wm,
    columnRuleColor: wm,
    columnRuleStyle: wm,
    columnRuleWidth: wm,
    columns: wm,
    columnSpan: wm,
    columnWidth: wm,
    writingMode: wms,
    flex: wms,
    flexBasis: w,
    flexDirection: wms,
    flexGrow: w,
    flexFlow: wms,
    flexShrink: w,
    flexWrap: wms,
    alignContent: w,
    alignItems: w,
    alignSelf: w,
    justifyContent: w,
    order: w,
    transform: w,
    transformOrigin: w,
    transformOriginX: w,
    transformOriginY: w,
    backfaceVisibility: w,
    perspective: w,
    perspectiveOrigin: w,
    transformStyle: w,
    transformOriginZ: w,
    backdropFilter: w,
    fontKerning: w,
    scrollSnapType: wms,
    scrollSnapPointsX: wms,
    scrollSnapPointsY: wms,
    scrollSnapDestination: wms,
    scrollSnapCoordinate: wms,
    shapeImageThreshold: w,
    shapeImageMargin: w,
    shapeImageOutside: w,
    hyphens: wmms,
    flowInto: wms,
    flowFrom: wms,
    regionFragment: wms,
    textOrientation: w,
    textAlignLast: m,
    tabSize: m,
    wrapFlow: ms,
    wrapThrough: ms,
    wrapMargin: ms,
    touchAction: ms,
    textSizeAdjust: ["ms", "Webkit"],
    borderImage: w,
    borderImageOutset: w,
    borderImageRepeat: w,
    borderImageSlice: w,
    borderImageSource: w,
    borderImageWidth: w,
    transitionDelay: w,
    transitionDuration: w,
    transitionProperty: w,
    transitionTimingFunction: w
  }
};

// node_modules/react-native-web/dist/modules/prefixStyles/index.js
var prefixAll = (0, import_createPrefixer.default)(static_default);
var prefixStyles_default = prefixAll;
var prefixInlineStyles = function prefixInlineStyles2(style) {
  var prefixedStyles = prefixAll(style);
  Object.keys(prefixedStyles).forEach(function(prop) {
    var value = prefixedStyles[prop];
    if (Array.isArray(value)) {
      prefixedStyles[prop] = value[value.length - 1];
    }
  });
  return prefixedStyles;
};

// node_modules/react-native-web/dist/exports/StyleSheet/compile.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key3) {
        _defineProperty(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
var cache = {
  get: function get(property, value) {
    if (cache[property] != null && cache[property].hasOwnProperty(value) && cache[property][value] != null) {
      return cache[property][value];
    }
  },
  set: function set(property, value, object) {
    if (cache[property] == null) {
      cache[property] = {};
    }
    return cache[property][value] = object;
  }
};
function atomic(style) {
  return Object.keys(style).sort().reduce(function(acc2, property) {
    var value = style[property];
    if (value != null) {
      var valueString = stringifyValueWithProperty(value, property);
      var cachedResult = cache.get(property, valueString);
      if (cachedResult != null) {
        var identifier2 = cachedResult.identifier;
        acc2[identifier2] = cachedResult;
      } else {
        var _identifier = createIdentifier("r", property, value);
        var rules = createAtomicRules(_identifier, property, value);
        var _cachedResult = cache.set(property, valueString, {
          property,
          value: stringifyValueWithProperty(value, property),
          identifier: _identifier,
          rules
        });
        acc2[_identifier] = _cachedResult;
      }
    }
    return acc2;
  }, {});
}
function classic(style, name) {
  var _ref;
  var identifier2 = createIdentifier("css", name, style);
  var animationKeyframes = style.animationKeyframes, rest = _objectWithoutPropertiesLoose2(style, ["animationKeyframes"]);
  var rules = [];
  var selector = "." + identifier2;
  var animationName;
  if (animationKeyframes != null) {
    var _processKeyframesValu = processKeyframesValue(animationKeyframes), animationNames = _processKeyframesValu.animationNames, keyframesRules = _processKeyframesValu.rules;
    animationName = animationNames.join(",");
    rules.push.apply(rules, keyframesRules);
  }
  var block2 = createDeclarationBlock(_objectSpread(_objectSpread({}, rest), {}, {
    animationName
  }));
  rules.push("" + selector + block2);
  return _ref = {}, _ref[identifier2] = {
    identifier: identifier2,
    rules
  }, _ref;
}
function inline(style) {
  return prefixInlineStyles(createReactDOMStyle_default(style));
}
function stringifyValueWithProperty(value, property) {
  var normalizedValue = normalizeValueWithProperty(value, property);
  return typeof normalizedValue !== "string" ? JSON.stringify(normalizedValue || "") : normalizedValue;
}
function createAtomicRules(identifier2, property, value) {
  var rules = [];
  var selector = "." + identifier2;
  switch (property) {
    case "animationKeyframes": {
      var _processKeyframesValu2 = processKeyframesValue(value), animationNames = _processKeyframesValu2.animationNames, keyframesRules = _processKeyframesValu2.rules;
      var block2 = createDeclarationBlock({
        animationName: animationNames.join(",")
      });
      rules.push.apply(rules, ["" + selector + block2].concat(keyframesRules));
      break;
    }
    case "placeholderTextColor": {
      var _block = createDeclarationBlock({
        color: value,
        opacity: 1
      });
      rules.push(selector + "::-webkit-input-placeholder" + _block, selector + "::-moz-placeholder" + _block, selector + ":-ms-input-placeholder" + _block, selector + "::placeholder" + _block);
      break;
    }
    case "pointerEvents": {
      var _createDeclarationBlo3;
      var finalValue = value;
      if (value === "auto" || value === "box-only") {
        finalValue = "auto!important";
        if (value === "box-only") {
          var _createDeclarationBlo;
          var _block3 = createDeclarationBlock((_createDeclarationBlo = {}, _createDeclarationBlo[property] = "none", _createDeclarationBlo));
          rules.push(selector + ">*" + _block3);
        }
      } else if (value === "none" || value === "box-none") {
        finalValue = "none!important";
        if (value === "box-none") {
          var _createDeclarationBlo2;
          var _block4 = createDeclarationBlock((_createDeclarationBlo2 = {}, _createDeclarationBlo2[property] = "auto", _createDeclarationBlo2));
          rules.push(selector + ">*" + _block4);
        }
      }
      var _block2 = createDeclarationBlock((_createDeclarationBlo3 = {}, _createDeclarationBlo3[property] = finalValue, _createDeclarationBlo3));
      rules.push("" + selector + _block2);
      break;
    }
    case "scrollbarWidth": {
      var _createDeclarationBlo4;
      if (value === "none") {
        rules.push(selector + "::-webkit-scrollbar{display:none}");
      }
      var _block5 = createDeclarationBlock((_createDeclarationBlo4 = {}, _createDeclarationBlo4[property] = value, _createDeclarationBlo4));
      rules.push("" + selector + _block5);
      break;
    }
    default: {
      var _createDeclarationBlo5;
      var _block6 = createDeclarationBlock((_createDeclarationBlo5 = {}, _createDeclarationBlo5[property] = value, _createDeclarationBlo5));
      rules.push("" + selector + _block6);
      break;
    }
  }
  return rules;
}
function createDeclarationBlock(style) {
  var domStyle = prefixStyles_default(createReactDOMStyle_default(style));
  var declarationsString = Object.keys(domStyle).map(function(property) {
    var value = domStyle[property];
    var prop = (0, import_hyphenate_style_name.default)(property);
    if (Array.isArray(value)) {
      return value.map(function(v) {
        return prop + ":" + v;
      }).join(";");
    } else {
      return prop + ":" + value;
    }
  }).sort().join(";");
  return "{" + declarationsString + ";}";
}
function createIdentifier(prefix2, name, value) {
  var hashedString = hash_default(name + stringifyValueWithProperty(value, name));
  return true ? prefix2 + "-" + name + "-" + hashedString : prefix2 + "-" + hashedString;
}
function createKeyframes(keyframes) {
  var prefixes2 = ["-webkit-", ""];
  var identifier2 = createIdentifier("r", "animation", keyframes);
  var steps = "{" + Object.keys(keyframes).map(function(stepName) {
    var rule2 = keyframes[stepName];
    var block2 = createDeclarationBlock(rule2);
    return "" + stepName + block2;
  }).join("") + "}";
  var rules = prefixes2.map(function(prefix2) {
    return "@" + prefix2 + "keyframes " + identifier2 + steps;
  });
  return {
    identifier: identifier2,
    rules
  };
}
function processKeyframesValue(keyframesValue) {
  if (typeof keyframesValue === "number") {
    throw new Error("Invalid CSS keyframes type: " + typeof keyframesValue);
  }
  var animationNames = [];
  var rules = [];
  var value = Array.isArray(keyframesValue) ? keyframesValue : [keyframesValue];
  value.forEach(function(keyframes) {
    if (typeof keyframes === "string") {
      animationNames.push(keyframes);
    } else {
      var _createKeyframes = createKeyframes(keyframes), identifier2 = _createKeyframes.identifier, keyframesRules = _createKeyframes.rules;
      animationNames.push(identifier2);
      rules.push.apply(rules, keyframesRules);
    }
  });
  return {
    animationNames,
    rules
  };
}

// node_modules/react-native-web/dist/exports/StyleSheet/initialRules.js
var resets = [
  "html{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0);}",
  "body{margin:0;}",
  "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}",
  "input::-webkit-inner-spin-button,input::-webkit-outer-spin-button,input::-webkit-search-cancel-button,input::-webkit-search-decoration,input::-webkit-search-results-button,input::-webkit-search-results-decoration{display:none;}"
];
var initialRules_default = resets;

// node_modules/react-native-web/dist/exports/StyleSheet/modality.js
var import_ExecutionEnvironment4 = __toModule(require_ExecutionEnvironment());
var focusVisibleAttributeName = "data-focusvisible-polyfill";
var rule = ":focus:not([" + focusVisibleAttributeName + "]){outline: none;}";
var modality = function modality2(insertRule) {
  insertRule(rule);
  if (!import_ExecutionEnvironment4.canUseDOM) {
    return;
  }
  var hadKeyboardEvent = true;
  var hadFocusVisibleRecently = false;
  var hadFocusVisibleRecentlyTimeout = null;
  var inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function isValidFocusTarget(el) {
    if (el && el !== document && el.nodeName !== "HTML" && el.nodeName !== "BODY" && "classList" in el && "contains" in el.classList) {
      return true;
    }
    return false;
  }
  function focusTriggersKeyboardModality(el) {
    var type = el.type;
    var tagName = el.tagName;
    var isReadOnly = el.readOnly;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !isReadOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !isReadOnly) {
      return true;
    }
    if (el.isContentEditable) {
      return true;
    }
    return false;
  }
  function addFocusVisibleAttribute(el) {
    if (el.hasAttribute(focusVisibleAttributeName)) {
      return;
    }
    el.setAttribute(focusVisibleAttributeName, true);
  }
  function removeFocusVisibleAttribute(el) {
    el.removeAttribute(focusVisibleAttributeName);
  }
  function removeAllFocusVisibleAttributes() {
    var list2 = document.querySelectorAll("[" + focusVisibleAttributeName + "]");
    for (var i = 0; i < list2.length; i += 1) {
      removeFocusVisibleAttribute(list2[i]);
    }
  }
  function onKeyDown2(e) {
    if (e.key !== "Tab" && (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)) {
      return;
    }
    if (isValidFocusTarget(document.activeElement)) {
      addFocusVisibleAttribute(document.activeElement);
    }
    hadKeyboardEvent = true;
  }
  function onPointerDown(e) {
    if (hadKeyboardEvent === true) {
      removeAllFocusVisibleAttributes();
    }
    hadKeyboardEvent = false;
  }
  function onFocus(e) {
    if (!isValidFocusTarget(e.target)) {
      return;
    }
    if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {
      addFocusVisibleAttribute(e.target);
    }
  }
  function onBlur(e) {
    if (!isValidFocusTarget(e.target)) {
      return;
    }
    if (e.target.hasAttribute(focusVisibleAttributeName)) {
      hadFocusVisibleRecently = true;
      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
      hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {
        hadFocusVisibleRecently = false;
        window.clearTimeout(hadFocusVisibleRecentlyTimeout);
      }, 100);
      removeFocusVisibleAttribute(e.target);
    }
  }
  function onVisibilityChange2(e) {
    if (document.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
      addInitialPointerMoveListeners();
    }
  }
  function addInitialPointerMoveListeners() {
    document.addEventListener("mousemove", onInitialPointerMove);
    document.addEventListener("mousedown", onInitialPointerMove);
    document.addEventListener("mouseup", onInitialPointerMove);
    document.addEventListener("pointermove", onInitialPointerMove);
    document.addEventListener("pointerdown", onInitialPointerMove);
    document.addEventListener("pointerup", onInitialPointerMove);
    document.addEventListener("touchmove", onInitialPointerMove);
    document.addEventListener("touchstart", onInitialPointerMove);
    document.addEventListener("touchend", onInitialPointerMove);
  }
  function removeInitialPointerMoveListeners() {
    document.removeEventListener("mousemove", onInitialPointerMove);
    document.removeEventListener("mousedown", onInitialPointerMove);
    document.removeEventListener("mouseup", onInitialPointerMove);
    document.removeEventListener("pointermove", onInitialPointerMove);
    document.removeEventListener("pointerdown", onInitialPointerMove);
    document.removeEventListener("pointerup", onInitialPointerMove);
    document.removeEventListener("touchmove", onInitialPointerMove);
    document.removeEventListener("touchstart", onInitialPointerMove);
    document.removeEventListener("touchend", onInitialPointerMove);
  }
  function onInitialPointerMove(e) {
    if (e.target.nodeName === "HTML") {
      return;
    }
    hadKeyboardEvent = false;
    removeInitialPointerMoveListeners();
  }
  document.addEventListener("keydown", onKeyDown2, true);
  document.addEventListener("mousedown", onPointerDown, true);
  document.addEventListener("pointerdown", onPointerDown, true);
  document.addEventListener("touchstart", onPointerDown, true);
  document.addEventListener("focus", onFocus, true);
  document.addEventListener("blur", onBlur, true);
  document.addEventListener("visibilitychange", onVisibilityChange2, true);
  addInitialPointerMoveListeners();
};
var modality_default = modality;

// node_modules/react-native-web/dist/exports/StyleSheet/createStyleResolver.js
function createStyleResolver() {
  var inserted, sheet, cache2;
  var resolved = {
    css: {},
    ltr: {},
    rtl: {},
    rtlNoSwap: {}
  };
  var init = function init2() {
    inserted = {
      css: {},
      ltr: {},
      rtl: {},
      rtlNoSwap: {}
    };
    sheet = createOrderedCSSStyleSheet(createCSSStyleSheet(STYLE_ELEMENT_ID));
    cache2 = {};
    modality_default(function(rule2) {
      return sheet.insert(rule2, STYLE_GROUPS.modality);
    });
    initialRules_default.forEach(function(rule2) {
      sheet.insert(rule2, STYLE_GROUPS.reset);
    });
  };
  init();
  function addToCache(className, prop, value) {
    if (!cache2[prop]) {
      cache2[prop] = {};
    }
    cache2[prop][value] = className;
  }
  function getClassName(prop, value) {
    var val2 = stringifyValueWithProperty(value, prop);
    return cache2[prop] && cache2[prop].hasOwnProperty(val2) && cache2[prop][val2];
  }
  function _injectRegisteredStyle(id2) {
    var _I18nManager$getConst = I18nManager_default.getConstants(), doLeftAndRightSwapInRTL2 = _I18nManager$getConst.doLeftAndRightSwapInRTL, isRTL4 = _I18nManager$getConst.isRTL;
    var dir = isRTL4 ? doLeftAndRightSwapInRTL2 ? "rtl" : "rtlNoSwap" : "ltr";
    if (!inserted[dir][id2]) {
      var style = createCompileableStyle_default(i18nStyle_default(flattenStyle_default(id2)));
      var results = atomic(style);
      Object.keys(results).forEach(function(key3) {
        var _results$key = results[key3], identifier2 = _results$key.identifier, property = _results$key.property, rules = _results$key.rules, value = _results$key.value;
        addToCache(identifier2, property, value);
        rules.forEach(function(rule2) {
          var group3 = STYLE_GROUPS.custom[property] || STYLE_GROUPS.atomic;
          sheet.insert(rule2, group3);
        });
      });
      inserted[dir][id2] = true;
    }
  }
  function resolve(style, classList2) {
    var nextClassList = [];
    var props = {};
    if (!style && !classList2) {
      return props;
    }
    if (Array.isArray(classList2)) {
      flattenArray_default(classList2).forEach(function(identifier2) {
        if (identifier2) {
          if (inserted.css[identifier2] == null && resolved.css[identifier2] != null) {
            var item = resolved.css[identifier2];
            item.rules.forEach(function(rule2) {
              sheet.insert(rule2, item.group);
            });
            inserted.css[identifier2] = true;
          }
          nextClassList.push(identifier2);
        }
      });
    }
    if (typeof style === "number") {
      _injectRegisteredStyle(style);
      var key3 = createCacheKey(style);
      props = _resolveStyle(style, key3);
    } else if (!Array.isArray(style)) {
      props = _resolveStyle(style);
    } else {
      var flatArray = flattenArray_default(style);
      var isArrayOfNumbers = true;
      var cacheKey = "";
      for (var i = 0; i < flatArray.length; i++) {
        var id2 = flatArray[i];
        if (typeof id2 !== "number") {
          isArrayOfNumbers = false;
        } else {
          if (isArrayOfNumbers) {
            cacheKey += id2 + "-";
          }
          _injectRegisteredStyle(id2);
        }
      }
      var _key = isArrayOfNumbers ? createCacheKey(cacheKey) : null;
      props = _resolveStyle(flatArray, _key);
    }
    nextClassList.push.apply(nextClassList, props.classList);
    var finalProps = {
      className: classListToString(nextClassList),
      classList: nextClassList
    };
    if (props.style) {
      finalProps.style = props.style;
    }
    return finalProps;
  }
  function _resolveStyle(style, key3) {
    var _I18nManager$getConst2 = I18nManager_default.getConstants(), doLeftAndRightSwapInRTL2 = _I18nManager$getConst2.doLeftAndRightSwapInRTL, isRTL4 = _I18nManager$getConst2.isRTL;
    var dir = isRTL4 ? doLeftAndRightSwapInRTL2 ? "rtl" : "rtlNoSwap" : "ltr";
    if (key3 != null && resolved[dir][key3] != null) {
      return resolved[dir][key3];
    }
    var flatStyle = flattenStyle_default(style);
    var localizedStyle = createCompileableStyle_default(i18nStyle_default(flatStyle));
    var props = Object.keys(localizedStyle).sort().reduce(function(props2, styleProp) {
      var value = localizedStyle[styleProp];
      if (value != null) {
        var className = getClassName(styleProp, value);
        if (className) {
          props2.classList.push(className);
        } else {
          if (styleProp === "animationKeyframes" || styleProp === "placeholderTextColor" || styleProp === "pointerEvents" || styleProp === "scrollbarWidth") {
            var _atomic;
            var a = atomic((_atomic = {}, _atomic[styleProp] = value, _atomic));
            Object.keys(a).forEach(function(key4) {
              var _a$key = a[key4], identifier2 = _a$key.identifier, rules = _a$key.rules;
              props2.classList.push(identifier2);
              rules.forEach(function(rule2) {
                sheet.insert(rule2, STYLE_GROUPS.atomic);
              });
            });
          } else {
            if (!props2.style) {
              props2.style = {};
            }
            props2.style[styleProp] = value;
          }
        }
      }
      return props2;
    }, {
      classList: []
    });
    if (props.style) {
      props.style = inline(props.style);
    }
    if (key3 != null) {
      resolved[dir][key3] = props;
    }
    return props;
  }
  return {
    getStyleSheet: function getStyleSheet() {
      var textContent = sheet.getTextContent();
      if (!import_ExecutionEnvironment5.canUseDOM) {
        init();
      }
      return {
        id: STYLE_ELEMENT_ID,
        textContent
      };
    },
    createCSS: function createCSS(rules, group3) {
      var result = {};
      Object.keys(rules).forEach(function(name) {
        var style = rules[name];
        var compiled = classic(style, name);
        Object.keys(compiled).forEach(function(key3) {
          var _compiled$key = compiled[key3], identifier2 = _compiled$key.identifier, rules2 = _compiled$key.rules;
          resolved.css[identifier2] = {
            group: group3 || STYLE_GROUPS.classic,
            rules: rules2
          };
          result[name] = identifier2;
        });
      });
      return result;
    },
    resolve,
    get sheet() {
      return sheet;
    }
  };
}
var createCacheKey = function createCacheKey2(id2) {
  var prefix2 = "rn";
  return prefix2 + "-" + id2;
};
var classListToString = function classListToString2(list2) {
  return list2.join(" ").trim();
};

// node_modules/react-native-web/dist/exports/StyleSheet/styleResolver.js
var styleResolver = createStyleResolver();
var styleResolver_default = styleResolver;

// node_modules/react-native-web/dist/exports/StyleSheet/css.js
var css = {
  create: function create(rules, group3) {
    return styleResolver_default.createCSS(rules, group3);
  }
};
var css_default = css;

// node_modules/react-native-web/dist/exports/StyleSheet/index.js
var import_ExecutionEnvironment6 = __toModule(require_ExecutionEnvironment());

// node_modules/react-native-web/dist/exports/StyleSheet/validate.js
var import_warning = __toModule(require_warning());
var invalidShortforms = {
  background: true,
  borderBottom: true,
  borderLeft: true,
  borderRight: true,
  borderTop: true,
  font: true,
  grid: true,
  outline: true,
  textDecoration: true
};
function error(message2) {
  (0, import_warning.default)(false, message2);
}
function validate(key3, styles152) {
  var obj = styles152[key3];
  for (var k in obj) {
    var prop = k.trim();
    var value = obj[prop];
    var isInvalid = false;
    if (value === null) {
      continue;
    }
    if (typeof value === "string" && value.indexOf("!important") > -1) {
      error('Invalid style declaration "' + prop + ":" + value + '". Values cannot include "!important"');
      isInvalid = true;
    } else {
      var suggestion = "";
      if (prop === "animation" || prop === "animationName") {
        suggestion = 'Did you mean "animationKeyframes"?';
        isInvalid = true;
      } else if (prop === "direction") {
        suggestion = 'Did you mean "writingDirection"?';
        isInvalid = true;
      } else if (prop === "verticalAlign") {
        suggestion = 'Did you mean "textAlignVertical"?';
        isInvalid = true;
      } else if (invalidShortforms[prop]) {
        suggestion = "Please use long-form properties.";
        isInvalid = true;
      }
      if (suggestion !== "") {
        error('Invalid style property of "' + prop + '". ' + suggestion);
      }
    }
    if (isInvalid) {
      delete obj[k];
    }
  }
}

// node_modules/react-native-web/dist/exports/StyleSheet/StyleSheet.js
var absoluteFillObject = {
  position: "absolute",
  left: 0,
  right: 0,
  top: 0,
  bottom: 0
};
var absoluteFill = ReactNativePropRegistry.register(absoluteFillObject);
var StyleSheet = {
  absoluteFill,
  absoluteFillObject,
  compose: function compose(style1, style2) {
    if (true) {
      var len = arguments.length;
      if (len > 2) {
        var readableStyles = Array.prototype.slice.call(arguments).map(function(a) {
          return flattenStyle_default(a);
        });
        throw new Error("StyleSheet.compose() only accepts 2 arguments, received " + len + ": " + JSON.stringify(readableStyles));
      }
    }
    if (style1 && style2) {
      return [style1, style2];
    } else {
      return style1 || style2;
    }
  },
  create: function create2(styles152) {
    var result = {};
    Object.keys(styles152).forEach(function(key3) {
      if (true) {
        validate(key3, styles152);
      }
      var id2 = styles152[key3] && ReactNativePropRegistry.register(styles152[key3]);
      result[key3] = id2;
    });
    return result;
  },
  flatten: flattenStyle_default,
  hairlineWidth: 1
};
var StyleSheet_default = StyleSheet;

// node_modules/react-native-web/dist/exports/StyleSheet/index.js
if (import_ExecutionEnvironment6.canUseDOM && window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
  window.__REACT_DEVTOOLS_GLOBAL_HOOK__.resolveRNStyle = StyleSheet_default.flatten;
}
var StyleSheet_default2 = StyleSheet_default;

// node_modules/react-native-web/dist/modules/createDOMProps/index.js
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
var emptyObject5 = {};
var hasOwnProperty2 = Object.prototype.hasOwnProperty;
var uppercasePattern = /[A-Z]/g;
function toHyphenLower(match) {
  return "-" + match.toLowerCase();
}
function hyphenateString(str) {
  return str.replace(uppercasePattern, toHyphenLower);
}
var classes = css_default.create({
  reset: {
    backgroundColor: "transparent",
    color: "inherit",
    font: "inherit",
    listStyle: "none",
    margin: 0,
    textAlign: "inherit",
    textDecoration: "none"
  },
  cursor: {
    cursor: "pointer"
  }
}, STYLE_GROUPS.classicReset);
var pointerEventsStyles = StyleSheet_default2.create({
  auto: {
    pointerEvents: "auto"
  },
  "box-none": {
    pointerEvents: "box-none"
  },
  "box-only": {
    pointerEvents: "box-only"
  },
  none: {
    pointerEvents: "none"
  }
});
var createDOMProps = function createDOMProps2(elementType, props) {
  if (!props) {
    props = emptyObject5;
  }
  var _props = props, accessibilityActiveDescendant = _props.accessibilityActiveDescendant, accessibilityAtomic = _props.accessibilityAtomic, accessibilityAutoComplete = _props.accessibilityAutoComplete, accessibilityBusy = _props.accessibilityBusy, accessibilityChecked = _props.accessibilityChecked, accessibilityColumnCount = _props.accessibilityColumnCount, accessibilityColumnIndex = _props.accessibilityColumnIndex, accessibilityColumnSpan = _props.accessibilityColumnSpan, accessibilityControls = _props.accessibilityControls, accessibilityDescribedBy = _props.accessibilityDescribedBy, accessibilityDetails = _props.accessibilityDetails, accessibilityDisabled = _props.accessibilityDisabled, accessibilityErrorMessage = _props.accessibilityErrorMessage, accessibilityExpanded = _props.accessibilityExpanded, accessibilityFlowTo = _props.accessibilityFlowTo, accessibilityHasPopup = _props.accessibilityHasPopup, accessibilityHidden = _props.accessibilityHidden, accessibilityInvalid = _props.accessibilityInvalid, accessibilityKeyShortcuts = _props.accessibilityKeyShortcuts, accessibilityLabel = _props.accessibilityLabel, accessibilityLabelledBy = _props.accessibilityLabelledBy, accessibilityLevel = _props.accessibilityLevel, accessibilityLiveRegion = _props.accessibilityLiveRegion, accessibilityModal = _props.accessibilityModal, accessibilityMultiline = _props.accessibilityMultiline, accessibilityMultiSelectable = _props.accessibilityMultiSelectable, accessibilityOrientation = _props.accessibilityOrientation, accessibilityOwns = _props.accessibilityOwns, accessibilityPlaceholder = _props.accessibilityPlaceholder, accessibilityPosInSet = _props.accessibilityPosInSet, accessibilityPressed = _props.accessibilityPressed, accessibilityReadOnly = _props.accessibilityReadOnly, accessibilityRequired = _props.accessibilityRequired, accessibilityRole = _props.accessibilityRole, accessibilityRoleDescription = _props.accessibilityRoleDescription, accessibilityRowCount = _props.accessibilityRowCount, accessibilityRowIndex = _props.accessibilityRowIndex, accessibilityRowSpan = _props.accessibilityRowSpan, accessibilitySelected = _props.accessibilitySelected, accessibilitySetSize = _props.accessibilitySetSize, accessibilitySort = _props.accessibilitySort, accessibilityValueMax = _props.accessibilityValueMax, accessibilityValueMin = _props.accessibilityValueMin, accessibilityValueNow = _props.accessibilityValueNow, accessibilityValueText = _props.accessibilityValueText, classList2 = _props.classList, dataSet = _props.dataSet, focusable = _props.focusable, nativeID = _props.nativeID, pointerEvents = _props.pointerEvents, providedStyle = _props.style, testID = _props.testID, accessible = _props.accessible, accessibilityState = _props.accessibilityState, accessibilityValue2 = _props.accessibilityValue, domProps = _objectWithoutPropertiesLoose3(_props, ["accessibilityActiveDescendant", "accessibilityAtomic", "accessibilityAutoComplete", "accessibilityBusy", "accessibilityChecked", "accessibilityColumnCount", "accessibilityColumnIndex", "accessibilityColumnSpan", "accessibilityControls", "accessibilityDescribedBy", "accessibilityDetails", "accessibilityDisabled", "accessibilityErrorMessage", "accessibilityExpanded", "accessibilityFlowTo", "accessibilityHasPopup", "accessibilityHidden", "accessibilityInvalid", "accessibilityKeyShortcuts", "accessibilityLabel", "accessibilityLabelledBy", "accessibilityLevel", "accessibilityLiveRegion", "accessibilityModal", "accessibilityMultiline", "accessibilityMultiSelectable", "accessibilityOrientation", "accessibilityOwns", "accessibilityPlaceholder", "accessibilityPosInSet", "accessibilityPressed", "accessibilityReadOnly", "accessibilityRequired", "accessibilityRole", "accessibilityRoleDescription", "accessibilityRowCount", "accessibilityRowIndex", "accessibilityRowSpan", "accessibilitySelected", "accessibilitySetSize", "accessibilitySort", "accessibilityValueMax", "accessibilityValueMin", "accessibilityValueNow", "accessibilityValueText", "classList", "dataSet", "focusable", "nativeID", "pointerEvents", "style", "testID", "accessible", "accessibilityState", "accessibilityValue"]);
  var disabled = accessibilityState != null && accessibilityState.disabled === true || accessibilityDisabled;
  var role = AccessibilityUtil_default.propsToAriaRole(props);
  var isNativeInteractiveElement = role === "link" || elementType === "a" || elementType === "button" || elementType === "input" || elementType === "select" || elementType === "textarea" || domProps.contentEditable != null;
  if (accessibilityState != null) {
    for (var prop in accessibilityState) {
      var value = accessibilityState[prop];
      if (value != null) {
        if (prop === "disabled" || prop === "hidden") {
          if (value === true) {
            domProps["aria-" + prop] = value;
            domProps[prop] = value;
          }
        } else {
          domProps["aria-" + prop] = value;
        }
      }
    }
  }
  if (accessibilityValue2 != null) {
    for (var _prop in accessibilityValue2) {
      var _value = accessibilityValue2[_prop];
      if (_value != null) {
        domProps["aria-value" + _prop] = _value;
      }
    }
  }
  if (accessibilityActiveDescendant != null) {
    domProps["aria-activedescendant"] = accessibilityActiveDescendant;
  }
  if (accessibilityAtomic != null) {
    domProps["aria-atomic"] = accessibilityAtomic;
  }
  if (accessibilityAutoComplete != null) {
    domProps["aria-autocomplete"] = accessibilityAutoComplete;
  }
  if (accessibilityBusy != null) {
    domProps["aria-busy"] = accessibilityBusy;
  }
  if (accessibilityChecked != null) {
    domProps["aria-checked"] = accessibilityChecked;
  }
  if (accessibilityColumnCount != null) {
    domProps["aria-colcount"] = accessibilityColumnCount;
  }
  if (accessibilityColumnIndex != null) {
    domProps["aria-colindex"] = accessibilityColumnIndex;
  }
  if (accessibilityColumnSpan != null) {
    domProps["aria-colspan"] = accessibilityColumnSpan;
  }
  if (accessibilityControls != null) {
    domProps["aria-controls"] = accessibilityControls;
  }
  if (accessibilityDescribedBy != null) {
    domProps["aria-describedby"] = accessibilityDescribedBy;
  }
  if (accessibilityDetails != null) {
    domProps["aria-details"] = accessibilityDetails;
  }
  if (disabled === true) {
    domProps["aria-disabled"] = true;
    if (elementType === "button" || elementType === "form" || elementType === "input" || elementType === "select" || elementType === "textarea") {
      domProps.disabled = true;
    }
  }
  if (accessibilityErrorMessage != null) {
    domProps["aria-errormessage"] = accessibilityErrorMessage;
  }
  if (accessibilityExpanded != null) {
    domProps["aria-expanded"] = accessibilityExpanded;
  }
  if (accessibilityFlowTo != null) {
    domProps["aria-flowto"] = accessibilityFlowTo;
  }
  if (accessibilityHasPopup != null) {
    domProps["aria-haspopup"] = accessibilityHasPopup;
  }
  if (accessibilityHidden === true) {
    domProps["aria-hidden"] = accessibilityHidden;
  }
  if (accessibilityInvalid != null) {
    domProps["aria-invalid"] = accessibilityInvalid;
  }
  if (accessibilityKeyShortcuts != null && Array.isArray(accessibilityKeyShortcuts)) {
    domProps["aria-keyshortcuts"] = accessibilityKeyShortcuts.join(" ");
  }
  if (accessibilityLabel != null) {
    domProps["aria-label"] = accessibilityLabel;
  }
  if (accessibilityLabelledBy != null) {
    domProps["aria-labelledby"] = accessibilityLabelledBy;
  }
  if (accessibilityLevel != null) {
    domProps["aria-level"] = accessibilityLevel;
  }
  if (accessibilityLiveRegion != null) {
    domProps["aria-live"] = accessibilityLiveRegion === "none" ? "off" : accessibilityLiveRegion;
  }
  if (accessibilityModal != null) {
    domProps["aria-modal"] = accessibilityModal;
  }
  if (accessibilityMultiline != null) {
    domProps["aria-multiline"] = accessibilityMultiline;
  }
  if (accessibilityMultiSelectable != null) {
    domProps["aria-multiselectable"] = accessibilityMultiSelectable;
  }
  if (accessibilityOrientation != null) {
    domProps["aria-orientation"] = accessibilityOrientation;
  }
  if (accessibilityOwns != null) {
    domProps["aria-owns"] = accessibilityOwns;
  }
  if (accessibilityPlaceholder != null) {
    domProps["aria-placeholder"] = accessibilityPlaceholder;
  }
  if (accessibilityPosInSet != null) {
    domProps["aria-posinset"] = accessibilityPosInSet;
  }
  if (accessibilityPressed != null) {
    domProps["aria-pressed"] = accessibilityPressed;
  }
  if (accessibilityReadOnly != null) {
    domProps["aria-readonly"] = accessibilityReadOnly;
    if (elementType === "input" || elementType === "select" || elementType === "textarea") {
      domProps.readOnly = true;
    }
  }
  if (accessibilityRequired != null) {
    domProps["aria-required"] = accessibilityRequired;
    if (elementType === "input" || elementType === "select" || elementType === "textarea") {
      domProps.required = true;
    }
  }
  if (role != null) {
    domProps["role"] = role === "none" ? "presentation" : role;
  }
  if (accessibilityRoleDescription != null) {
    domProps["aria-roledescription"] = accessibilityRoleDescription;
  }
  if (accessibilityRowCount != null) {
    domProps["aria-rowcount"] = accessibilityRowCount;
  }
  if (accessibilityRowIndex != null) {
    domProps["aria-rowindex"] = accessibilityRowIndex;
  }
  if (accessibilityRowSpan != null) {
    domProps["aria-rowspan"] = accessibilityRowSpan;
  }
  if (accessibilitySelected != null) {
    domProps["aria-selected"] = accessibilitySelected;
  }
  if (accessibilitySetSize != null) {
    domProps["aria-setsize"] = accessibilitySetSize;
  }
  if (accessibilitySort != null) {
    domProps["aria-sort"] = accessibilitySort;
  }
  if (accessibilityValueMax != null) {
    domProps["aria-valuemax"] = accessibilityValueMax;
  }
  if (accessibilityValueMin != null) {
    domProps["aria-valuemin"] = accessibilityValueMin;
  }
  if (accessibilityValueNow != null) {
    domProps["aria-valuenow"] = accessibilityValueNow;
  }
  if (accessibilityValueText != null) {
    domProps["aria-valuetext"] = accessibilityValueText;
  }
  if (dataSet != null) {
    for (var dataProp in dataSet) {
      if (hasOwnProperty2.call(dataSet, dataProp)) {
        var dataName = hyphenateString(dataProp);
        var dataValue = dataSet[dataProp];
        if (dataValue != null) {
          domProps["data-" + dataName] = dataValue;
        }
      }
    }
  }
  var _focusable = focusable != null ? focusable : accessible;
  if (elementType === "a" || elementType === "button" || elementType === "input" || elementType === "select" || elementType === "textarea") {
    if (_focusable === false || accessibilityDisabled === true) {
      domProps.tabIndex = "-1";
    }
  } else if (role === "button" || role === "checkbox" || role === "link" || role === "menuitem" || role === "radio" || role === "textbox" || role === "switch") {
    if (_focusable !== false) {
      domProps.tabIndex = "0";
    }
  } else {
    if (_focusable === true) {
      domProps.tabIndex = "0";
    }
  }
  var reactNativeStyle = StyleSheet_default2.compose(pointerEvents && pointerEventsStyles[pointerEvents], providedStyle);
  var needsCursor = (role === "button" || role === "link") && !disabled;
  var needsReset = elementType === "a" || elementType === "button" || elementType === "li" || elementType === "ul" || role === "heading";
  var finalClassList = [needsReset && classes.reset, needsCursor && classes.cursor, classList2];
  var _styleResolver$resolv = styleResolver_default.resolve(reactNativeStyle, finalClassList), className = _styleResolver$resolv.className, style = _styleResolver$resolv.style;
  if (className != null && className !== "") {
    domProps.className = className;
  }
  if (style) {
    domProps.style = style;
  }
  if (nativeID != null) {
    domProps.id = nativeID;
  }
  if (testID != null) {
    domProps["data-testid"] = testID;
  }
  if (isNativeInteractiveElement || role === "button" || role === "menuitem" || _focusable === true && !disabled) {
    var onClick = domProps.onClick;
    if (onClick != null) {
      if (disabled) {
        domProps.onClick = function(e) {
          e.stopPropagation();
        };
      } else if (!isNativeInteractiveElement) {
        var onKeyDown2 = domProps.onKeyDown;
        domProps.onKeyDown = function(e) {
          var key3 = e.key, repeat3 = e.repeat;
          var isSpacebarKey = key3 === " " || key3 === "Spacebar";
          var isButtonRole3 = role === "button" || role === "menuitem";
          if (onKeyDown2 != null) {
            onKeyDown2(e);
          }
          if (!repeat3 && key3 === "Enter") {
            onClick(e);
          } else if (isSpacebarKey && isButtonRole3) {
            if (!repeat3) {
              onClick(e);
            }
            e.preventDefault();
          }
        };
      }
    }
  }
  return domProps;
};
var createDOMProps_default = createDOMProps;

// node_modules/react-native-web/dist/exports/createElement/index.js
var import_react = __toModule(require_react());
var createElement = function createElement2(component, props) {
  var accessibilityComponent;
  if (component && component.constructor === String) {
    accessibilityComponent = AccessibilityUtil_default.propsToAccessibilityComponent(props);
  }
  var Component19 = accessibilityComponent || component;
  var domProps = createDOMProps_default(Component19, props);
  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }
  return /* @__PURE__ */ import_react.default.createElement.apply(import_react.default, [Component19, domProps].concat(children));
};
var createElement_default = createElement;

// node_modules/react-native-web/dist/exports/findNodeHandle/index.js
var import_react_dom = __toModule(require_react_dom());
var findNodeHandle = function findNodeHandle2(component) {
  var node;
  try {
    node = (0, import_react_dom.findDOMNode)(component);
  } catch (e) {
  }
  return node;
};
var findNodeHandle_default = findNodeHandle;

// node_modules/react-native-web/dist/exports/render/index.js
var import_react_dom2 = __toModule(require_react_dom());
var render_default = import_react_dom2.render;

// node_modules/react-native-web/dist/exports/unmountComponentAtNode/index.js
var import_react_dom3 = __toModule(require_react_dom());
var unmountComponentAtNode_default = import_react_dom3.unmountComponentAtNode;

// node_modules/react-native-web/dist/modules/getBoundingClientRect/index.js
var getBoundingClientRect = function getBoundingClientRect2(node) {
  if (node != null) {
    var isElement = node.nodeType === 1;
    if (isElement && typeof node.getBoundingClientRect === "function") {
      return node.getBoundingClientRect();
    }
  }
};
var getBoundingClientRect_default = getBoundingClientRect;

// node_modules/react-native-web/dist/modules/setValueForStyles/dangerousStyleValue.js
function dangerousStyleValue(name, value, isCustomProperty) {
  var isEmpty = value == null || typeof value === "boolean" || value === "";
  if (isEmpty) {
    return "";
  }
  if (!isCustomProperty && typeof value === "number" && value !== 0 && !(unitlessNumbers_default.hasOwnProperty(name) && unitlessNumbers_default[name])) {
    return value + "px";
  }
  return ("" + value).trim();
}
var dangerousStyleValue_default = dangerousStyleValue;

// node_modules/react-native-web/dist/modules/setValueForStyles/index.js
function setValueForStyles(node, styles152) {
  var style = node.style;
  for (var styleName in styles152) {
    if (!styles152.hasOwnProperty(styleName)) {
      continue;
    }
    var isCustomProperty = styleName.indexOf("--") === 0;
    var styleValue = dangerousStyleValue_default(styleName, styles152[styleName], isCustomProperty);
    if (styleName === "float") {
      styleName = "cssFloat";
    }
    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}
var setValueForStyles_default = setValueForStyles;

// node_modules/react-native-web/dist/exports/UIManager/index.js
var getRect = function getRect2(node) {
  var _getBoundingClientRec = getBoundingClientRect_default(node), x = _getBoundingClientRec.x, y = _getBoundingClientRec.y, top = _getBoundingClientRec.top, left2 = _getBoundingClientRec.left;
  var width = node.offsetWidth;
  var height = node.offsetHeight;
  return {
    x,
    y,
    width,
    height,
    top,
    left: left2
  };
};
var _measureLayout = function measureLayout(node, relativeToNativeNode, callback) {
  var relativeNode = relativeToNativeNode || node && node.parentNode;
  if (node && relativeNode) {
    setTimeout(function() {
      var relativeRect = getBoundingClientRect_default(relativeNode);
      var _getRect = getRect(node), height = _getRect.height, left2 = _getRect.left, top = _getRect.top, width = _getRect.width;
      var x = left2 - relativeRect.left;
      var y = top - relativeRect.top;
      callback(x, y, width, height, left2, top);
    }, 0);
  }
};
var focusableElements = {
  A: true,
  INPUT: true,
  SELECT: true,
  TEXTAREA: true
};
var UIManager = {
  blur: function blur(node) {
    try {
      node.blur();
    } catch (err) {
    }
  },
  focus: function focus(node) {
    try {
      var name = node.nodeName;
      if (node.getAttribute("tabIndex") == null && focusableElements[name] == null) {
        node.setAttribute("tabIndex", "-1");
      }
      node.focus();
    } catch (err) {
    }
  },
  measure: function measure(node, callback) {
    _measureLayout(node, null, callback);
  },
  measureInWindow: function measureInWindow(node, callback) {
    if (node) {
      setTimeout(function() {
        var _getRect2 = getRect(node), height = _getRect2.height, left2 = _getRect2.left, top = _getRect2.top, width = _getRect2.width;
        callback(left2, top, width, height);
      }, 0);
    }
  },
  measureLayout: function measureLayout2(node, relativeToNativeNode, onFail, onSuccess) {
    _measureLayout(node, relativeToNativeNode, onSuccess);
  },
  updateView: function updateView(node, props) {
    for (var prop in props) {
      if (!Object.prototype.hasOwnProperty.call(props, prop)) {
        continue;
      }
      var value = props[prop];
      switch (prop) {
        case "style": {
          setValueForStyles_default(node, value);
          break;
        }
        case "class":
        case "className": {
          node.setAttribute("class", value);
          break;
        }
        case "text":
        case "value":
          node.value = value;
          break;
        default:
          node.setAttribute(prop, value);
      }
    }
  },
  configureNextLayoutAnimation: function configureNextLayoutAnimation(config, onAnimationDidEnd) {
    onAnimationDidEnd();
  },
  setLayoutAnimationEnabledExperimental: function setLayoutAnimationEnabledExperimental() {
  }
};
var UIManager_default = UIManager;

// node_modules/react-native-web/dist/exports/NativeModules/index.js
var NativeModules = {
  UIManager: UIManager_default
};
var NativeModules_default = NativeModules;

// node_modules/react-native-web/dist/exports/AccessibilityInfo/index.js
var import_ExecutionEnvironment7 = __toModule(require_ExecutionEnvironment());
function isScreenReaderEnabled() {
  return new Promise(function(resolve, reject) {
    resolve(true);
  });
}
var prefersReducedMotionMedia = import_ExecutionEnvironment7.canUseDOM && typeof window.matchMedia === "function" ? window.matchMedia("(prefers-reduced-motion: reduce)") : null;
function isReduceMotionEnabled() {
  return new Promise(function(resolve, reject) {
    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);
  });
}
function addChangeListener(fn) {
  if (prefersReducedMotionMedia != null) {
    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener("change", fn) : prefersReducedMotionMedia.addListener(fn);
  }
}
function removeChangeListener(fn) {
  if (prefersReducedMotionMedia != null) {
    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener("change", fn) : prefersReducedMotionMedia.removeListener(fn);
  }
}
var handlers = {};
var AccessibilityInfo = {
  isScreenReaderEnabled,
  isReduceMotionEnabled,
  fetch: isScreenReaderEnabled,
  addEventListener: function addEventListener(eventName, handler) {
    if (eventName === "reduceMotionChanged") {
      if (!prefersReducedMotionMedia) {
        return;
      }
      var listener3 = function listener4(event4) {
        handler(event4.matches);
      };
      addChangeListener(listener3);
      handlers[handler] = listener3;
    }
    return {
      remove: function remove2() {
        return AccessibilityInfo.removeEventListener(eventName, handler);
      }
    };
  },
  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {
  },
  announceForAccessibility: function announceForAccessibility(announcement) {
  },
  removeEventListener: function removeEventListener(eventName, handler) {
    if (eventName === "reduceMotionChanged") {
      var listener3 = handlers[handler];
      if (!listener3 || !prefersReducedMotionMedia) {
        return;
      }
      removeChangeListener(listener3);
    }
    return;
  }
};
var AccessibilityInfo_default = AccessibilityInfo;

// node_modules/react-native-web/dist/exports/Alert/index.js
var Alert = /* @__PURE__ */ function() {
  function Alert2() {
  }
  Alert2.alert = function alert2() {
  };
  return Alert2;
}();
var Alert_default = Alert;

// node_modules/react-native-web/dist/vendor/react-native/emitter/EventSubscription.js
"use strict";
var EventSubscription = /* @__PURE__ */ function() {
  function EventSubscription2(subscriber) {
    this.subscriber = subscriber;
  }
  var _proto = EventSubscription2.prototype;
  _proto.remove = function remove2() {
    this.subscriber.removeSubscription(this);
  };
  return EventSubscription2;
}();
var EventSubscription_default = EventSubscription;

// node_modules/react-native-web/dist/vendor/react-native/emitter/EmitterSubscription.js
"use strict";
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
var EmitterSubscription = /* @__PURE__ */ function(_EventSubscription) {
  _inheritsLoose(EmitterSubscription2, _EventSubscription);
  function EmitterSubscription2(emitter, subscriber, listener3, context) {
    var _this;
    _this = _EventSubscription.call(this, subscriber) || this;
    _this.emitter = emitter;
    _this.listener = listener3;
    _this.context = context;
    return _this;
  }
  var _proto = EmitterSubscription2.prototype;
  _proto.remove = function remove2() {
    this.emitter.removeSubscription(this);
  };
  return EmitterSubscription2;
}(EventSubscription_default);
var EmitterSubscription_default = EmitterSubscription;

// node_modules/react-native-web/dist/vendor/react-native/emitter/EventSubscriptionVendor.js
var import_invariant2 = __toModule(require_invariant());
"use strict";
var EventSubscriptionVendor = /* @__PURE__ */ function() {
  function EventSubscriptionVendor2() {
    this._subscriptionsForType = {};
    this._currentSubscription = null;
  }
  var _proto = EventSubscriptionVendor2.prototype;
  _proto.addSubscription = function addSubscription(eventType, subscription) {
    (0, import_invariant2.default)(subscription.subscriber === this, "The subscriber of the subscription is incorrectly set.");
    if (!this._subscriptionsForType[eventType]) {
      this._subscriptionsForType[eventType] = [];
    }
    var key3 = this._subscriptionsForType[eventType].length;
    this._subscriptionsForType[eventType].push(subscription);
    subscription.eventType = eventType;
    subscription.key = key3;
    return subscription;
  };
  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {
    if (eventType === void 0) {
      this._subscriptionsForType = {};
    } else {
      delete this._subscriptionsForType[eventType];
    }
  };
  _proto.removeSubscription = function removeSubscription(subscription) {
    var eventType = subscription.eventType;
    var key3 = subscription.key;
    var subscriptionsForType = this._subscriptionsForType[eventType];
    if (subscriptionsForType) {
      delete subscriptionsForType[key3];
    }
  };
  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {
    return this._subscriptionsForType[eventType];
  };
  return EventSubscriptionVendor2;
}();
var EventSubscriptionVendor_default = EventSubscriptionVendor;

// node_modules/react-native-web/dist/vendor/react-native/emitter/EventEmitter.js
var import_invariant3 = __toModule(require_invariant());
"use strict";
var sparseFilterPredicate = function sparseFilterPredicate2() {
  return true;
};
var EventEmitter = /* @__PURE__ */ function() {
  function EventEmitter2(subscriber) {
    this._subscriber = subscriber || new EventSubscriptionVendor_default();
  }
  var _proto = EventEmitter2.prototype;
  _proto.addListener = function addListener3(eventType, listener3, context) {
    return this._subscriber.addSubscription(eventType, new EmitterSubscription_default(this, this._subscriber, listener3, context));
  };
  _proto.once = function once(eventType, listener3, context) {
    var _this = this;
    return this.addListener(eventType, function() {
      _this.removeCurrentListener();
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      listener3.apply(context, args);
    });
  };
  _proto.removeAllListeners = function removeAllListeners2(eventType) {
    this._subscriber.removeAllSubscriptions(eventType);
  };
  _proto.removeCurrentListener = function removeCurrentListener() {
    (0, import_invariant3.default)(!!this._currentSubscription, "Not in an emitting cycle; there is no current subscription");
    this.removeSubscription(this._currentSubscription);
  };
  _proto.removeSubscription = function removeSubscription(subscription) {
    (0, import_invariant3.default)(subscription.emitter === this, "Subscription does not belong to this emitter.");
    this._subscriber.removeSubscription(subscription);
  };
  _proto.listeners = function listeners3(eventType) {
    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
    return subscriptions ? subscriptions.filter(sparseFilterPredicate).map(function(subscription) {
      return subscription.listener;
    }) : [];
  };
  _proto.emit = function emit(eventType) {
    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
    if (subscriptions) {
      for (var i = 0, l = subscriptions.length; i < l; i++) {
        var subscription = subscriptions[i];
        if (subscription && subscription.listener) {
          this._currentSubscription = subscription;
          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
        }
      }
      this._currentSubscription = null;
    }
  };
  _proto.removeListener = function removeListener2(eventType, listener3) {
    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
    if (subscriptions) {
      for (var i = 0, l = subscriptions.length; i < l; i++) {
        var subscription = subscriptions[i];
        if (subscription && subscription.listener === listener3) {
          subscription.remove();
        }
      }
    }
  };
  return EventEmitter2;
}();
var EventEmitter_default = EventEmitter;

// node_modules/react-native-web/dist/vendor/react-native/NativeEventEmitter/RCTDeviceEventEmitter.js
"use strict";
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}
var __DEV__2 = true;
function checkNativeEventModule(eventType) {
  if (eventType) {
    if (eventType.lastIndexOf("statusBar", 0) === 0) {
      throw new Error("`" + eventType + "` event should be registered via the StatusBarIOS module");
    }
    if (eventType.lastIndexOf("keyboard", 0) === 0) {
      throw new Error("`" + eventType + "` event should be registered via the Keyboard module");
    }
    if (eventType === "appStateDidChange" || eventType === "memoryWarning") {
      throw new Error("`" + eventType + "` event should be registered via the AppState module");
    }
  }
}
var RCTDeviceEventEmitter = /* @__PURE__ */ function(_EventEmitter) {
  _inheritsLoose2(RCTDeviceEventEmitter2, _EventEmitter);
  function RCTDeviceEventEmitter2() {
    var _this;
    var sharedSubscriber = new EventSubscriptionVendor_default();
    _this = _EventEmitter.call(this, sharedSubscriber) || this;
    _this.sharedSubscriber = sharedSubscriber;
    return _this;
  }
  var _proto = RCTDeviceEventEmitter2.prototype;
  _proto.addListener = function addListener3(eventType, listener3, context) {
    if (__DEV__2) {
      checkNativeEventModule(eventType);
    }
    return _EventEmitter.prototype.addListener.call(this, eventType, listener3, context);
  };
  _proto.removeAllListeners = function removeAllListeners2(eventType) {
    if (__DEV__2) {
      checkNativeEventModule(eventType);
    }
    _EventEmitter.prototype.removeAllListeners.call(this, eventType);
  };
  _proto.removeSubscription = function removeSubscription(subscription) {
    if (subscription.emitter !== this) {
      subscription.emitter.removeSubscription(subscription);
    } else {
      _EventEmitter.prototype.removeSubscription.call(this, subscription);
    }
  };
  return RCTDeviceEventEmitter2;
}(EventEmitter_default);
var RCTDeviceEventEmitter_default = new RCTDeviceEventEmitter();

// node_modules/react-native-web/dist/vendor/react-native/NativeEventEmitter/index.js
var import_invariant4 = __toModule(require_invariant());
"use strict";
function _inheritsLoose3(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf3(subClass, superClass);
}
function _setPrototypeOf3(o, p) {
  _setPrototypeOf3 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf3(o, p);
}
var NativeEventEmitter = /* @__PURE__ */ function(_EventEmitter) {
  _inheritsLoose3(NativeEventEmitter2, _EventEmitter);
  function NativeEventEmitter2(nativeModule) {
    return _EventEmitter.call(this, RCTDeviceEventEmitter_default.sharedSubscriber) || this;
  }
  var _proto = NativeEventEmitter2.prototype;
  _proto.addListener = function addListener3(eventType, listener3, context) {
    if (this._nativeModule != null) {
      this._nativeModule.addListener(eventType);
    }
    return _EventEmitter.prototype.addListener.call(this, eventType, listener3, context);
  };
  _proto.removeAllListeners = function removeAllListeners2(eventType) {
    (0, import_invariant4.default)(eventType, "eventType argument is required.");
    var count = this.listeners(eventType).length;
    if (this._nativeModule != null) {
      this._nativeModule.removeListeners(count);
    }
    _EventEmitter.prototype.removeAllListeners.call(this, eventType);
  };
  _proto.removeSubscription = function removeSubscription(subscription) {
    if (this._nativeModule != null) {
      this._nativeModule.removeListeners(1);
    }
    _EventEmitter.prototype.removeSubscription.call(this, subscription);
  };
  return NativeEventEmitter2;
}(EventEmitter_default);
var NativeEventEmitter_default = NativeEventEmitter;

// node_modules/react-native-web/dist/vendor/react-native/TurboModule/TurboModuleRegistry.js
var import_invariant5 = __toModule(require_invariant());
"use strict";
function get2(name) {
  return null;
}

// node_modules/react-native-web/dist/vendor/react-native/Animated/NativeAnimatedModule.js
"use strict";
var NativeAnimatedModule_default = get2("NativeAnimatedModule");

// node_modules/react-native-web/dist/vendor/react-native/Animated/NativeAnimatedHelper.js
var import_invariant6 = __toModule(require_invariant());
"use strict";
var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;
var nativeEventEmitter;
var queueConnections = false;
var queue = [];
var API = {
  enableQueue: function enableQueue() {
    queueConnections = true;
  },
  disableQueue: function disableQueue() {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    queueConnections = false;
    for (var q = 0, l = queue.length; q < l; q++) {
      var args = queue[q];
      NativeAnimatedModule_default.connectAnimatedNodes(args[0], args[1]);
    }
    queue.length = 0;
  },
  createAnimatedNode: function createAnimatedNode(tag3, config) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.createAnimatedNode(tag3, config);
  },
  startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag3) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.startListeningToAnimatedNodeValue(tag3);
  },
  stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag3) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.stopListeningToAnimatedNodeValue(tag3);
  },
  connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    if (queueConnections) {
      queue.push([parentTag, childTag]);
      return;
    }
    NativeAnimatedModule_default.connectAnimatedNodes(parentTag, childTag);
  },
  disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.disconnectAnimatedNodes(parentTag, childTag);
  },
  startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.startAnimatingNode(animationId, nodeTag, config, endCallback);
  },
  stopAnimation: function stopAnimation(animationId) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.stopAnimation(animationId);
  },
  setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.setAnimatedNodeValue(nodeTag, value);
  },
  setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.setAnimatedNodeOffset(nodeTag, offset);
  },
  flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.flattenAnimatedNodeOffset(nodeTag);
  },
  extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.extractAnimatedNodeOffset(nodeTag);
  },
  connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.connectAnimatedNodeToView(nodeTag, viewTag);
  },
  disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.disconnectAnimatedNodeFromView(nodeTag, viewTag);
  },
  dropAnimatedNode: function dropAnimatedNode(tag3) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.dropAnimatedNode(tag3);
  },
  addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.addAnimatedEventToView(viewTag, eventName, eventMapping);
  },
  removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
    (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
    NativeAnimatedModule_default.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
  }
};
var STYLES_WHITELIST = {
  opacity: true,
  transform: true,
  borderRadius: true,
  borderBottomEndRadius: true,
  borderBottomLeftRadius: true,
  borderBottomRightRadius: true,
  borderBottomStartRadius: true,
  borderTopEndRadius: true,
  borderTopLeftRadius: true,
  borderTopRightRadius: true,
  borderTopStartRadius: true,
  elevation: true,
  shadowOpacity: true,
  shadowRadius: true,
  scaleX: true,
  scaleY: true,
  translateX: true,
  translateY: true
};
var TRANSFORM_WHITELIST = {
  translateX: true,
  translateY: true,
  scale: true,
  scaleX: true,
  scaleY: true,
  rotate: true,
  rotateX: true,
  rotateY: true,
  perspective: true
};
var SUPPORTED_INTERPOLATION_PARAMS = {
  inputRange: true,
  outputRange: true,
  extrapolate: true,
  extrapolateRight: true,
  extrapolateLeft: true
};
function addWhitelistedStyleProp(prop) {
  STYLES_WHITELIST[prop] = true;
}
function addWhitelistedTransformProp(prop) {
  TRANSFORM_WHITELIST[prop] = true;
}
function addWhitelistedInterpolationParam(param) {
  SUPPORTED_INTERPOLATION_PARAMS[param] = true;
}
function validateTransform(configs) {
  configs.forEach(function(config) {
    if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
      throw new Error("Property '" + config.property + "' is not supported by native animated module");
    }
  });
}
function validateStyles(styles152) {
  for (var _key in styles152) {
    if (!STYLES_WHITELIST.hasOwnProperty(_key)) {
      throw new Error("Style property '" + _key + "' is not supported by native animated module");
    }
  }
}
function validateInterpolation(config) {
  for (var _key2 in config) {
    if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(_key2)) {
      throw new Error("Interpolation property '" + _key2 + "' is not supported by native animated module");
    }
  }
}
function generateNewNodeTag() {
  return __nativeAnimatedNodeTagCount++;
}
function generateNewAnimationId() {
  return __nativeAnimationIdCount++;
}
function assertNativeAnimatedModule() {
  (0, import_invariant6.default)(NativeAnimatedModule_default, "Native animated module is not available");
}
function shouldUseNativeDriver(config) {
  if (config.useNativeDriver === true && !NativeAnimatedModule_default) {
    return false;
  }
  return config.useNativeDriver || false;
}
function transformDataType(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (/deg$/.test(value)) {
    var degrees = parseFloat(value) || 0;
    var radians = degrees * Math.PI / 180;
    return radians;
  } else {
    return value;
  }
}
var NativeAnimatedHelper = {
  API,
  addWhitelistedStyleProp,
  addWhitelistedTransformProp,
  addWhitelistedInterpolationParam,
  validateStyles,
  validateTransform,
  validateInterpolation,
  generateNewNodeTag,
  generateNewAnimationId,
  assertNativeAnimatedModule,
  shouldUseNativeDriver,
  transformDataType,
  get nativeEventEmitter() {
    if (!nativeEventEmitter) {
      nativeEventEmitter = new NativeEventEmitter_default(NativeAnimatedModule_default);
    }
    return nativeEventEmitter;
  }
};
var NativeAnimatedHelper_default = NativeAnimatedHelper;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedNode.js
var import_invariant7 = __toModule(require_invariant());
"use strict";
var NativeAnimatedAPI = NativeAnimatedHelper_default.API;
var _uniqueId = 1;
var AnimatedNode = /* @__PURE__ */ function() {
  var _proto = AnimatedNode3.prototype;
  _proto.__attach = function __attach() {
  };
  _proto.__detach = function __detach() {
    if (this.__isNative && this.__nativeTag != null) {
      NativeAnimatedHelper_default.API.dropAnimatedNode(this.__nativeTag);
      this.__nativeTag = void 0;
    }
  };
  _proto.__getValue = function __getValue() {
  };
  _proto.__getAnimatedValue = function __getAnimatedValue() {
    return this.__getValue();
  };
  _proto.__addChild = function __addChild(child2) {
  };
  _proto.__removeChild = function __removeChild(child2) {
  };
  _proto.__getChildren = function __getChildren() {
    return [];
  };
  function AnimatedNode3() {
    this._listeners = {};
  }
  _proto.__makeNative = function __makeNative() {
    if (!this.__isNative) {
      throw new Error('This node cannot be made a "native" animated node');
    }
    if (this.hasListeners()) {
      this._startListeningToNativeValueUpdates();
    }
  };
  _proto.addListener = function addListener3(callback) {
    var id2 = String(_uniqueId++);
    this._listeners[id2] = callback;
    if (this.__isNative) {
      this._startListeningToNativeValueUpdates();
    }
    return id2;
  };
  _proto.removeListener = function removeListener2(id2) {
    delete this._listeners[id2];
    if (this.__isNative && !this.hasListeners()) {
      this._stopListeningForNativeValueUpdates();
    }
  };
  _proto.removeAllListeners = function removeAllListeners2() {
    this._listeners = {};
    if (this.__isNative) {
      this._stopListeningForNativeValueUpdates();
    }
  };
  _proto.hasListeners = function hasListeners() {
    return !!Object.keys(this._listeners).length;
  };
  _proto._startListeningToNativeValueUpdates = function _startListeningToNativeValueUpdates() {
    var _this = this;
    if (this.__nativeAnimatedValueListener && !this.__shouldUpdateListenersForNewNativeTag) {
      return;
    }
    if (this.__shouldUpdateListenersForNewNativeTag) {
      this.__shouldUpdateListenersForNewNativeTag = false;
      this._stopListeningForNativeValueUpdates();
    }
    NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
    this.__nativeAnimatedValueListener = NativeAnimatedHelper_default.nativeEventEmitter.addListener("onAnimatedValueUpdate", function(data2) {
      if (data2.tag !== _this.__getNativeTag()) {
        return;
      }
      _this._onAnimatedValueUpdateReceived(data2.value);
    });
  };
  _proto._onAnimatedValueUpdateReceived = function _onAnimatedValueUpdateReceived(value) {
    this.__callListeners(value);
  };
  _proto.__callListeners = function __callListeners(value) {
    for (var _key in this._listeners) {
      this._listeners[_key]({
        value
      });
    }
  };
  _proto._stopListeningForNativeValueUpdates = function _stopListeningForNativeValueUpdates() {
    if (!this.__nativeAnimatedValueListener) {
      return;
    }
    this.__nativeAnimatedValueListener.remove();
    this.__nativeAnimatedValueListener = null;
    NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
  };
  _proto.__getNativeTag = function __getNativeTag() {
    NativeAnimatedHelper_default.assertNativeAnimatedModule();
    (0, import_invariant7.default)(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
    if (this.__nativeTag == null) {
      var nativeTag = NativeAnimatedHelper_default.generateNewNodeTag();
      this.__nativeTag = nativeTag;
      NativeAnimatedHelper_default.API.createAnimatedNode(nativeTag, this.__getNativeConfig());
      this.__shouldUpdateListenersForNewNativeTag = true;
    }
    return this.__nativeTag;
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    throw new Error("This JS animated node type cannot be used as native animated node");
  };
  _proto.toJSON = function toJSON() {
    return this.__getValue();
  };
  return AnimatedNode3;
}();
var AnimatedNode_default = AnimatedNode;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedWithChildren.js
"use strict";
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      return function() {
        if (i >= o.length)
          return {done: true};
        return {done: false, value: o[i++]};
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  it = o[Symbol.iterator]();
  return it.next.bind(it);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _inheritsLoose4(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf4(subClass, superClass);
}
function _setPrototypeOf4(o, p) {
  _setPrototypeOf4 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf4(o, p);
}
var AnimatedWithChildren = /* @__PURE__ */ function(_AnimatedNode) {
  _inheritsLoose4(AnimatedWithChildren2, _AnimatedNode);
  function AnimatedWithChildren2() {
    var _this;
    _this = _AnimatedNode.call(this) || this;
    _this._children = [];
    return _this;
  }
  var _proto = AnimatedWithChildren2.prototype;
  _proto.__makeNative = function __makeNative() {
    if (!this.__isNative) {
      this.__isNative = true;
      for (var _iterator = _createForOfIteratorHelperLoose(this._children), _step; !(_step = _iterator()).done; ) {
        var child2 = _step.value;
        child2.__makeNative();
        NativeAnimatedHelper_default.API.connectAnimatedNodes(this.__getNativeTag(), child2.__getNativeTag());
      }
    }
    _AnimatedNode.prototype.__makeNative.call(this);
  };
  _proto.__addChild = function __addChild(child2) {
    if (this._children.length === 0) {
      this.__attach();
    }
    this._children.push(child2);
    if (this.__isNative) {
      child2.__makeNative();
      NativeAnimatedHelper_default.API.connectAnimatedNodes(this.__getNativeTag(), child2.__getNativeTag());
    }
  };
  _proto.__removeChild = function __removeChild(child2) {
    var index = this._children.indexOf(child2);
    if (index === -1) {
      console.warn("Trying to remove a child that doesn't exist");
      return;
    }
    if (this.__isNative && child2.__isNative) {
      NativeAnimatedHelper_default.API.disconnectAnimatedNodes(this.__getNativeTag(), child2.__getNativeTag());
    }
    this._children.splice(index, 1);
    if (this._children.length === 0) {
      this.__detach();
    }
  };
  _proto.__getChildren = function __getChildren() {
    return this._children;
  };
  _proto.__callListeners = function __callListeners(value) {
    _AnimatedNode.prototype.__callListeners.call(this, value);
    if (!this.__isNative) {
      for (var _iterator2 = _createForOfIteratorHelperLoose(this._children), _step2; !(_step2 = _iterator2()).done; ) {
        var child2 = _step2.value;
        if (child2.__getValue) {
          child2.__callListeners(child2.__getValue());
        }
      }
    }
  };
  return AnimatedWithChildren2;
}(AnimatedNode_default);
var AnimatedWithChildren_default = AnimatedWithChildren;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedInterpolation.js
var import_invariant8 = __toModule(require_invariant());
var import_normalize_css_color2 = __toModule(require_normalize_css_color());
"use strict";
function _inheritsLoose5(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf5(subClass, superClass);
}
function _setPrototypeOf5(o, p) {
  _setPrototypeOf5 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf5(o, p);
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys2(Object(source), true).forEach(function(key3) {
        _defineProperty2(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys2(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty2(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var linear = function linear2(t) {
  return t;
};
function createInterpolation(config) {
  if (config.outputRange && typeof config.outputRange[0] === "string") {
    return createInterpolationFromStringOutputRange(config);
  }
  var outputRange = config.outputRange;
  checkInfiniteRange("outputRange", outputRange);
  var inputRange = config.inputRange;
  checkInfiniteRange("inputRange", inputRange);
  checkValidInputRange(inputRange);
  (0, import_invariant8.default)(inputRange.length === outputRange.length, "inputRange (" + inputRange.length + ") and outputRange (" + outputRange.length + ") must have the same length");
  var easing = config.easing || linear;
  var extrapolateLeft = "extend";
  if (config.extrapolateLeft !== void 0) {
    extrapolateLeft = config.extrapolateLeft;
  } else if (config.extrapolate !== void 0) {
    extrapolateLeft = config.extrapolate;
  }
  var extrapolateRight = "extend";
  if (config.extrapolateRight !== void 0) {
    extrapolateRight = config.extrapolateRight;
  } else if (config.extrapolate !== void 0) {
    extrapolateRight = config.extrapolate;
  }
  return function(input) {
    (0, import_invariant8.default)(typeof input === "number", "Cannot interpolation an input which is not a number");
    var range = findRange(input, inputRange);
    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
  };
}
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
  var result = input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity") {
      return result;
    } else if (extrapolateLeft === "clamp") {
      result = inputMin;
    } else if (extrapolateLeft === "extend") {
    }
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity") {
      return result;
    } else if (extrapolateRight === "clamp") {
      result = inputMax;
    } else if (extrapolateRight === "extend") {
    }
  }
  if (outputMin === outputMax) {
    return outputMin;
  }
  if (inputMin === inputMax) {
    if (input <= inputMin) {
      return outputMin;
    }
    return outputMax;
  }
  if (inputMin === -Infinity) {
    result = -result;
  } else if (inputMax === Infinity) {
    result = result - inputMin;
  } else {
    result = (result - inputMin) / (inputMax - inputMin);
  }
  result = easing(result);
  if (outputMin === -Infinity) {
    result = -result;
  } else if (outputMax === Infinity) {
    result = result + outputMin;
  } else {
    result = result * (outputMax - outputMin) + outputMin;
  }
  return result;
}
function colorToRgba(input) {
  var int32Color = (0, import_normalize_css_color2.default)(input);
  if (int32Color === null) {
    return input;
  }
  int32Color = int32Color || 0;
  var r = (int32Color & 4278190080) >>> 24;
  var g = (int32Color & 16711680) >>> 16;
  var b = (int32Color & 65280) >>> 8;
  var a = (int32Color & 255) / 255;
  return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
}
var stringShapeRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;
function createInterpolationFromStringOutputRange(config) {
  var outputRange = config.outputRange;
  (0, import_invariant8.default)(outputRange.length >= 2, "Bad output range");
  outputRange = outputRange.map(colorToRgba);
  checkPattern(outputRange);
  var outputRanges = outputRange[0].match(stringShapeRegex).map(function() {
    return [];
  });
  outputRange.forEach(function(value) {
    value.match(stringShapeRegex).forEach(function(number, i) {
      outputRanges[i].push(+number);
    });
  });
  var interpolations = outputRange[0].match(stringShapeRegex).map(function(value, i) {
    return createInterpolation(_objectSpread2(_objectSpread2({}, config), {}, {
      outputRange: outputRanges[i]
    }));
  });
  var shouldRound = isRgbOrRgba(outputRange[0]);
  return function(input) {
    var i = 0;
    return outputRange[0].replace(stringShapeRegex, function() {
      var val2 = +interpolations[i++](input);
      if (shouldRound) {
        val2 = i < 4 ? Math.round(val2) : Math.round(val2 * 1e3) / 1e3;
      }
      return String(val2);
    });
  };
}
function isRgbOrRgba(range) {
  return typeof range === "string" && range.startsWith("rgb");
}
function checkPattern(arr) {
  var pattern2 = arr[0].replace(stringShapeRegex, "");
  for (var i = 1; i < arr.length; ++i) {
    (0, import_invariant8.default)(pattern2 === arr[i].replace(stringShapeRegex, ""), "invalid pattern " + arr[0] + " and " + arr[i]);
  }
}
function findRange(input, inputRange) {
  var i;
  for (i = 1; i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }
  return i - 1;
}
function checkValidInputRange(arr) {
  (0, import_invariant8.default)(arr.length >= 2, "inputRange must have at least 2 elements");
  for (var i = 1; i < arr.length; ++i) {
    (0, import_invariant8.default)(arr[i] >= arr[i - 1], "inputRange must be monotonically non-decreasing " + arr);
  }
}
function checkInfiniteRange(name, arr) {
  (0, import_invariant8.default)(arr.length >= 2, name + " must have at least 2 elements");
  (0, import_invariant8.default)(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + "cannot be ]-infinity;+infinity[ " + arr);
}
var AnimatedInterpolation = /* @__PURE__ */ function(_AnimatedWithChildren) {
  _inheritsLoose5(AnimatedInterpolation2, _AnimatedWithChildren);
  function AnimatedInterpolation2(parent, config) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    _this._parent = parent;
    _this._config = config;
    _this._interpolation = createInterpolation(config);
    return _this;
  }
  var _proto = AnimatedInterpolation2.prototype;
  _proto.__makeNative = function __makeNative() {
    this._parent.__makeNative();
    _AnimatedWithChildren.prototype.__makeNative.call(this);
  };
  _proto.__getValue = function __getValue() {
    var parentValue = this._parent.__getValue();
    (0, import_invariant8.default)(typeof parentValue === "number", "Cannot interpolate an input which is not a number.");
    return this._interpolation(parentValue);
  };
  _proto.interpolate = function interpolate4(config) {
    return new AnimatedInterpolation2(this, config);
  };
  _proto.__attach = function __attach() {
    this._parent.__addChild(this);
  };
  _proto.__detach = function __detach() {
    this._parent.__removeChild(this);
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__transformDataType = function __transformDataType(range) {
    return range.map(NativeAnimatedHelper_default.transformDataType);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    if (true) {
      NativeAnimatedHelper_default.validateInterpolation(this._config);
    }
    return {
      inputRange: this._config.inputRange,
      outputRange: this.__transformDataType(this._config.outputRange),
      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || "extend",
      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || "extend",
      type: "interpolation"
    };
  };
  return AnimatedInterpolation2;
}(AnimatedWithChildren_default);
AnimatedInterpolation.__createInterpolation = createInterpolation;
var AnimatedInterpolation_default = AnimatedInterpolation;

// node_modules/react-native-web/dist/exports/InteractionManager/index.js
var import_invariant9 = __toModule(require_invariant());

// node_modules/react-native-web/dist/modules/requestIdleCallback/index.js
var import_ExecutionEnvironment8 = __toModule(require_ExecutionEnvironment());
var _requestIdleCallback = function _requestIdleCallback2(cb, options) {
  return setTimeout(function() {
    var start = Date.now();
    cb({
      didTimeout: false,
      timeRemaining: function timeRemaining() {
        return Math.max(0, 50 - (Date.now() - start));
      }
    });
  }, 1);
};
var _cancelIdleCallback = function _cancelIdleCallback2(id2) {
  clearTimeout(id2);
};
var isSupported = import_ExecutionEnvironment8.canUseDOM && typeof window.requestIdleCallback !== "undefined";
var requestIdleCallback = isSupported ? window.requestIdleCallback : _requestIdleCallback;
var cancelIdleCallback = isSupported ? window.cancelIdleCallback : _cancelIdleCallback;
var requestIdleCallback_default = requestIdleCallback;

// node_modules/react-native-web/dist/exports/InteractionManager/index.js
var InteractionManager = {
  Events: {
    interactionStart: "interactionStart",
    interactionComplete: "interactionComplete"
  },
  runAfterInteractions: function runAfterInteractions(task) {
    var handle;
    var promise = new Promise(function(resolve) {
      handle = requestIdleCallback_default(function() {
        if (task) {
          resolve(task());
        } else {
          resolve();
        }
      });
    });
    return {
      then: promise.then.bind(promise),
      done: promise.then.bind(promise),
      cancel: function cancel2() {
        cancelIdleCallback(handle);
      }
    };
  },
  createInteractionHandle: function createInteractionHandle() {
    return 1;
  },
  clearInteractionHandle: function clearInteractionHandle(handle) {
    (0, import_invariant9.default)(!!handle, "Must provide a handle to clear.");
  },
  addListener: function addListener() {
  }
};
var InteractionManager_default = InteractionManager;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedValue.js
"use strict";
function _inheritsLoose6(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf6(subClass, superClass);
}
function _setPrototypeOf6(o, p) {
  _setPrototypeOf6 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf6(o, p);
}
var NativeAnimatedAPI2 = NativeAnimatedHelper_default.API;
function _flush(rootNode) {
  var animatedStyles = new Set();
  function findAnimatedStyles(node) {
    if (typeof node.update === "function") {
      animatedStyles.add(node);
    } else {
      node.__getChildren().forEach(findAnimatedStyles);
    }
  }
  findAnimatedStyles(rootNode);
  animatedStyles.forEach(function(animatedStyle) {
    return animatedStyle.update();
  });
}
var AnimatedValue = /* @__PURE__ */ function(_AnimatedWithChildren) {
  _inheritsLoose6(AnimatedValue3, _AnimatedWithChildren);
  function AnimatedValue3(value) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    _this._startingValue = _this._value = value;
    _this._offset = 0;
    _this._animation = null;
    return _this;
  }
  var _proto = AnimatedValue3.prototype;
  _proto.__detach = function __detach() {
    this.stopAnimation();
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__getValue = function __getValue() {
    return this._value + this._offset;
  };
  _proto.setValue = function setValue(value) {
    if (this._animation) {
      this._animation.stop();
      this._animation = null;
    }
    this._updateValue(value, !this.__isNative);
    if (this.__isNative) {
      NativeAnimatedAPI2.setAnimatedNodeValue(this.__getNativeTag(), value);
    }
  };
  _proto.setOffset = function setOffset(offset) {
    this._offset = offset;
    if (this.__isNative) {
      NativeAnimatedAPI2.setAnimatedNodeOffset(this.__getNativeTag(), offset);
    }
  };
  _proto.flattenOffset = function flattenOffset() {
    this._value += this._offset;
    this._offset = 0;
    if (this.__isNative) {
      NativeAnimatedAPI2.flattenAnimatedNodeOffset(this.__getNativeTag());
    }
  };
  _proto.extractOffset = function extractOffset() {
    this._offset += this._value;
    this._value = 0;
    if (this.__isNative) {
      NativeAnimatedAPI2.extractAnimatedNodeOffset(this.__getNativeTag());
    }
  };
  _proto.stopAnimation = function stopAnimation2(callback) {
    this.stopTracking();
    this._animation && this._animation.stop();
    this._animation = null;
    callback && callback(this.__getValue());
  };
  _proto.resetAnimation = function resetAnimation(callback) {
    this.stopAnimation(callback);
    this._value = this._startingValue;
  };
  _proto._onAnimatedValueUpdateReceived = function _onAnimatedValueUpdateReceived(value) {
    this._updateValue(value, false);
  };
  _proto.interpolate = function interpolate4(config) {
    return new AnimatedInterpolation_default(this, config);
  };
  _proto.animate = function animate(animation2, callback) {
    var _this2 = this;
    var handle = null;
    if (animation2.__isInteraction) {
      handle = InteractionManager_default.createInteractionHandle();
    }
    var previousAnimation = this._animation;
    this._animation && this._animation.stop();
    this._animation = animation2;
    animation2.start(this._value, function(value) {
      _this2._updateValue(value, true);
    }, function(result) {
      _this2._animation = null;
      if (handle !== null) {
        InteractionManager_default.clearInteractionHandle(handle);
      }
      callback && callback(result);
    }, previousAnimation, this);
  };
  _proto.stopTracking = function stopTracking() {
    this._tracking && this._tracking.__detach();
    this._tracking = null;
  };
  _proto.track = function track(tracking) {
    this.stopTracking();
    this._tracking = tracking;
  };
  _proto._updateValue = function _updateValue(value, flush) {
    this._value = value;
    if (flush) {
      _flush(this);
    }
    _AnimatedWithChildren.prototype.__callListeners.call(this, this.__getValue());
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    return {
      type: "value",
      value: this._value,
      offset: this._offset
    };
  };
  return AnimatedValue3;
}(AnimatedWithChildren_default);
var AnimatedValue_default = AnimatedValue;

// node_modules/react-native-web/dist/vendor/react-native/Animated/AnimatedEvent.js
var import_invariant10 = __toModule(require_invariant());
"use strict";
var shouldUseNativeDriver2 = NativeAnimatedHelper_default.shouldUseNativeDriver;
function attachNativeEvent(viewRef, eventName, argMapping) {
  var eventMappings = [];
  var traverse = function traverse2(value, path) {
    if (value instanceof AnimatedValue_default) {
      value.__makeNative();
      eventMappings.push({
        nativeEventPath: path,
        animatedValueTag: value.__getNativeTag()
      });
    } else if (typeof value === "object") {
      for (var _key in value) {
        traverse2(value[_key], path.concat(_key));
      }
    }
  };
  (0, import_invariant10.default)(argMapping[0] && argMapping[0].nativeEvent, "Native driven events only support animated values contained inside `nativeEvent`.");
  traverse(argMapping[0].nativeEvent, []);
  var viewTag = findNodeHandle_default(viewRef);
  eventMappings.forEach(function(mapping) {
    NativeAnimatedHelper_default.API.addAnimatedEventToView(viewTag, eventName, mapping);
  });
  return {
    detach: function detach() {
      eventMappings.forEach(function(mapping) {
        NativeAnimatedHelper_default.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
      });
    }
  };
}
var AnimatedEvent = /* @__PURE__ */ function() {
  function AnimatedEvent3(argMapping, config) {
    if (config === void 0) {
      config = {};
    }
    this._listeners = [];
    this._argMapping = argMapping;
    if (config.listener) {
      this.__addListener(config.listener);
    }
    this._callListeners = this._callListeners.bind(this);
    this._attachedEvent = null;
    this.__isNative = shouldUseNativeDriver2(config);
    if (true) {
      this._validateMapping();
    }
  }
  var _proto = AnimatedEvent3.prototype;
  _proto.__addListener = function __addListener(callback) {
    this._listeners.push(callback);
  };
  _proto.__removeListener = function __removeListener(callback) {
    this._listeners = this._listeners.filter(function(listener3) {
      return listener3 !== callback;
    });
  };
  _proto.__attach = function __attach(viewRef, eventName) {
    (0, import_invariant10.default)(this.__isNative, "Only native driven events need to be attached.");
    this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
  };
  _proto.__detach = function __detach(viewTag, eventName) {
    (0, import_invariant10.default)(this.__isNative, "Only native driven events need to be detached.");
    this._attachedEvent && this._attachedEvent.detach();
  };
  _proto.__getHandler = function __getHandler() {
    var _this = this;
    if (this.__isNative) {
      return this._callListeners;
    }
    return function() {
      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var traverse = function traverse2(recMapping, recEvt, key3) {
        if (typeof recEvt === "number" && recMapping instanceof AnimatedValue_default) {
          recMapping.setValue(recEvt);
        } else if (typeof recMapping === "object") {
          for (var mappingKey in recMapping) {
            traverse2(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
          }
        }
      };
      if (!_this.__isNative) {
        _this._argMapping.forEach(function(mapping, idx) {
          traverse(mapping, args[idx], "arg" + idx);
        });
      }
      _this._callListeners.apply(_this, args);
    };
  };
  _proto._callListeners = function _callListeners() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
      args[_key3] = arguments[_key3];
    }
    this._listeners.forEach(function(listener3) {
      return listener3.apply(void 0, args);
    });
  };
  _proto._validateMapping = function _validateMapping() {
    var traverse = function traverse2(recMapping, recEvt, key3) {
      if (typeof recEvt === "number") {
        (0, import_invariant10.default)(recMapping instanceof AnimatedValue_default, "Bad mapping of type " + typeof recMapping + " for key " + key3 + ", event value must map to AnimatedValue");
        return;
      }
      (0, import_invariant10.default)(typeof recMapping === "object", "Bad mapping of type " + typeof recMapping + " for key " + key3);
      (0, import_invariant10.default)(typeof recEvt === "object", "Bad event of type " + typeof recEvt + " for key " + key3);
      for (var mappingKey in recMapping) {
        traverse2(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
      }
    };
  };
  return AnimatedEvent3;
}();

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedAddition.js
"use strict";
function _inheritsLoose7(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf7(subClass, superClass);
}
function _setPrototypeOf7(o, p) {
  _setPrototypeOf7 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf7(o, p);
}
var AnimatedAddition = /* @__PURE__ */ function(_AnimatedWithChildren) {
  _inheritsLoose7(AnimatedAddition2, _AnimatedWithChildren);
  function AnimatedAddition2(a, b) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    _this._a = typeof a === "number" ? new AnimatedValue_default(a) : a;
    _this._b = typeof b === "number" ? new AnimatedValue_default(b) : b;
    return _this;
  }
  var _proto = AnimatedAddition2.prototype;
  _proto.__makeNative = function __makeNative() {
    this._a.__makeNative();
    this._b.__makeNative();
    _AnimatedWithChildren.prototype.__makeNative.call(this);
  };
  _proto.__getValue = function __getValue() {
    return this._a.__getValue() + this._b.__getValue();
  };
  _proto.interpolate = function interpolate4(config) {
    return new AnimatedInterpolation_default(this, config);
  };
  _proto.__attach = function __attach() {
    this._a.__addChild(this);
    this._b.__addChild(this);
  };
  _proto.__detach = function __detach() {
    this._a.__removeChild(this);
    this._b.__removeChild(this);
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    return {
      type: "addition",
      input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
    };
  };
  return AnimatedAddition2;
}(AnimatedWithChildren_default);
var AnimatedAddition_default = AnimatedAddition;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedDiffClamp.js
"use strict";
function _inheritsLoose8(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf8(subClass, superClass);
}
function _setPrototypeOf8(o, p) {
  _setPrototypeOf8 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf8(o, p);
}
var AnimatedDiffClamp = /* @__PURE__ */ function(_AnimatedWithChildren) {
  _inheritsLoose8(AnimatedDiffClamp2, _AnimatedWithChildren);
  function AnimatedDiffClamp2(a, min3, max3) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    _this._a = a;
    _this._min = min3;
    _this._max = max3;
    _this._value = _this._lastValue = _this._a.__getValue();
    return _this;
  }
  var _proto = AnimatedDiffClamp2.prototype;
  _proto.__makeNative = function __makeNative() {
    this._a.__makeNative();
    _AnimatedWithChildren.prototype.__makeNative.call(this);
  };
  _proto.interpolate = function interpolate4(config) {
    return new AnimatedInterpolation_default(this, config);
  };
  _proto.__getValue = function __getValue() {
    var value = this._a.__getValue();
    var diff2 = value - this._lastValue;
    this._lastValue = value;
    this._value = Math.min(Math.max(this._value + diff2, this._min), this._max);
    return this._value;
  };
  _proto.__attach = function __attach() {
    this._a.__addChild(this);
  };
  _proto.__detach = function __detach() {
    this._a.__removeChild(this);
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    return {
      type: "diffclamp",
      input: this._a.__getNativeTag(),
      min: this._min,
      max: this._max
    };
  };
  return AnimatedDiffClamp2;
}(AnimatedWithChildren_default);
var AnimatedDiffClamp_default = AnimatedDiffClamp;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedDivision.js
"use strict";
function _inheritsLoose9(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf9(subClass, superClass);
}
function _setPrototypeOf9(o, p) {
  _setPrototypeOf9 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf9(o, p);
}
var AnimatedDivision = /* @__PURE__ */ function(_AnimatedWithChildren) {
  _inheritsLoose9(AnimatedDivision2, _AnimatedWithChildren);
  function AnimatedDivision2(a, b) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    _this._a = typeof a === "number" ? new AnimatedValue_default(a) : a;
    _this._b = typeof b === "number" ? new AnimatedValue_default(b) : b;
    return _this;
  }
  var _proto = AnimatedDivision2.prototype;
  _proto.__makeNative = function __makeNative() {
    this._a.__makeNative();
    this._b.__makeNative();
    _AnimatedWithChildren.prototype.__makeNative.call(this);
  };
  _proto.__getValue = function __getValue() {
    var a = this._a.__getValue();
    var b = this._b.__getValue();
    if (b === 0) {
      console.error("Detected division by zero in AnimatedDivision");
    }
    return a / b;
  };
  _proto.interpolate = function interpolate4(config) {
    return new AnimatedInterpolation_default(this, config);
  };
  _proto.__attach = function __attach() {
    this._a.__addChild(this);
    this._b.__addChild(this);
  };
  _proto.__detach = function __detach() {
    this._a.__removeChild(this);
    this._b.__removeChild(this);
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    return {
      type: "division",
      input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
    };
  };
  return AnimatedDivision2;
}(AnimatedWithChildren_default);
var AnimatedDivision_default = AnimatedDivision;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedModulo.js
"use strict";
function _inheritsLoose10(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf10(subClass, superClass);
}
function _setPrototypeOf10(o, p) {
  _setPrototypeOf10 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf10(o, p);
}
var AnimatedModulo = /* @__PURE__ */ function(_AnimatedWithChildren) {
  _inheritsLoose10(AnimatedModulo2, _AnimatedWithChildren);
  function AnimatedModulo2(a, modulus) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    _this._a = a;
    _this._modulus = modulus;
    return _this;
  }
  var _proto = AnimatedModulo2.prototype;
  _proto.__makeNative = function __makeNative() {
    this._a.__makeNative();
    _AnimatedWithChildren.prototype.__makeNative.call(this);
  };
  _proto.__getValue = function __getValue() {
    return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
  };
  _proto.interpolate = function interpolate4(config) {
    return new AnimatedInterpolation_default(this, config);
  };
  _proto.__attach = function __attach() {
    this._a.__addChild(this);
  };
  _proto.__detach = function __detach() {
    this._a.__removeChild(this);
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    return {
      type: "modulus",
      input: this._a.__getNativeTag(),
      modulus: this._modulus
    };
  };
  return AnimatedModulo2;
}(AnimatedWithChildren_default);
var AnimatedModulo_default = AnimatedModulo;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedMultiplication.js
"use strict";
function _inheritsLoose11(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf11(subClass, superClass);
}
function _setPrototypeOf11(o, p) {
  _setPrototypeOf11 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf11(o, p);
}
var AnimatedMultiplication = /* @__PURE__ */ function(_AnimatedWithChildren) {
  _inheritsLoose11(AnimatedMultiplication2, _AnimatedWithChildren);
  function AnimatedMultiplication2(a, b) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    _this._a = typeof a === "number" ? new AnimatedValue_default(a) : a;
    _this._b = typeof b === "number" ? new AnimatedValue_default(b) : b;
    return _this;
  }
  var _proto = AnimatedMultiplication2.prototype;
  _proto.__makeNative = function __makeNative() {
    this._a.__makeNative();
    this._b.__makeNative();
    _AnimatedWithChildren.prototype.__makeNative.call(this);
  };
  _proto.__getValue = function __getValue() {
    return this._a.__getValue() * this._b.__getValue();
  };
  _proto.interpolate = function interpolate4(config) {
    return new AnimatedInterpolation_default(this, config);
  };
  _proto.__attach = function __attach() {
    this._a.__addChild(this);
    this._b.__addChild(this);
  };
  _proto.__detach = function __detach() {
    this._a.__removeChild(this);
    this._b.__removeChild(this);
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    return {
      type: "multiplication",
      input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
    };
  };
  return AnimatedMultiplication2;
}(AnimatedWithChildren_default);
var AnimatedMultiplication_default = AnimatedMultiplication;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedTransform.js
"use strict";
function _inheritsLoose12(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf12(subClass, superClass);
}
function _setPrototypeOf12(o, p) {
  _setPrototypeOf12 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf12(o, p);
}
var AnimatedTransform = /* @__PURE__ */ function(_AnimatedWithChildren) {
  _inheritsLoose12(AnimatedTransform3, _AnimatedWithChildren);
  function AnimatedTransform3(transforms) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    _this._transforms = transforms;
    return _this;
  }
  var _proto = AnimatedTransform3.prototype;
  _proto.__makeNative = function __makeNative() {
    _AnimatedWithChildren.prototype.__makeNative.call(this);
    this._transforms.forEach(function(transform) {
      for (var key3 in transform) {
        var value = transform[key3];
        if (value instanceof AnimatedNode_default) {
          value.__makeNative();
        }
      }
    });
  };
  _proto.__getValue = function __getValue() {
    return this._transforms.map(function(transform) {
      var result = {};
      for (var key3 in transform) {
        var value = transform[key3];
        if (value instanceof AnimatedNode_default) {
          result[key3] = value.__getValue();
        } else {
          result[key3] = value;
        }
      }
      return result;
    });
  };
  _proto.__getAnimatedValue = function __getAnimatedValue() {
    return this._transforms.map(function(transform) {
      var result = {};
      for (var key3 in transform) {
        var value = transform[key3];
        if (value instanceof AnimatedNode_default) {
          result[key3] = value.__getAnimatedValue();
        } else {
          result[key3] = value;
        }
      }
      return result;
    });
  };
  _proto.__attach = function __attach() {
    var _this2 = this;
    this._transforms.forEach(function(transform) {
      for (var key3 in transform) {
        var value = transform[key3];
        if (value instanceof AnimatedNode_default) {
          value.__addChild(_this2);
        }
      }
    });
  };
  _proto.__detach = function __detach() {
    var _this3 = this;
    this._transforms.forEach(function(transform) {
      for (var key3 in transform) {
        var value = transform[key3];
        if (value instanceof AnimatedNode_default) {
          value.__removeChild(_this3);
        }
      }
    });
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    var transConfigs = [];
    this._transforms.forEach(function(transform) {
      for (var key3 in transform) {
        var value = transform[key3];
        if (value instanceof AnimatedNode_default) {
          transConfigs.push({
            type: "animated",
            property: key3,
            nodeTag: value.__getNativeTag()
          });
        } else {
          transConfigs.push({
            type: "static",
            property: key3,
            value
          });
        }
      }
    });
    NativeAnimatedHelper_default.validateTransform(transConfigs);
    return {
      type: "transform",
      transforms: transConfigs
    };
  };
  return AnimatedTransform3;
}(AnimatedWithChildren_default);
var AnimatedTransform_default = AnimatedTransform;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedStyle.js
"use strict";
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys3(Object(source), true).forEach(function(key3) {
        _defineProperty3(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys3(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty3(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function _inheritsLoose13(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf13(subClass, superClass);
}
function _setPrototypeOf13(o, p) {
  _setPrototypeOf13 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf13(o, p);
}
var flattenStyle2 = StyleSheet_default2.flatten;
var AnimatedStyle = /* @__PURE__ */ function(_AnimatedWithChildren) {
  _inheritsLoose13(AnimatedStyle3, _AnimatedWithChildren);
  function AnimatedStyle3(style) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    style = flattenStyle2(style) || {};
    if (style.transform) {
      style = _objectSpread3(_objectSpread3({}, style), {}, {
        transform: new AnimatedTransform_default(style.transform)
      });
    }
    _this._style = style;
    return _this;
  }
  var _proto = AnimatedStyle3.prototype;
  _proto._walkStyleAndGetValues = function _walkStyleAndGetValues(style) {
    var updatedStyle = {};
    for (var key3 in style) {
      var value = style[key3];
      if (value instanceof AnimatedNode_default) {
        if (!value.__isNative) {
          updatedStyle[key3] = value.__getValue();
        }
      } else if (value && !Array.isArray(value) && typeof value === "object") {
        updatedStyle[key3] = this._walkStyleAndGetValues(value);
      } else {
        updatedStyle[key3] = value;
      }
    }
    return updatedStyle;
  };
  _proto.__getValue = function __getValue() {
    return this._walkStyleAndGetValues(this._style);
  };
  _proto._walkStyleAndGetAnimatedValues = function _walkStyleAndGetAnimatedValues(style) {
    var updatedStyle = {};
    for (var key3 in style) {
      var value = style[key3];
      if (value instanceof AnimatedNode_default) {
        updatedStyle[key3] = value.__getAnimatedValue();
      } else if (value && !Array.isArray(value) && typeof value === "object") {
        updatedStyle[key3] = this._walkStyleAndGetAnimatedValues(value);
      }
    }
    return updatedStyle;
  };
  _proto.__getAnimatedValue = function __getAnimatedValue() {
    return this._walkStyleAndGetAnimatedValues(this._style);
  };
  _proto.__attach = function __attach() {
    for (var key3 in this._style) {
      var value = this._style[key3];
      if (value instanceof AnimatedNode_default) {
        value.__addChild(this);
      }
    }
  };
  _proto.__detach = function __detach() {
    for (var key3 in this._style) {
      var value = this._style[key3];
      if (value instanceof AnimatedNode_default) {
        value.__removeChild(this);
      }
    }
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__makeNative = function __makeNative() {
    for (var key3 in this._style) {
      var value = this._style[key3];
      if (value instanceof AnimatedNode_default) {
        value.__makeNative();
      }
    }
    _AnimatedWithChildren.prototype.__makeNative.call(this);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    var styleConfig = {};
    for (var styleKey in this._style) {
      if (this._style[styleKey] instanceof AnimatedNode_default) {
        var style = this._style[styleKey];
        style.__makeNative();
        styleConfig[styleKey] = style.__getNativeTag();
      }
    }
    NativeAnimatedHelper_default.validateStyles(styleConfig);
    return {
      type: "style",
      style: styleConfig
    };
  };
  return AnimatedStyle3;
}(AnimatedWithChildren_default);
var AnimatedStyle_default = AnimatedStyle;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedProps.js
var import_invariant11 = __toModule(require_invariant());
"use strict";
function ownKeys4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread4(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys4(Object(source), true).forEach(function(key3) {
        _defineProperty4(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys4(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty4(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function _inheritsLoose14(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf14(subClass, superClass);
}
function _setPrototypeOf14(o, p) {
  _setPrototypeOf14 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf14(o, p);
}
var AnimatedProps = /* @__PURE__ */ function(_AnimatedNode) {
  _inheritsLoose14(AnimatedProps3, _AnimatedNode);
  function AnimatedProps3(props, callback) {
    var _this;
    _this = _AnimatedNode.call(this) || this;
    if (props.style) {
      props = _objectSpread4(_objectSpread4({}, props), {}, {
        style: new AnimatedStyle_default(props.style)
      });
    }
    _this._props = props;
    _this._callback = callback;
    _this.__attach();
    return _this;
  }
  var _proto = AnimatedProps3.prototype;
  _proto.__getValue = function __getValue() {
    var props = {};
    for (var key3 in this._props) {
      var value = this._props[key3];
      if (value instanceof AnimatedNode_default) {
        if (!value.__isNative || value instanceof AnimatedStyle_default) {
          props[key3] = value.__getValue();
        }
      } else if (value instanceof AnimatedEvent) {
        props[key3] = value.__getHandler();
      } else {
        props[key3] = value;
      }
    }
    return props;
  };
  _proto.__getAnimatedValue = function __getAnimatedValue() {
    var props = {};
    for (var key3 in this._props) {
      var value = this._props[key3];
      if (value instanceof AnimatedNode_default) {
        props[key3] = value.__getAnimatedValue();
      }
    }
    return props;
  };
  _proto.__attach = function __attach() {
    for (var key3 in this._props) {
      var value = this._props[key3];
      if (value instanceof AnimatedNode_default) {
        value.__addChild(this);
      }
    }
  };
  _proto.__detach = function __detach() {
    if (this.__isNative && this._animatedView) {
      this.__disconnectAnimatedView();
    }
    for (var key3 in this._props) {
      var value = this._props[key3];
      if (value instanceof AnimatedNode_default) {
        value.__removeChild(this);
      }
    }
    _AnimatedNode.prototype.__detach.call(this);
  };
  _proto.update = function update2() {
    this._callback();
  };
  _proto.__makeNative = function __makeNative() {
    if (!this.__isNative) {
      this.__isNative = true;
      for (var key3 in this._props) {
        var value = this._props[key3];
        if (value instanceof AnimatedNode_default) {
          value.__makeNative();
        }
      }
      if (this._animatedView) {
        this.__connectAnimatedView();
      }
    }
  };
  _proto.setNativeView = function setNativeView(animatedView) {
    if (this._animatedView === animatedView) {
      return;
    }
    this._animatedView = animatedView;
    if (this.__isNative) {
      this.__connectAnimatedView();
    }
  };
  _proto.__connectAnimatedView = function __connectAnimatedView() {
    (0, import_invariant11.default)(this.__isNative, 'Expected node to be marked as "native"');
    var nativeViewTag = findNodeHandle_default(this._animatedView);
    (0, import_invariant11.default)(nativeViewTag != null, "Unable to locate attached view in the native tree");
    NativeAnimatedHelper_default.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
  };
  _proto.__disconnectAnimatedView = function __disconnectAnimatedView() {
    (0, import_invariant11.default)(this.__isNative, 'Expected node to be marked as "native"');
    var nativeViewTag = findNodeHandle_default(this._animatedView);
    (0, import_invariant11.default)(nativeViewTag != null, "Unable to locate attached view in the native tree");
    NativeAnimatedHelper_default.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    var propsConfig = {};
    for (var propKey in this._props) {
      var value = this._props[propKey];
      if (value instanceof AnimatedNode_default) {
        value.__makeNative();
        propsConfig[propKey] = value.__getNativeTag();
      }
    }
    return {
      type: "props",
      props: propsConfig
    };
  };
  return AnimatedProps3;
}(AnimatedNode_default);
var AnimatedProps_default = AnimatedProps;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedSubtraction.js
"use strict";
function _inheritsLoose15(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf15(subClass, superClass);
}
function _setPrototypeOf15(o, p) {
  _setPrototypeOf15 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf15(o, p);
}
var AnimatedSubtraction = /* @__PURE__ */ function(_AnimatedWithChildren) {
  _inheritsLoose15(AnimatedSubtraction2, _AnimatedWithChildren);
  function AnimatedSubtraction2(a, b) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    _this._a = typeof a === "number" ? new AnimatedValue_default(a) : a;
    _this._b = typeof b === "number" ? new AnimatedValue_default(b) : b;
    return _this;
  }
  var _proto = AnimatedSubtraction2.prototype;
  _proto.__makeNative = function __makeNative() {
    this._a.__makeNative();
    this._b.__makeNative();
    _AnimatedWithChildren.prototype.__makeNative.call(this);
  };
  _proto.__getValue = function __getValue() {
    return this._a.__getValue() - this._b.__getValue();
  };
  _proto.interpolate = function interpolate4(config) {
    return new AnimatedInterpolation_default(this, config);
  };
  _proto.__attach = function __attach() {
    this._a.__addChild(this);
    this._b.__addChild(this);
  };
  _proto.__detach = function __detach() {
    this._a.__removeChild(this);
    this._b.__removeChild(this);
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    return {
      type: "subtraction",
      input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
    };
  };
  return AnimatedSubtraction2;
}(AnimatedWithChildren_default);
var AnimatedSubtraction_default = AnimatedSubtraction;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedTracking.js
"use strict";
function ownKeys5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread5(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys5(Object(source), true).forEach(function(key3) {
        _defineProperty5(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys5(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty5(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function _inheritsLoose16(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf16(subClass, superClass);
}
function _setPrototypeOf16(o, p) {
  _setPrototypeOf16 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf16(o, p);
}
var AnimatedTracking = /* @__PURE__ */ function(_AnimatedNode) {
  _inheritsLoose16(AnimatedTracking2, _AnimatedNode);
  function AnimatedTracking2(value, parent, animationClass, animationConfig, callback) {
    var _this;
    _this = _AnimatedNode.call(this) || this;
    _this._value = value;
    _this._parent = parent;
    _this._animationClass = animationClass;
    _this._animationConfig = animationConfig;
    _this._useNativeDriver = shouldUseNativeDriver(animationConfig);
    _this._callback = callback;
    _this.__attach();
    return _this;
  }
  var _proto = AnimatedTracking2.prototype;
  _proto.__makeNative = function __makeNative() {
    this.__isNative = true;
    this._parent.__makeNative();
    _AnimatedNode.prototype.__makeNative.call(this);
    this._value.__makeNative();
  };
  _proto.__getValue = function __getValue() {
    return this._parent.__getValue();
  };
  _proto.__attach = function __attach() {
    this._parent.__addChild(this);
    if (this._useNativeDriver) {
      this.__makeNative();
    }
  };
  _proto.__detach = function __detach() {
    this._parent.__removeChild(this);
    _AnimatedNode.prototype.__detach.call(this);
  };
  _proto.update = function update2() {
    this._value.animate(new this._animationClass(_objectSpread5(_objectSpread5({}, this._animationConfig), {}, {
      toValue: this._animationConfig.toValue.__getValue()
    })), this._callback);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    var animation2 = new this._animationClass(_objectSpread5(_objectSpread5({}, this._animationConfig), {}, {
      toValue: void 0
    }));
    var animationConfig = animation2.__getNativeAnimationConfig();
    return {
      type: "tracking",
      animationId: generateNewAnimationId(),
      animationConfig,
      toValue: this._parent.__getNativeTag(),
      value: this._value.__getNativeTag()
    };
  };
  return AnimatedTracking2;
}(AnimatedNode_default);
var AnimatedTracking_default = AnimatedTracking;

// node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedValueXY.js
var import_invariant12 = __toModule(require_invariant());
"use strict";
function _inheritsLoose17(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf17(subClass, superClass);
}
function _setPrototypeOf17(o, p) {
  _setPrototypeOf17 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf17(o, p);
}
var _uniqueId2 = 1;
var AnimatedValueXY = /* @__PURE__ */ function(_AnimatedWithChildren) {
  _inheritsLoose17(AnimatedValueXY2, _AnimatedWithChildren);
  function AnimatedValueXY2(valueIn) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    var value = valueIn || {
      x: 0,
      y: 0
    };
    if (typeof value.x === "number" && typeof value.y === "number") {
      _this.x = new AnimatedValue_default(value.x);
      _this.y = new AnimatedValue_default(value.y);
    } else {
      (0, import_invariant12.default)(value.x instanceof AnimatedValue_default && value.y instanceof AnimatedValue_default, "AnimatedValueXY must be initialized with an object of numbers or AnimatedValues.");
      _this.x = value.x;
      _this.y = value.y;
    }
    _this._listeners = {};
    return _this;
  }
  var _proto = AnimatedValueXY2.prototype;
  _proto.setValue = function setValue(value) {
    this.x.setValue(value.x);
    this.y.setValue(value.y);
  };
  _proto.setOffset = function setOffset(offset) {
    this.x.setOffset(offset.x);
    this.y.setOffset(offset.y);
  };
  _proto.flattenOffset = function flattenOffset() {
    this.x.flattenOffset();
    this.y.flattenOffset();
  };
  _proto.extractOffset = function extractOffset() {
    this.x.extractOffset();
    this.y.extractOffset();
  };
  _proto.__getValue = function __getValue() {
    return {
      x: this.x.__getValue(),
      y: this.y.__getValue()
    };
  };
  _proto.resetAnimation = function resetAnimation(callback) {
    this.x.resetAnimation();
    this.y.resetAnimation();
    callback && callback(this.__getValue());
  };
  _proto.stopAnimation = function stopAnimation2(callback) {
    this.x.stopAnimation();
    this.y.stopAnimation();
    callback && callback(this.__getValue());
  };
  _proto.addListener = function addListener3(callback) {
    var _this2 = this;
    var id2 = String(_uniqueId2++);
    var jointCallback = function jointCallback2(_ref) {
      var number = _ref.value;
      callback(_this2.__getValue());
    };
    this._listeners[id2] = {
      x: this.x.addListener(jointCallback),
      y: this.y.addListener(jointCallback)
    };
    return id2;
  };
  _proto.removeListener = function removeListener2(id2) {
    this.x.removeListener(this._listeners[id2].x);
    this.y.removeListener(this._listeners[id2].y);
    delete this._listeners[id2];
  };
  _proto.removeAllListeners = function removeAllListeners2() {
    this.x.removeAllListeners();
    this.y.removeAllListeners();
    this._listeners = {};
  };
  _proto.getLayout = function getLayout() {
    return {
      left: this.x,
      top: this.y
    };
  };
  _proto.getTranslateTransform = function getTranslateTransform() {
    return [{
      translateX: this.x
    }, {
      translateY: this.y
    }];
  };
  return AnimatedValueXY2;
}(AnimatedWithChildren_default);
var AnimatedValueXY_default = AnimatedValueXY;

// node_modules/react-native-web/dist/vendor/react-native/Animated/animations/Animation.js
"use strict";
var Animation = /* @__PURE__ */ function() {
  function Animation3() {
  }
  var _proto = Animation3.prototype;
  _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
  };
  _proto.stop = function stop3() {
    if (this.__nativeId) {
      NativeAnimatedHelper_default.API.stopAnimation(this.__nativeId);
    }
  };
  _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {
    throw new Error("This animation type cannot be offloaded to native");
  };
  _proto.__debouncedOnEnd = function __debouncedOnEnd(result) {
    var onEnd = this.__onEnd;
    this.__onEnd = null;
    onEnd && onEnd(result);
  };
  _proto.__startNativeAnimation = function __startNativeAnimation(animatedValue) {
    NativeAnimatedHelper_default.API.enableQueue();
    animatedValue.__makeNative();
    NativeAnimatedHelper_default.API.disableQueue();
    this.__nativeId = NativeAnimatedHelper_default.generateNewAnimationId();
    NativeAnimatedHelper_default.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
  };
  return Animation3;
}();
var Animation_default = Animation;

// node_modules/react-native-web/dist/vendor/react-native/Animated/animations/DecayAnimation.js
"use strict";
function _inheritsLoose18(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf18(subClass, superClass);
}
function _setPrototypeOf18(o, p) {
  _setPrototypeOf18 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf18(o, p);
}
var DecayAnimation = /* @__PURE__ */ function(_Animation) {
  _inheritsLoose18(DecayAnimation2, _Animation);
  function DecayAnimation2(config) {
    var _config$deceleration, _config$isInteraction, _config$iterations;
    var _this;
    _this = _Animation.call(this) || this;
    _this._deceleration = (_config$deceleration = config.deceleration) !== null && _config$deceleration !== void 0 ? _config$deceleration : 0.998;
    _this._velocity = config.velocity;
    _this._useNativeDriver = shouldUseNativeDriver(config);
    _this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !_this._useNativeDriver;
    _this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;
    return _this;
  }
  var _proto = DecayAnimation2.prototype;
  _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {
    return {
      type: "decay",
      deceleration: this._deceleration,
      velocity: this._velocity,
      iterations: this.__iterations
    };
  };
  _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
    this.__active = true;
    this._lastValue = fromValue;
    this._fromValue = fromValue;
    this._onUpdate = onUpdate;
    this.__onEnd = onEnd;
    this._startTime = Date.now();
    if (this._useNativeDriver) {
      this.__startNativeAnimation(animatedValue);
    } else {
      this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
    }
  };
  _proto.onUpdate = function onUpdate() {
    var now = Date.now();
    var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));
    this._onUpdate(value);
    if (Math.abs(this._lastValue - value) < 0.1) {
      this.__debouncedOnEnd({
        finished: true
      });
      return;
    }
    this._lastValue = value;
    if (this.__active) {
      this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
    }
  };
  _proto.stop = function stop3() {
    _Animation.prototype.stop.call(this);
    this.__active = false;
    window.cancelAnimationFrame(this._animationFrame);
    this.__debouncedOnEnd({
      finished: false
    });
  };
  return DecayAnimation2;
}(Animation_default);
var DecayAnimation_default = DecayAnimation;

// node_modules/react-native-web/dist/vendor/react-native/Animated/SpringConfig.js
"use strict";
function stiffnessFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}
function dampingFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}
function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    stiffness: stiffnessFromOrigamiValue(tension),
    damping: dampingFromOrigamiValue(friction)
  };
}
function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }
  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }
  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }
  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }
  function b3Friction1(x) {
    return 7e-4 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }
  function b3Friction2(x) {
    return 44e-6 * Math.pow(x, 3) - 6e-3 * Math.pow(x, 2) + 0.36 * x + 2;
  }
  function b3Friction3(x) {
    return 45e-8 * Math.pow(x, 3) - 332e-6 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }
  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }
  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
  return {
    stiffness: stiffnessFromOrigamiValue(bouncyTension),
    damping: dampingFromOrigamiValue(bouncyFriction)
  };
}
var SpringConfig_default = {
  fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed
};

// node_modules/react-native-web/dist/vendor/react-native/Animated/animations/SpringAnimation.js
var import_invariant13 = __toModule(require_invariant());
"use strict";
function _inheritsLoose19(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf19(subClass, superClass);
}
function _setPrototypeOf19(o, p) {
  _setPrototypeOf19 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf19(o, p);
}
var SpringAnimation = /* @__PURE__ */ function(_Animation) {
  _inheritsLoose19(SpringAnimation2, _Animation);
  function SpringAnimation2(config) {
    var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;
    var _this;
    _this = _Animation.call(this) || this;
    _this._overshootClamping = (_config$overshootClam = config.overshootClamping) !== null && _config$overshootClam !== void 0 ? _config$overshootClam : false;
    _this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) !== null && _config$restDisplacem !== void 0 ? _config$restDisplacem : 1e-3;
    _this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) !== null && _config$restSpeedThre !== void 0 ? _config$restSpeedThre : 1e-3;
    _this._initialVelocity = (_config$velocity = config.velocity) !== null && _config$velocity !== void 0 ? _config$velocity : 0;
    _this._lastVelocity = (_config$velocity2 = config.velocity) !== null && _config$velocity2 !== void 0 ? _config$velocity2 : 0;
    _this._toValue = config.toValue;
    _this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0;
    _this._useNativeDriver = shouldUseNativeDriver(config);
    _this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !_this._useNativeDriver;
    _this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;
    if (config.stiffness !== void 0 || config.damping !== void 0 || config.mass !== void 0) {
      var _config$stiffness, _config$damping, _config$mass;
      (0, import_invariant13.default)(config.bounciness === void 0 && config.speed === void 0 && config.tension === void 0 && config.friction === void 0, "You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one");
      _this._stiffness = (_config$stiffness = config.stiffness) !== null && _config$stiffness !== void 0 ? _config$stiffness : 100;
      _this._damping = (_config$damping = config.damping) !== null && _config$damping !== void 0 ? _config$damping : 10;
      _this._mass = (_config$mass = config.mass) !== null && _config$mass !== void 0 ? _config$mass : 1;
    } else if (config.bounciness !== void 0 || config.speed !== void 0) {
      var _config$bounciness, _config$speed;
      (0, import_invariant13.default)(config.tension === void 0 && config.friction === void 0 && config.stiffness === void 0 && config.damping === void 0 && config.mass === void 0, "You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one");
      var springConfig = SpringConfig_default.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) !== null && _config$bounciness !== void 0 ? _config$bounciness : 8, (_config$speed = config.speed) !== null && _config$speed !== void 0 ? _config$speed : 12);
      _this._stiffness = springConfig.stiffness;
      _this._damping = springConfig.damping;
      _this._mass = 1;
    } else {
      var _config$tension, _config$friction;
      var _springConfig = SpringConfig_default.fromOrigamiTensionAndFriction((_config$tension = config.tension) !== null && _config$tension !== void 0 ? _config$tension : 40, (_config$friction = config.friction) !== null && _config$friction !== void 0 ? _config$friction : 7);
      _this._stiffness = _springConfig.stiffness;
      _this._damping = _springConfig.damping;
      _this._mass = 1;
    }
    (0, import_invariant13.default)(_this._stiffness > 0, "Stiffness value must be greater than 0");
    (0, import_invariant13.default)(_this._damping > 0, "Damping value must be greater than 0");
    (0, import_invariant13.default)(_this._mass > 0, "Mass value must be greater than 0");
    return _this;
  }
  var _proto = SpringAnimation2.prototype;
  _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {
    var _this$_initialVelocit;
    return {
      type: "spring",
      overshootClamping: this._overshootClamping,
      restDisplacementThreshold: this._restDisplacementThreshold,
      restSpeedThreshold: this._restSpeedThreshold,
      stiffness: this._stiffness,
      damping: this._damping,
      mass: this._mass,
      initialVelocity: (_this$_initialVelocit = this._initialVelocity) !== null && _this$_initialVelocit !== void 0 ? _this$_initialVelocit : this._lastVelocity,
      toValue: this._toValue,
      iterations: this.__iterations
    };
  };
  _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
    var _this2 = this;
    this.__active = true;
    this._startPosition = fromValue;
    this._lastPosition = this._startPosition;
    this._onUpdate = onUpdate;
    this.__onEnd = onEnd;
    this._lastTime = Date.now();
    this._frameTime = 0;
    if (previousAnimation instanceof SpringAnimation2) {
      var internalState = previousAnimation.getInternalState();
      this._lastPosition = internalState.lastPosition;
      this._lastVelocity = internalState.lastVelocity;
      this._initialVelocity = this._lastVelocity;
      this._lastTime = internalState.lastTime;
    }
    var start2 = function start3() {
      if (_this2._useNativeDriver) {
        _this2.__startNativeAnimation(animatedValue);
      } else {
        _this2.onUpdate();
      }
    };
    if (this._delay) {
      this._timeout = setTimeout(start2, this._delay);
    } else {
      start2();
    }
  };
  _proto.getInternalState = function getInternalState() {
    return {
      lastPosition: this._lastPosition,
      lastVelocity: this._lastVelocity,
      lastTime: this._lastTime
    };
  };
  _proto.onUpdate = function onUpdate() {
    var MAX_STEPS = 64;
    var now = Date.now();
    if (now > this._lastTime + MAX_STEPS) {
      now = this._lastTime + MAX_STEPS;
    }
    var deltaTime = (now - this._lastTime) / 1e3;
    this._frameTime += deltaTime;
    var c = this._damping;
    var m2 = this._mass;
    var k = this._stiffness;
    var v0 = -this._initialVelocity;
    var zeta = c / (2 * Math.sqrt(k * m2));
    var omega0 = Math.sqrt(k / m2);
    var omega1 = omega0 * Math.sqrt(1 - zeta * zeta);
    var x0 = this._toValue - this._startPosition;
    var position2 = 0;
    var velocity = 0;
    var t = this._frameTime;
    if (zeta < 1) {
      var envelope2 = Math.exp(-zeta * omega0 * t);
      position2 = this._toValue - envelope2 * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
      velocity = zeta * omega0 * envelope2 * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope2 * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
    } else {
      var _envelope = Math.exp(-omega0 * t);
      position2 = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
      velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
    }
    this._lastTime = now;
    this._lastPosition = position2;
    this._lastVelocity = velocity;
    this._onUpdate(position2);
    if (!this.__active) {
      return;
    }
    var isOvershooting = false;
    if (this._overshootClamping && this._stiffness !== 0) {
      if (this._startPosition < this._toValue) {
        isOvershooting = position2 > this._toValue;
      } else {
        isOvershooting = position2 < this._toValue;
      }
    }
    var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
    var isDisplacement = true;
    if (this._stiffness !== 0) {
      isDisplacement = Math.abs(this._toValue - position2) <= this._restDisplacementThreshold;
    }
    if (isOvershooting || isVelocity && isDisplacement) {
      if (this._stiffness !== 0) {
        this._lastPosition = this._toValue;
        this._lastVelocity = 0;
        this._onUpdate(this._toValue);
      }
      this.__debouncedOnEnd({
        finished: true
      });
      return;
    }
    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
  };
  _proto.stop = function stop3() {
    _Animation.prototype.stop.call(this);
    this.__active = false;
    clearTimeout(this._timeout);
    window.cancelAnimationFrame(this._animationFrame);
    this.__debouncedOnEnd({
      finished: false
    });
  };
  return SpringAnimation2;
}(Animation_default);
var SpringAnimation_default = SpringAnimation;

// node_modules/react-native-web/dist/vendor/react-native/Animated/bezier.js
"use strict";
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 1e-3;
var SUBDIVISION_PRECISION = 1e-7;
var SUBDIVISION_MAX_ITERATIONS = 10;
var kSplineTableSize = 11;
var kSampleStepSize = 1 / (kSplineTableSize - 1);
var float32ArraySupported = typeof Float32Array === "function";
function A(aA1, aA2) {
  return 1 - 3 * aA2 + 3 * aA1;
}
function B(aA1, aA2) {
  return 3 * aA2 - 6 * aA1;
}
function C(aA1) {
  return 3 * aA1;
}
function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}
function getSlope(aT, aA1, aA2) {
  return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1);
}
function binarySubdivide(aX, _aA, _aB, mX1, mX2) {
  var currentX, currentT, i = 0, aA = _aA, aB = _aB;
  do {
    currentT = aA + (aB - aA) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}
function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
  var aGuessT = _aGuessT;
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
function bezier(mX1, mY1, mX2, mY2) {
  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
    throw new Error("bezier x values must be in [0, 1] range");
  }
  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }
  function getTForX(aX) {
    var intervalStart = 0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;
    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }
  return function BezierEasing(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
}

// node_modules/react-native-web/dist/vendor/react-native/Animated/Easing.js
"use strict";
var _ease;
var Easing = /* @__PURE__ */ function() {
  function Easing2() {
  }
  Easing2.step0 = function step0(n) {
    return n > 0 ? 1 : 0;
  };
  Easing2.step1 = function step1(n) {
    return n >= 1 ? 1 : 0;
  };
  Easing2.linear = function linear3(t) {
    return t;
  };
  Easing2.ease = function ease(t) {
    if (!_ease) {
      _ease = Easing2.bezier(0.42, 0, 1, 1);
    }
    return _ease(t);
  };
  Easing2.quad = function quad(t) {
    return t * t;
  };
  Easing2.cubic = function cubic(t) {
    return t * t * t;
  };
  Easing2.poly = function poly(n) {
    return function(t) {
      return Math.pow(t, n);
    };
  };
  Easing2.sin = function sin2(t) {
    return 1 - Math.cos(t * Math.PI / 2);
  };
  Easing2.circle = function circle3(t) {
    return 1 - Math.sqrt(1 - t * t);
  };
  Easing2.exp = function exp2(t) {
    return Math.pow(2, 10 * (t - 1));
  };
  Easing2.elastic = function elastic(bounciness) {
    if (bounciness === void 0) {
      bounciness = 1;
    }
    var p = bounciness * Math.PI;
    return function(t) {
      return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
    };
  };
  Easing2.back = function back(s) {
    if (s === void 0) {
      s = 1.70158;
    }
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  };
  Easing2.bounce = function bounce(t) {
    if (t < 1 / 2.75) {
      return 7.5625 * t * t;
    }
    if (t < 2 / 2.75) {
      var _t = t - 1.5 / 2.75;
      return 7.5625 * _t * _t + 0.75;
    }
    if (t < 2.5 / 2.75) {
      var _t2 = t - 2.25 / 2.75;
      return 7.5625 * _t2 * _t2 + 0.9375;
    }
    var t2 = t - 2.625 / 2.75;
    return 7.5625 * t2 * t2 + 0.984375;
  };
  Easing2.bezier = function bezier2(x1, y1, x2, y2) {
    return bezier(x1, y1, x2, y2);
  };
  Easing2.in = function _in(easing) {
    return easing;
  };
  Easing2.out = function out(easing) {
    return function(t) {
      return 1 - easing(1 - t);
    };
  };
  Easing2.inOut = function inOut(easing) {
    return function(t) {
      if (t < 0.5) {
        return easing(t * 2) / 2;
      }
      return 1 - easing((1 - t) * 2) / 2;
    };
  };
  return Easing2;
}();
var Easing_default = Easing;

// node_modules/react-native-web/dist/vendor/react-native/Animated/animations/TimingAnimation.js
"use strict";
function _inheritsLoose20(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf20(subClass, superClass);
}
function _setPrototypeOf20(o, p) {
  _setPrototypeOf20 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf20(o, p);
}
var _easeInOut;
function easeInOut() {
  if (!_easeInOut) {
    _easeInOut = Easing_default.inOut(Easing_default.ease);
  }
  return _easeInOut;
}
var TimingAnimation = /* @__PURE__ */ function(_Animation) {
  _inheritsLoose20(TimingAnimation2, _Animation);
  function TimingAnimation2(config) {
    var _config$easing, _config$duration, _config$delay, _config$iterations, _config$isInteraction;
    var _this;
    _this = _Animation.call(this) || this;
    _this._toValue = config.toValue;
    _this._easing = (_config$easing = config.easing) !== null && _config$easing !== void 0 ? _config$easing : easeInOut();
    _this._duration = (_config$duration = config.duration) !== null && _config$duration !== void 0 ? _config$duration : 500;
    _this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0;
    _this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;
    _this._useNativeDriver = shouldUseNativeDriver(config);
    _this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !_this._useNativeDriver;
    return _this;
  }
  var _proto = TimingAnimation2.prototype;
  _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {
    var frameDuration = 1e3 / 60;
    var frames = [];
    for (var dt = 0; dt < this._duration; dt += frameDuration) {
      frames.push(this._easing(dt / this._duration));
    }
    frames.push(this._easing(1));
    return {
      type: "frames",
      frames,
      toValue: this._toValue,
      iterations: this.__iterations
    };
  };
  _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
    var _this2 = this;
    this.__active = true;
    this._fromValue = fromValue;
    this._onUpdate = onUpdate;
    this.__onEnd = onEnd;
    var start2 = function start3() {
      if (_this2._duration === 0 && !_this2._useNativeDriver) {
        _this2._onUpdate(_this2._toValue);
        _this2.__debouncedOnEnd({
          finished: true
        });
      } else {
        _this2._startTime = Date.now();
        if (_this2._useNativeDriver) {
          _this2.__startNativeAnimation(animatedValue);
        } else {
          _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));
        }
      }
    };
    if (this._delay) {
      this._timeout = setTimeout(start2, this._delay);
    } else {
      start2();
    }
  };
  _proto.onUpdate = function onUpdate() {
    var now = Date.now();
    if (now >= this._startTime + this._duration) {
      if (this._duration === 0) {
        this._onUpdate(this._toValue);
      } else {
        this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
      }
      this.__debouncedOnEnd({
        finished: true
      });
      return;
    }
    this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));
    if (this.__active) {
      this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
    }
  };
  _proto.stop = function stop3() {
    _Animation.prototype.stop.call(this);
    this.__active = false;
    clearTimeout(this._timeout);
    window.cancelAnimationFrame(this._animationFrame);
    this.__debouncedOnEnd({
      finished: false
    });
  };
  return TimingAnimation2;
}(Animation_default);
var TimingAnimation_default = TimingAnimation;

// node_modules/react-native-web/dist/vendor/react-native/Animated/createAnimatedComponent.js
var import_react2 = __toModule(require_react());
var import_invariant14 = __toModule(require_invariant());

// node_modules/react-native-web/dist/modules/mergeRefs/index.js
var React2 = __toModule(require_react());
function mergeRefs() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return function forwardRef26(node) {
    args.forEach(function(ref) {
      if (ref == null) {
        return;
      }
      if (typeof ref === "function") {
        ref(node);
        return;
      }
      if (typeof ref === "object") {
        ref.current = node;
        return;
      }
      console.error("mergeRefs cannot handle Refs of type boolean, number or string, received ref " + String(ref));
    });
  };
}

// node_modules/react-native-web/dist/vendor/react-native/Animated/createAnimatedComponent.js
"use strict";
function _extends() {
  _extends = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose21(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf21(subClass, superClass);
}
function _setPrototypeOf21(o, p) {
  _setPrototypeOf21 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf21(o, p);
}
function createAnimatedComponent(Component19, defaultProps4) {
  (0, import_invariant14.default)(typeof Component19 !== "function" || Component19.prototype && Component19.prototype.isReactComponent, "`createAnimatedComponent` does not support stateless functional components; use a class component instead.");
  var AnimatedComponent = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose21(AnimatedComponent2, _React$Component);
    function AnimatedComponent2(props) {
      var _this;
      _this = _React$Component.call(this, props) || this;
      _this._invokeAnimatedPropsCallbackOnMount = false;
      _this._eventDetachers = [];
      _this._animatedPropsCallback = function() {
        if (_this._component == null) {
          _this._invokeAnimatedPropsCallbackOnMount = true;
        } else if (AnimatedComponent2.__skipSetNativeProps_FOR_TESTS_ONLY || typeof _this._component.setNativeProps !== "function") {
          _this.forceUpdate();
        } else if (!_this._propsAnimated.__isNative) {
          _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
        } else {
          throw new Error('Attempting to run JS driven animation on animated node that has been moved to "native" earlier by starting an animation with `useNativeDriver: true`');
        }
      };
      _this._setComponentRef = mergeRefs(_this.props.forwardedRef, function(ref) {
        _this._prevComponent = _this._component;
        _this._component = ref;
        if (ref != null && ref.getNode == null) {
          ref.getNode = function() {
            var _ref$constructor$name;
            console.warn("%s: Calling `getNode()` on the ref of an Animated component is no longer necessary. You can now directly use the ref instead. This method will be removed in a future release.", (_ref$constructor$name = ref.constructor.name) !== null && _ref$constructor$name !== void 0 ? _ref$constructor$name : "<<anonymous>>");
            return ref;
          };
        }
      });
      return _this;
    }
    var _proto = AnimatedComponent2.prototype;
    _proto.componentWillUnmount = function componentWillUnmount() {
      this._propsAnimated && this._propsAnimated.__detach();
      this._detachNativeEvents();
    };
    _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount2() {
      this._attachProps(this.props);
    };
    _proto.componentDidMount = function componentDidMount() {
      if (this._invokeAnimatedPropsCallbackOnMount) {
        this._invokeAnimatedPropsCallbackOnMount = false;
        this._animatedPropsCallback();
      }
      this._propsAnimated.setNativeView(this._component);
      this._attachNativeEvents();
    };
    _proto._attachNativeEvents = function _attachNativeEvents() {
      var _this2 = this;
      var scrollableNode = this._component && this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;
      var _loop = function _loop2(key4) {
        var prop = _this2.props[key4];
        if (prop instanceof AnimatedEvent && prop.__isNative) {
          prop.__attach(scrollableNode, key4);
          _this2._eventDetachers.push(function() {
            return prop.__detach(scrollableNode, key4);
          });
        }
      };
      for (var key3 in this.props) {
        _loop(key3);
      }
    };
    _proto._detachNativeEvents = function _detachNativeEvents() {
      this._eventDetachers.forEach(function(remove2) {
        return remove2();
      });
      this._eventDetachers = [];
    };
    _proto._attachProps = function _attachProps(nextProps) {
      var oldPropsAnimated = this._propsAnimated;
      this._propsAnimated = new AnimatedProps_default(nextProps, this._animatedPropsCallback);
      oldPropsAnimated && oldPropsAnimated.__detach();
    };
    _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(newProps) {
      this._attachProps(newProps);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (this._component !== this._prevComponent) {
        this._propsAnimated.setNativeView(this._component);
      }
      if (this._component !== this._prevComponent || prevProps !== this.props) {
        this._detachNativeEvents();
        this._attachNativeEvents();
      }
    };
    _proto.render = function render3() {
      var props = this._propsAnimated.__getValue();
      return /* @__PURE__ */ import_react2.default.createElement(Component19, _extends({}, defaultProps4, props, {
        ref: this._setComponentRef
      }));
    };
    return AnimatedComponent2;
  }(import_react2.default.Component);
  AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY = false;
  var propTypes = Component19.propTypes;
  return /* @__PURE__ */ import_react2.default.forwardRef(function AnimatedComponentWrapper(props, ref) {
    return /* @__PURE__ */ import_react2.default.createElement(AnimatedComponent, _extends({}, props, ref == null ? null : {
      forwardedRef: ref
    }));
  });
}
var createAnimatedComponent_default = createAnimatedComponent;

// node_modules/react-native-web/dist/vendor/react-native/Animated/AnimatedImplementation.js
"use strict";
function ownKeys6(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread6(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys6(Object(source), true).forEach(function(key3) {
        _defineProperty6(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys6(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty6(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var add = function add2(a, b) {
  return new AnimatedAddition_default(a, b);
};
var subtract = function subtract2(a, b) {
  return new AnimatedSubtraction_default(a, b);
};
var divide = function divide2(a, b) {
  return new AnimatedDivision_default(a, b);
};
var multiply = function multiply2(a, b) {
  return new AnimatedMultiplication_default(a, b);
};
var modulo = function modulo2(a, modulus) {
  return new AnimatedModulo_default(a, modulus);
};
var diffClamp = function diffClamp2(a, min3, max3) {
  return new AnimatedDiffClamp_default(a, min3, max3);
};
var _combineCallbacks = function _combineCallbacks2(callback, config) {
  if (callback && config.onComplete) {
    return function() {
      config.onComplete && config.onComplete.apply(config, arguments);
      callback && callback.apply(void 0, arguments);
    };
  } else {
    return callback || config.onComplete;
  }
};
var maybeVectorAnim = function maybeVectorAnim2(value, config, anim) {
  if (value instanceof AnimatedValueXY_default) {
    var configX = _objectSpread6({}, config);
    var configY = _objectSpread6({}, config);
    for (var key3 in config) {
      var _config$key = config[key3], x = _config$key.x, y = _config$key.y;
      if (x !== void 0 && y !== void 0) {
        configX[key3] = x;
        configY[key3] = y;
      }
    }
    var aX = anim(value.x, configX);
    var aY = anim(value.y, configY);
    return parallel([aX, aY], {
      stopTogether: false
    });
  }
  return null;
};
var spring = function spring2(value, config) {
  var _start = function start(animatedValue, configuration, callback) {
    callback = _combineCallbacks(callback, configuration);
    var singleValue = animatedValue;
    var singleConfig = configuration;
    singleValue.stopTracking();
    if (configuration.toValue instanceof AnimatedNode_default) {
      singleValue.track(new AnimatedTracking_default(singleValue, configuration.toValue, SpringAnimation_default, singleConfig, callback));
    } else {
      singleValue.animate(new SpringAnimation_default(singleConfig), callback);
    }
  };
  return maybeVectorAnim(value, config, spring2) || {
    start: function start(callback) {
      _start(value, config, callback);
    },
    stop: function stop3() {
      value.stopAnimation();
    },
    reset: function reset2() {
      value.resetAnimation();
    },
    _startNativeLoop: function _startNativeLoop(iterations) {
      var singleConfig = _objectSpread6(_objectSpread6({}, config), {}, {
        iterations
      });
      _start(value, singleConfig);
    },
    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return config.useNativeDriver || false;
    }
  };
};
var timing = function timing2(value, config) {
  var _start2 = function start(animatedValue, configuration, callback) {
    callback = _combineCallbacks(callback, configuration);
    var singleValue = animatedValue;
    var singleConfig = configuration;
    singleValue.stopTracking();
    if (configuration.toValue instanceof AnimatedNode_default) {
      singleValue.track(new AnimatedTracking_default(singleValue, configuration.toValue, TimingAnimation_default, singleConfig, callback));
    } else {
      singleValue.animate(new TimingAnimation_default(singleConfig), callback);
    }
  };
  return maybeVectorAnim(value, config, timing2) || {
    start: function start(callback) {
      _start2(value, config, callback);
    },
    stop: function stop3() {
      value.stopAnimation();
    },
    reset: function reset2() {
      value.resetAnimation();
    },
    _startNativeLoop: function _startNativeLoop(iterations) {
      var singleConfig = _objectSpread6(_objectSpread6({}, config), {}, {
        iterations
      });
      _start2(value, singleConfig);
    },
    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return config.useNativeDriver || false;
    }
  };
};
var decay = function decay2(value, config) {
  var _start3 = function start(animatedValue, configuration, callback) {
    callback = _combineCallbacks(callback, configuration);
    var singleValue = animatedValue;
    var singleConfig = configuration;
    singleValue.stopTracking();
    singleValue.animate(new DecayAnimation_default(singleConfig), callback);
  };
  return maybeVectorAnim(value, config, decay2) || {
    start: function start(callback) {
      _start3(value, config, callback);
    },
    stop: function stop3() {
      value.stopAnimation();
    },
    reset: function reset2() {
      value.resetAnimation();
    },
    _startNativeLoop: function _startNativeLoop(iterations) {
      var singleConfig = _objectSpread6(_objectSpread6({}, config), {}, {
        iterations
      });
      _start3(value, singleConfig);
    },
    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return config.useNativeDriver || false;
    }
  };
};
var sequence = function sequence2(animations) {
  var current = 0;
  return {
    start: function start(callback) {
      var onComplete = function onComplete2(result) {
        if (!result.finished) {
          callback && callback(result);
          return;
        }
        current++;
        if (current === animations.length) {
          callback && callback(result);
          return;
        }
        animations[current].start(onComplete2);
      };
      if (animations.length === 0) {
        callback && callback({
          finished: true
        });
      } else {
        animations[current].start(onComplete);
      }
    },
    stop: function stop3() {
      if (current < animations.length) {
        animations[current].stop();
      }
    },
    reset: function reset2() {
      animations.forEach(function(animation2, idx) {
        if (idx <= current) {
          animation2.reset();
        }
      });
      current = 0;
    },
    _startNativeLoop: function _startNativeLoop() {
      throw new Error("Loops run using the native driver cannot contain Animated.sequence animations");
    },
    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return false;
    }
  };
};
var parallel = function parallel2(animations, config) {
  var doneCount = 0;
  var hasEnded = {};
  var stopTogether = !(config && config.stopTogether === false);
  var result = {
    start: function start(callback) {
      if (doneCount === animations.length) {
        callback && callback({
          finished: true
        });
        return;
      }
      animations.forEach(function(animation2, idx) {
        var cb = function cb2(endResult) {
          hasEnded[idx] = true;
          doneCount++;
          if (doneCount === animations.length) {
            doneCount = 0;
            callback && callback(endResult);
            return;
          }
          if (!endResult.finished && stopTogether) {
            result.stop();
          }
        };
        if (!animation2) {
          cb({
            finished: true
          });
        } else {
          animation2.start(cb);
        }
      });
    },
    stop: function stop3() {
      animations.forEach(function(animation2, idx) {
        !hasEnded[idx] && animation2.stop();
        hasEnded[idx] = true;
      });
    },
    reset: function reset2() {
      animations.forEach(function(animation2, idx) {
        animation2.reset();
        hasEnded[idx] = false;
        doneCount = 0;
      });
    },
    _startNativeLoop: function _startNativeLoop() {
      throw new Error("Loops run using the native driver cannot contain Animated.parallel animations");
    },
    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return false;
    }
  };
  return result;
};
var delay = function delay2(time) {
  return timing(new AnimatedValue_default(0), {
    toValue: 0,
    delay: time,
    duration: 0
  });
};
var stagger = function stagger2(time, animations) {
  return parallel(animations.map(function(animation2, i) {
    return sequence([delay(time * i), animation2]);
  }));
};
var loop = function loop2(animation2, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$iterations = _ref.iterations, iterations = _ref$iterations === void 0 ? -1 : _ref$iterations, _ref$resetBeforeItera = _ref.resetBeforeIteration, resetBeforeIteration = _ref$resetBeforeItera === void 0 ? true : _ref$resetBeforeItera;
  var isFinished = false;
  var iterationsSoFar = 0;
  return {
    start: function start(callback) {
      var restart2 = function restart3(result) {
        if (result === void 0) {
          result = {
            finished: true
          };
        }
        if (isFinished || iterationsSoFar === iterations || result.finished === false) {
          callback && callback(result);
        } else {
          iterationsSoFar++;
          resetBeforeIteration && animation2.reset();
          animation2.start(restart3);
        }
      };
      if (!animation2 || iterations === 0) {
        callback && callback({
          finished: true
        });
      } else {
        if (animation2._isUsingNativeDriver()) {
          animation2._startNativeLoop(iterations);
        } else {
          restart2();
        }
      }
    },
    stop: function stop3() {
      isFinished = true;
      animation2.stop();
    },
    reset: function reset2() {
      iterationsSoFar = 0;
      isFinished = false;
      animation2.reset();
    },
    _startNativeLoop: function _startNativeLoop() {
      throw new Error("Loops run using the native driver cannot contain Animated.loop animations");
    },
    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return animation2._isUsingNativeDriver();
    }
  };
};
function forkEvent(event4, listener3) {
  if (!event4) {
    return listener3;
  } else if (event4 instanceof AnimatedEvent) {
    event4.__addListener(listener3);
    return event4;
  } else {
    return function() {
      typeof event4 === "function" && event4.apply(void 0, arguments);
      listener3.apply(void 0, arguments);
    };
  }
}
function unforkEvent(event4, listener3) {
  if (event4 && event4 instanceof AnimatedEvent) {
    event4.__removeListener(listener3);
  }
}
var event = function event2(argMapping, config) {
  var animatedEvent = new AnimatedEvent(argMapping, config);
  if (animatedEvent.__isNative) {
    return animatedEvent;
  } else {
    return animatedEvent.__getHandler();
  }
};
var AnimatedImplementation = {
  Value: AnimatedValue_default,
  ValueXY: AnimatedValueXY_default,
  Interpolation: AnimatedInterpolation_default,
  Node: AnimatedNode_default,
  decay,
  timing,
  spring,
  add,
  subtract,
  divide,
  multiply,
  modulo,
  diffClamp,
  delay,
  sequence,
  parallel,
  stagger,
  loop,
  event,
  createAnimatedComponent: createAnimatedComponent_default,
  attachNativeEvent,
  forkEvent,
  unforkEvent,
  Event: AnimatedEvent,
  __PropsOnlyForTests: AnimatedProps_default
};
var AnimatedImplementation_default = AnimatedImplementation;

// node_modules/react-native-web/dist/vendor/react-native/deepDiffer/index.js
"use strict";
var deepDiffer = function deepDiffer2(one, two, maxDepth) {
  if (maxDepth === void 0) {
    maxDepth = -1;
  }
  if (maxDepth === 0) {
    return true;
  }
  if (one === two) {
    return false;
  }
  if (typeof one === "function" && typeof two === "function") {
    return false;
  }
  if (typeof one !== "object" || one === null) {
    return one !== two;
  }
  if (typeof two !== "object" || two === null) {
    return true;
  }
  if (one.constructor !== two.constructor) {
    return true;
  }
  if (Array.isArray(one)) {
    var len = one.length;
    if (two.length !== len) {
      return true;
    }
    for (var ii = 0; ii < len; ii++) {
      if (deepDiffer2(one[ii], two[ii], maxDepth - 1)) {
        return true;
      }
    }
  } else {
    for (var key3 in one) {
      if (deepDiffer2(one[key3], two[key3], maxDepth - 1)) {
        return true;
      }
    }
    for (var twoKey in two) {
      if (one[twoKey] === void 0 && two[twoKey] !== void 0) {
        return true;
      }
    }
  }
  return false;
};
var deepDiffer_default = deepDiffer;

// node_modules/react-native-web/dist/vendor/react-native/FlatList/index.js
var React12 = __toModule(require_react());

// node_modules/react-native-web/dist/exports/View/index.js
var React7 = __toModule(require_react());
var import_react6 = __toModule(require_react());

// node_modules/react-native-web/dist/modules/forwardedProps/index.js
var defaultProps = {
  children: true,
  dataSet: true,
  nativeID: true,
  ref: true,
  suppressHydrationWarning: true,
  testID: true
};
var accessibilityProps = {
  accessibilityActiveDescendant: true,
  accessibilityAtomic: true,
  accessibilityAutoComplete: true,
  accessibilityBusy: true,
  accessibilityChecked: true,
  accessibilityColumnCount: true,
  accessibilityColumnIndex: true,
  accessibilityColumnSpan: true,
  accessibilityControls: true,
  accessibilityDescribedBy: true,
  accessibilityDetails: true,
  accessibilityDisabled: true,
  accessibilityErrorMessage: true,
  accessibilityExpanded: true,
  accessibilityFlowTo: true,
  accessibilityHasPopup: true,
  accessibilityHidden: true,
  accessibilityInvalid: true,
  accessibilityKeyShortcuts: true,
  accessibilityLabel: true,
  accessibilityLabelledBy: true,
  accessibilityLevel: true,
  accessibilityLiveRegion: true,
  accessibilityModal: true,
  accessibilityMultiline: true,
  accessibilityMultiSelectable: true,
  accessibilityOrientation: true,
  accessibilityOwns: true,
  accessibilityPlaceholder: true,
  accessibilityPosInSet: true,
  accessibilityPressed: true,
  accessibilityReadOnly: true,
  accessibilityRequired: true,
  accessibilityRole: true,
  accessibilityRoleDescription: true,
  accessibilityRowCount: true,
  accessibilityRowIndex: true,
  accessibilityRowSpan: true,
  accessibilitySelected: true,
  accessibilitySetSize: true,
  accessibilitySort: true,
  accessibilityValueMax: true,
  accessibilityValueMin: true,
  accessibilityValueNow: true,
  accessibilityValueText: true,
  dir: true,
  focusable: true,
  accessible: true,
  accessibilityState: true,
  accessibilityValue: true
};
var clickProps = {
  onClick: true,
  onClickCapture: true,
  onContextMenu: true
};
var focusProps = {
  onBlur: true,
  onFocus: true
};
var keyboardProps = {
  onKeyDown: true,
  onKeyDownCapture: true,
  onKeyUp: true,
  onKeyUpCapture: true
};
var mouseProps = {
  onMouseDown: true,
  onMouseEnter: true,
  onMouseLeave: true,
  onMouseMove: true,
  onMouseOver: true,
  onMouseOut: true,
  onMouseUp: true
};
var touchProps = {
  onTouchCancel: true,
  onTouchCancelCapture: true,
  onTouchEnd: true,
  onTouchEndCapture: true,
  onTouchMove: true,
  onTouchMoveCapture: true,
  onTouchStart: true,
  onTouchStartCapture: true
};
var styleProps = {
  classList: true,
  style: true
};

// node_modules/react-native-web/dist/modules/pick/index.js
function pick(obj, list2) {
  var nextObj = {};
  for (var key3 in obj) {
    if (obj.hasOwnProperty(key3)) {
      if (list2[key3] === true || key3.indexOf("aria-") === 0) {
        nextObj[key3] = obj[key3];
      }
    }
  }
  return nextObj;
}

// node_modules/react-native-web/dist/modules/useElementLayout/index.js
var import_ExecutionEnvironment10 = __toModule(require_ExecutionEnvironment());

// node_modules/react-native-web/dist/modules/useLayoutEffect/index.js
var import_ExecutionEnvironment9 = __toModule(require_ExecutionEnvironment());
var import_react3 = __toModule(require_react());
var useLayoutEffectImpl = import_ExecutionEnvironment9.canUseDOM ? import_react3.useLayoutEffect : import_react3.useEffect;
var useLayoutEffect_default = useLayoutEffectImpl;

// node_modules/react-native-web/dist/modules/useElementLayout/index.js
var DOM_LAYOUT_HANDLER_NAME = "__reactLayoutHandler";
var didWarn = !import_ExecutionEnvironment10.canUseDOM;
var resizeObserver = null;
function getResizeObserver() {
  if (import_ExecutionEnvironment10.canUseDOM && typeof window.ResizeObserver !== "undefined") {
    if (resizeObserver == null) {
      resizeObserver = new window.ResizeObserver(function(entries) {
        entries.forEach(function(entry) {
          var node = entry.target;
          var onLayout = node[DOM_LAYOUT_HANDLER_NAME];
          if (typeof onLayout === "function") {
            UIManager_default.measure(node, function(x, y, width, height, left2, top) {
              var event4 = {
                nativeEvent: {
                  layout: {
                    x,
                    y,
                    width,
                    height,
                    left: left2,
                    top
                  }
                },
                timeStamp: Date.now()
              };
              Object.defineProperty(event4.nativeEvent, "target", {
                enumerable: true,
                get: function get3() {
                  return entry.target;
                }
              });
              onLayout(event4);
            });
          }
        });
      });
    }
  } else if (!didWarn) {
    if (true) {
      console.warn("onLayout relies on ResizeObserver which is not supported by your browser. Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.");
      didWarn = true;
    }
  }
  return resizeObserver;
}
function useElementLayout(ref, onLayout) {
  var observer = getResizeObserver();
  useLayoutEffect_default(function() {
    var node = ref.current;
    if (node != null) {
      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;
    }
  }, [ref, onLayout]);
  useLayoutEffect_default(function() {
    var node = ref.current;
    if (node != null && observer != null) {
      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === "function") {
        observer.observe(node);
      } else {
        observer.unobserve(node);
      }
    }
    return function() {
      if (node != null && observer != null) {
        observer.unobserve(node);
      }
    };
  }, [ref, observer]);
}

// node_modules/react-native-web/dist/modules/useMergeRefs/index.js
var React4 = __toModule(require_react());
function useMergeRefs() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return React4.useMemo(function() {
    return mergeRefs.apply(void 0, args);
  }, [].concat(args));
}

// node_modules/react-native-web/dist/modules/useStable/index.js
var React5 = __toModule(require_react());
var UNINITIALIZED = typeof Symbol === "function" && typeof Symbol() === "symbol" ? Symbol() : Object.freeze({});
function useStable(getInitialValue) {
  var ref = React5.useRef(UNINITIALIZED);
  if (ref.current === UNINITIALIZED) {
    ref.current = getInitialValue();
  }
  return ref.current;
}

// node_modules/react-native-web/dist/modules/usePlatformMethods/index.js
var import_react4 = __toModule(require_react());
function ownKeys7(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread7(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys7(Object(source), true).forEach(function(key3) {
        _defineProperty7(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys7(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty7(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var emptyObject6 = {};
function setNativeProps(node, nativeProps, classList2, pointerEvents, style, previousStyleRef) {
  if (node != null && nativeProps) {
    var domProps = createDOMProps_default(null, _objectSpread7(_objectSpread7({
      pointerEvents
    }, nativeProps), {}, {
      classList: [classList2, nativeProps.className],
      style: [style, nativeProps.style]
    }));
    var nextDomStyle = domProps.style;
    if (previousStyleRef.current != null) {
      if (domProps.style == null) {
        domProps.style = {};
      }
      for (var styleName in previousStyleRef.current) {
        if (domProps.style[styleName] == null) {
          domProps.style[styleName] = "";
        }
      }
    }
    previousStyleRef.current = nextDomStyle;
    UIManager_default.updateView(node, domProps);
  }
}
function usePlatformMethods(_ref) {
  var classList2 = _ref.classList, pointerEvents = _ref.pointerEvents, style = _ref.style;
  var previousStyleRef = (0, import_react4.useRef)(null);
  var setNativePropsArgsRef = (0, import_react4.useRef)(null);
  setNativePropsArgsRef.current = {
    classList: classList2,
    pointerEvents,
    style
  };
  var ref = useStable(function() {
    return function(hostNode) {
      if (hostNode != null) {
        hostNode.measure = function(callback) {
          return UIManager_default.measure(hostNode, callback);
        };
        hostNode.measureLayout = function(relativeToNode, success, failure) {
          return UIManager_default.measureLayout(hostNode, relativeToNode, failure, success);
        };
        hostNode.measureInWindow = function(callback) {
          return UIManager_default.measureInWindow(hostNode, callback);
        };
        hostNode.setNativeProps = function(nativeProps) {
          var _ref2 = setNativePropsArgsRef.current || emptyObject6, classList3 = _ref2.classList, style2 = _ref2.style, pointerEvents2 = _ref2.pointerEvents;
          setNativeProps(hostNode, nativeProps, classList3, pointerEvents2, style2, previousStyleRef);
        };
      }
    };
  });
  return ref;
}

// node_modules/react-native-web/dist/modules/useResponderEvents/index.js
var React6 = __toModule(require_react());

// node_modules/react-native-web/dist/modules/useResponderEvents/ResponderSystem.js
var import_ExecutionEnvironment11 = __toModule(require_ExecutionEnvironment());

// node_modules/react-native-web/dist/modules/useResponderEvents/ResponderEventTypes.js
var MOUSE_DOWN = "mousedown";
var MOUSE_MOVE = "mousemove";
var MOUSE_UP = "mouseup";
var MOUSE_CANCEL = "dragstart";
var TOUCH_START = "touchstart";
var TOUCH_MOVE = "touchmove";
var TOUCH_END = "touchend";
var TOUCH_CANCEL = "touchcancel";
var SCROLL = "scroll";
var SELECT = "select";
var SELECTION_CHANGE = "selectionchange";
function isStartish(eventType) {
  return eventType === TOUCH_START || eventType === MOUSE_DOWN;
}
function isMoveish(eventType) {
  return eventType === TOUCH_MOVE || eventType === MOUSE_MOVE;
}
function isEndish(eventType) {
  return eventType === TOUCH_END || eventType === MOUSE_UP || isCancelish(eventType);
}
function isCancelish(eventType) {
  return eventType === TOUCH_CANCEL || eventType === MOUSE_CANCEL;
}
function isScroll(eventType) {
  return eventType === SCROLL;
}
function isSelectionChange(eventType) {
  return eventType === SELECT || eventType === SELECTION_CHANGE;
}

// node_modules/react-native-web/dist/modules/useResponderEvents/ResponderTouchHistoryStore.js
var __DEV__3 = true;
var MAX_TOUCH_BANK = 20;
var touchBank = [];
var touchHistory = {
  touchBank,
  numberActiveTouches: 0,
  indexOfSingleActiveTouch: -1,
  mostRecentTimeStamp: 0
};
function timestampForTouch(touch) {
  return touch.timeStamp || touch.timestamp;
}
function createTouchRecord(touch) {
  return {
    touchActive: true,
    startPageX: touch.pageX,
    startPageY: touch.pageY,
    startTimeStamp: timestampForTouch(touch),
    currentPageX: touch.pageX,
    currentPageY: touch.pageY,
    currentTimeStamp: timestampForTouch(touch),
    previousPageX: touch.pageX,
    previousPageY: touch.pageY,
    previousTimeStamp: timestampForTouch(touch)
  };
}
function resetTouchRecord(touchRecord, touch) {
  touchRecord.touchActive = true;
  touchRecord.startPageX = touch.pageX;
  touchRecord.startPageY = touch.pageY;
  touchRecord.startTimeStamp = timestampForTouch(touch);
  touchRecord.currentPageX = touch.pageX;
  touchRecord.currentPageY = touch.pageY;
  touchRecord.currentTimeStamp = timestampForTouch(touch);
  touchRecord.previousPageX = touch.pageX;
  touchRecord.previousPageY = touch.pageY;
  touchRecord.previousTimeStamp = timestampForTouch(touch);
}
function getTouchIdentifier(_ref) {
  var identifier2 = _ref.identifier;
  if (identifier2 == null) {
    console.error("Touch object is missing identifier.");
  }
  if (__DEV__3) {
    if (identifier2 > MAX_TOUCH_BANK) {
      console.error("Touch identifier %s is greater than maximum supported %s which causes performance issues backfilling array locations for all of the indices.", identifier2, MAX_TOUCH_BANK);
    }
  }
  return identifier2;
}
function recordTouchStart(touch) {
  var identifier2 = getTouchIdentifier(touch);
  var touchRecord = touchBank[identifier2];
  if (touchRecord) {
    resetTouchRecord(touchRecord, touch);
  } else {
    touchBank[identifier2] = createTouchRecord(touch);
  }
  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}
function recordTouchMove(touch) {
  var touchRecord = touchBank[getTouchIdentifier(touch)];
  if (touchRecord) {
    touchRecord.touchActive = true;
    touchRecord.previousPageX = touchRecord.currentPageX;
    touchRecord.previousPageY = touchRecord.currentPageY;
    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
    touchRecord.currentPageX = touch.pageX;
    touchRecord.currentPageY = touch.pageY;
    touchRecord.currentTimeStamp = timestampForTouch(touch);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  } else {
    console.warn("Cannot record touch move without a touch start.\n", "Touch Move: " + printTouch(touch) + "\n", "Touch Bank: " + printTouchBank());
  }
}
function recordTouchEnd(touch) {
  var touchRecord = touchBank[getTouchIdentifier(touch)];
  if (touchRecord) {
    touchRecord.touchActive = false;
    touchRecord.previousPageX = touchRecord.currentPageX;
    touchRecord.previousPageY = touchRecord.currentPageY;
    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
    touchRecord.currentPageX = touch.pageX;
    touchRecord.currentPageY = touch.pageY;
    touchRecord.currentTimeStamp = timestampForTouch(touch);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  } else {
    console.warn("Cannot record touch end without a touch start.\n", "Touch End: " + printTouch(touch) + "\n", "Touch Bank: " + printTouchBank());
  }
}
function printTouch(touch) {
  return JSON.stringify({
    identifier: touch.identifier,
    pageX: touch.pageX,
    pageY: touch.pageY,
    timestamp: timestampForTouch(touch)
  });
}
function printTouchBank() {
  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
  if (touchBank.length > MAX_TOUCH_BANK) {
    printed += " (original size: " + touchBank.length + ")";
  }
  return printed;
}
var ResponderTouchHistoryStore = {
  recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
    if (isMoveish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordTouchMove);
    } else if (isStartish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordTouchStart);
      touchHistory.numberActiveTouches = nativeEvent.touches.length;
      if (touchHistory.numberActiveTouches === 1) {
        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
      }
    } else if (isEndish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordTouchEnd);
      touchHistory.numberActiveTouches = nativeEvent.touches.length;
      if (touchHistory.numberActiveTouches === 1) {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrackToCheck = touchBank[i];
          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
            touchHistory.indexOfSingleActiveTouch = i;
            break;
          }
        }
        if (__DEV__3) {
          var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
          if (!(activeRecord != null && activeRecord.touchActive)) {
            console.error("Cannot find single active touch.");
          }
        }
      }
    }
  },
  touchHistory
};
var ResponderTouchHistoryStore_default = ResponderTouchHistoryStore;

// node_modules/react-native-web/dist/modules/useResponderEvents/createResponderEvent.js
var emptyFunction = function emptyFunction2() {
};
var emptyObject7 = {};
var emptyArray = [];
function normalizeIdentifier(identifier2) {
  return identifier2 > 20 ? identifier2 % 20 : identifier2;
}
function createResponderEvent(domEvent) {
  var rect;
  var propagationWasStopped = false;
  var changedTouches;
  var touches;
  var domEventChangedTouches = domEvent.changedTouches;
  var domEventType = domEvent.type;
  var metaKey = domEvent.metaKey === true;
  var shiftKey = domEvent.shiftKey === true;
  var force = domEventChangedTouches && domEventChangedTouches[0].force || 0;
  var identifier2 = normalizeIdentifier(domEventChangedTouches && domEventChangedTouches[0].identifier || 0);
  var clientX = domEventChangedTouches && domEventChangedTouches[0].clientX || domEvent.clientX;
  var clientY = domEventChangedTouches && domEventChangedTouches[0].clientY || domEvent.clientY;
  var pageX = domEventChangedTouches && domEventChangedTouches[0].pageX || domEvent.pageX;
  var pageY = domEventChangedTouches && domEventChangedTouches[0].pageY || domEvent.pageY;
  var preventDefault = typeof domEvent.preventDefault === "function" ? domEvent.preventDefault.bind(domEvent) : emptyFunction;
  var timestamp = domEvent.timeStamp;
  function normalizeTouches(touches2) {
    return Array.prototype.slice.call(touches2).map(function(touch) {
      return {
        force: touch.force,
        identifier: normalizeIdentifier(touch.identifier),
        get locationX() {
          return locationX(touch.clientX);
        },
        get locationY() {
          return locationY(touch.clientY);
        },
        pageX: touch.pageX,
        pageY: touch.pageY,
        target: touch.target,
        timestamp
      };
    });
  }
  if (domEventChangedTouches != null) {
    changedTouches = normalizeTouches(domEventChangedTouches);
    touches = normalizeTouches(domEvent.touches);
  } else {
    var emulatedTouches = [{
      force,
      identifier: identifier2,
      get locationX() {
        return locationX(clientX);
      },
      get locationY() {
        return locationY(clientY);
      },
      pageX,
      pageY,
      target: domEvent.target,
      timestamp
    }];
    changedTouches = emulatedTouches;
    touches = domEventType === "mouseup" || domEventType === "dragstart" ? emptyArray : emulatedTouches;
  }
  var responderEvent = {
    bubbles: true,
    cancelable: true,
    currentTarget: null,
    defaultPrevented: domEvent.defaultPrevented,
    dispatchConfig: emptyObject7,
    eventPhase: domEvent.eventPhase,
    isDefaultPrevented: function isDefaultPrevented2() {
      return domEvent.defaultPrevented;
    },
    isPropagationStopped: function isPropagationStopped2() {
      return propagationWasStopped;
    },
    isTrusted: domEvent.isTrusted,
    nativeEvent: {
      altKey: false,
      ctrlKey: false,
      metaKey,
      shiftKey,
      changedTouches,
      force,
      identifier: identifier2,
      get locationX() {
        return locationX(clientX);
      },
      get locationY() {
        return locationY(clientY);
      },
      pageX,
      pageY,
      target: domEvent.target,
      timestamp,
      touches,
      type: domEventType
    },
    persist: emptyFunction,
    preventDefault,
    stopPropagation: function stopPropagation() {
      propagationWasStopped = true;
    },
    target: domEvent.target,
    timeStamp: timestamp,
    touchHistory: ResponderTouchHistoryStore_default.touchHistory
  };
  function locationX(x) {
    rect = rect || getBoundingClientRect_default(responderEvent.currentTarget);
    if (rect) {
      return x - rect.left;
    }
  }
  function locationY(y) {
    rect = rect || getBoundingClientRect_default(responderEvent.currentTarget);
    if (rect) {
      return y - rect.top;
    }
  }
  return responderEvent;
}

// node_modules/react-native-web/dist/modules/isSelectionValid/index.js
function isSelectionValid() {
  var selection2 = window.getSelection();
  var string = selection2.toString();
  var anchorNode = selection2.anchorNode;
  var focusNode = selection2.focusNode;
  var isTextNode = anchorNode && anchorNode.nodeType === window.Node.TEXT_NODE || focusNode && focusNode.nodeType === window.Node.TEXT_NODE;
  return string.length >= 1 && string !== "\n" && isTextNode;
}

// node_modules/react-native-web/dist/modules/useResponderEvents/utils.js
var keyName = "__reactResponderId";
function getEventPath(domEvent) {
  if (domEvent.type === "selectionchange") {
    var target2 = window.getSelection().anchorNode;
    return composedPathFallback(target2);
  } else {
    var path = domEvent.composedPath != null ? domEvent.composedPath() : composedPathFallback(domEvent.target);
    return path;
  }
}
function composedPathFallback(target2) {
  var path = [];
  while (target2 != null && target2 !== document.body) {
    path.push(target2);
    target2 = target2.parentNode;
  }
  return path;
}
function getResponderId(node) {
  if (node != null) {
    return node[keyName];
  }
  return null;
}
function setResponderId(node, id2) {
  if (node != null) {
    node[keyName] = id2;
  }
}
function getResponderPaths(domEvent) {
  var idPath = [];
  var nodePath = [];
  var eventPath = getEventPath(domEvent);
  for (var i = 0; i < eventPath.length; i++) {
    var node = eventPath[i];
    var id2 = getResponderId(node);
    if (id2 != null) {
      idPath.push(id2);
      nodePath.push(node);
    }
  }
  return {
    idPath,
    nodePath
  };
}
function getLowestCommonAncestor(pathA, pathB) {
  var pathALength = pathA.length;
  var pathBLength = pathB.length;
  if (pathALength === 0 || pathBLength === 0 || pathA[pathALength - 1] !== pathB[pathBLength - 1]) {
    return null;
  }
  var itemA = pathA[0];
  var indexA = 0;
  var itemB = pathB[0];
  var indexB = 0;
  if (pathALength - pathBLength > 0) {
    indexA = pathALength - pathBLength;
    itemA = pathA[indexA];
    pathALength = pathBLength;
  }
  if (pathBLength - pathALength > 0) {
    indexB = pathBLength - pathALength;
    itemB = pathB[indexB];
    pathBLength = pathALength;
  }
  var depth = pathALength;
  while (depth--) {
    if (itemA === itemB) {
      return itemA;
    }
    itemA = pathA[indexA++];
    itemB = pathB[indexB++];
  }
  return null;
}
function hasTargetTouches(target2, touches) {
  if (!touches || touches.length === 0) {
    return false;
  }
  for (var i = 0; i < touches.length; i++) {
    var node = touches[i].target;
    if (node != null) {
      if (target2.contains(node)) {
        return true;
      }
    }
  }
  return false;
}
function hasValidSelection(domEvent) {
  if (domEvent.type === "selectionchange") {
    return isSelectionValid();
  }
  return domEvent.type === "select";
}
function isPrimaryPointerDown(domEvent) {
  var altKey = domEvent.altKey, button = domEvent.button, buttons = domEvent.buttons, ctrlKey = domEvent.ctrlKey, type = domEvent.type;
  var isTouch = type === "touchstart" || type === "touchmove";
  var isPrimaryMouseDown = type === "mousedown" && (button === 0 || buttons === 1);
  var isPrimaryMouseMove = type === "mousemove" && buttons === 1;
  var noModifiers = altKey === false && ctrlKey === false;
  if (isTouch || isPrimaryMouseDown && noModifiers || isPrimaryMouseMove && noModifiers) {
    return true;
  }
  return false;
}

// node_modules/react-native-web/dist/modules/useResponderEvents/ResponderSystem.js
var emptyObject8 = {};
var startRegistration = ["onStartShouldSetResponderCapture", "onStartShouldSetResponder", {
  bubbles: true
}];
var moveRegistration = ["onMoveShouldSetResponderCapture", "onMoveShouldSetResponder", {
  bubbles: true
}];
var scrollRegistration = ["onScrollShouldSetResponderCapture", "onScrollShouldSetResponder", {
  bubbles: false
}];
var shouldSetResponderEvents = {
  touchstart: startRegistration,
  mousedown: startRegistration,
  touchmove: moveRegistration,
  mousemove: moveRegistration,
  scroll: scrollRegistration
};
var emptyResponder = {
  id: null,
  idPath: null,
  node: null
};
var responderListenersMap = new Map();
var isEmulatingMouseEvents = false;
var trackedTouchCount = 0;
var currentResponder = {
  id: null,
  node: null,
  idPath: null
};
function changeCurrentResponder(responder) {
  currentResponder = responder;
}
function getResponderConfig(id2) {
  var config = responderListenersMap.get(id2);
  return config != null ? config : emptyObject8;
}
function eventListener(domEvent) {
  var eventType = domEvent.type;
  var eventTarget = domEvent.target;
  if (eventType === "touchstart") {
    isEmulatingMouseEvents = true;
  }
  if (eventType === "touchmove" || trackedTouchCount > 1) {
    isEmulatingMouseEvents = false;
  }
  if (eventType === "mousedown" && isEmulatingMouseEvents || eventType === "mousemove" && isEmulatingMouseEvents || eventType === "mousemove" && trackedTouchCount < 1) {
    return;
  }
  if (isEmulatingMouseEvents && eventType === "mouseup") {
    if (trackedTouchCount === 0) {
      isEmulatingMouseEvents = false;
    }
    return;
  }
  var isStartEvent = isStartish(eventType) && isPrimaryPointerDown(domEvent);
  var isMoveEvent = isMoveish(eventType);
  var isEndEvent = isEndish(eventType);
  var isScrollEvent = isScroll(eventType);
  var isSelectionChangeEvent = isSelectionChange(eventType);
  var responderEvent = createResponderEvent(domEvent);
  if (isStartEvent || isMoveEvent || isEndEvent) {
    if (domEvent.touches) {
      trackedTouchCount = domEvent.touches.length;
    } else {
      if (isStartEvent) {
        trackedTouchCount = 1;
      } else if (isEndEvent) {
        trackedTouchCount = 0;
      }
    }
    ResponderTouchHistoryStore_default.recordTouchTrack(eventType, responderEvent.nativeEvent);
  }
  var eventPaths = getResponderPaths(domEvent);
  var wasNegotiated = false;
  var wantsResponder;
  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {
    var currentResponderIdPath = currentResponder.idPath;
    var eventIdPath = eventPaths.idPath;
    if (currentResponderIdPath != null && eventIdPath != null) {
      var lowestCommonAncestor = getLowestCommonAncestor(currentResponderIdPath, eventIdPath);
      if (lowestCommonAncestor != null) {
        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor);
        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);
        eventPaths = {
          idPath: eventIdPath.slice(index),
          nodePath: eventPaths.nodePath.slice(index)
        };
      } else {
        eventPaths = null;
      }
    }
    if (eventPaths != null) {
      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);
      if (wantsResponder != null) {
        attemptTransfer(responderEvent, wantsResponder);
        wasNegotiated = true;
      }
    }
  }
  if (currentResponder.id != null && currentResponder.node != null) {
    var _currentResponder = currentResponder, id2 = _currentResponder.id, node = _currentResponder.node;
    var _getResponderConfig = getResponderConfig(id2), onResponderStart = _getResponderConfig.onResponderStart, onResponderMove = _getResponderConfig.onResponderMove, onResponderEnd = _getResponderConfig.onResponderEnd, onResponderRelease = _getResponderConfig.onResponderRelease, onResponderTerminate = _getResponderConfig.onResponderTerminate, onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;
    responderEvent.bubbles = false;
    responderEvent.cancelable = false;
    responderEvent.currentTarget = node;
    if (isStartEvent) {
      if (onResponderStart != null) {
        responderEvent.dispatchConfig.registrationName = "onResponderStart";
        onResponderStart(responderEvent);
      }
    } else if (isMoveEvent) {
      if (onResponderMove != null) {
        responderEvent.dispatchConfig.registrationName = "onResponderMove";
        onResponderMove(responderEvent);
      }
    } else {
      var isTerminateEvent = isCancelish(eventType) || eventType === "contextmenu" || eventType === "blur" && eventTarget === window || eventType === "blur" && eventTarget.contains(node) && domEvent.relatedTarget !== node || isScrollEvent && trackedTouchCount === 0 || isScrollEvent && eventTarget.contains(node) && eventTarget !== node || isSelectionChangeEvent && hasValidSelection(domEvent);
      var isReleaseEvent = isEndEvent && !isTerminateEvent && !hasTargetTouches(node, domEvent.touches);
      if (isEndEvent) {
        if (onResponderEnd != null) {
          responderEvent.dispatchConfig.registrationName = "onResponderEnd";
          onResponderEnd(responderEvent);
        }
      }
      if (isReleaseEvent) {
        if (onResponderRelease != null) {
          responderEvent.dispatchConfig.registrationName = "onResponderRelease";
          onResponderRelease(responderEvent);
        }
        changeCurrentResponder(emptyResponder);
      }
      if (isTerminateEvent) {
        var shouldTerminate = true;
        if (eventType === "contextmenu" || eventType === "scroll" || eventType === "selectionchange") {
          if (wasNegotiated) {
            shouldTerminate = false;
          } else if (onResponderTerminationRequest != null) {
            responderEvent.dispatchConfig.registrationName = "onResponderTerminationRequest";
            if (onResponderTerminationRequest(responderEvent) === false) {
              shouldTerminate = false;
            }
          }
        }
        if (shouldTerminate) {
          if (onResponderTerminate != null) {
            responderEvent.dispatchConfig.registrationName = "onResponderTerminate";
            onResponderTerminate(responderEvent);
          }
          changeCurrentResponder(emptyResponder);
          isEmulatingMouseEvents = false;
          trackedTouchCount = 0;
        }
      }
    }
  }
}
function findWantsResponder(eventPaths, domEvent, responderEvent) {
  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type];
  if (shouldSetCallbacks != null) {
    var idPath = eventPaths.idPath, nodePath = eventPaths.nodePath;
    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];
    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];
    var bubbles = shouldSetCallbacks[2].bubbles;
    var check3 = function check4(id3, node2, callbackName) {
      var config = getResponderConfig(id3);
      var shouldSetCallback = config[callbackName];
      if (shouldSetCallback != null) {
        responderEvent.currentTarget = node2;
        if (shouldSetCallback(responderEvent) === true) {
          var prunedIdPath = idPath.slice(idPath.indexOf(id3));
          return {
            id: id3,
            node: node2,
            idPath: prunedIdPath
          };
        }
      }
    };
    for (var i = idPath.length - 1; i >= 0; i--) {
      var id2 = idPath[i];
      var node = nodePath[i];
      var result = check3(id2, node, shouldSetCallbackCaptureName);
      if (result != null) {
        return result;
      }
      if (responderEvent.isPropagationStopped() === true) {
        return;
      }
    }
    if (bubbles) {
      for (var _i = 0; _i < idPath.length; _i++) {
        var _id = idPath[_i];
        var _node = nodePath[_i];
        var _result = check3(_id, _node, shouldSetCallbackBubbleName);
        if (_result != null) {
          return _result;
        }
        if (responderEvent.isPropagationStopped() === true) {
          return;
        }
      }
    } else {
      var _id2 = idPath[0];
      var _node2 = nodePath[0];
      var target2 = domEvent.target;
      if (target2 === _node2) {
        return check3(_id2, _node2, shouldSetCallbackBubbleName);
      }
    }
  }
}
function attemptTransfer(responderEvent, wantsResponder) {
  var _currentResponder2 = currentResponder, currentId = _currentResponder2.id, currentNode = _currentResponder2.node;
  var id2 = wantsResponder.id, node = wantsResponder.node;
  var _getResponderConfig2 = getResponderConfig(id2), onResponderGrant = _getResponderConfig2.onResponderGrant, onResponderReject = _getResponderConfig2.onResponderReject;
  responderEvent.bubbles = false;
  responderEvent.cancelable = false;
  responderEvent.currentTarget = node;
  if (currentId == null) {
    if (onResponderGrant != null) {
      responderEvent.currentTarget = node;
      responderEvent.dispatchConfig.registrationName = "onResponderGrant";
      onResponderGrant(responderEvent);
    }
    changeCurrentResponder(wantsResponder);
  } else {
    var _getResponderConfig3 = getResponderConfig(currentId), onResponderTerminate = _getResponderConfig3.onResponderTerminate, onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;
    var allowTransfer = true;
    if (onResponderTerminationRequest != null) {
      responderEvent.currentTarget = currentNode;
      responderEvent.dispatchConfig.registrationName = "onResponderTerminationRequest";
      if (onResponderTerminationRequest(responderEvent) === false) {
        allowTransfer = false;
      }
    }
    if (allowTransfer) {
      if (onResponderTerminate != null) {
        responderEvent.currentTarget = currentNode;
        responderEvent.dispatchConfig.registrationName = "onResponderTerminate";
        onResponderTerminate(responderEvent);
      }
      if (onResponderGrant != null) {
        responderEvent.currentTarget = node;
        responderEvent.dispatchConfig.registrationName = "onResponderGrant";
        onResponderGrant(responderEvent);
      }
      changeCurrentResponder(wantsResponder);
    } else {
      if (onResponderReject != null) {
        responderEvent.currentTarget = node;
        responderEvent.dispatchConfig.registrationName = "onResponderReject";
        onResponderReject(responderEvent);
      }
    }
  }
}
var documentEventsCapturePhase = ["blur", "scroll"];
var documentEventsBubblePhase = [
  "mousedown",
  "mousemove",
  "mouseup",
  "dragstart",
  "touchstart",
  "touchmove",
  "touchend",
  "touchcancel",
  "contextmenu",
  "select",
  "selectionchange"
];
function attachListeners() {
  if (import_ExecutionEnvironment11.canUseDOM && window.__reactResponderSystemActive == null) {
    window.addEventListener("blur", eventListener);
    documentEventsBubblePhase.forEach(function(eventType) {
      document.addEventListener(eventType, eventListener);
    });
    documentEventsCapturePhase.forEach(function(eventType) {
      document.addEventListener(eventType, eventListener, true);
    });
    window.__reactResponderSystemActive = true;
  }
}
function addNode(id2, node, config) {
  setResponderId(node, id2);
  responderListenersMap.set(id2, config);
}
function removeNode(id2) {
  if (currentResponder.id === id2) {
    terminateResponder();
  }
  if (responderListenersMap.has(id2)) {
    responderListenersMap.delete(id2);
  }
}
function terminateResponder() {
  var _currentResponder3 = currentResponder, id2 = _currentResponder3.id, node = _currentResponder3.node;
  if (id2 != null && node != null) {
    var _getResponderConfig4 = getResponderConfig(id2), onResponderTerminate = _getResponderConfig4.onResponderTerminate;
    if (onResponderTerminate != null) {
      var event4 = createResponderEvent({});
      event4.currentTarget = node;
      onResponderTerminate(event4);
    }
    changeCurrentResponder(emptyResponder);
  }
  isEmulatingMouseEvents = false;
  trackedTouchCount = 0;
}
function getResponderNode() {
  return currentResponder.node;
}

// node_modules/react-native-web/dist/modules/useResponderEvents/index.js
var emptyObject9 = {};
var idCounter = 0;
function useStable2(getInitialValue) {
  var ref = React6.useRef(null);
  if (ref.current == null) {
    ref.current = getInitialValue();
  }
  return ref.current;
}
function useResponderEvents(hostRef, config) {
  if (config === void 0) {
    config = emptyObject9;
  }
  var id2 = useStable2(function() {
    return idCounter++;
  });
  var isAttachedRef = React6.useRef(false);
  React6.useEffect(function() {
    attachListeners();
    return function() {
      removeNode(id2);
    };
  }, [id2]);
  React6.useEffect(function() {
    var _config = config, onMoveShouldSetResponder = _config.onMoveShouldSetResponder, onMoveShouldSetResponderCapture = _config.onMoveShouldSetResponderCapture, onScrollShouldSetResponder = _config.onScrollShouldSetResponder, onScrollShouldSetResponderCapture = _config.onScrollShouldSetResponderCapture, onSelectionChangeShouldSetResponder = _config.onSelectionChangeShouldSetResponder, onSelectionChangeShouldSetResponderCapture = _config.onSelectionChangeShouldSetResponderCapture, onStartShouldSetResponder = _config.onStartShouldSetResponder, onStartShouldSetResponderCapture = _config.onStartShouldSetResponderCapture;
    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;
    var node = hostRef.current;
    if (requiresResponderSystem) {
      addNode(id2, node, config);
      isAttachedRef.current = true;
    } else if (isAttachedRef.current) {
      removeNode(id2);
      isAttachedRef.current = false;
    }
  }, [config, hostRef, id2]);
  React6.useDebugValue({
    isResponder: hostRef.current === getResponderNode()
  });
  React6.useDebugValue(config);
}

// node_modules/react-native-web/dist/exports/Text/TextAncestorContext.js
var import_react5 = __toModule(require_react());
var TextAncestorContext = /* @__PURE__ */ (0, import_react5.createContext)(false);
var TextAncestorContext_default = TextAncestorContext;

// node_modules/react-native-web/dist/exports/View/index.js
function ownKeys8(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread8(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys8(Object(source), true).forEach(function(key3) {
        _defineProperty8(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys8(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty8(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var forwardPropsList = _objectSpread8(_objectSpread8(_objectSpread8(_objectSpread8(_objectSpread8(_objectSpread8(_objectSpread8(_objectSpread8(_objectSpread8({}, defaultProps), accessibilityProps), clickProps), focusProps), keyboardProps), mouseProps), touchProps), styleProps), {}, {
  href: true,
  lang: true,
  onScroll: true,
  onWheel: true,
  pointerEvents: true
});
var pickProps = function pickProps2(props) {
  return pick(props, forwardPropsList);
};
var View = /* @__PURE__ */ (0, import_react6.forwardRef)(function(props, forwardedRef) {
  var hrefAttrs = props.hrefAttrs, onLayout = props.onLayout, onMoveShouldSetResponder = props.onMoveShouldSetResponder, onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture, onResponderEnd = props.onResponderEnd, onResponderGrant = props.onResponderGrant, onResponderMove = props.onResponderMove, onResponderReject = props.onResponderReject, onResponderRelease = props.onResponderRelease, onResponderStart = props.onResponderStart, onResponderTerminate = props.onResponderTerminate, onResponderTerminationRequest = props.onResponderTerminationRequest, onScrollShouldSetResponder = props.onScrollShouldSetResponder, onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture, onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder, onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture, onStartShouldSetResponder = props.onStartShouldSetResponder, onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture;
  if (true) {
    React7.Children.toArray(props.children).forEach(function(item) {
      if (typeof item === "string") {
        console.error("Unexpected text node: " + item + ". A text node cannot be a child of a <View>.");
      }
    });
  }
  var hasTextAncestor = (0, import_react6.useContext)(TextAncestorContext_default);
  var hostRef = (0, import_react6.useRef)(null);
  useElementLayout(hostRef, onLayout);
  useResponderEvents(hostRef, {
    onMoveShouldSetResponder,
    onMoveShouldSetResponderCapture,
    onResponderEnd,
    onResponderGrant,
    onResponderMove,
    onResponderReject,
    onResponderRelease,
    onResponderStart,
    onResponderTerminate,
    onResponderTerminationRequest,
    onScrollShouldSetResponder,
    onScrollShouldSetResponderCapture,
    onSelectionChangeShouldSetResponder,
    onSelectionChangeShouldSetResponderCapture,
    onStartShouldSetResponder,
    onStartShouldSetResponderCapture
  });
  var style = StyleSheet_default2.compose(hasTextAncestor && styles.inline, props.style);
  var supportedProps = pickProps(props);
  supportedProps.classList = classList;
  supportedProps.style = style;
  if (props.href != null && hrefAttrs != null) {
    var download3 = hrefAttrs.download, rel = hrefAttrs.rel, target2 = hrefAttrs.target;
    if (download3 != null) {
      supportedProps.download = download3;
    }
    if (rel != null) {
      supportedProps.rel = rel;
    }
    if (typeof target2 === "string" && target2.charAt(0) !== "_") {
      supportedProps.target = "_" + target2;
    }
  }
  var platformMethodsRef = usePlatformMethods(supportedProps);
  var setRef = useMergeRefs(hostRef, platformMethodsRef, forwardedRef);
  supportedProps.ref = setRef;
  return createElement_default("div", supportedProps);
});
View.displayName = "View";
var classes2 = css_default.create({
  view: {
    alignItems: "stretch",
    border: "0 solid black",
    boxSizing: "border-box",
    display: "flex",
    flexBasis: "auto",
    flexDirection: "column",
    flexShrink: 0,
    margin: 0,
    minHeight: 0,
    minWidth: 0,
    padding: 0,
    position: "relative",
    zIndex: 0
  }
});
var classList = [classes2.view];
var styles = StyleSheet_default2.create({
  inline: {
    display: "inline-flex"
  }
});
var View_default = View;

// node_modules/react-native-web/dist/vendor/react-native/Batchinator/index.js
"use strict";
var Batchinator = /* @__PURE__ */ function() {
  function Batchinator2(callback, delayMS) {
    this._delay = delayMS;
    this._callback = callback;
  }
  var _proto = Batchinator2.prototype;
  _proto.dispose = function dispose(options) {
    if (options === void 0) {
      options = {
        abort: false
      };
    }
    if (this._taskHandle) {
      this._taskHandle.cancel();
      if (!options.abort) {
        this._callback();
      }
      this._taskHandle = null;
    }
  };
  _proto.schedule = function schedule() {
    var _this = this;
    if (this._taskHandle) {
      return;
    }
    var timeoutHandle = setTimeout(function() {
      _this._taskHandle = InteractionManager_default.runAfterInteractions(function() {
        _this._taskHandle = null;
        _this._callback();
      });
    }, this._delay);
    this._taskHandle = {
      cancel: function cancel2() {
        return clearTimeout(timeoutHandle);
      }
    };
  };
  return Batchinator2;
}();
var Batchinator_default = Batchinator;

// node_modules/react-native-web/dist/vendor/react-native/FillRateHelper/index.js
var import_performanceNow = __toModule(require_performanceNow());
var import_warning2 = __toModule(require_warning());
"use strict";
function ownKeys9(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread9(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys9(Object(source), true).forEach(function(key3) {
        _defineProperty9(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys9(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty9(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var Info = function Info2() {
  this.any_blank_count = 0;
  this.any_blank_ms = 0;
  this.any_blank_speed_sum = 0;
  this.mostly_blank_count = 0;
  this.mostly_blank_ms = 0;
  this.pixels_blank = 0;
  this.pixels_sampled = 0;
  this.pixels_scrolled = 0;
  this.total_time_spent = 0;
  this.sample_count = 0;
};
var DEBUG = false;
var _listeners = [];
var _minSampleCount = 10;
var _sampleRate = DEBUG ? 1 : null;
var FillRateHelper = /* @__PURE__ */ function() {
  FillRateHelper2.addListener = function addListener3(callback) {
    (0, import_warning2.default)(_sampleRate !== null, "Call `FillRateHelper.setSampleRate` before `addListener`.");
    _listeners.push(callback);
    return {
      remove: function remove2() {
        _listeners = _listeners.filter(function(listener3) {
          return callback !== listener3;
        });
      }
    };
  };
  FillRateHelper2.setSampleRate = function setSampleRate(sampleRate) {
    _sampleRate = sampleRate;
  };
  FillRateHelper2.setMinSampleCount = function setMinSampleCount(minSampleCount) {
    _minSampleCount = minSampleCount;
  };
  function FillRateHelper2(getFrameMetrics) {
    this._anyBlankStartTime = null;
    this._enabled = false;
    this._info = new Info();
    this._mostlyBlankStartTime = null;
    this._samplesStartTime = null;
    this._getFrameMetrics = getFrameMetrics;
    this._enabled = (_sampleRate || 0) > Math.random();
    this._resetData();
  }
  var _proto = FillRateHelper2.prototype;
  _proto.activate = function activate() {
    if (this._enabled && this._samplesStartTime == null) {
      DEBUG && console.debug("FillRateHelper: activate");
      this._samplesStartTime = (0, import_performanceNow.default)();
    }
  };
  _proto.deactivateAndFlush = function deactivateAndFlush() {
    if (!this._enabled) {
      return;
    }
    var start = this._samplesStartTime;
    if (start == null) {
      DEBUG && console.debug("FillRateHelper: bail on deactivate with no start time");
      return;
    }
    if (this._info.sample_count < _minSampleCount) {
      this._resetData();
      return;
    }
    var total_time_spent = (0, import_performanceNow.default)() - start;
    var info2 = _objectSpread9(_objectSpread9({}, this._info), {}, {
      total_time_spent
    });
    if (DEBUG) {
      var derived = {
        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,
        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1e3),
        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,
        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1e3 / 60),
        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,
        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1e3 / 60),
        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent
      };
      for (var key3 in derived) {
        derived[key3] = Math.round(1e3 * derived[key3]) / 1e3;
      }
      console.debug("FillRateHelper deactivateAndFlush: ", {
        derived,
        info: info2
      });
    }
    _listeners.forEach(function(listener3) {
      return listener3(info2);
    });
    this._resetData();
  };
  _proto.computeBlankness = function computeBlankness(props, state, scrollMetrics) {
    if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
      return 0;
    }
    var dOffset = scrollMetrics.dOffset, offset = scrollMetrics.offset, velocity = scrollMetrics.velocity, visibleLength = scrollMetrics.visibleLength;
    this._info.sample_count++;
    this._info.pixels_sampled += Math.round(visibleLength);
    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
    var scrollSpeed = Math.round(Math.abs(velocity) * 1e3);
    var now = (0, import_performanceNow.default)();
    if (this._anyBlankStartTime != null) {
      this._info.any_blank_ms += now - this._anyBlankStartTime;
    }
    this._anyBlankStartTime = null;
    if (this._mostlyBlankStartTime != null) {
      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
    }
    this._mostlyBlankStartTime = null;
    var blankTop = 0;
    var first = state.first;
    var firstFrame = this._getFrameMetrics(first);
    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
      firstFrame = this._getFrameMetrics(first);
      first++;
    }
    if (firstFrame && first > 0) {
      blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
    }
    var blankBottom = 0;
    var last = state.last;
    var lastFrame = this._getFrameMetrics(last);
    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
      lastFrame = this._getFrameMetrics(last);
      last--;
    }
    if (lastFrame && last < props.getItemCount(props.data) - 1) {
      var bottomEdge = lastFrame.offset + lastFrame.length;
      blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
    }
    var pixels_blank = Math.round(blankTop + blankBottom);
    var blankness = pixels_blank / visibleLength;
    if (blankness > 0) {
      this._anyBlankStartTime = now;
      this._info.any_blank_speed_sum += scrollSpeed;
      this._info.any_blank_count++;
      this._info.pixels_blank += pixels_blank;
      if (blankness > 0.5) {
        this._mostlyBlankStartTime = now;
        this._info.mostly_blank_count++;
      }
    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
      this.deactivateAndFlush();
    }
    return blankness;
  };
  _proto.enabled = function enabled() {
    return this._enabled;
  };
  _proto._resetData = function _resetData() {
    this._anyBlankStartTime = null;
    this._info = new Info();
    this._mostlyBlankStartTime = null;
    this._samplesStartTime = null;
  };
  return FillRateHelper2;
}();
var FillRateHelper_default = FillRateHelper;

// node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
var import_prop_types = __toModule(require_prop_types());
var React11 = __toModule(require_react());

// node_modules/react-native-web/dist/exports/RefreshControl/index.js
var import_react7 = __toModule(require_react());
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
function RefreshControl(props) {
  var colors = props.colors, enabled = props.enabled, onRefresh = props.onRefresh, progressBackgroundColor = props.progressBackgroundColor, progressViewOffset = props.progressViewOffset, refreshing = props.refreshing, size = props.size, tintColor = props.tintColor, title = props.title, titleColor = props.titleColor, rest = _objectWithoutPropertiesLoose4(props, ["colors", "enabled", "onRefresh", "progressBackgroundColor", "progressViewOffset", "refreshing", "size", "tintColor", "title", "titleColor"]);
  return /* @__PURE__ */ import_react7.default.createElement(View_default, rest);
}
var RefreshControl_default = RefreshControl;

// node_modules/react-native-web/dist/exports/ScrollView/index.js
var import_create_react_class = __toModule(require_create_react_class());

// node_modules/react-native-web/dist/modules/TextInputState/index.js
var TextInputState = {
  _currentlyFocusedNode: null,
  currentlyFocusedField: function currentlyFocusedField() {
    if (document.activeElement !== this._currentlyFocusedNode) {
      this._currentlyFocusedNode = null;
    }
    return this._currentlyFocusedNode;
  },
  focusTextInput: function focusTextInput(textFieldNode) {
    if (textFieldNode !== null) {
      this._currentlyFocusedNode = textFieldNode;
      if (document.activeElement !== textFieldNode) {
        UIManager_default.focus(textFieldNode);
      }
    }
  },
  blurTextInput: function blurTextInput(textFieldNode) {
    if (textFieldNode !== null) {
      this._currentlyFocusedNode = null;
      if (document.activeElement === textFieldNode) {
        UIManager_default.blur(textFieldNode);
      }
    }
  }
};
var TextInputState_default = TextInputState;

// node_modules/react-native-web/dist/modules/dismissKeyboard/index.js
var dismissKeyboard = function dismissKeyboard2() {
  TextInputState_default.blurTextInput(TextInputState_default.currentlyFocusedField());
};
var dismissKeyboard_default = dismissKeyboard;

// node_modules/react-native-web/dist/exports/ScrollView/index.js
var import_invariant17 = __toModule(require_invariant());

// node_modules/react-native-web/dist/exports/Dimensions/index.js
var import_ExecutionEnvironment12 = __toModule(require_ExecutionEnvironment());
var import_invariant15 = __toModule(require_invariant());
var win = import_ExecutionEnvironment12.canUseDOM ? window : {
  devicePixelRatio: void 0,
  innerHeight: void 0,
  innerWidth: void 0,
  screen: {
    height: void 0,
    width: void 0
  }
};
var dimensions = {};
var listeners = {};
var Dimensions = /* @__PURE__ */ function() {
  function Dimensions2() {
  }
  Dimensions2.get = function get3(dimension) {
    (0, import_invariant15.default)(dimensions[dimension], "No dimension set for key " + dimension);
    return dimensions[dimension];
  };
  Dimensions2.set = function set3(initialDimensions) {
    if (initialDimensions) {
      if (import_ExecutionEnvironment12.canUseDOM) {
        (0, import_invariant15.default)(false, "Dimensions cannot be set in the browser");
      } else {
        dimensions.screen = initialDimensions.screen;
        dimensions.window = initialDimensions.window;
      }
    }
  };
  Dimensions2._update = function _update() {
    dimensions.window = {
      fontScale: 1,
      height: win.innerHeight,
      scale: win.devicePixelRatio || 1,
      width: win.innerWidth
    };
    dimensions.screen = {
      fontScale: 1,
      height: win.screen.height,
      scale: win.devicePixelRatio || 1,
      width: win.screen.width
    };
    if (Array.isArray(listeners["change"])) {
      listeners["change"].forEach(function(handler) {
        return handler(dimensions);
      });
    }
  };
  Dimensions2.addEventListener = function addEventListener3(type, handler) {
    listeners[type] = listeners[type] || [];
    listeners[type].push(handler);
  };
  Dimensions2.removeEventListener = function removeEventListener2(type, handler) {
    if (Array.isArray(listeners[type])) {
      listeners[type] = listeners[type].filter(function(_handler) {
        return _handler !== handler;
      });
    }
  };
  return Dimensions2;
}();
Dimensions._update();
if (import_ExecutionEnvironment12.canUseDOM) {
  window.addEventListener("resize", Dimensions._update, false);
}

// node_modules/react-native-web/dist/modules/ScrollResponder/index.js
var import_invariant16 = __toModule(require_invariant());

// node_modules/react-native-web/dist/exports/Platform/index.js
var Platform = {
  OS: "web",
  select: function select(obj) {
    return "web" in obj ? obj.web : obj.default;
  },
  get isTesting() {
    if (process.env.NODE_DEV === "test") {
      return true;
    }
    return false;
  }
};
var Platform_default = Platform;

// node_modules/react-native-web/dist/modules/ScrollResponder/index.js
var import_warning3 = __toModule(require_warning());
var emptyObject10 = {};
var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
var ScrollResponderMixin = {
  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
    return {
      isTouching: false,
      lastMomentumScrollBeginTime: 0,
      lastMomentumScrollEndTime: 0,
      observedScrollSinceBecomingResponder: false,
      becameResponderWhileAnimating: false
    };
  },
  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
    return this.state.isTouching;
  },
  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder() {
    return false;
  },
  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
    return this.scrollResponderIsAnimating();
  },
  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {
    (0, import_warning3.default)(false, "ScrollView doesn't take rejection well - scrolls anyway");
  },
  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
    return !this.state.observedScrollSinceBecomingResponder;
  },
  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
    var nativeEvent = e.nativeEvent;
    this.state.isTouching = nativeEvent.touches.length !== 0;
    this.props.onTouchEnd && this.props.onTouchEnd(e);
  },
  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
    this.props.onResponderRelease && this.props.onResponderRelease(e);
    var currentlyFocusedTextInput = TextInputState_default.currentlyFocusedField();
    if (!this.props.keyboardShouldPersistTaps && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
      TextInputState_default.blurTextInput(currentlyFocusedTextInput);
    }
  },
  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
    this.state.observedScrollSinceBecomingResponder = true;
    this.props.onScroll && this.props.onScroll(e);
  },
  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
    this.state.observedScrollSinceBecomingResponder = false;
    this.props.onResponderGrant && this.props.onResponderGrant(e);
    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
  },
  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
  },
  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
  },
  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
    this.state.lastMomentumScrollBeginTime = Date.now();
    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
  },
  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
    this.state.lastMomentumScrollEndTime = Date.now();
    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
  },
  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
    this.state.isTouching = true;
    this.props.onTouchStart && this.props.onTouchStart(e);
  },
  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
    this.props.onTouchMove && this.props.onTouchMove(e);
  },
  scrollResponderIsAnimating: function scrollResponderIsAnimating() {
    var now = Date.now();
    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
    return isAnimating;
  },
  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
    return this.getScrollableNode ? this.getScrollableNode() : findNodeHandle_default(this);
  },
  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
    if (typeof x === "number") {
      console.warn("`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.");
    } else {
      var _ref = x || emptyObject10;
      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }
    var node = this.scrollResponderGetScrollableNode();
    var left2 = x || 0;
    var top = y || 0;
    if (typeof node.scroll === "function") {
      node.scroll({
        top,
        left: left2,
        behavior: !animated ? "auto" : "smooth"
      });
    } else {
      node.scrollLeft = left2;
      node.scrollTop = top;
    }
  },
  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
    if (Platform_default.OS !== "ios") {
      (0, import_invariant16.default)("zoomToRect is not implemented");
    }
  },
  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
  },
  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
    this.additionalScrollOffset = additionalOffset || 0;
    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
    UIManager_default.measureLayout(nodeHandle, findNodeHandle_default(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
  },
  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left2, top, width, height) {
    var keyboardScreenY = Dimensions.get("window").height;
    if (this.keyboardWillOpenTo) {
      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
    }
    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;
    if (this.preventNegativeScrollOffset) {
      scrollOffsetY = Math.max(0, scrollOffsetY);
    }
    this.scrollResponderScrollTo({
      x: 0,
      y: scrollOffsetY,
      animated: true
    });
    this.additionalOffset = 0;
    this.preventNegativeScrollOffset = false;
  },
  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
    console.error("Error measuring text field: ", e);
  },
  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
    this.keyboardWillOpenTo = null;
    this.additionalScrollOffset = 0;
  },
  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
    this.keyboardWillOpenTo = e;
    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
  },
  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
  },
  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
    if (e) {
      this.keyboardWillOpenTo = e;
    }
    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
  },
  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
  }
};
var ScrollResponder = {
  Mixin: ScrollResponderMixin
};
var ScrollResponder_default = ScrollResponder;

// node_modules/react-native-web/dist/exports/ScrollView/ScrollViewBase.js
var React9 = __toModule(require_react());
var import_react8 = __toModule(require_react());
function _extends2() {
  _extends2 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
function normalizeScrollEvent(e) {
  return {
    nativeEvent: {
      contentOffset: {
        get x() {
          return e.target.scrollLeft;
        },
        get y() {
          return e.target.scrollTop;
        }
      },
      contentSize: {
        get height() {
          return e.target.scrollHeight;
        },
        get width() {
          return e.target.scrollWidth;
        }
      },
      layoutMeasurement: {
        get height() {
          return e.target.offsetHeight;
        },
        get width() {
          return e.target.offsetWidth;
        }
      }
    },
    timeStamp: Date.now()
  };
}
function shouldEmitScrollEvent(lastTick, eventThrottle) {
  var timeSinceLastTick = Date.now() - lastTick;
  return eventThrottle > 0 && timeSinceLastTick >= eventThrottle;
}
var ScrollViewBase = /* @__PURE__ */ (0, import_react8.forwardRef)(function(props, forwardedRef) {
  var onScroll = props.onScroll, onTouchMove = props.onTouchMove, onWheel = props.onWheel, _props$scrollEnabled = props.scrollEnabled, scrollEnabled = _props$scrollEnabled === void 0 ? true : _props$scrollEnabled, _props$scrollEventThr = props.scrollEventThrottle, scrollEventThrottle = _props$scrollEventThr === void 0 ? 0 : _props$scrollEventThr, showsHorizontalScrollIndicator = props.showsHorizontalScrollIndicator, showsVerticalScrollIndicator = props.showsVerticalScrollIndicator, style = props.style, rest = _objectWithoutPropertiesLoose5(props, ["onScroll", "onTouchMove", "onWheel", "scrollEnabled", "scrollEventThrottle", "showsHorizontalScrollIndicator", "showsVerticalScrollIndicator", "style"]);
  var scrollState = (0, import_react8.useRef)({
    isScrolling: false,
    scrollLastTick: 0
  });
  var scrollTimeout = (0, import_react8.useRef)(null);
  var scrollRef = (0, import_react8.useRef)(null);
  function createPreventableScrollHandler(handler) {
    return function(e) {
      if (scrollEnabled) {
        if (handler) {
          handler(e);
        }
      }
    };
  }
  function handleScroll(e) {
    e.stopPropagation();
    if (e.target === scrollRef.current) {
      e.persist();
      if (scrollTimeout.current != null) {
        clearTimeout(scrollTimeout.current);
      }
      scrollTimeout.current = setTimeout(function() {
        handleScrollEnd(e);
      }, 100);
      if (scrollState.current.isScrolling) {
        if (shouldEmitScrollEvent(scrollState.current.scrollLastTick, scrollEventThrottle)) {
          handleScrollTick(e);
        }
      } else {
        handleScrollStart(e);
      }
    }
  }
  function handleScrollStart(e) {
    scrollState.current.isScrolling = true;
    handleScrollTick(e);
  }
  function handleScrollTick(e) {
    scrollState.current.scrollLastTick = Date.now();
    if (onScroll) {
      onScroll(normalizeScrollEvent(e));
    }
  }
  function handleScrollEnd(e) {
    scrollState.current.isScrolling = false;
    if (onScroll) {
      onScroll(normalizeScrollEvent(e));
    }
  }
  var hideScrollbar = showsHorizontalScrollIndicator === false || showsVerticalScrollIndicator === false;
  return /* @__PURE__ */ React9.createElement(View_default, _extends2({}, rest, {
    onScroll: handleScroll,
    onTouchMove: createPreventableScrollHandler(onTouchMove),
    onWheel: createPreventableScrollHandler(onWheel),
    ref: useMergeRefs(scrollRef, forwardedRef),
    style: [style, !scrollEnabled && styles2.scrollDisabled, hideScrollbar && styles2.hideScrollbar]
  }));
});
var styles2 = StyleSheet_default2.create({
  scrollDisabled: {
    overflowX: "hidden",
    overflowY: "hidden",
    touchAction: "none"
  },
  hideScrollbar: {
    scrollbarWidth: "none"
  }
});
var ScrollViewBase_default = ScrollViewBase;

// node_modules/react-native-web/dist/exports/ScrollView/index.js
var import_react9 = __toModule(require_react());
function ownKeys10(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread10(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys10(Object(source), true).forEach(function(key3) {
        _defineProperty10(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys10(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty10(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function _extends3() {
  _extends3 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends3.apply(this, arguments);
}
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
var emptyObject11 = {};
var ScrollView = (0, import_create_react_class.default)({
  displayName: "ScrollView",
  mixins: [ScrollResponder_default.Mixin],
  getInitialState: function getInitialState() {
    return this.scrollResponderMixinGetInitialState();
  },
  flashScrollIndicators: function flashScrollIndicators() {
    this.scrollResponderFlashScrollIndicators();
  },
  setNativeProps: function setNativeProps2(props) {
    if (this._scrollNodeRef) {
      this._scrollNodeRef.setNativeProps(props);
    }
  },
  getScrollResponder: function getScrollResponder() {
    return this;
  },
  getScrollableNode: function getScrollableNode() {
    return this._scrollNodeRef;
  },
  getInnerViewNode: function getInnerViewNode() {
    return this._innerViewRef;
  },
  scrollTo: function scrollTo(y, x, animated) {
    if (typeof y === "number") {
      console.warn("`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.");
    } else {
      var _ref = y || emptyObject11;
      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }
    this.getScrollResponder().scrollResponderScrollTo({
      x: x || 0,
      y: y || 0,
      animated: animated !== false
    });
  },
  scrollToEnd: function scrollToEnd(options) {
    var animated = (options && options.animated) !== false;
    var horizontal = this.props.horizontal;
    var scrollResponder = this.getScrollResponder();
    var scrollResponderNode = scrollResponder.scrollResponderGetScrollableNode();
    var x = horizontal ? scrollResponderNode.scrollWidth : 0;
    var y = horizontal ? 0 : scrollResponderNode.scrollHeight;
    scrollResponder.scrollResponderScrollTo({
      x,
      y,
      animated
    });
  },
  render: function render2() {
    var _this$props = this.props, contentContainerStyle = _this$props.contentContainerStyle, horizontal = _this$props.horizontal, onContentSizeChange = _this$props.onContentSizeChange, refreshControl = _this$props.refreshControl, stickyHeaderIndices = _this$props.stickyHeaderIndices, pagingEnabled = _this$props.pagingEnabled, keyboardDismissMode = _this$props.keyboardDismissMode, onScroll = _this$props.onScroll, other = _objectWithoutPropertiesLoose6(_this$props, ["contentContainerStyle", "horizontal", "onContentSizeChange", "refreshControl", "stickyHeaderIndices", "pagingEnabled", "keyboardDismissMode", "onScroll"]);
    if (this.props.style) {
      var style = StyleSheet_default2.flatten(this.props.style);
      var childLayoutProps = ["alignItems", "justifyContent"].filter(function(prop) {
        return style && style[prop] !== void 0;
      });
      (0, import_invariant17.default)(childLayoutProps.length === 0, "ScrollView child layout (" + JSON.stringify(childLayoutProps) + ") must be applied through the contentContainerStyle prop.");
    }
    var contentSizeChangeProps = {};
    if (onContentSizeChange) {
      contentSizeChangeProps = {
        onLayout: this._handleContentOnLayout
      };
    }
    var hasStickyHeaderIndices = !horizontal && Array.isArray(stickyHeaderIndices);
    var children = hasStickyHeaderIndices || pagingEnabled ? import_react9.default.Children.map(this.props.children, function(child2, i) {
      var isSticky = hasStickyHeaderIndices && stickyHeaderIndices.indexOf(i) > -1;
      if (child2 != null && (isSticky || pagingEnabled)) {
        return /* @__PURE__ */ import_react9.default.createElement(View_default, {
          style: StyleSheet_default2.compose(isSticky && styles3.stickyHeader, pagingEnabled && styles3.pagingEnabledChild)
        }, child2);
      } else {
        return child2;
      }
    }) : this.props.children;
    var contentContainer = /* @__PURE__ */ import_react9.default.createElement(View_default, _extends3({}, contentSizeChangeProps, {
      children,
      collapsable: false,
      ref: this._setInnerViewRef,
      style: StyleSheet_default2.compose(horizontal && styles3.contentContainerHorizontal, contentContainerStyle)
    }));
    var baseStyle = horizontal ? styles3.baseHorizontal : styles3.baseVertical;
    var pagingEnabledStyle = horizontal ? styles3.pagingEnabledHorizontal : styles3.pagingEnabledVertical;
    var props = _objectSpread10(_objectSpread10({}, other), {}, {
      style: [baseStyle, pagingEnabled && pagingEnabledStyle, this.props.style],
      onTouchStart: this.scrollResponderHandleTouchStart,
      onTouchMove: this.scrollResponderHandleTouchMove,
      onTouchEnd: this.scrollResponderHandleTouchEnd,
      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
      onScroll: this._handleScroll,
      onResponderGrant: this.scrollResponderHandleResponderGrant,
      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
      onResponderTerminate: this.scrollResponderHandleTerminate,
      onResponderRelease: this.scrollResponderHandleResponderRelease,
      onResponderReject: this.scrollResponderHandleResponderReject
    });
    var ScrollViewClass = ScrollViewBase_default;
    (0, import_invariant17.default)(ScrollViewClass !== void 0, "ScrollViewClass must not be undefined");
    if (refreshControl) {
      return /* @__PURE__ */ import_react9.default.cloneElement(refreshControl, {
        style: props.style
      }, /* @__PURE__ */ import_react9.default.createElement(ScrollViewClass, _extends3({}, props, {
        ref: this._setScrollNodeRef,
        style: baseStyle
      }), contentContainer));
    }
    return /* @__PURE__ */ import_react9.default.createElement(ScrollViewClass, _extends3({}, props, {
      ref: this._setScrollNodeRef
    }), contentContainer);
  },
  _handleContentOnLayout: function _handleContentOnLayout(e) {
    var _e$nativeEvent$layout = e.nativeEvent.layout, width = _e$nativeEvent$layout.width, height = _e$nativeEvent$layout.height;
    this.props.onContentSizeChange(width, height);
  },
  _handleScroll: function _handleScroll(e) {
    if (true) {
      if (this.props.onScroll && this.props.scrollEventThrottle == null) {
        console.log("You specified `onScroll` on a <ScrollView> but not `scrollEventThrottle`. You will only receive one event. Using `16` you get all the events but be aware that it may cause frame drops, use a bigger number if you don't need as much precision.");
      }
    }
    if (this.props.keyboardDismissMode === "on-drag") {
      dismissKeyboard_default();
    }
    this.scrollResponderHandleScroll(e);
  },
  _setInnerViewRef: function _setInnerViewRef(component) {
    this._innerViewRef = component;
  },
  _setScrollNodeRef: function _setScrollNodeRef(component) {
    this._scrollNodeRef = component;
  }
});
var commonStyle = {
  flexGrow: 1,
  flexShrink: 1,
  transform: [{
    translateZ: 0
  }],
  WebkitOverflowScrolling: "touch"
};
var styles3 = StyleSheet_default2.create({
  baseVertical: _objectSpread10(_objectSpread10({}, commonStyle), {}, {
    flexDirection: "column",
    overflowX: "hidden",
    overflowY: "auto"
  }),
  baseHorizontal: _objectSpread10(_objectSpread10({}, commonStyle), {}, {
    flexDirection: "row",
    overflowX: "auto",
    overflowY: "hidden"
  }),
  contentContainerHorizontal: {
    flexDirection: "row"
  },
  stickyHeader: {
    position: "sticky",
    top: 0,
    zIndex: 10
  },
  pagingEnabledHorizontal: {
    scrollSnapType: "x mandatory"
  },
  pagingEnabledVertical: {
    scrollSnapType: "y mandatory"
  },
  pagingEnabledChild: {
    scrollSnapAlign: "start"
  }
});
var ScrollView_default = ScrollView;

// node_modules/react-native-web/dist/vendor/react-native/ViewabilityHelper/index.js
var import_invariant18 = __toModule(require_invariant());
"use strict";
function ownKeys11(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread11(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys11(Object(source), true).forEach(function(key3) {
        _defineProperty11(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys11(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty11(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function _createForOfIteratorHelperLoose2(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      return function() {
        if (i >= o.length)
          return {done: true};
        return {done: false, value: o[i++]};
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  it = o[Symbol.iterator]();
  return it.next.bind(it);
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var ViewabilityHelper = /* @__PURE__ */ function() {
  function ViewabilityHelper2(config) {
    if (config === void 0) {
      config = {
        viewAreaCoveragePercentThreshold: 0
      };
    }
    this._hasInteracted = false;
    this._timers = new Set();
    this._viewableIndices = [];
    this._viewableItems = new Map();
    this._config = config;
  }
  var _proto = ViewabilityHelper2.prototype;
  _proto.dispose = function dispose() {
    this._timers.forEach(clearTimeout);
  };
  _proto.computeViewableItems = function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
    var _this$_config = this._config, itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold, viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;
    var viewAreaMode = viewAreaCoveragePercentThreshold != null;
    var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
    (0, import_invariant18.default)(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), "Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold");
    var viewableIndices = [];
    if (itemCount === 0) {
      return viewableIndices;
    }
    var firstVisible = -1;
    var _ref = renderRange || {
      first: 0,
      last: itemCount - 1
    }, first = _ref.first, last = _ref.last;
    if (last >= itemCount) {
      console.warn("Invalid render range computing viewability " + JSON.stringify({
        renderRange,
        itemCount
      }));
      return [];
    }
    for (var idx = first; idx <= last; idx++) {
      var metrics = getFrameMetrics(idx);
      if (!metrics) {
        continue;
      }
      var top = metrics.offset - scrollOffset;
      var bottom = top + metrics.length;
      if (top < viewportHeight && bottom > 0) {
        firstVisible = idx;
        if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
          viewableIndices.push(idx);
        }
      } else if (firstVisible >= 0) {
        break;
      }
    }
    return viewableIndices;
  };
  _proto.onUpdate = function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
    var _this = this;
    if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
      return;
    }
    var viewableIndices = [];
    if (itemCount) {
      viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
    }
    if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function(v, ii) {
      return v === viewableIndices[ii];
    })) {
      return;
    }
    this._viewableIndices = viewableIndices;
    if (this._config.minimumViewTime) {
      var handle = setTimeout(function() {
        _this._timers.delete(handle);
        _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
      }, this._config.minimumViewTime);
      this._timers.add(handle);
    } else {
      this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
    }
  };
  _proto.resetViewableIndices = function resetViewableIndices() {
    this._viewableIndices = [];
  };
  _proto.recordInteraction = function recordInteraction() {
    this._hasInteracted = true;
  };
  _proto._onUpdateSync = function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
    var _this2 = this;
    viewableIndicesToCheck = viewableIndicesToCheck.filter(function(ii) {
      return _this2._viewableIndices.includes(ii);
    });
    var prevItems = this._viewableItems;
    var nextItems = new Map(viewableIndicesToCheck.map(function(ii) {
      var viewable2 = createViewToken(ii, true);
      return [viewable2.key, viewable2];
    }));
    var changed = [];
    for (var _iterator = _createForOfIteratorHelperLoose2(nextItems), _step; !(_step = _iterator()).done; ) {
      var _step$value = _step.value, key3 = _step$value[0], viewable = _step$value[1];
      if (!prevItems.has(key3)) {
        changed.push(viewable);
      }
    }
    for (var _iterator2 = _createForOfIteratorHelperLoose2(prevItems), _step2; !(_step2 = _iterator2()).done; ) {
      var _step2$value = _step2.value, _key = _step2$value[0], _viewable = _step2$value[1];
      if (!nextItems.has(_key)) {
        changed.push(_objectSpread11(_objectSpread11({}, _viewable), {}, {
          isViewable: false
        }));
      }
    }
    if (changed.length > 0) {
      this._viewableItems = nextItems;
      onViewableItemsChanged({
        viewableItems: Array.from(nextItems.values()),
        changed,
        viewabilityConfig: this._config
      });
    }
  };
  return ViewabilityHelper2;
}();
function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
  if (_isEntirelyVisible(top, bottom, viewportHeight)) {
    return true;
  } else {
    var pixels = _getPixelsVisible(top, bottom, viewportHeight);
    var percent3 = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
    return percent3 >= viewablePercentThreshold;
  }
}
function _getPixelsVisible(top, bottom, viewportHeight) {
  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
  return Math.max(0, visibleHeight);
}
function _isEntirelyVisible(top, bottom, viewportHeight) {
  return top >= 0 && bottom <= viewportHeight && bottom > top;
}
var ViewabilityHelper_default = ViewabilityHelper;

// node_modules/react-native-web/dist/vendor/react-native/infoLog/index.js
"use strict";
function infoLog() {
  var _console;
  return (_console = console).log.apply(_console, arguments);
}
var infoLog_default = infoLog;

// node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
var import_invariant20 = __toModule(require_invariant());
var import_warning4 = __toModule(require_warning());

// node_modules/react-native-web/dist/vendor/react-native/VirtualizeUtils/index.js
var import_invariant19 = __toModule(require_invariant());
"use strict";
function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
  var out = [];
  var outLength = 0;
  for (var ii = 0; ii < itemCount; ii++) {
    var frame = getFrameMetrics(ii);
    var trailingOffset = frame.offset + frame.length;
    for (var kk = 0; kk < offsets.length; kk++) {
      if (out[kk] == null && trailingOffset >= offsets[kk]) {
        out[kk] = ii;
        outLength++;
        if (kk === offsets.length - 1) {
          (0, import_invariant19.default)(outLength === offsets.length, "bad offsets input, should be in increasing order: %s", JSON.stringify(offsets));
          return out;
        }
      }
    }
  }
  return out;
}
function newRangeCount(prev, next) {
  return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
}
function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
  var data2 = props.data, getItemCount = props.getItemCount, maxToRenderPerBatch = props.maxToRenderPerBatch, windowSize = props.windowSize;
  var itemCount = getItemCount(data2);
  if (itemCount === 0) {
    return prev;
  }
  var offset = scrollMetrics.offset, velocity = scrollMetrics.velocity, visibleLength = scrollMetrics.visibleLength;
  var visibleBegin = Math.max(0, offset);
  var visibleEnd = visibleBegin + visibleLength;
  var overscanLength = (windowSize - 1) * visibleLength;
  var leadFactor = 0.5;
  var fillPreference = velocity > 1 ? "after" : velocity < -1 ? "before" : "none";
  var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
  var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
  var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;
  if (lastItemOffset < overscanBegin) {
    return {
      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
      last: itemCount - 1
    };
  }
  var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox), overscanFirst = _elementsThatOverlapO[0], first = _elementsThatOverlapO[1], last = _elementsThatOverlapO[2], overscanLast = _elementsThatOverlapO[3];
  overscanFirst = overscanFirst == null ? 0 : overscanFirst;
  first = first == null ? Math.max(0, overscanFirst) : first;
  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
  last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
  var visible = {
    first,
    last
  };
  var newCellCount = newRangeCount(prev, visible);
  while (true) {
    if (first <= overscanFirst && last >= overscanLast) {
      break;
    }
    var maxNewCells = newCellCount >= maxToRenderPerBatch;
    var firstWillAddMore = first <= prev.first || first > prev.last;
    var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
    var lastWillAddMore = last >= prev.last || last < prev.first;
    var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);
    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
      break;
    }
    if (firstShouldIncrement && !(fillPreference === "after" && lastShouldIncrement && lastWillAddMore)) {
      if (firstWillAddMore) {
        newCellCount++;
      }
      first--;
    }
    if (lastShouldIncrement && !(fillPreference === "before" && firstShouldIncrement && firstWillAddMore)) {
      if (lastWillAddMore) {
        newCellCount++;
      }
      last++;
    }
  }
  if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
    throw new Error("Bad window calculation " + JSON.stringify({
      first,
      last,
      itemCount,
      overscanFirst,
      overscanLast,
      visible
    }));
  }
  return {
    first,
    last
  };
}

// node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
"use strict";
function _createForOfIteratorHelperLoose3(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      return function() {
        if (i >= o.length)
          return {done: true};
        return {done: false, value: o[i++]};
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  it = o[Symbol.iterator]();
  return it.next.bind(it);
}
function _unsupportedIterableToArray3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray3(o, minLen);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _extends4() {
  _extends4 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends4.apply(this, arguments);
}
function ownKeys12(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread12(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys12(Object(source), true).forEach(function(key3) {
        _defineProperty12(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys12(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty12(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _inheritsLoose22(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf22(subClass, superClass);
}
function _setPrototypeOf22(o, p) {
  _setPrototypeOf22 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf22(o, p);
}
var flattenStyle3 = StyleSheet_default2.flatten;
var __DEV__4 = true;
var _usedIndexForKey = false;
var _keylessItemComponentName = "";
var VirtualizedList = /* @__PURE__ */ function(_React$PureComponent) {
  _inheritsLoose22(VirtualizedList2, _React$PureComponent);
  var _proto = VirtualizedList2.prototype;
  _proto.scrollToEnd = function scrollToEnd2(params) {
    var animated = params ? params.animated : true;
    var veryLast = this.props.getItemCount(this.props.data) - 1;
    var frame = this._getFrameMetricsApprox(veryLast);
    var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
    this._scrollRef.scrollTo(this.props.horizontal ? {
      x: offset,
      animated
    } : {
      y: offset,
      animated
    });
  };
  _proto.scrollToIndex = function scrollToIndex(params) {
    var _this$props = this.props, data2 = _this$props.data, horizontal = _this$props.horizontal, getItemCount = _this$props.getItemCount, getItemLayout = _this$props.getItemLayout, onScrollToIndexFailed = _this$props.onScrollToIndexFailed;
    var animated = params.animated, index = params.index, viewOffset = params.viewOffset, viewPosition = params.viewPosition;
    (0, import_invariant20.default)(index >= 0 && index < getItemCount(data2), "scrollToIndex out of range: " + index + " vs " + (getItemCount(data2) - 1));
    if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
      (0, import_invariant20.default)(!!onScrollToIndexFailed, "scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, otherwise there is no way to know the location of offscreen indices or handle failures.");
      onScrollToIndexFailed({
        averageItemLength: this._averageCellLength,
        highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
        index
      });
      return;
    }
    var frame = this._getFrameMetricsApprox(index);
    var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
    this._scrollRef.scrollTo(horizontal ? {
      x: offset,
      animated
    } : {
      y: offset,
      animated
    });
  };
  _proto.scrollToItem = function scrollToItem(params) {
    var item = params.item;
    var _this$props2 = this.props, data2 = _this$props2.data, getItem = _this$props2.getItem, getItemCount = _this$props2.getItemCount;
    var itemCount = getItemCount(data2);
    for (var _index = 0; _index < itemCount; _index++) {
      if (getItem(data2, _index) === item) {
        this.scrollToIndex(_objectSpread12(_objectSpread12({}, params), {}, {
          index: _index
        }));
        break;
      }
    }
  };
  _proto.scrollToOffset = function scrollToOffset(params) {
    var animated = params.animated, offset = params.offset;
    this._scrollRef.scrollTo(this.props.horizontal ? {
      x: offset,
      animated
    } : {
      y: offset,
      animated
    });
  };
  _proto.recordInteraction = function recordInteraction() {
    this._nestedChildLists.forEach(function(childList) {
      childList.ref && childList.ref.recordInteraction();
    });
    this._viewabilityTuples.forEach(function(t) {
      t.viewabilityHelper.recordInteraction();
    });
    this._updateViewableItems(this.props.data);
  };
  _proto.flashScrollIndicators = function flashScrollIndicators2() {
    this._scrollRef.flashScrollIndicators();
  };
  _proto.getScrollResponder = function getScrollResponder2() {
    if (this._scrollRef && this._scrollRef.getScrollResponder) {
      return this._scrollRef.getScrollResponder();
    }
  };
  _proto.getScrollableNode = function getScrollableNode2() {
    if (this._scrollRef && this._scrollRef.getScrollableNode) {
      return this._scrollRef.getScrollableNode();
    } else {
      return findNodeHandle_default(this._scrollRef);
    }
  };
  _proto.getScrollRef = function getScrollRef() {
    if (this._scrollRef && this._scrollRef.getScrollRef) {
      return this._scrollRef.getScrollRef();
    } else {
      return this._scrollRef;
    }
  };
  _proto.setNativeProps = function setNativeProps3(props) {
    if (this._scrollRef) {
      this._scrollRef.setNativeProps(props);
    }
  };
  _proto.getChildContext = function getChildContext() {
    return {
      virtualizedList: {
        getScrollMetrics: this._getScrollMetrics,
        horizontal: this.props.horizontal,
        getOutermostParentListRef: this._getOutermostParentListRef,
        getNestedChildState: this._getNestedChildState,
        registerAsNestedChild: this._registerAsNestedChild,
        unregisterAsNestedChild: this._unregisterAsNestedChild
      }
    };
  };
  _proto._getCellKey = function _getCellKey() {
    return this.context.virtualizedCell && this.context.virtualizedCell.cellKey || "rootList";
  };
  _proto.hasMore = function hasMore() {
    return this._hasMore;
  };
  function VirtualizedList2(_props, context) {
    var _this;
    _this = _React$PureComponent.call(this, _props, context) || this;
    _this._getScrollMetrics = function() {
      return _this._scrollMetrics;
    };
    _this._getOutermostParentListRef = function() {
      if (_this._isNestedWithSameOrientation()) {
        return _this.context.virtualizedList.getOutermostParentListRef();
      } else {
        return _assertThisInitialized(_this);
      }
    };
    _this._getNestedChildState = function(key3) {
      var existingChildData = _this._nestedChildLists.get(key3);
      return existingChildData && existingChildData.state;
    };
    _this._registerAsNestedChild = function(childList) {
      var childListsInCell = _this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
      childListsInCell.add(childList.key);
      _this._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);
      var existingChildData = _this._nestedChildLists.get(childList.key);
      if (existingChildData && existingChildData.ref !== null) {
        console.error("A VirtualizedList contains a cell which itself contains more than one VirtualizedList of the same orientation as the parent list. You must pass a unique listKey prop to each sibling list.");
      }
      _this._nestedChildLists.set(childList.key, {
        ref: childList.ref,
        state: null
      });
      if (_this._hasInteracted) {
        childList.ref.recordInteraction();
      }
    };
    _this._unregisterAsNestedChild = function(childList) {
      _this._nestedChildLists.set(childList.key, {
        ref: null,
        state: childList.state
      });
    };
    _this._onUpdateSeparators = function(keys, newProps) {
      keys.forEach(function(key3) {
        var ref = key3 != null && _this._cellRefs[key3];
        ref && ref.updateSeparatorProps(newProps);
      });
    };
    _this._averageCellLength = 0;
    _this._cellKeysToChildListKeys = new Map();
    _this._cellRefs = {};
    _this._frames = {};
    _this._footerLength = 0;
    _this._hasDataChangedSinceEndReached = true;
    _this._hasDoneInitialScroll = false;
    _this._hasInteracted = false;
    _this._hasMore = false;
    _this._hasWarned = {};
    _this._headerLength = 0;
    _this._hiPriInProgress = false;
    _this._highestMeasuredFrameIndex = 0;
    _this._indicesToKeys = new Map();
    _this._nestedChildLists = new Map();
    _this._offsetFromParentVirtualizedList = 0;
    _this._prevParentOffset = 0;
    _this._scrollMetrics = {
      contentLength: 0,
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0
    };
    _this._scrollRef = null;
    _this._sentEndForContentLength = 0;
    _this._totalCellLength = 0;
    _this._totalCellsMeasured = 0;
    _this._viewabilityTuples = [];
    _this._captureScrollRef = function(ref) {
      _this._scrollRef = ref;
    };
    _this._defaultRenderScrollComponent = function(props) {
      var onRefresh = props.onRefresh;
      if (_this._isNestedWithSameOrientation()) {
        return /* @__PURE__ */ React11.createElement(View_default, props);
      } else if (onRefresh) {
        (0, import_invariant20.default)(typeof props.refreshing === "boolean", "`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `" + JSON.stringify(props.refreshing) + "`");
        return /* @__PURE__ */ React11.createElement(ScrollView_default, _extends4({}, props, {
          refreshControl: props.refreshControl == null ? /* @__PURE__ */ React11.createElement(RefreshControl_default, {
            refreshing: props.refreshing,
            onRefresh,
            progressViewOffset: props.progressViewOffset
          }) : props.refreshControl
        }));
      } else {
        return /* @__PURE__ */ React11.createElement(ScrollView_default, props);
      }
    };
    _this._onCellUnmount = function(cellKey) {
      var curr = _this._frames[cellKey];
      if (curr) {
        _this._frames[cellKey] = _objectSpread12(_objectSpread12({}, curr), {}, {
          inLayout: false
        });
      }
    };
    _this._onLayout = function(e) {
      if (_this._isNestedWithSameOrientation()) {
        _this.measureLayoutRelativeToContainingList();
      } else {
        _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
      }
      _this.props.onLayout && _this.props.onLayout(e);
      _this._scheduleCellsToRenderUpdate();
      _this._maybeCallOnEndReached();
    };
    _this._onLayoutEmpty = function(e) {
      _this.props.onLayout && _this.props.onLayout(e);
    };
    _this._onLayoutFooter = function(e) {
      _this._footerLength = _this._selectLength(e.nativeEvent.layout);
    };
    _this._onLayoutHeader = function(e) {
      _this._headerLength = _this._selectLength(e.nativeEvent.layout);
    };
    _this._onContentSizeChange = function(width, height) {
      if (width > 0 && height > 0 && _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 && !_this._hasDoneInitialScroll) {
        _this.scrollToIndex({
          animated: false,
          index: _this.props.initialScrollIndex
        });
        _this._hasDoneInitialScroll = true;
      }
      if (_this.props.onContentSizeChange) {
        _this.props.onContentSizeChange(width, height);
      }
      _this._scrollMetrics.contentLength = _this._selectLength({
        height,
        width
      });
      _this._scheduleCellsToRenderUpdate();
      _this._maybeCallOnEndReached();
    };
    _this._convertParentScrollMetrics = function(metrics) {
      var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
      var visibleLength = metrics.visibleLength;
      var dOffset = offset - _this._scrollMetrics.offset;
      var contentLength = _this._scrollMetrics.contentLength;
      return {
        visibleLength,
        contentLength,
        offset,
        dOffset
      };
    };
    _this._onScroll = function(e) {
      _this._nestedChildLists.forEach(function(childList) {
        childList.ref && childList.ref._onScroll(e);
      });
      if (_this.props.onScroll) {
        _this.props.onScroll(e);
      }
      var timestamp = e.timeStamp;
      var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);
      var contentLength = _this._selectLength(e.nativeEvent.contentSize);
      var offset = _this._selectOffset(e.nativeEvent.contentOffset);
      var dOffset = offset - _this._scrollMetrics.offset;
      if (_this._isNestedWithSameOrientation()) {
        if (_this._scrollMetrics.contentLength === 0) {
          return;
        }
        var _this$_convertParentS = _this._convertParentScrollMetrics({
          visibleLength,
          offset
        });
        visibleLength = _this$_convertParentS.visibleLength;
        contentLength = _this$_convertParentS.contentLength;
        offset = _this$_convertParentS.offset;
        dOffset = _this$_convertParentS.dOffset;
      }
      var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
      var velocity = dOffset / dt;
      if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
        infoLog_default("VirtualizedList: You have a large list that is slow to update - make sure your renderItem function renders components that follow React performance best practices like PureComponent, shouldComponentUpdate, etc.", {
          dt,
          prevDt: _this._scrollMetrics.dt,
          contentLength
        });
        _this._hasWarned.perf = true;
      }
      _this._scrollMetrics = {
        contentLength,
        dt,
        dOffset,
        offset,
        timestamp,
        velocity,
        visibleLength
      };
      _this._updateViewableItems(_this.props.data);
      if (!_this.props) {
        return;
      }
      _this._maybeCallOnEndReached();
      if (velocity !== 0) {
        _this._fillRateHelper.activate();
      }
      _this._computeBlankness();
      _this._scheduleCellsToRenderUpdate();
    };
    _this._onScrollBeginDrag = function(e) {
      _this._nestedChildLists.forEach(function(childList) {
        childList.ref && childList.ref._onScrollBeginDrag(e);
      });
      _this._viewabilityTuples.forEach(function(tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });
      _this._hasInteracted = true;
      _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
    };
    _this._onScrollEndDrag = function(e) {
      var velocity = e.nativeEvent.velocity;
      if (velocity) {
        _this._scrollMetrics.velocity = _this._selectOffset(velocity);
      }
      _this._computeBlankness();
      _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
    };
    _this._onMomentumScrollEnd = function(e) {
      _this._scrollMetrics.velocity = 0;
      _this._computeBlankness();
      _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
    };
    _this._updateCellsToRender = function() {
      var _this$props3 = _this.props, data2 = _this$props3.data, getItemCount = _this$props3.getItemCount, onEndReachedThreshold = _this$props3.onEndReachedThreshold;
      var isVirtualizationDisabled = _this._isVirtualizationDisabled();
      _this._updateViewableItems(data2);
      if (!data2) {
        return;
      }
      _this.setState(function(state) {
        var newState;
        if (!isVirtualizationDisabled) {
          if (_this._scrollMetrics.visibleLength) {
            if (!_this.props.initialScrollIndex || _this._scrollMetrics.offset) {
              newState = computeWindowedRenderLimits(_this.props, state, _this._getFrameMetricsApprox, _this._scrollMetrics);
            }
          }
        } else {
          var _this$_scrollMetrics = _this._scrollMetrics, contentLength = _this$_scrollMetrics.contentLength, offset = _this$_scrollMetrics.offset, visibleLength = _this$_scrollMetrics.visibleLength;
          var distanceFromEnd = contentLength - visibleLength - offset;
          var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? _this.props.maxToRenderPerBatch : 0;
          newState = {
            first: 0,
            last: Math.min(state.last + renderAhead, getItemCount(data2) - 1)
          };
        }
        if (newState && _this._nestedChildLists.size > 0) {
          var newFirst = newState.first;
          var newLast = newState.last;
          for (var ii = newFirst; ii <= newLast; ii++) {
            var cellKeyForIndex = _this._indicesToKeys.get(ii);
            var childListKeys = cellKeyForIndex && _this._cellKeysToChildListKeys.get(cellKeyForIndex);
            if (!childListKeys) {
              continue;
            }
            var someChildHasMore = false;
            for (var _iterator = _createForOfIteratorHelperLoose3(childListKeys), _step; !(_step = _iterator()).done; ) {
              var childKey = _step.value;
              var childList = _this._nestedChildLists.get(childKey);
              if (childList && childList.ref && childList.ref.hasMore()) {
                someChildHasMore = true;
                break;
              }
            }
            if (someChildHasMore) {
              newState.last = ii;
              break;
            }
          }
        }
        return newState;
      });
    };
    _this._createViewToken = function(index, isViewable) {
      var _this$props4 = _this.props, data2 = _this$props4.data, getItem = _this$props4.getItem, keyExtractor2 = _this$props4.keyExtractor;
      var item = getItem(data2, index);
      return {
        index,
        item,
        key: keyExtractor2(item, index),
        isViewable
      };
    };
    _this._getFrameMetricsApprox = function(index) {
      var frame = _this._getFrameMetrics(index);
      if (frame && frame.index === index) {
        return frame;
      } else {
        var getItemLayout = _this.props.getItemLayout;
        (0, import_invariant20.default)(!getItemLayout, "Should not have to estimate frames when a measurement metrics function is provided");
        return {
          length: _this._averageCellLength,
          offset: _this._averageCellLength * index
        };
      }
    };
    _this._getFrameMetrics = function(index) {
      var _this$props5 = _this.props, data2 = _this$props5.data, getItem = _this$props5.getItem, getItemCount = _this$props5.getItemCount, getItemLayout = _this$props5.getItemLayout, keyExtractor2 = _this$props5.keyExtractor;
      (0, import_invariant20.default)(getItemCount(data2) > index, "Tried to get frame for out of range index " + index);
      var item = getItem(data2, index);
      var frame = item && _this._frames[keyExtractor2(item, index)];
      if (!frame || frame.index !== index) {
        if (getItemLayout) {
          frame = getItemLayout(data2, index);
          if (__DEV__4) {
            var frameType = import_prop_types.default.shape({
              length: import_prop_types.default.number.isRequired,
              offset: import_prop_types.default.number.isRequired,
              index: import_prop_types.default.number.isRequired
            }).isRequired;
            import_prop_types.default.checkPropTypes({
              frame: frameType
            }, {
              frame
            }, "frame", "VirtualizedList.getItemLayout");
          }
        }
      }
      return frame;
    };
    (0, import_invariant20.default)(!_props.onScroll || !_props.onScroll.__isNative, "Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent to support native onScroll events with useNativeDriver");
    (0, import_invariant20.default)(_props.windowSize > 0, "VirtualizedList: The windowSize prop must be present and set to a value greater than 0.");
    _this._fillRateHelper = new FillRateHelper_default(_this._getFrameMetrics);
    _this._updateCellsToRenderBatcher = new Batchinator_default(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);
    if (_this.props.viewabilityConfigCallbackPairs) {
      _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function(pair) {
        return {
          viewabilityHelper: new ViewabilityHelper_default(pair.viewabilityConfig),
          onViewableItemsChanged: pair.onViewableItemsChanged
        };
      });
    } else if (_this.props.onViewableItemsChanged) {
      _this._viewabilityTuples.push({
        viewabilityHelper: new ViewabilityHelper_default(_this.props.viewabilityConfig),
        onViewableItemsChanged: _this.props.onViewableItemsChanged
      });
    }
    var initialState2 = {
      first: _this.props.initialScrollIndex || 0,
      last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
    };
    if (_this._isNestedWithSameOrientation()) {
      var storedState = _this.context.virtualizedList.getNestedChildState(_this.props.listKey || _this._getCellKey());
      if (storedState) {
        initialState2 = storedState;
        _this.state = storedState;
        _this._frames = storedState.frames;
      }
    }
    _this.state = initialState2;
    return _this;
  }
  _proto.componentDidMount = function componentDidMount() {
    if (this._isNestedWithSameOrientation()) {
      this.context.virtualizedList.registerAsNestedChild({
        cellKey: this._getCellKey(),
        key: this.props.listKey || this._getCellKey(),
        ref: this
      });
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this._isNestedWithSameOrientation()) {
      this.context.virtualizedList.unregisterAsNestedChild({
        key: this.props.listKey || this._getCellKey(),
        state: {
          first: this.state.first,
          last: this.state.last,
          frames: this._frames
        }
      });
    }
    this._updateViewableItems(null);
    this._updateCellsToRenderBatcher.dispose({
      abort: true
    });
    this._viewabilityTuples.forEach(function(tuple) {
      tuple.viewabilityHelper.dispose();
    });
    this._fillRateHelper.deactivateAndFlush();
  };
  VirtualizedList2.getDerivedStateFromProps = function getDerivedStateFromProps(newProps, prevState) {
    var data2 = newProps.data, getItemCount = newProps.getItemCount, maxToRenderPerBatch = newProps.maxToRenderPerBatch;
    return {
      first: Math.max(0, Math.min(prevState.first, getItemCount(data2) - 1 - maxToRenderPerBatch)),
      last: Math.max(0, Math.min(prevState.last, getItemCount(data2) - 1))
    };
  };
  _proto._pushCells = function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
    var _this2 = this;
    var _this$props6 = this.props, CellRendererComponent = _this$props6.CellRendererComponent, ItemSeparatorComponent = _this$props6.ItemSeparatorComponent, data2 = _this$props6.data, getItem = _this$props6.getItem, getItemCount = _this$props6.getItemCount, horizontal = _this$props6.horizontal, keyExtractor2 = _this$props6.keyExtractor;
    var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
    var end = getItemCount(data2) - 1;
    var prevCellKey;
    last = Math.min(end, last);
    var _loop = function _loop2(ii2) {
      var item = getItem(data2, ii2);
      var key3 = keyExtractor2(item, ii2);
      _this2._indicesToKeys.set(ii2, key3);
      if (stickyIndicesFromProps.has(ii2 + stickyOffset)) {
        stickyHeaderIndices.push(cells.length);
      }
      cells.push(/* @__PURE__ */ React11.createElement(CellRenderer, {
        CellRendererComponent,
        ItemSeparatorComponent: ii2 < end ? ItemSeparatorComponent : void 0,
        cellKey: key3,
        fillRateHelper: _this2._fillRateHelper,
        horizontal,
        index: ii2,
        inversionStyle,
        item,
        key: key3,
        prevCellKey,
        onUpdateSeparators: _this2._onUpdateSeparators,
        onLayout: function onLayout(e) {
          return _this2._onCellLayout(e, key3, ii2);
        },
        onUnmount: _this2._onCellUnmount,
        parentProps: _this2.props,
        ref: function ref(_ref) {
          _this2._cellRefs[key3] = _ref;
        }
      }));
      prevCellKey = key3;
    };
    for (var ii = first; ii <= last; ii++) {
      _loop(ii);
    }
  };
  _proto._isVirtualizationDisabled = function _isVirtualizationDisabled() {
    return this.props.disableVirtualization || false;
  };
  _proto._isNestedWithSameOrientation = function _isNestedWithSameOrientation() {
    var nestedContext = this.context.virtualizedList;
    return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
  };
  _proto.render = function render3() {
    var _this3 = this;
    if (__DEV__4) {
      var flatStyles = flattenStyle3(this.props.contentContainerStyle);
      (0, import_warning4.default)(flatStyles == null || flatStyles.flexWrap !== "wrap", "`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.Consider using `numColumns` with `FlatList` instead.");
    }
    var _this$props7 = this.props, ListEmptyComponent = _this$props7.ListEmptyComponent, ListFooterComponent = _this$props7.ListFooterComponent, ListHeaderComponent = _this$props7.ListHeaderComponent;
    var _this$props8 = this.props, data2 = _this$props8.data, horizontal = _this$props8.horizontal;
    var isVirtualizationDisabled = this._isVirtualizationDisabled();
    var inversionStyle = this.props.inverted ? this.props.horizontal ? styles4.horizontallyInverted : styles4.verticallyInverted : null;
    var cells = [];
    var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
    var stickyHeaderIndices = [];
    if (ListHeaderComponent) {
      if (stickyIndicesFromProps.has(0)) {
        stickyHeaderIndices.push(0);
      }
      var element = /* @__PURE__ */ React11.isValidElement(ListHeaderComponent) ? ListHeaderComponent : /* @__PURE__ */ React11.createElement(ListHeaderComponent, null);
      cells.push(/* @__PURE__ */ React11.createElement(VirtualizedCellWrapper, {
        cellKey: this._getCellKey() + "-header",
        key: "$header"
      }, /* @__PURE__ */ React11.createElement(View_default, {
        onLayout: this._onLayoutHeader,
        style: StyleSheet_default2.compose(inversionStyle, this.props.ListHeaderComponentStyle)
      }, element)));
    }
    var itemCount = this.props.getItemCount(data2);
    if (itemCount > 0) {
      _usedIndexForKey = false;
      _keylessItemComponentName = "";
      var spacerKey = !horizontal ? "height" : "width";
      var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
      var _this$state = this.state, first = _this$state.first, last = _this$state.last;
      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);
      var firstAfterInitial = Math.max(lastInitialIndex + 1, first);
      if (!isVirtualizationDisabled && first > lastInitialIndex + 1) {
        var insertedStickySpacer = false;
        if (stickyIndicesFromProps.size > 0) {
          var stickyOffset = ListHeaderComponent ? 1 : 0;
          for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
            if (stickyIndicesFromProps.has(ii + stickyOffset)) {
              var _ref2, _ref3;
              var initBlock = this._getFrameMetricsApprox(lastInitialIndex);
              var stickyBlock = this._getFrameMetricsApprox(ii);
              var leadSpace = stickyBlock.offset - initBlock.offset - (this.props.initialScrollIndex ? 0 : initBlock.length);
              cells.push(/* @__PURE__ */ React11.createElement(View_default, {
                key: "$sticky_lead",
                style: (_ref2 = {}, _ref2[spacerKey] = leadSpace, _ref2)
              }));
              this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);
              var trailSpace = this._getFrameMetricsApprox(first).offset - (stickyBlock.offset + stickyBlock.length);
              cells.push(/* @__PURE__ */ React11.createElement(View_default, {
                key: "$sticky_trail",
                style: (_ref3 = {}, _ref3[spacerKey] = trailSpace, _ref3)
              }));
              insertedStickySpacer = true;
              break;
            }
          }
        }
        if (!insertedStickySpacer) {
          var _ref4;
          var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);
          var firstSpace = this._getFrameMetricsApprox(first).offset - (_initBlock.offset + _initBlock.length);
          cells.push(/* @__PURE__ */ React11.createElement(View_default, {
            key: "$lead_spacer",
            style: (_ref4 = {}, _ref4[spacerKey] = firstSpace, _ref4)
          }));
        }
      }
      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, last, inversionStyle);
      if (!this._hasWarned.keys && _usedIndexForKey) {
        console.warn("VirtualizedList: missing keys for items, make sure to specify a key or id property on each item or provide a custom keyExtractor.", _keylessItemComponentName);
        this._hasWarned.keys = true;
      }
      if (!isVirtualizationDisabled && last < itemCount - 1) {
        var _ref5;
        var lastFrame = this._getFrameMetricsApprox(last);
        var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);
        var endFrame = this._getFrameMetricsApprox(end);
        var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
        cells.push(/* @__PURE__ */ React11.createElement(View_default, {
          key: "$tail_spacer",
          style: (_ref5 = {}, _ref5[spacerKey] = tailSpacerLength, _ref5)
        }));
      }
    } else if (ListEmptyComponent) {
      var _element = /* @__PURE__ */ React11.isValidElement(ListEmptyComponent) ? ListEmptyComponent : /* @__PURE__ */ React11.createElement(ListEmptyComponent, null);
      cells.push(/* @__PURE__ */ React11.cloneElement(_element, {
        key: "$empty",
        onLayout: function onLayout(event4) {
          _this3._onLayoutEmpty(event4);
          if (_element.props.onLayout) {
            _element.props.onLayout(event4);
          }
        },
        style: StyleSheet_default2.compose(inversionStyle, _element.props.style)
      }));
    }
    if (ListFooterComponent) {
      var _element2 = /* @__PURE__ */ React11.isValidElement(ListFooterComponent) ? ListFooterComponent : /* @__PURE__ */ React11.createElement(ListFooterComponent, null);
      cells.push(/* @__PURE__ */ React11.createElement(VirtualizedCellWrapper, {
        cellKey: this._getCellKey() + "-footer",
        key: "$footer"
      }, /* @__PURE__ */ React11.createElement(View_default, {
        onLayout: this._onLayoutFooter,
        style: StyleSheet_default2.compose(inversionStyle, this.props.ListFooterComponentStyle)
      }, _element2)));
    }
    var scrollProps = _objectSpread12(_objectSpread12({}, this.props), {}, {
      onContentSizeChange: this._onContentSizeChange,
      onLayout: this._onLayout,
      onScroll: this._onScroll,
      onScrollBeginDrag: this._onScrollBeginDrag,
      onScrollEndDrag: this._onScrollEndDrag,
      onMomentumScrollEnd: this._onMomentumScrollEnd,
      scrollEventThrottle: this.props.scrollEventThrottle,
      invertStickyHeaders: this.props.invertStickyHeaders !== void 0 ? this.props.invertStickyHeaders : this.props.inverted,
      stickyHeaderIndices
    });
    if (inversionStyle) {
      scrollProps.style = [inversionStyle, this.props.style];
    }
    this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
    var ret = /* @__PURE__ */ React11.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
      ref: this._captureScrollRef
    }, cells);
    if (this.props.debug) {
      return /* @__PURE__ */ React11.createElement(View_default, {
        style: styles4.debug
      }, ret, this._renderDebugOverlay());
    } else {
      return ret;
    }
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props9 = this.props, data2 = _this$props9.data, extraData = _this$props9.extraData;
    if (data2 !== prevProps.data || extraData !== prevProps.extraData) {
      this._hasDataChangedSinceEndReached = true;
      this._viewabilityTuples.forEach(function(tuple) {
        tuple.viewabilityHelper.resetViewableIndices();
      });
    }
    var hiPriInProgress = this._hiPriInProgress;
    this._scheduleCellsToRenderUpdate();
    if (hiPriInProgress) {
      this._hiPriInProgress = false;
    }
  };
  _proto._computeBlankness = function _computeBlankness() {
    this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
  };
  _proto._onCellLayout = function _onCellLayout(e, cellKey, index) {
    var layout = e.nativeEvent.layout;
    var next = {
      offset: this._selectOffset(layout),
      length: this._selectLength(layout),
      index,
      inLayout: true
    };
    var curr = this._frames[cellKey];
    if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
      this._totalCellLength += next.length - (curr ? curr.length : 0);
      this._totalCellsMeasured += curr ? 0 : 1;
      this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
      this._frames[cellKey] = next;
      this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);
      this._scheduleCellsToRenderUpdate();
    } else {
      this._frames[cellKey].inLayout = true;
    }
    var childListKeys = this._cellKeysToChildListKeys.get(cellKey);
    if (childListKeys) {
      for (var _iterator2 = _createForOfIteratorHelperLoose3(childListKeys), _step2; !(_step2 = _iterator2()).done; ) {
        var childKey = _step2.value;
        var childList = this._nestedChildLists.get(childKey);
        childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
      }
    }
    this._computeBlankness();
    this._updateViewableItems(this.props.data);
  };
  _proto.measureLayoutRelativeToContainingList = function measureLayoutRelativeToContainingList() {
    var _this4 = this;
    try {
      if (!this._scrollRef) {
        return;
      }
      this._scrollRef.measureLayout(this.context.virtualizedList.getOutermostParentListRef().getScrollRef().getNativeScrollRef(), function(x, y, width, height) {
        _this4._offsetFromParentVirtualizedList = _this4._selectOffset({
          x,
          y
        });
        _this4._scrollMetrics.contentLength = _this4._selectLength({
          width,
          height
        });
        var scrollMetrics = _this4._convertParentScrollMetrics(_this4.context.virtualizedList.getScrollMetrics());
        _this4._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
        _this4._scrollMetrics.offset = scrollMetrics.offset;
      }, function(error2) {
        console.warn("VirtualizedList: Encountered an error while measuring a list's offset from its containing VirtualizedList.");
      });
    } catch (error2) {
      console.warn("measureLayoutRelativeToContainingList threw an error", error2.stack);
    }
  };
  _proto._renderDebugOverlay = function _renderDebugOverlay() {
    var normalize = this._scrollMetrics.visibleLength / (this._scrollMetrics.contentLength || 1);
    var framesInLayout = [];
    var itemCount = this.props.getItemCount(this.props.data);
    for (var ii = 0; ii < itemCount; ii++) {
      var frame = this._getFrameMetricsApprox(ii);
      if (frame.inLayout) {
        framesInLayout.push(frame);
      }
    }
    var windowTop = this._getFrameMetricsApprox(this.state.first).offset;
    var frameLast = this._getFrameMetricsApprox(this.state.last);
    var windowLen = frameLast.offset + frameLast.length - windowTop;
    var visTop = this._scrollMetrics.offset;
    var visLen = this._scrollMetrics.visibleLength;
    return /* @__PURE__ */ React11.createElement(View_default, {
      style: [styles4.debugOverlayBase, styles4.debugOverlay]
    }, framesInLayout.map(function(f, ii2) {
      return /* @__PURE__ */ React11.createElement(View_default, {
        key: "f" + ii2,
        style: [styles4.debugOverlayBase, styles4.debugOverlayFrame, {
          top: f.offset * normalize,
          height: f.length * normalize
        }]
      });
    }), /* @__PURE__ */ React11.createElement(View_default, {
      style: [styles4.debugOverlayBase, styles4.debugOverlayFrameLast, {
        top: windowTop * normalize,
        height: windowLen * normalize
      }]
    }), /* @__PURE__ */ React11.createElement(View_default, {
      style: [styles4.debugOverlayBase, styles4.debugOverlayFrameVis, {
        top: visTop * normalize,
        height: visLen * normalize
      }]
    }));
  };
  _proto._selectLength = function _selectLength(metrics) {
    return !this.props.horizontal ? metrics.height : metrics.width;
  };
  _proto._selectOffset = function _selectOffset(metrics) {
    return !this.props.horizontal ? metrics.y : metrics.x;
  };
  _proto._maybeCallOnEndReached = function _maybeCallOnEndReached() {
    var _this$props10 = this.props, data2 = _this$props10.data, getItemCount = _this$props10.getItemCount, onEndReached = _this$props10.onEndReached, onEndReachedThreshold = _this$props10.onEndReachedThreshold;
    var _this$_scrollMetrics2 = this._scrollMetrics, contentLength = _this$_scrollMetrics2.contentLength, visibleLength = _this$_scrollMetrics2.visibleLength, offset = _this$_scrollMetrics2.offset;
    var distanceFromEnd = contentLength - visibleLength - offset;
    if (onEndReached && this.state.last === getItemCount(data2) - 1 && distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {
      this._hasDataChangedSinceEndReached = false;
      this._sentEndForContentLength = this._scrollMetrics.contentLength;
      onEndReached({
        distanceFromEnd
      });
    }
  };
  _proto._scheduleCellsToRenderUpdate = function _scheduleCellsToRenderUpdate() {
    var _this$state2 = this.state, first = _this$state2.first, last = _this$state2.last;
    var _this$_scrollMetrics3 = this._scrollMetrics, offset = _this$_scrollMetrics3.offset, visibleLength = _this$_scrollMetrics3.visibleLength, velocity = _this$_scrollMetrics3.velocity;
    var itemCount = this.props.getItemCount(this.props.data);
    var hiPri = false;
    var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;
    if (first > 0) {
      var distTop = offset - this._getFrameMetricsApprox(first).offset;
      hiPri = hiPri || distTop < 0 || velocity < -2 && distTop < scrollingThreshold;
    }
    if (last < itemCount - 1) {
      var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
      hiPri = hiPri || distBottom < 0 || velocity > 2 && distBottom < scrollingThreshold;
    }
    if (hiPri && (this._averageCellLength || this.props.getItemLayout) && !this._hiPriInProgress) {
      this._hiPriInProgress = true;
      this._updateCellsToRenderBatcher.dispose({
        abort: true
      });
      this._updateCellsToRender();
      return;
    } else {
      this._updateCellsToRenderBatcher.schedule();
    }
  };
  _proto._updateViewableItems = function _updateViewableItems(data2) {
    var _this5 = this;
    var getItemCount = this.props.getItemCount;
    this._viewabilityTuples.forEach(function(tuple) {
      tuple.viewabilityHelper.onUpdate(getItemCount(data2), _this5._scrollMetrics.offset, _this5._scrollMetrics.visibleLength, _this5._getFrameMetrics, _this5._createViewToken, tuple.onViewableItemsChanged, _this5.state);
    });
  };
  return VirtualizedList2;
}(React11.PureComponent);
VirtualizedList.defaultProps = {
  disableVirtualization: false,
  horizontal: false,
  initialNumToRender: 10,
  keyExtractor: function keyExtractor(item, index) {
    if (item.key != null) {
      return item.key;
    }
    if (item.id != null) {
      return item.id;
    }
    _usedIndexForKey = true;
    if (item.type && item.type.displayName) {
      _keylessItemComponentName = item.type.displayName;
    }
    return String(index);
  },
  maxToRenderPerBatch: 10,
  onEndReachedThreshold: 2,
  scrollEventThrottle: 50,
  updateCellsBatchingPeriod: 50,
  windowSize: 21
};
VirtualizedList.contextTypes = {
  virtualizedCell: import_prop_types.default.shape({
    cellKey: import_prop_types.default.string
  }),
  virtualizedList: import_prop_types.default.shape({
    getScrollMetrics: import_prop_types.default.func,
    horizontal: import_prop_types.default.bool,
    getOutermostParentListRef: import_prop_types.default.func,
    getNestedChildState: import_prop_types.default.func,
    registerAsNestedChild: import_prop_types.default.func,
    unregisterAsNestedChild: import_prop_types.default.func
  })
};
VirtualizedList.childContextTypes = {
  virtualizedList: import_prop_types.default.shape({
    getScrollMetrics: import_prop_types.default.func,
    horizontal: import_prop_types.default.bool,
    getOutermostParentListRef: import_prop_types.default.func,
    getNestedChildState: import_prop_types.default.func,
    registerAsNestedChild: import_prop_types.default.func,
    unregisterAsNestedChild: import_prop_types.default.func
  })
};
var CellRenderer = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose22(CellRenderer2, _React$Component);
  function CellRenderer2() {
    var _this6;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this6 = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this6.state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this6.props.item
      }
    };
    _this6._separators = {
      highlight: function highlight() {
        var _this6$props = _this6.props, cellKey = _this6$props.cellKey, prevCellKey = _this6$props.prevCellKey;
        _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: true
        });
      },
      unhighlight: function unhighlight() {
        var _this6$props2 = _this6.props, cellKey = _this6$props2.cellKey, prevCellKey = _this6$props2.prevCellKey;
        _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: false
        });
      },
      updateProps: function updateProps(select3, newProps) {
        var _this6$props3 = _this6.props, cellKey = _this6$props3.cellKey, prevCellKey = _this6$props3.prevCellKey;
        _this6.props.onUpdateSeparators([select3 === "leading" ? prevCellKey : cellKey], newProps);
      }
    };
    return _this6;
  }
  var _proto2 = CellRenderer2.prototype;
  _proto2.getChildContext = function getChildContext() {
    return {
      virtualizedCell: {
        cellKey: this.props.cellKey
      }
    };
  };
  _proto2.updateSeparatorProps = function updateSeparatorProps(newProps) {
    this.setState(function(state) {
      return {
        separatorProps: _objectSpread12(_objectSpread12({}, state.separatorProps), newProps)
      };
    });
  };
  _proto2.componentWillUnmount = function componentWillUnmount() {
    this.props.onUnmount(this.props.cellKey);
  };
  _proto2.render = function render3() {
    var _this$props11 = this.props, CellRendererComponent = _this$props11.CellRendererComponent, ItemSeparatorComponent = _this$props11.ItemSeparatorComponent, fillRateHelper = _this$props11.fillRateHelper, horizontal = _this$props11.horizontal, item = _this$props11.item, index = _this$props11.index, inversionStyle = _this$props11.inversionStyle, parentProps = _this$props11.parentProps;
    var renderItem = parentProps.renderItem, getItemLayout = parentProps.getItemLayout;
    (0, import_invariant20.default)(renderItem, "no renderItem!");
    var element = renderItem({
      item,
      index,
      separators: this._separators
    });
    var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? void 0 : this.props.onLayout;
    var itemSeparator = ItemSeparatorComponent && /* @__PURE__ */ React11.createElement(ItemSeparatorComponent, this.state.separatorProps);
    var cellStyle = inversionStyle ? horizontal ? [styles4.rowReverse, inversionStyle] : [styles4.columnReverse, inversionStyle] : horizontal ? [styles4.row, inversionStyle] : inversionStyle;
    if (!CellRendererComponent) {
      return /* @__PURE__ */ React11.createElement(View_default, {
        style: cellStyle,
        onLayout
      }, element, itemSeparator);
    }
    return /* @__PURE__ */ React11.createElement(CellRendererComponent, _extends4({}, this.props, {
      style: cellStyle,
      onLayout
    }), element, itemSeparator);
  };
  return CellRenderer2;
}(React11.Component);
CellRenderer.childContextTypes = {
  virtualizedCell: import_prop_types.default.shape({
    cellKey: import_prop_types.default.string
  })
};
var VirtualizedCellWrapper = /* @__PURE__ */ function(_React$Component2) {
  _inheritsLoose22(VirtualizedCellWrapper2, _React$Component2);
  function VirtualizedCellWrapper2() {
    return _React$Component2.apply(this, arguments) || this;
  }
  var _proto3 = VirtualizedCellWrapper2.prototype;
  _proto3.getChildContext = function getChildContext() {
    return {
      virtualizedCell: {
        cellKey: this.props.cellKey
      }
    };
  };
  _proto3.render = function render3() {
    return this.props.children;
  };
  return VirtualizedCellWrapper2;
}(React11.Component);
VirtualizedCellWrapper.childContextTypes = {
  virtualizedCell: import_prop_types.default.shape({
    cellKey: import_prop_types.default.string
  })
};
var styles4 = StyleSheet_default2.create({
  verticallyInverted: {
    transform: [{
      scaleY: -1
    }]
  },
  horizontallyInverted: {
    transform: [{
      scaleX: -1
    }]
  },
  row: {
    flexDirection: "row"
  },
  rowReverse: {
    flexDirection: "row-reverse"
  },
  columnReverse: {
    flexDirection: "column-reverse"
  },
  debug: {
    flex: 1
  },
  debugOverlayBase: {
    position: "absolute",
    top: 0,
    right: 0
  },
  debugOverlay: {
    bottom: 0,
    width: 20,
    borderColor: "blue",
    borderWidth: 1
  },
  debugOverlayFrame: {
    left: 0,
    backgroundColor: "orange"
  },
  debugOverlayFrameLast: {
    left: 0,
    borderColor: "green",
    borderWidth: 2
  },
  debugOverlayFrameVis: {
    left: 0,
    borderColor: "red",
    borderWidth: 2
  }
});
var VirtualizedList_default = VirtualizedList;

// node_modules/react-native-web/dist/vendor/react-native/FlatList/index.js
var import_invariant21 = __toModule(require_invariant());
"use strict";
function _extends5() {
  _extends5 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends5.apply(this, arguments);
}
function _inheritsLoose23(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf23(subClass, superClass);
}
function _setPrototypeOf23(o, p) {
  _setPrototypeOf23 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf23(o, p);
}
function ownKeys13(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread13(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys13(Object(source), true).forEach(function(key3) {
        _defineProperty13(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys13(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty13(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var defaultProps2 = _objectSpread13(_objectSpread13({}, VirtualizedList_default.defaultProps), {}, {
  numColumns: 1,
  removeClippedSubviews: false
});
var FlatList = /* @__PURE__ */ function(_React$PureComponent) {
  _inheritsLoose23(FlatList2, _React$PureComponent);
  var _proto = FlatList2.prototype;
  _proto.scrollToEnd = function scrollToEnd2(params) {
    if (this._listRef) {
      this._listRef.scrollToEnd(params);
    }
  };
  _proto.scrollToIndex = function scrollToIndex(params) {
    if (this._listRef) {
      this._listRef.scrollToIndex(params);
    }
  };
  _proto.scrollToItem = function scrollToItem(params) {
    if (this._listRef) {
      this._listRef.scrollToItem(params);
    }
  };
  _proto.scrollToOffset = function scrollToOffset(params) {
    if (this._listRef) {
      this._listRef.scrollToOffset(params);
    }
  };
  _proto.recordInteraction = function recordInteraction() {
    if (this._listRef) {
      this._listRef.recordInteraction();
    }
  };
  _proto.flashScrollIndicators = function flashScrollIndicators2() {
    if (this._listRef) {
      this._listRef.flashScrollIndicators();
    }
  };
  _proto.getScrollResponder = function getScrollResponder2() {
    if (this._listRef) {
      return this._listRef.getScrollResponder();
    }
  };
  _proto.getNativeScrollRef = function getNativeScrollRef() {
    if (this._listRef) {
      return this._listRef.getScrollRef();
    }
  };
  _proto.getScrollableNode = function getScrollableNode2() {
    if (this._listRef) {
      return this._listRef.getScrollableNode();
    }
  };
  _proto.setNativeProps = function setNativeProps3(props) {
    if (this._listRef) {
      this._listRef.setNativeProps(props);
    }
  };
  function FlatList2(props) {
    var _this;
    _this = _React$PureComponent.call(this, props) || this;
    _this._virtualizedListPairs = [];
    _this._captureRef = function(ref) {
      _this._listRef = ref;
    };
    _this._getItem = function(data2, index) {
      var numColumns = _this.props.numColumns;
      if (numColumns > 1) {
        var ret = [];
        for (var kk = 0; kk < numColumns; kk++) {
          var _item = data2[index * numColumns + kk];
          if (_item != null) {
            ret.push(_item);
          }
        }
        return ret;
      } else {
        return data2[index];
      }
    };
    _this._getItemCount = function(data2) {
      return data2 ? Math.ceil(data2.length / _this.props.numColumns) : 0;
    };
    _this._keyExtractor = function(items2, index) {
      var _this$props = _this.props, keyExtractor2 = _this$props.keyExtractor, numColumns = _this$props.numColumns;
      if (numColumns > 1) {
        (0, import_invariant21.default)(Array.isArray(items2), "FlatList: Encountered internal consistency error, expected each item to consist of an array with 1-%s columns; instead, received a single item.", numColumns);
        return items2.map(function(it, kk) {
          return keyExtractor2(it, index * numColumns + kk);
        }).join(":");
      } else {
        return keyExtractor2(items2, index);
      }
    };
    _this._renderItem = function(info2) {
      var _this$props2 = _this.props, renderItem = _this$props2.renderItem, numColumns = _this$props2.numColumns, columnWrapperStyle = _this$props2.columnWrapperStyle;
      if (numColumns > 1) {
        var _item2 = info2.item, _index = info2.index;
        (0, import_invariant21.default)(Array.isArray(_item2), "Expected array of items with numColumns > 1");
        return /* @__PURE__ */ React12.createElement(View_default, {
          style: StyleSheet_default2.compose(styles5.row, columnWrapperStyle)
        }, _item2.map(function(it, kk) {
          var element = renderItem({
            item: it,
            index: _index * numColumns + kk,
            separators: info2.separators
          });
          return element != null ? /* @__PURE__ */ React12.createElement(React12.Fragment, {
            key: kk
          }, element) : null;
        }));
      } else {
        return renderItem(info2);
      }
    };
    _this._checkProps(_this.props);
    if (_this.props.viewabilityConfigCallbackPairs) {
      _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function(pair) {
        return {
          viewabilityConfig: pair.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
        };
      });
    } else if (_this.props.onViewableItemsChanged) {
      _this._virtualizedListPairs.push({
        viewabilityConfig: _this.props.viewabilityConfig,
        onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)
      });
    }
    return _this;
  }
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    (0, import_invariant21.default)(prevProps.numColumns === this.props.numColumns, "Changing numColumns on the fly is not supported. Change the key prop on FlatList when changing the number of columns to force a fresh render of the component.");
    (0, import_invariant21.default)(prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged, "Changing onViewableItemsChanged on the fly is not supported");
    (0, import_invariant21.default)(!deepDiffer_default(prevProps.viewabilityConfig, this.props.viewabilityConfig), "Changing viewabilityConfig on the fly is not supported");
    (0, import_invariant21.default)(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, "Changing viewabilityConfigCallbackPairs on the fly is not supported");
    this._checkProps(this.props);
  };
  _proto._checkProps = function _checkProps(props) {
    var getItem = props.getItem, getItemCount = props.getItemCount, horizontal = props.horizontal, numColumns = props.numColumns, columnWrapperStyle = props.columnWrapperStyle, onViewableItemsChanged = props.onViewableItemsChanged, viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
    (0, import_invariant21.default)(!getItem && !getItemCount, "FlatList does not support custom data formats.");
    if (numColumns > 1) {
      (0, import_invariant21.default)(!horizontal, "numColumns does not support horizontal.");
    } else {
      (0, import_invariant21.default)(!columnWrapperStyle, "columnWrapperStyle not supported for single column lists");
    }
    (0, import_invariant21.default)(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), "FlatList does not support setting both onViewableItemsChanged and viewabilityConfigCallbackPairs.");
  };
  _proto._pushMultiColumnViewable = function _pushMultiColumnViewable(arr, v) {
    var _this$props3 = this.props, numColumns = _this$props3.numColumns, keyExtractor2 = _this$props3.keyExtractor;
    v.item.forEach(function(item, ii) {
      (0, import_invariant21.default)(v.index != null, "Missing index!");
      var index = v.index * numColumns + ii;
      arr.push(_objectSpread13(_objectSpread13({}, v), {}, {
        item,
        key: keyExtractor2(item, index),
        index
      }));
    });
  };
  _proto._createOnViewableItemsChanged = function _createOnViewableItemsChanged(onViewableItemsChanged) {
    var _this2 = this;
    return function(info2) {
      var numColumns = _this2.props.numColumns;
      if (onViewableItemsChanged) {
        if (numColumns > 1) {
          var changed = [];
          var viewableItems = [];
          info2.viewableItems.forEach(function(v) {
            return _this2._pushMultiColumnViewable(viewableItems, v);
          });
          info2.changed.forEach(function(v) {
            return _this2._pushMultiColumnViewable(changed, v);
          });
          onViewableItemsChanged({
            viewableItems,
            changed
          });
        } else {
          onViewableItemsChanged(info2);
        }
      }
    };
  };
  _proto.render = function render3() {
    return /* @__PURE__ */ React12.createElement(VirtualizedList_default, _extends5({}, this.props, {
      renderItem: this._renderItem,
      getItem: this._getItem,
      getItemCount: this._getItemCount,
      keyExtractor: this._keyExtractor,
      ref: this._captureRef,
      viewabilityConfigCallbackPairs: this._virtualizedListPairs
    }));
  };
  return FlatList2;
}(React12.PureComponent);
FlatList.defaultProps = defaultProps2;
var styles5 = StyleSheet_default2.create({
  row: {
    flexDirection: "row"
  }
});
var FlatList_default = FlatList;

// node_modules/react-native-web/dist/exports/FlatList/index.js
var FlatList_default2 = FlatList_default;

// node_modules/react-native-web/dist/modules/AssetRegistry/index.js
var assets = [];
function getAssetByID(assetId) {
  return assets[assetId - 1];
}

// node_modules/react-native-web/dist/modules/ImageLoader/index.js
var dataUriPattern = /^data:/;
var ImageUriCache = /* @__PURE__ */ function() {
  function ImageUriCache2() {
  }
  ImageUriCache2.has = function has2(uri) {
    var entries = ImageUriCache2._entries;
    var isDataUri = dataUriPattern.test(uri);
    return isDataUri || Boolean(entries[uri]);
  };
  ImageUriCache2.add = function add8(uri) {
    var entries = ImageUriCache2._entries;
    var lastUsedTimestamp = Date.now();
    if (entries[uri]) {
      entries[uri].lastUsedTimestamp = lastUsedTimestamp;
      entries[uri].refCount += 1;
    } else {
      entries[uri] = {
        lastUsedTimestamp,
        refCount: 1
      };
    }
  };
  ImageUriCache2.remove = function remove2(uri) {
    var entries = ImageUriCache2._entries;
    if (entries[uri]) {
      entries[uri].refCount -= 1;
    }
    ImageUriCache2._cleanUpIfNeeded();
  };
  ImageUriCache2._cleanUpIfNeeded = function _cleanUpIfNeeded() {
    var entries = ImageUriCache2._entries;
    var imageUris = Object.keys(entries);
    if (imageUris.length + 1 > ImageUriCache2._maximumEntries) {
      var leastRecentlyUsedKey;
      var leastRecentlyUsedEntry;
      imageUris.forEach(function(uri) {
        var entry = entries[uri];
        if ((!leastRecentlyUsedEntry || entry.lastUsedTimestamp < leastRecentlyUsedEntry.lastUsedTimestamp) && entry.refCount === 0) {
          leastRecentlyUsedKey = uri;
          leastRecentlyUsedEntry = entry;
        }
      });
      if (leastRecentlyUsedKey) {
        delete entries[leastRecentlyUsedKey];
      }
    }
  };
  return ImageUriCache2;
}();
ImageUriCache._maximumEntries = 256;
ImageUriCache._entries = {};
var id = 0;
var requests = {};
var ImageLoader = {
  abort: function abort(requestId) {
    var image3 = requests["" + requestId];
    if (image3) {
      image3.onerror = null;
      image3.onload = null;
      image3 = null;
      delete requests["" + requestId];
    }
  },
  getSize: function getSize(uri, success, failure) {
    var complete = false;
    var interval = setInterval(callback, 16);
    var requestId = ImageLoader.load(uri, callback, errorCallback);
    function callback() {
      var image3 = requests["" + requestId];
      if (image3) {
        var naturalHeight = image3.naturalHeight, naturalWidth = image3.naturalWidth;
        if (naturalHeight && naturalWidth) {
          success(naturalWidth, naturalHeight);
          complete = true;
        }
      }
      if (complete) {
        ImageLoader.abort(requestId);
        clearInterval(interval);
      }
    }
    function errorCallback() {
      if (typeof failure === "function") {
        failure();
      }
      ImageLoader.abort(requestId);
      clearInterval(interval);
    }
  },
  has: function has(uri) {
    return ImageUriCache.has(uri);
  },
  load: function load(uri, onLoad, onError) {
    id += 1;
    var image3 = new window.Image();
    image3.onerror = onError;
    image3.onload = function(e) {
      var onDecode = function onDecode2() {
        return onLoad({
          nativeEvent: e
        });
      };
      if (typeof image3.decode === "function") {
        image3.decode().then(onDecode, onDecode);
      } else {
        setTimeout(onDecode, 0);
      }
    };
    image3.src = uri;
    requests["" + id] = image3;
    return id;
  },
  prefetch: function prefetch(uri) {
    return new Promise(function(resolve, reject) {
      ImageLoader.load(uri, function() {
        ImageUriCache.add(uri);
        ImageUriCache.remove(uri);
        resolve();
      }, reject);
    });
  },
  queryCache: function queryCache(uris) {
    var result = {};
    uris.forEach(function(u) {
      if (ImageUriCache.has(u)) {
        result[u] = "disk/memory";
      }
    });
    return Promise.resolve(result);
  }
};
var ImageLoader_default = ImageLoader;

// node_modules/react-native-web/dist/exports/PixelRatio/index.js
var PixelRatio = /* @__PURE__ */ function() {
  function PixelRatio2() {
  }
  PixelRatio2.get = function get3() {
    return Dimensions.get("window").scale;
  };
  PixelRatio2.getFontScale = function getFontScale() {
    return Dimensions.get("window").fontScale || PixelRatio2.get();
  };
  PixelRatio2.getPixelSizeForLayoutSize = function getPixelSizeForLayoutSize(layoutSize) {
    return Math.round(layoutSize * PixelRatio2.get());
  };
  PixelRatio2.roundToNearestPixel = function roundToNearestPixel(layoutSize) {
    var ratio = PixelRatio2.get();
    return Math.round(layoutSize * ratio) / ratio;
  };
  return PixelRatio2;
}();

// node_modules/react-native-web/dist/exports/Image/index.js
var import_react10 = __toModule(require_react());
function _extends6() {
  _extends6 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends6.apply(this, arguments);
}
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
function ownKeys14(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread14(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys14(Object(source), true).forEach(function(key3) {
        _defineProperty14(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys14(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty14(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var ERRORED = "ERRORED";
var LOADED = "LOADED";
var LOADING = "LOADING";
var IDLE = "IDLE";
var _filterId = 0;
var svgDataUriPattern = /^(data:image\/svg\+xml;utf8,)(.*)/;
function createTintColorSVG(tintColor, id2) {
  return tintColor && id2 != null ? /* @__PURE__ */ import_react10.default.createElement("svg", {
    style: {
      position: "absolute",
      height: 0,
      visibility: "hidden",
      width: 0
    }
  }, /* @__PURE__ */ import_react10.default.createElement("defs", null, /* @__PURE__ */ import_react10.default.createElement("filter", {
    id: "tint-" + id2,
    suppressHydrationWarning: true
  }, /* @__PURE__ */ import_react10.default.createElement("feFlood", {
    floodColor: "" + tintColor,
    key: tintColor
  }), /* @__PURE__ */ import_react10.default.createElement("feComposite", {
    in2: "SourceAlpha",
    operator: "atop"
  })))) : null;
}
function getFlatStyle(style, blurRadius, filterId) {
  var flatStyle = _objectSpread14({}, StyleSheet_default2.flatten(style));
  var filter4 = flatStyle.filter, resizeMode = flatStyle.resizeMode, shadowOffset = flatStyle.shadowOffset, tintColor = flatStyle.tintColor;
  var filters = [];
  var _filter = null;
  if (filter4) {
    filters.push(filter4);
  }
  if (blurRadius) {
    filters.push("blur(" + blurRadius + "px)");
  }
  if (shadowOffset) {
    var shadowString = resolveShadowValue_default(flatStyle);
    if (shadowString) {
      filters.push("drop-shadow(" + shadowString + ")");
    }
  }
  if (tintColor && filterId != null) {
    filters.push("url(#tint-" + filterId + ")");
  }
  if (filters.length > 0) {
    _filter = filters.join(" ");
  }
  delete flatStyle.blurRadius;
  delete flatStyle.shadowColor;
  delete flatStyle.shadowOpacity;
  delete flatStyle.shadowOffset;
  delete flatStyle.shadowRadius;
  delete flatStyle.tintColor;
  delete flatStyle.overlayColor;
  delete flatStyle.resizeMode;
  return [flatStyle, resizeMode, _filter, tintColor];
}
function resolveAssetDimensions(source) {
  if (typeof source === "number") {
    var _getAssetByID = getAssetByID(source), height = _getAssetByID.height, width = _getAssetByID.width;
    return {
      height,
      width
    };
  } else if (source != null && !Array.isArray(source) && typeof source === "object") {
    var _height = source.height, _width = source.width;
    return {
      height: _height,
      width: _width
    };
  }
}
function resolveAssetUri(source) {
  var uri = null;
  if (typeof source === "number") {
    var asset = getAssetByID(source);
    var scale2 = asset.scales[0];
    if (asset.scales.length > 1) {
      var preferredScale = PixelRatio.get();
      scale2 = asset.scales.reduce(function(prev, curr) {
        return Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale) ? curr : prev;
      });
    }
    var scaleSuffix = scale2 !== 1 ? "@" + scale2 + "x" : "";
    uri = asset ? asset.httpServerLocation + "/" + asset.name + scaleSuffix + "." + asset.type : "";
  } else if (typeof source === "string") {
    uri = source;
  } else if (source && typeof source.uri === "string") {
    uri = source.uri;
  }
  if (uri) {
    var match = uri.match(svgDataUriPattern);
    if (match) {
      var prefix2 = match[1], svg2 = match[2];
      var encodedSvg = encodeURIComponent(svg2);
      return "" + prefix2 + encodedSvg;
    }
  }
  return uri;
}
var Image2 = /* @__PURE__ */ (0, import_react10.forwardRef)(function(props, ref) {
  var accessibilityLabel = props.accessibilityLabel, blurRadius = props.blurRadius, defaultSource = props.defaultSource, draggable = props.draggable, onError = props.onError, onLayout = props.onLayout, onLoad = props.onLoad, onLoadEnd = props.onLoadEnd, onLoadStart = props.onLoadStart, pointerEvents = props.pointerEvents, source = props.source, style = props.style, rest = _objectWithoutPropertiesLoose7(props, ["accessibilityLabel", "blurRadius", "defaultSource", "draggable", "onError", "onLayout", "onLoad", "onLoadEnd", "onLoadStart", "pointerEvents", "source", "style"]);
  if (true) {
    if (props.children) {
      throw new Error("The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.");
    }
  }
  var _useState = (0, import_react10.useState)(function() {
    var uri2 = resolveAssetUri(source);
    if (uri2 != null) {
      var isLoaded2 = ImageLoader_default.has(uri2);
      if (isLoaded2) {
        return LOADED;
      }
    }
    return IDLE;
  }), state = _useState[0], updateState = _useState[1];
  var _useState2 = (0, import_react10.useState)({}), layout = _useState2[0], updateLayout = _useState2[1];
  var hasTextAncestor = (0, import_react10.useContext)(TextAncestorContext_default);
  var hiddenImageRef = (0, import_react10.useRef)(null);
  var filterRef = (0, import_react10.useRef)(_filterId++);
  var requestRef = (0, import_react10.useRef)(null);
  var shouldDisplaySource = state === LOADED || state === LOADING && defaultSource == null;
  var _getFlatStyle = getFlatStyle(style, blurRadius, filterRef.current), flatStyle = _getFlatStyle[0], _resizeMode = _getFlatStyle[1], filter4 = _getFlatStyle[2], tintColor = _getFlatStyle[3];
  var resizeMode = props.resizeMode || _resizeMode || "cover";
  var selectedSource = shouldDisplaySource ? source : defaultSource;
  var displayImageUri = resolveAssetUri(selectedSource);
  var imageSizeStyle = resolveAssetDimensions(selectedSource);
  var backgroundImage = displayImageUri ? 'url("' + displayImageUri + '")' : null;
  var backgroundSize = getBackgroundSize();
  var hiddenImage = displayImageUri ? createElement_default("img", {
    alt: accessibilityLabel || "",
    classList: [classes3.accessibilityImage],
    draggable: draggable || false,
    ref: hiddenImageRef,
    src: displayImageUri
  }) : null;
  function getBackgroundSize() {
    if (hiddenImageRef.current != null && (resizeMode === "center" || resizeMode === "repeat")) {
      var _hiddenImageRef$curre = hiddenImageRef.current, naturalHeight = _hiddenImageRef$curre.naturalHeight, naturalWidth = _hiddenImageRef$curre.naturalWidth;
      var height = layout.height, width = layout.width;
      if (naturalHeight && naturalWidth && height && width) {
        var scaleFactor = Math.min(1, width / naturalWidth, height / naturalHeight);
        var x = Math.ceil(scaleFactor * naturalWidth);
        var y = Math.ceil(scaleFactor * naturalHeight);
        return x + "px " + y + "px";
      }
    }
  }
  function handleLayout(e) {
    if (resizeMode === "center" || resizeMode === "repeat" || onLayout) {
      var _layout = e.nativeEvent.layout;
      onLayout && onLayout(e);
      updateLayout(_layout);
    }
  }
  var uri = resolveAssetUri(source);
  (0, import_react10.useEffect)(function() {
    abortPendingRequest();
    if (uri != null) {
      updateState(LOADING);
      if (onLoadStart) {
        onLoadStart();
      }
      requestRef.current = ImageLoader_default.load(uri, function load2(e) {
        updateState(LOADED);
        if (onLoad) {
          onLoad(e);
        }
        if (onLoadEnd) {
          onLoadEnd();
        }
      }, function error2() {
        updateState(ERRORED);
        if (onError) {
          onError({
            nativeEvent: {
              error: "Failed to load resource " + uri + " (404)"
            }
          });
        }
        if (onLoadEnd) {
          onLoadEnd();
        }
      });
    }
    function abortPendingRequest() {
      if (requestRef.current != null) {
        ImageLoader_default.abort(requestRef.current);
        requestRef.current = null;
      }
    }
    return abortPendingRequest;
  }, [uri, requestRef, updateState, onError, onLoad, onLoadEnd, onLoadStart]);
  return /* @__PURE__ */ import_react10.default.createElement(View_default, _extends6({}, rest, {
    accessibilityLabel,
    onLayout: handleLayout,
    pointerEvents,
    ref,
    style: [styles6.root, hasTextAncestor && styles6.inline, imageSizeStyle, flatStyle]
  }), /* @__PURE__ */ import_react10.default.createElement(View_default, {
    style: [styles6.image, resizeModeStyles[resizeMode], {
      backgroundImage,
      filter: filter4
    }, backgroundSize != null && {
      backgroundSize
    }],
    suppressHydrationWarning: true
  }), hiddenImage, createTintColorSVG(tintColor, filterRef.current));
});
Image2.displayName = "Image";
Image2.getSize = function(uri, success, failure) {
  ImageLoader_default.getSize(uri, success, failure);
};
Image2.prefetch = function(uri) {
  return ImageLoader_default.prefetch(uri);
};
Image2.queryCache = function(uris) {
  return ImageLoader_default.queryCache(uris);
};
var classes3 = css_default.create({
  accessibilityImage: _objectSpread14(_objectSpread14({}, StyleSheet_default2.absoluteFillObject), {}, {
    height: "100%",
    opacity: 0,
    width: "100%",
    zIndex: -1
  })
});
var styles6 = StyleSheet_default2.create({
  root: {
    flexBasis: "auto",
    overflow: "hidden",
    zIndex: 0
  },
  inline: {
    display: "inline-flex"
  },
  image: _objectSpread14(_objectSpread14({}, StyleSheet_default2.absoluteFillObject), {}, {
    backgroundColor: "transparent",
    backgroundPosition: "center",
    backgroundRepeat: "no-repeat",
    backgroundSize: "cover",
    height: "100%",
    width: "100%",
    zIndex: -1
  })
});
var resizeModeStyles = StyleSheet_default2.create({
  center: {
    backgroundSize: "auto"
  },
  contain: {
    backgroundSize: "contain"
  },
  cover: {
    backgroundSize: "cover"
  },
  none: {
    backgroundPosition: "0 0",
    backgroundSize: "auto"
  },
  repeat: {
    backgroundPosition: "0 0",
    backgroundRepeat: "repeat",
    backgroundSize: "auto"
  },
  stretch: {
    backgroundSize: "100% 100%"
  }
});
var Image_default = Image2;

// node_modules/react-native-web/dist/vendor/react-native/SectionList/index.js
var React15 = __toModule(require_react());

// node_modules/react-native-web/dist/vendor/react-native/VirtualizedSectionList/index.js
var React14 = __toModule(require_react());
var import_invariant22 = __toModule(require_invariant());
"use strict";
function _extends7() {
  _extends7 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends7.apply(this, arguments);
}
function ownKeys15(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread15(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys15(Object(source), true).forEach(function(key3) {
        _defineProperty15(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys15(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty15(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function _assertThisInitialized2(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _inheritsLoose24(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf24(subClass, superClass);
}
function _setPrototypeOf24(o, p) {
  _setPrototypeOf24 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf24(o, p);
}
var VirtualizedSectionList = /* @__PURE__ */ function(_React$PureComponent) {
  _inheritsLoose24(VirtualizedSectionList2, _React$PureComponent);
  var _proto = VirtualizedSectionList2.prototype;
  _proto.scrollToLocation = function scrollToLocation(params) {
    var index = params.itemIndex;
    for (var i = 0; i < params.sectionIndex; i++) {
      index += this.props.getItemCount(this.props.sections[i].data) + 2;
    }
    var viewOffset = 0;
    if (params.itemIndex > 0 && this.props.stickySectionHeadersEnabled) {
      var frame = this._listRef._getFrameMetricsApprox(index - params.itemIndex);
      viewOffset = frame.length;
    }
    var toIndexParams = _objectSpread15(_objectSpread15({}, params), {}, {
      viewOffset,
      index
    });
    this._listRef.scrollToIndex(toIndexParams);
  };
  _proto.getListRef = function getListRef() {
    return this._listRef;
  };
  function VirtualizedSectionList2(props, context) {
    var _this;
    _this = _React$PureComponent.call(this, props, context) || this;
    _this._keyExtractor = function(item, index) {
      var info2 = _this._subExtractor(index);
      return info2 && info2.key || String(index);
    };
    _this._convertViewable = function(viewable) {
      (0, import_invariant22.default)(viewable.index != null, "Received a broken ViewToken");
      var info2 = _this._subExtractor(viewable.index);
      if (!info2) {
        return null;
      }
      var keyExtractor2 = info2.section.keyExtractor || _this.props.keyExtractor;
      return _objectSpread15(_objectSpread15({}, viewable), {}, {
        index: info2.index,
        key: keyExtractor2(viewable.item, info2.index),
        section: info2.section
      });
    };
    _this._onViewableItemsChanged = function(_ref) {
      var viewableItems = _ref.viewableItems, changed = _ref.changed;
      if (_this.props.onViewableItemsChanged) {
        _this.props.onViewableItemsChanged({
          viewableItems: viewableItems.map(_this._convertViewable, _assertThisInitialized2(_this)).filter(Boolean),
          changed: changed.map(_this._convertViewable, _assertThisInitialized2(_this)).filter(Boolean)
        });
      }
    };
    _this._renderItem = function(_ref2) {
      var item = _ref2.item, index = _ref2.index;
      var info2 = _this._subExtractor(index);
      if (!info2) {
        return null;
      }
      var infoIndex = info2.index;
      if (infoIndex == null) {
        var section = info2.section;
        if (info2.header === true) {
          var renderSectionHeader = _this.props.renderSectionHeader;
          return renderSectionHeader ? renderSectionHeader({
            section
          }) : null;
        } else {
          var renderSectionFooter = _this.props.renderSectionFooter;
          return renderSectionFooter ? renderSectionFooter({
            section
          }) : null;
        }
      } else {
        var renderItem = info2.section.renderItem || _this.props.renderItem;
        var SeparatorComponent = _this._getSeparatorComponent(index, info2);
        (0, import_invariant22.default)(renderItem, "no renderItem!");
        return /* @__PURE__ */ React14.createElement(ItemWithSeparator, {
          SeparatorComponent,
          LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : void 0,
          cellKey: info2.key,
          index: infoIndex,
          item,
          leadingItem: info2.leadingItem,
          leadingSection: info2.leadingSection,
          onUpdateSeparator: _this._onUpdateSeparator,
          prevCellKey: (_this._subExtractor(index - 1) || {}).key,
          ref: function ref(_ref3) {
            _this._cellRefs[info2.key] = _ref3;
          },
          renderItem,
          section: info2.section,
          trailingItem: info2.trailingItem,
          trailingSection: info2.trailingSection
        });
      }
    };
    _this._onUpdateSeparator = function(key3, newProps) {
      var ref = _this._cellRefs[key3];
      ref && ref.updateSeparatorProps(newProps);
    };
    _this._cellRefs = {};
    _this._captureRef = function(ref) {
      _this._listRef = ref;
    };
    _this.state = _this._computeState(props);
    return _this;
  }
  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    this.setState(this._computeState(nextProps));
  };
  _proto._computeState = function _computeState(props) {
    var offset = props.ListHeaderComponent ? 1 : 0;
    var stickyHeaderIndices = [];
    var itemCount = props.sections ? props.sections.reduce(function(v, section) {
      stickyHeaderIndices.push(v + offset);
      return v + props.getItemCount(section.data) + 2;
    }, 0) : 0;
    return {
      childProps: _objectSpread15(_objectSpread15({}, props), {}, {
        renderItem: this._renderItem,
        ItemSeparatorComponent: void 0,
        data: props.sections,
        getItemCount: function getItemCount() {
          return itemCount;
        },
        getItem: function getItem(sections, index) {
          return _getItem(props, sections, index);
        },
        keyExtractor: this._keyExtractor,
        onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : void 0,
        stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : void 0
      })
    };
  };
  _proto.render = function render3() {
    return /* @__PURE__ */ React14.createElement(VirtualizedList_default, _extends7({}, this.state.childProps, {
      ref: this._captureRef
    }));
  };
  _proto._subExtractor = function _subExtractor(index) {
    var itemIndex = index;
    var _this$props = this.props, getItem = _this$props.getItem, getItemCount = _this$props.getItemCount, keyExtractor2 = _this$props.keyExtractor, sections = _this$props.sections;
    for (var i = 0; i < sections.length; i++) {
      var section = sections[i];
      var sectionData = section.data;
      var key3 = section.key || String(i);
      itemIndex -= 1;
      if (itemIndex >= getItemCount(sectionData) + 1) {
        itemIndex -= getItemCount(sectionData) + 1;
      } else if (itemIndex === -1) {
        return {
          section,
          key: key3 + ":header",
          index: null,
          header: true,
          trailingSection: sections[i + 1]
        };
      } else if (itemIndex === getItemCount(sectionData)) {
        return {
          section,
          key: key3 + ":footer",
          index: null,
          header: false,
          trailingSection: sections[i + 1]
        };
      } else {
        var extractor = section.keyExtractor || keyExtractor2;
        return {
          section,
          key: key3 + ":" + extractor(getItem(sectionData, itemIndex), itemIndex),
          index: itemIndex,
          leadingItem: getItem(sectionData, itemIndex - 1),
          leadingSection: sections[i - 1],
          trailingItem: getItem(sectionData, itemIndex + 1),
          trailingSection: sections[i + 1]
        };
      }
    }
  };
  _proto._getSeparatorComponent = function _getSeparatorComponent(index, info2) {
    info2 = info2 || this._subExtractor(index);
    if (!info2) {
      return null;
    }
    var ItemSeparatorComponent = info2.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
    var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
    var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
    var isLastItemInSection = info2.index === this.props.getItemCount(info2.section.data) - 1;
    if (SectionSeparatorComponent && isLastItemInSection) {
      return SectionSeparatorComponent;
    }
    if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
      return ItemSeparatorComponent;
    }
    return null;
  };
  return VirtualizedSectionList2;
}(React14.PureComponent);
VirtualizedSectionList.defaultProps = _objectSpread15(_objectSpread15({}, VirtualizedList_default.defaultProps), {}, {
  data: []
});
var ItemWithSeparator = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose24(ItemWithSeparator2, _React$Component);
  function ItemWithSeparator2() {
    var _this2;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this2.state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this2.props.item,
        leadingSection: _this2.props.leadingSection,
        section: _this2.props.section,
        trailingItem: _this2.props.trailingItem,
        trailingSection: _this2.props.trailingSection
      },
      leadingSeparatorProps: {
        highlighted: false,
        leadingItem: _this2.props.leadingItem,
        leadingSection: _this2.props.leadingSection,
        section: _this2.props.section,
        trailingItem: _this2.props.item,
        trailingSection: _this2.props.trailingSection
      }
    };
    _this2._separators = {
      highlight: function highlight() {
        ["leading", "trailing"].forEach(function(s) {
          return _this2._separators.updateProps(s, {
            highlighted: true
          });
        });
      },
      unhighlight: function unhighlight() {
        ["leading", "trailing"].forEach(function(s) {
          return _this2._separators.updateProps(s, {
            highlighted: false
          });
        });
      },
      updateProps: function updateProps(select3, newProps) {
        var _this2$props = _this2.props, LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent, cellKey = _this2$props.cellKey, prevCellKey = _this2$props.prevCellKey;
        if (select3 === "leading" && LeadingSeparatorComponent != null) {
          _this2.setState(function(state) {
            return {
              leadingSeparatorProps: _objectSpread15(_objectSpread15({}, state.leadingSeparatorProps), newProps)
            };
          });
        } else {
          _this2.props.onUpdateSeparator(select3 === "leading" && prevCellKey || cellKey, newProps);
        }
      }
    };
    return _this2;
  }
  ItemWithSeparator2.getDerivedStateFromProps = function getDerivedStateFromProps(props, prevState) {
    return {
      separatorProps: _objectSpread15(_objectSpread15({}, prevState.separatorProps), {}, {
        leadingItem: props.item,
        leadingSection: props.leadingSection,
        section: props.section,
        trailingItem: props.trailingItem,
        trailingSection: props.trailingSection
      }),
      leadingSeparatorProps: _objectSpread15(_objectSpread15({}, prevState.leadingSeparatorProps), {}, {
        leadingItem: props.leadingItem,
        leadingSection: props.leadingSection,
        section: props.section,
        trailingItem: props.item,
        trailingSection: props.trailingSection
      })
    };
  };
  var _proto2 = ItemWithSeparator2.prototype;
  _proto2.updateSeparatorProps = function updateSeparatorProps(newProps) {
    this.setState(function(state) {
      return {
        separatorProps: _objectSpread15(_objectSpread15({}, state.separatorProps), newProps)
      };
    });
  };
  _proto2.render = function render3() {
    var _this$props2 = this.props, LeadingSeparatorComponent = _this$props2.LeadingSeparatorComponent, SeparatorComponent = _this$props2.SeparatorComponent, item = _this$props2.item, index = _this$props2.index, section = _this$props2.section;
    var element = this.props.renderItem({
      item,
      index,
      section,
      separators: this._separators
    });
    var leadingSeparator = LeadingSeparatorComponent && /* @__PURE__ */ React14.createElement(LeadingSeparatorComponent, this.state.leadingSeparatorProps);
    var separator = SeparatorComponent && /* @__PURE__ */ React14.createElement(SeparatorComponent, this.state.separatorProps);
    return leadingSeparator || separator ? /* @__PURE__ */ React14.createElement(View_default, null, leadingSeparator, element, separator) : element;
  };
  return ItemWithSeparator2;
}(React14.Component);
function _getItem(props, sections, index) {
  if (!sections) {
    return null;
  }
  var itemIdx = index - 1;
  for (var i = 0; i < sections.length; i++) {
    var section = sections[i];
    var sectionData = section.data;
    var itemCount = props.getItemCount(sectionData);
    if (itemIdx === -1 || itemIdx === itemCount) {
      return section;
    } else if (itemIdx < itemCount) {
      return props.getItem(sectionData, itemIdx);
    } else {
      itemIdx -= itemCount + 2;
    }
  }
  return null;
}
var VirtualizedSectionList_default = VirtualizedSectionList;

// node_modules/react-native-web/dist/vendor/react-native/SectionList/index.js
"use strict";
function _extends8() {
  _extends8 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends8.apply(this, arguments);
}
function _inheritsLoose25(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf25(subClass, superClass);
}
function _setPrototypeOf25(o, p) {
  _setPrototypeOf25 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf25(o, p);
}
function ownKeys16(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread16(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys16(Object(source), true).forEach(function(key3) {
        _defineProperty16(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys16(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty16(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var defaultProps3 = _objectSpread16(_objectSpread16({}, VirtualizedSectionList_default.defaultProps), {}, {
  stickySectionHeadersEnabled: Platform_default.OS === "ios"
});
var SectionList = /* @__PURE__ */ function(_React$PureComponent) {
  _inheritsLoose25(SectionList2, _React$PureComponent);
  function SectionList2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
    _this._captureRef = function(ref) {
      _this._wrapperListRef = ref;
    };
    return _this;
  }
  var _proto = SectionList2.prototype;
  _proto.scrollToLocation = function scrollToLocation(params) {
    if (this._wrapperListRef != null) {
      this._wrapperListRef.scrollToLocation(params);
    }
  };
  _proto.recordInteraction = function recordInteraction() {
    var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
    listRef && listRef.recordInteraction();
  };
  _proto.flashScrollIndicators = function flashScrollIndicators2() {
    var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
    listRef && listRef.flashScrollIndicators();
  };
  _proto.getScrollResponder = function getScrollResponder2() {
    var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
    if (listRef) {
      return listRef.getScrollResponder();
    }
  };
  _proto.getScrollableNode = function getScrollableNode2() {
    var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
    if (listRef) {
      return listRef.getScrollableNode();
    }
  };
  _proto.setNativeProps = function setNativeProps3(props) {
    var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
    if (listRef) {
      listRef.setNativeProps(props);
    }
  };
  _proto.render = function render3() {
    return /* @__PURE__ */ React15.createElement(VirtualizedSectionList_default, _extends8({}, this.props, {
      ref: this._captureRef,
      getItemCount: function getItemCount(items2) {
        return items2.length;
      },
      getItem: function getItem(items2, index) {
        return items2[index];
      }
    }));
  };
  return SectionList2;
}(React15.PureComponent);
SectionList.defaultProps = defaultProps3;
var SectionList_default = SectionList;

// node_modules/react-native-web/dist/exports/SectionList/index.js
var SectionList_default2 = SectionList_default;

// node_modules/react-native-web/dist/exports/Text/index.js
var React16 = __toModule(require_react());
var import_react11 = __toModule(require_react());
function ownKeys17(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread17(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys17(Object(source), true).forEach(function(key3) {
        _defineProperty17(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys17(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty17(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var forwardPropsList2 = _objectSpread17(_objectSpread17(_objectSpread17(_objectSpread17(_objectSpread17(_objectSpread17(_objectSpread17(_objectSpread17(_objectSpread17({}, defaultProps), accessibilityProps), clickProps), focusProps), keyboardProps), mouseProps), touchProps), styleProps), {}, {
  href: true,
  lang: true,
  pointerEvents: true
});
var pickProps3 = function pickProps4(props) {
  return pick(props, forwardPropsList2);
};
var Text = /* @__PURE__ */ (0, import_react11.forwardRef)(function(props, forwardedRef) {
  var dir = props.dir, hrefAttrs = props.hrefAttrs, numberOfLines = props.numberOfLines, onClick = props.onClick, onLayout = props.onLayout, onPress = props.onPress, onMoveShouldSetResponder = props.onMoveShouldSetResponder, onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture, onResponderEnd = props.onResponderEnd, onResponderGrant = props.onResponderGrant, onResponderMove = props.onResponderMove, onResponderReject = props.onResponderReject, onResponderRelease = props.onResponderRelease, onResponderStart = props.onResponderStart, onResponderTerminate = props.onResponderTerminate, onResponderTerminationRequest = props.onResponderTerminationRequest, onScrollShouldSetResponder = props.onScrollShouldSetResponder, onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture, onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder, onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture, onStartShouldSetResponder = props.onStartShouldSetResponder, onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture, selectable = props.selectable;
  var hasTextAncestor = (0, import_react11.useContext)(TextAncestorContext_default);
  var hostRef = (0, import_react11.useRef)(null);
  var classList2 = [classes4.text, hasTextAncestor === true && classes4.textHasAncestor, numberOfLines === 1 && classes4.textOneLine, numberOfLines != null && numberOfLines > 1 && classes4.textMultiLine];
  var style = [props.style, numberOfLines != null && numberOfLines > 1 && {
    WebkitLineClamp: numberOfLines
  }, selectable === true && styles7.selectable, selectable === false && styles7.notSelectable, onPress && styles7.pressable];
  useElementLayout(hostRef, onLayout);
  useResponderEvents(hostRef, {
    onMoveShouldSetResponder,
    onMoveShouldSetResponderCapture,
    onResponderEnd,
    onResponderGrant,
    onResponderMove,
    onResponderReject,
    onResponderRelease,
    onResponderStart,
    onResponderTerminate,
    onResponderTerminationRequest,
    onScrollShouldSetResponder,
    onScrollShouldSetResponderCapture,
    onSelectionChangeShouldSetResponder,
    onSelectionChangeShouldSetResponderCapture,
    onStartShouldSetResponder,
    onStartShouldSetResponderCapture
  });
  function handleClick(e) {
    if (onClick != null) {
      onClick(e);
    }
    if (onClick == null && onPress != null) {
      e.stopPropagation();
      onPress(e);
    }
  }
  var component = hasTextAncestor ? "span" : "div";
  var supportedProps = pickProps3(props);
  supportedProps.classList = classList2;
  supportedProps.dir = dir;
  if (!hasTextAncestor) {
    supportedProps.dir = dir != null ? dir : "auto";
  }
  supportedProps.onClick = handleClick;
  supportedProps.style = style;
  if (props.href != null && hrefAttrs != null) {
    var download3 = hrefAttrs.download, rel = hrefAttrs.rel, target2 = hrefAttrs.target;
    if (download3 != null) {
      supportedProps.download = download3;
    }
    if (rel != null) {
      supportedProps.rel = rel;
    }
    if (typeof target2 === "string" && target2.charAt(0) !== "_") {
      supportedProps.target = "_" + target2;
    }
  }
  var platformMethodsRef = usePlatformMethods(supportedProps);
  var setRef = useMergeRefs(hostRef, platformMethodsRef, forwardedRef);
  supportedProps.ref = setRef;
  var element = createElement_default(component, supportedProps);
  return hasTextAncestor ? element : /* @__PURE__ */ React16.createElement(TextAncestorContext_default.Provider, {
    value: true
  }, element);
});
Text.displayName = "Text";
var classes4 = css_default.create({
  text: {
    border: "0 solid black",
    boxSizing: "border-box",
    color: "black",
    display: "inline",
    font: "14px System",
    margin: 0,
    padding: 0,
    whiteSpace: "pre-wrap",
    wordWrap: "break-word"
  },
  textHasAncestor: {
    color: "inherit",
    font: "inherit",
    whiteSpace: "inherit"
  },
  textOneLine: {
    maxWidth: "100%",
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  },
  textMultiLine: {
    display: "-webkit-box",
    maxWidth: "100%",
    overflow: "hidden",
    textOverflow: "ellipsis",
    WebkitBoxOrient: "vertical"
  }
});
var styles7 = StyleSheet_default2.create({
  notSelectable: {
    userSelect: "none"
  },
  selectable: {
    userSelect: "text"
  },
  pressable: {
    cursor: "pointer"
  }
});
var Text_default = Text;

// node_modules/react-native-web/dist/exports/Animated/index.js
function ownKeys18(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread18(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys18(Object(source), true).forEach(function(key3) {
        _defineProperty18(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys18(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty18(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var Animated = _objectSpread18(_objectSpread18({}, AnimatedImplementation_default), {}, {
  FlatList: AnimatedImplementation_default.createAnimatedComponent(FlatList_default2, {
    scrollEventThrottle: 1e-4
  }),
  Image: AnimatedImplementation_default.createAnimatedComponent(Image_default),
  ScrollView: AnimatedImplementation_default.createAnimatedComponent(ScrollView_default, {
    scrollEventThrottle: 1e-4
  }),
  SectionList: AnimatedImplementation_default.createAnimatedComponent(SectionList_default2, {
    scrollEventThrottle: 1e-4
  }),
  View: AnimatedImplementation_default.createAnimatedComponent(View_default),
  Text: AnimatedImplementation_default.createAnimatedComponent(Text_default)
});
var Animated_default = Animated;

// node_modules/react-native-web/dist/exports/Appearance/index.js
var import_ExecutionEnvironment13 = __toModule(require_ExecutionEnvironment());
function getQuery() {
  return import_ExecutionEnvironment13.canUseDOM && window.matchMedia != null ? window.matchMedia("(prefers-color-scheme: dark)") : null;
}
var query = getQuery();
var listenerMapping = new WeakMap();
var Appearance = {
  getColorScheme: function getColorScheme() {
    return query && query.matches ? "dark" : "light";
  },
  addChangeListener: function addChangeListener2(listener3) {
    var mappedListener = listenerMapping.get(listener3);
    if (!mappedListener) {
      mappedListener = function mappedListener2(_ref) {
        var matches = _ref.matches;
        listener3({
          colorScheme: matches ? "dark" : "light"
        });
      };
      listenerMapping.set(listener3, mappedListener);
    }
    if (query) {
      query.addListener(mappedListener);
    }
  },
  removeChangeListener: function removeChangeListener2(listener3) {
    var mappedListener = listenerMapping.get(listener3);
    if (mappedListener) {
      if (query) {
        query.removeListener(mappedListener);
      }
      listenerMapping.delete(listener3);
    }
  }
};
var Appearance_default = Appearance;

// node_modules/react-native-web/dist/exports/AppRegistry/index.js
var import_invariant24 = __toModule(require_invariant());

// node_modules/react-native-web/dist/exports/AppRegistry/AppContainer.js
var import_react12 = __toModule(require_react());
var RootTagContext = /* @__PURE__ */ (0, import_react12.createContext)(null);
function AppContainer(props) {
  var children = props.children, WrapperComponent = props.WrapperComponent;
  var innerView = /* @__PURE__ */ import_react12.default.createElement(View_default, {
    children,
    key: 1,
    pointerEvents: "box-none",
    style: styles8.appContainer
  });
  if (WrapperComponent) {
    innerView = /* @__PURE__ */ import_react12.default.createElement(WrapperComponent, null, innerView);
  }
  return /* @__PURE__ */ import_react12.default.createElement(RootTagContext.Provider, {
    value: props.rootTag
  }, /* @__PURE__ */ import_react12.default.createElement(View_default, {
    pointerEvents: "box-none",
    style: styles8.appContainer
  }, innerView));
}
var styles8 = StyleSheet_default2.create({
  appContainer: {
    flex: 1
  }
});

// node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js
var import_invariant23 = __toModule(require_invariant());
var import_react13 = __toModule(require_react());
function _extends9() {
  _extends9 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends9.apply(this, arguments);
}
function renderApplication(RootComponent, WrapperComponent, callback, options) {
  var shouldHydrate = options.hydrate, initialProps = options.initialProps, rootTag = options.rootTag;
  var renderFn = shouldHydrate ? import_react_dom2.hydrate : render_default;
  (0, import_invariant23.default)(rootTag, "Expect to have a valid rootTag, instead got ", rootTag);
  renderFn(/* @__PURE__ */ import_react13.default.createElement(AppContainer, {
    WrapperComponent,
    rootTag
  }, /* @__PURE__ */ import_react13.default.createElement(RootComponent, initialProps)), rootTag, callback);
}
function getApplication(RootComponent, initialProps, WrapperComponent) {
  var element = /* @__PURE__ */ import_react13.default.createElement(AppContainer, {
    WrapperComponent,
    rootTag: {}
  }, /* @__PURE__ */ import_react13.default.createElement(RootComponent, initialProps));
  var getStyleElement2 = function getStyleElement3(props) {
    var sheet = styleResolver_default.getStyleSheet();
    return /* @__PURE__ */ import_react13.default.createElement("style", _extends9({}, props, {
      dangerouslySetInnerHTML: {
        __html: sheet.textContent
      },
      id: sheet.id
    }));
  };
  return {
    element,
    getStyleElement: getStyleElement2
  };
}

// node_modules/react-native-web/dist/exports/AppRegistry/index.js
function ownKeys19(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread19(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys19(Object(source), true).forEach(function(key3) {
        _defineProperty19(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys19(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty19(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var emptyObject12 = {};
var runnables = {};
var componentProviderInstrumentationHook = function componentProviderInstrumentationHook2(component) {
  return component();
};
var wrapperComponentProvider;
var AppRegistry = /* @__PURE__ */ function() {
  function AppRegistry2() {
  }
  AppRegistry2.getAppKeys = function getAppKeys() {
    return Object.keys(runnables);
  };
  AppRegistry2.getApplication = function getApplication2(appKey, appParameters) {
    (0, import_invariant24.default)(runnables[appKey] && runnables[appKey].getApplication, "Application " + appKey + " has not been registered. This is either due to an import error during initialization or failure to call AppRegistry.registerComponent.");
    return runnables[appKey].getApplication(appParameters);
  };
  AppRegistry2.registerComponent = function registerComponent(appKey, componentProvider) {
    runnables[appKey] = {
      getApplication: function getApplication2(appParameters) {
        return getApplication(componentProviderInstrumentationHook(componentProvider), appParameters ? appParameters.initialProps : emptyObject12, wrapperComponentProvider && wrapperComponentProvider(appParameters));
      },
      run: function run2(appParameters) {
        return renderApplication(componentProviderInstrumentationHook(componentProvider), wrapperComponentProvider && wrapperComponentProvider(appParameters), appParameters.callback, {
          hydrate: appParameters.hydrate || false,
          initialProps: appParameters.initialProps || emptyObject12,
          rootTag: appParameters.rootTag
        });
      }
    };
    return appKey;
  };
  AppRegistry2.registerConfig = function registerConfig(config) {
    config.forEach(function(_ref) {
      var appKey = _ref.appKey, component = _ref.component, run2 = _ref.run;
      if (run2) {
        AppRegistry2.registerRunnable(appKey, run2);
      } else {
        (0, import_invariant24.default)(component, "No component provider passed in");
        AppRegistry2.registerComponent(appKey, component);
      }
    });
  };
  AppRegistry2.registerRunnable = function registerRunnable(appKey, run2) {
    runnables[appKey] = {
      run: run2
    };
    return appKey;
  };
  AppRegistry2.runApplication = function runApplication(appKey, appParameters) {
    var isDevelopment = true;
    if (isDevelopment) {
      var params = _objectSpread19({}, appParameters);
      params.rootTag = "#" + params.rootTag.id;
      console.log('Running application "' + appKey + '" with appParams:\n', params, "\nDevelopment-level warnings: " + (isDevelopment ? "ON" : "OFF") + "." + ("\nPerformance optimizations: " + (isDevelopment ? "OFF" : "ON") + "."));
    }
    (0, import_invariant24.default)(runnables[appKey] && runnables[appKey].run, 'Application "' + appKey + '" has not been registered. This is either due to an import error during initialization or failure to call AppRegistry.registerComponent.');
    runnables[appKey].run(appParameters);
  };
  AppRegistry2.setComponentProviderInstrumentationHook = function setComponentProviderInstrumentationHook(hook2) {
    componentProviderInstrumentationHook = hook2;
  };
  AppRegistry2.setWrapperComponentProvider = function setWrapperComponentProvider(provider) {
    wrapperComponentProvider = provider;
  };
  AppRegistry2.unmountApplicationComponentAtRootTag = function unmountApplicationComponentAtRootTag(rootTag) {
    unmountComponentAtNode_default(rootTag);
  };
  return AppRegistry2;
}();

// node_modules/react-native-web/dist/exports/BackHandler/index.js
function emptyFunction3() {
}
var BackHandler = {
  exitApp: emptyFunction3,
  addEventListener: function addEventListener2() {
    return {
      remove: emptyFunction3
    };
  },
  removeEventListener: emptyFunction3
};
var BackHandler_default = BackHandler;

// node_modules/react-native-web/dist/exports/Easing/index.js
var Easing_default2 = Easing_default;

// node_modules/react-native-web/dist/exports/Keyboard/index.js
var Keyboard = {
  addListener: function addListener2() {
    return {
      remove: function remove2() {
      }
    };
  },
  dismiss: function dismiss() {
    dismissKeyboard_default();
  },
  removeAllListeners: function removeAllListeners() {
  },
  removeListener: function removeListener() {
  }
};
var Keyboard_default = Keyboard;

// node_modules/react-native-web/dist/exports/Linking/index.js
var import_ExecutionEnvironment14 = __toModule(require_ExecutionEnvironment());
var import_invariant25 = __toModule(require_invariant());
var initialURL = import_ExecutionEnvironment14.canUseDOM ? window.location.href : "";
var Linking = /* @__PURE__ */ function() {
  function Linking2() {
    var _this = this;
    this._eventCallbacks = {};
    this.addEventListener = function(event4, callback) {
      if (!_this._eventCallbacks[event4]) {
        _this._eventCallbacks[event4] = [callback];
        return;
      }
      _this._eventCallbacks[event4].push(callback);
    };
    this.removeEventListener = function(event4, callback) {
      var callbacks = _this._eventCallbacks[event4];
      var filteredCallbacks = callbacks.filter(function(c) {
        return c.toString() !== callback.toString();
      });
      _this._eventCallbacks[event4] = filteredCallbacks;
    };
  }
  var _proto = Linking2.prototype;
  _proto._dispatchEvent = function _dispatchEvent(event4) {
    for (var _len = arguments.length, data2 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data2[_key - 1] = arguments[_key];
    }
    var listeners3 = this._eventCallbacks[event4];
    if (listeners3 != null && Array.isArray(listeners3)) {
      listeners3.map(function(listener3) {
        listener3.apply(void 0, data2);
      });
    }
  };
  _proto.canOpenURL = function canOpenURL() {
    return Promise.resolve(true);
  };
  _proto.getInitialURL = function getInitialURL() {
    return Promise.resolve(initialURL);
  };
  _proto.openURL = function openURL(url) {
    try {
      open(url);
      this._dispatchEvent("onOpen", url);
      return Promise.resolve();
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto._validateURL = function _validateURL(url) {
    (0, import_invariant25.default)(typeof url === "string", "Invalid URL: should be a string. Was: " + url);
    (0, import_invariant25.default)(url, "Invalid URL: cannot be empty");
  };
  return Linking2;
}();
var open = function open2(url) {
  if (import_ExecutionEnvironment14.canUseDOM) {
    var urlToOpen = new URL(url, window.location).toString();
    window.open(urlToOpen, "_blank", "noopener");
  }
};
var Linking_default = new Linking();

// node_modules/react-native-web/dist/exports/NativeEventEmitter/index.js
var NativeEventEmitter_default2 = NativeEventEmitter_default;

// node_modules/react-native-web/dist/exports/ActivityIndicator/index.js
var import_react14 = __toModule(require_react());
function _extends10() {
  _extends10 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends10.apply(this, arguments);
}
function _objectWithoutPropertiesLoose8(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
var accessibilityValue = {
  max: 1,
  min: 0
};
var createSvgCircle = function createSvgCircle2(style) {
  return /* @__PURE__ */ import_react14.default.createElement("circle", {
    cx: "16",
    cy: "16",
    fill: "none",
    r: "14",
    strokeWidth: "4",
    style
  });
};
var ActivityIndicator = /* @__PURE__ */ (0, import_react14.forwardRef)(function(props, forwardedRef) {
  var _props$animating = props.animating, animating = _props$animating === void 0 ? true : _props$animating, _props$color = props.color, color39 = _props$color === void 0 ? "#1976D2" : _props$color, _props$hidesWhenStopp = props.hidesWhenStopped, hidesWhenStopped = _props$hidesWhenStopp === void 0 ? true : _props$hidesWhenStopp, _props$size = props.size, size = _props$size === void 0 ? "small" : _props$size, style = props.style, other = _objectWithoutPropertiesLoose8(props, ["animating", "color", "hidesWhenStopped", "size", "style"]);
  var svg2 = /* @__PURE__ */ import_react14.default.createElement("svg", {
    height: "100%",
    viewBox: "0 0 32 32",
    width: "100%"
  }, createSvgCircle({
    stroke: color39,
    opacity: 0.2
  }), createSvgCircle({
    stroke: color39,
    strokeDasharray: 80,
    strokeDashoffset: 60
  }));
  return /* @__PURE__ */ import_react14.default.createElement(View_default, _extends10({}, other, {
    accessibilityRole: "progressbar",
    accessibilityValue,
    ref: forwardedRef,
    style: [styles9.container, style]
  }), /* @__PURE__ */ import_react14.default.createElement(View_default, {
    children: svg2,
    style: [typeof size === "number" ? {
      height: size,
      width: size
    } : indicatorSizes[size], styles9.animation, !animating && styles9.animationPause, !animating && hidesWhenStopped && styles9.hidesWhenStopped]
  }));
});
ActivityIndicator.displayName = "ActivityIndicator";
var styles9 = StyleSheet_default2.create({
  container: {
    alignItems: "center",
    justifyContent: "center"
  },
  hidesWhenStopped: {
    visibility: "hidden"
  },
  animation: {
    animationDuration: "0.75s",
    animationKeyframes: [{
      "0%": {
        transform: [{
          rotate: "0deg"
        }]
      },
      "100%": {
        transform: [{
          rotate: "360deg"
        }]
      }
    }],
    animationTimingFunction: "linear",
    animationIterationCount: "infinite"
  },
  animationPause: {
    animationPlayState: "paused"
  }
});
var indicatorSizes = StyleSheet_default2.create({
  small: {
    width: 20,
    height: 20
  },
  large: {
    width: 36,
    height: 36
  }
});
var ActivityIndicator_default = ActivityIndicator;

// node_modules/react-native-web/dist/exports/TouchableOpacity/index.js
var React20 = __toModule(require_react());
var import_react16 = __toModule(require_react());

// node_modules/react-native-web/dist/modules/usePressEvents/PressResponder.js
"use strict";
var DELAY = "DELAY";
var ERROR = "ERROR";
var LONG_PRESS_DETECTED = "LONG_PRESS_DETECTED";
var NOT_RESPONDER = "NOT_RESPONDER";
var RESPONDER_ACTIVE_LONG_PRESS_START = "RESPONDER_ACTIVE_LONG_PRESS_START";
var RESPONDER_ACTIVE_PRESS_START = "RESPONDER_ACTIVE_PRESS_START";
var RESPONDER_INACTIVE_PRESS_START = "RESPONDER_INACTIVE_PRESS_START";
var RESPONDER_GRANT = "RESPONDER_GRANT";
var RESPONDER_RELEASE = "RESPONDER_RELEASE";
var RESPONDER_TERMINATED = "RESPONDER_TERMINATED";
var Transitions = Object.freeze({
  NOT_RESPONDER: {
    DELAY: ERROR,
    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,
    RESPONDER_RELEASE: ERROR,
    RESPONDER_TERMINATED: ERROR,
    LONG_PRESS_DETECTED: ERROR
  },
  RESPONDER_INACTIVE_PRESS_START: {
    DELAY: RESPONDER_ACTIVE_PRESS_START,
    RESPONDER_GRANT: ERROR,
    RESPONDER_RELEASE: NOT_RESPONDER,
    RESPONDER_TERMINATED: NOT_RESPONDER,
    LONG_PRESS_DETECTED: ERROR
  },
  RESPONDER_ACTIVE_PRESS_START: {
    DELAY: ERROR,
    RESPONDER_GRANT: ERROR,
    RESPONDER_RELEASE: NOT_RESPONDER,
    RESPONDER_TERMINATED: NOT_RESPONDER,
    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START
  },
  RESPONDER_ACTIVE_LONG_PRESS_START: {
    DELAY: ERROR,
    RESPONDER_GRANT: ERROR,
    RESPONDER_RELEASE: NOT_RESPONDER,
    RESPONDER_TERMINATED: NOT_RESPONDER,
    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START
  },
  ERROR: {
    DELAY: NOT_RESPONDER,
    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,
    RESPONDER_RELEASE: NOT_RESPONDER,
    RESPONDER_TERMINATED: NOT_RESPONDER,
    LONG_PRESS_DETECTED: NOT_RESPONDER
  }
});
var isActiveSignal = function isActiveSignal2(signal3) {
  return signal3 === RESPONDER_ACTIVE_PRESS_START || signal3 === RESPONDER_ACTIVE_LONG_PRESS_START;
};
var isButtonRole = function isButtonRole2(element) {
  return element.getAttribute("role") === "button";
};
var isPressStartSignal = function isPressStartSignal2(signal3) {
  return signal3 === RESPONDER_INACTIVE_PRESS_START || signal3 === RESPONDER_ACTIVE_PRESS_START || signal3 === RESPONDER_ACTIVE_LONG_PRESS_START;
};
var isTerminalSignal = function isTerminalSignal2(signal3) {
  return signal3 === RESPONDER_TERMINATED || signal3 === RESPONDER_RELEASE;
};
var isValidKeyPress = function isValidKeyPress2(event4) {
  var key3 = event4.key;
  var target2 = event4.currentTarget;
  var role = target2.getAttribute("role");
  var isSpacebar = key3 === " " || key3 === "Spacebar";
  return !event4.repeat && (key3 === "Enter" || isSpacebar && (role === "button" || role === "menuitem"));
};
var DEFAULT_LONG_PRESS_DELAY_MS = 450;
var DEFAULT_PRESS_DELAY_MS = 50;
var PressResponder = /* @__PURE__ */ function() {
  function PressResponder2(config) {
    this._eventHandlers = null;
    this._isPointerTouch = false;
    this._longPressDelayTimeout = null;
    this._longPressDispatched = false;
    this._pressDelayTimeout = null;
    this._pressOutDelayTimeout = null;
    this._touchState = NOT_RESPONDER;
    this.configure(config);
  }
  var _proto = PressResponder2.prototype;
  _proto.configure = function configure(config) {
    this._config = config;
  };
  _proto.reset = function reset2() {
    this._cancelLongPressDelayTimeout();
    this._cancelPressDelayTimeout();
    this._cancelPressOutDelayTimeout();
  };
  _proto.getEventHandlers = function getEventHandlers() {
    if (this._eventHandlers == null) {
      this._eventHandlers = this._createEventHandlers();
    }
    return this._eventHandlers;
  };
  _proto._createEventHandlers = function _createEventHandlers() {
    var _this = this;
    var start = function start2(event4, shouldDelay) {
      event4.persist();
      _this._cancelPressOutDelayTimeout();
      _this._longPressDispatched = false;
      _this._responder = event4.currentTarget;
      _this._selectionTerminated = false;
      _this._touchState = NOT_RESPONDER;
      _this._isPointerTouch = event4.nativeEvent.type === "touchstart";
      _this._receiveSignal(RESPONDER_GRANT, event4);
      var delayPressStart = normalizeDelay(_this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);
      if (shouldDelay !== false && delayPressStart > 0) {
        _this._pressDelayTimeout = setTimeout(function() {
          _this._receiveSignal(DELAY, event4);
        }, delayPressStart);
      } else {
        _this._receiveSignal(DELAY, event4);
      }
      var delayLongPress = normalizeDelay(_this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);
      _this._longPressDelayTimeout = setTimeout(function() {
        _this._handleLongPress(event4);
      }, delayLongPress + delayPressStart);
    };
    var end = function end2(event4) {
      _this._receiveSignal(RESPONDER_RELEASE, event4);
    };
    var keyupHandler = function keyupHandler2(event4) {
      if (_this._touchState !== NOT_RESPONDER) {
        end(event4);
        document.removeEventListener("keyup", keyupHandler2);
      }
    };
    return {
      onStartShouldSetResponder: function onStartShouldSetResponder(event4) {
        var disabled = _this._config.disabled;
        if (disabled && isButtonRole(event4.currentTarget)) {
          event4.stopPropagation();
        }
        if (disabled == null) {
          return true;
        }
        return !disabled;
      },
      onKeyDown: function onKeyDown2(event4) {
        if (isValidKeyPress(event4)) {
          if (_this._touchState === NOT_RESPONDER) {
            start(event4, false);
            document.addEventListener("keyup", keyupHandler);
          }
          event4.stopPropagation();
        }
      },
      onResponderGrant: function onResponderGrant(event4) {
        return start(event4);
      },
      onResponderMove: function onResponderMove(event4) {
        if (_this._config.onPressMove != null) {
          _this._config.onPressMove(event4);
        }
        var touch = getTouchFromResponderEvent(event4);
        if (_this._touchActivatePosition != null) {
          var deltaX = _this._touchActivatePosition.pageX - touch.pageX;
          var deltaY = _this._touchActivatePosition.pageY - touch.pageY;
          if (Math.hypot(deltaX, deltaY) > 10) {
            _this._cancelLongPressDelayTimeout();
          }
        }
      },
      onResponderRelease: function onResponderRelease(event4) {
        return end(event4);
      },
      onResponderTerminate: function onResponderTerminate(event4) {
        if (event4.nativeEvent.type === "selectionchange") {
          _this._selectionTerminated = true;
        }
        _this._receiveSignal(RESPONDER_TERMINATED, event4);
      },
      onResponderTerminationRequest: function onResponderTerminationRequest(event4) {
        var _this$_config = _this._config, cancelable = _this$_config.cancelable, disabled = _this$_config.disabled, onLongPress = _this$_config.onLongPress;
        if (!disabled && onLongPress != null && _this._isPointerTouch && event4.nativeEvent.type === "contextmenu") {
          return false;
        }
        if (cancelable == null) {
          return true;
        }
        return cancelable;
      },
      onClick: function onClick(event4) {
        var _this$_config2 = _this._config, disabled = _this$_config2.disabled, onPress = _this$_config2.onPress;
        if (!disabled) {
          event4.stopPropagation();
          if (_this._longPressDispatched || _this._selectionTerminated) {
            event4.preventDefault();
          } else if (onPress != null && event4.ctrlKey === false && event4.altKey === false) {
            onPress(event4);
          }
        } else {
          if (isButtonRole(event4.currentTarget)) {
            event4.stopPropagation();
          }
        }
      },
      onContextMenu: function onContextMenu(event4) {
        var _this$_config3 = _this._config, disabled = _this$_config3.disabled, onLongPress = _this$_config3.onLongPress;
        if (!disabled) {
          if (onLongPress != null && _this._isPointerTouch && !event4.defaultPrevented) {
            event4.preventDefault();
            event4.stopPropagation();
          }
        } else {
          if (isButtonRole(event4.currentTarget)) {
            event4.stopPropagation();
          }
        }
      }
    };
  };
  _proto._receiveSignal = function _receiveSignal(signal3, event4) {
    var prevState = this._touchState;
    var nextState = null;
    if (Transitions[prevState] != null) {
      nextState = Transitions[prevState][signal3];
    }
    if (this._responder == null && signal3 === RESPONDER_RELEASE) {
      return;
    }
    if (nextState == null || nextState === ERROR) {
      console.error("PressResponder: Invalid signal " + signal3 + " for state " + prevState + " on responder");
    } else if (prevState !== nextState) {
      this._performTransitionSideEffects(prevState, nextState, signal3, event4);
      this._touchState = nextState;
    }
  };
  _proto._performTransitionSideEffects = function _performTransitionSideEffects(prevState, nextState, signal3, event4) {
    if (isTerminalSignal(signal3)) {
      this._isPointerTouch = false;
      this._touchActivatePosition = null;
      this._cancelLongPressDelayTimeout();
    }
    if (isPressStartSignal(prevState) && signal3 === LONG_PRESS_DETECTED) {
      var onLongPress = this._config.onLongPress;
      if (onLongPress != null && event4.nativeEvent.key == null) {
        onLongPress(event4);
        this._longPressDispatched = true;
      }
    }
    var isPrevActive = isActiveSignal(prevState);
    var isNextActive = isActiveSignal(nextState);
    if (!isPrevActive && isNextActive) {
      this._activate(event4);
    } else if (isPrevActive && !isNextActive) {
      this._deactivate(event4);
    }
    if (isPressStartSignal(prevState) && signal3 === RESPONDER_RELEASE) {
      var _this$_config4 = this._config, _onLongPress = _this$_config4.onLongPress, onPress = _this$_config4.onPress;
      if (onPress != null) {
        var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;
        if (!isPressCanceledByLongPress) {
          if (!isNextActive && !isPrevActive) {
            this._activate(event4);
            this._deactivate(event4);
          }
        }
      }
    }
    this._cancelPressDelayTimeout();
  };
  _proto._activate = function _activate(event4) {
    var _this$_config5 = this._config, onPressChange = _this$_config5.onPressChange, onPressStart = _this$_config5.onPressStart;
    var touch = getTouchFromResponderEvent(event4);
    this._touchActivatePosition = {
      pageX: touch.pageX,
      pageY: touch.pageY
    };
    if (onPressStart != null) {
      onPressStart(event4);
    }
    if (onPressChange != null) {
      onPressChange(true);
    }
  };
  _proto._deactivate = function _deactivate(event4) {
    var _this$_config6 = this._config, onPressChange = _this$_config6.onPressChange, onPressEnd = _this$_config6.onPressEnd;
    function end() {
      if (onPressEnd != null) {
        onPressEnd(event4);
      }
      if (onPressChange != null) {
        onPressChange(false);
      }
    }
    var delayPressEnd = normalizeDelay(this._config.delayPressEnd);
    if (delayPressEnd > 0) {
      this._pressOutDelayTimeout = setTimeout(function() {
        end();
      }, delayPressEnd);
    } else {
      end();
    }
  };
  _proto._handleLongPress = function _handleLongPress(event4) {
    if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {
      this._receiveSignal(LONG_PRESS_DETECTED, event4);
    }
  };
  _proto._cancelLongPressDelayTimeout = function _cancelLongPressDelayTimeout() {
    if (this._longPressDelayTimeout != null) {
      clearTimeout(this._longPressDelayTimeout);
      this._longPressDelayTimeout = null;
    }
  };
  _proto._cancelPressDelayTimeout = function _cancelPressDelayTimeout() {
    if (this._pressDelayTimeout != null) {
      clearTimeout(this._pressDelayTimeout);
      this._pressDelayTimeout = null;
    }
  };
  _proto._cancelPressOutDelayTimeout = function _cancelPressOutDelayTimeout() {
    if (this._pressOutDelayTimeout != null) {
      clearTimeout(this._pressOutDelayTimeout);
      this._pressOutDelayTimeout = null;
    }
  };
  return PressResponder2;
}();
function normalizeDelay(delay3, min3, fallback) {
  if (min3 === void 0) {
    min3 = 0;
  }
  if (fallback === void 0) {
    fallback = 0;
  }
  return Math.max(min3, delay3 !== null && delay3 !== void 0 ? delay3 : fallback);
}
function getTouchFromResponderEvent(event4) {
  var _event$nativeEvent = event4.nativeEvent, changedTouches = _event$nativeEvent.changedTouches, touches = _event$nativeEvent.touches;
  if (touches != null && touches.length > 0) {
    return touches[0];
  }
  if (changedTouches != null && changedTouches.length > 0) {
    return changedTouches[0];
  }
  return event4.nativeEvent;
}

// node_modules/react-native-web/dist/modules/usePressEvents/index.js
var import_react15 = __toModule(require_react());
"use strict";
function usePressEvents(hostRef, config) {
  var pressResponderRef = (0, import_react15.useRef)(null);
  if (pressResponderRef.current == null) {
    pressResponderRef.current = new PressResponder(config);
  }
  var pressResponder = pressResponderRef.current;
  (0, import_react15.useEffect)(function() {
    pressResponder.configure(config);
  }, [config, pressResponder]);
  (0, import_react15.useEffect)(function() {
    return function() {
      pressResponder.reset();
    };
  }, [pressResponder]);
  (0, import_react15.useDebugValue)(config);
  return pressResponder.getEventHandlers();
}

// node_modules/react-native-web/dist/exports/TouchableOpacity/index.js
"use strict";
function _extends11() {
  _extends11 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends11.apply(this, arguments);
}
function _objectWithoutPropertiesLoose9(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
function TouchableOpacity(props, forwardedRef) {
  var activeOpacity = props.activeOpacity, delayPressIn = props.delayPressIn, delayPressOut = props.delayPressOut, delayLongPress = props.delayLongPress, disabled = props.disabled, focusable = props.focusable, onLongPress = props.onLongPress, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, rejectResponderTermination = props.rejectResponderTermination, style = props.style, rest = _objectWithoutPropertiesLoose9(props, ["activeOpacity", "delayPressIn", "delayPressOut", "delayLongPress", "disabled", "focusable", "onLongPress", "onPress", "onPressIn", "onPressOut", "rejectResponderTermination", "style"]);
  var hostRef = (0, import_react16.useRef)(null);
  var setRef = useMergeRefs(forwardedRef, hostRef);
  var _useState = (0, import_react16.useState)("0s"), duration = _useState[0], setDuration = _useState[1];
  var _useState2 = (0, import_react16.useState)(null), opacityOverride = _useState2[0], setOpacityOverride = _useState2[1];
  var setOpacityTo = (0, import_react16.useCallback)(function(value, duration2) {
    setOpacityOverride(value);
    setDuration(duration2 ? duration2 / 1e3 + "s" : "0s");
  }, [setOpacityOverride, setDuration]);
  var setOpacityActive = (0, import_react16.useCallback)(function(duration2) {
    setOpacityTo(activeOpacity !== null && activeOpacity !== void 0 ? activeOpacity : 0.2, duration2);
  }, [activeOpacity, setOpacityTo]);
  var setOpacityInactive = (0, import_react16.useCallback)(function(duration2) {
    setOpacityTo(null, duration2);
  }, [setOpacityTo]);
  var pressConfig = (0, import_react16.useMemo)(function() {
    return {
      cancelable: !rejectResponderTermination,
      disabled,
      delayLongPress,
      delayPressStart: delayPressIn,
      delayPressEnd: delayPressOut,
      onLongPress,
      onPress,
      onPressStart: function onPressStart(event4) {
        var isGrant = event4.dispatchConfig != null ? event4.dispatchConfig.registrationName === "onResponderGrant" : event4.type === "keydown";
        setOpacityActive(isGrant ? 0 : 150);
        if (onPressIn != null) {
          onPressIn(event4);
        }
      },
      onPressEnd: function onPressEnd(event4) {
        setOpacityInactive(250);
        if (onPressOut != null) {
          onPressOut(event4);
        }
      }
    };
  }, [delayLongPress, delayPressIn, delayPressOut, disabled, onLongPress, onPress, onPressIn, onPressOut, rejectResponderTermination, setOpacityActive, setOpacityInactive]);
  var pressEventHandlers = usePressEvents(hostRef, pressConfig);
  return /* @__PURE__ */ React20.createElement(View_default, _extends11({}, rest, pressEventHandlers, {
    accessibilityDisabled: disabled,
    focusable: !disabled && focusable !== false,
    ref: setRef,
    style: [styles10.root, !disabled && styles10.actionable, style, opacityOverride != null && {
      opacity: opacityOverride
    }, {
      transitionDuration: duration
    }]
  }));
}
var styles10 = StyleSheet_default2.create({
  root: {
    transitionProperty: "opacity",
    transitionDuration: "0.15s",
    userSelect: "none"
  },
  actionable: {
    cursor: "pointer",
    touchAction: "manipulation"
  }
});
var MemoedTouchableOpacity = /* @__PURE__ */ React20.memo(/* @__PURE__ */ React20.forwardRef(TouchableOpacity));
MemoedTouchableOpacity.displayName = "TouchableOpacity";
var TouchableOpacity_default = MemoedTouchableOpacity;

// node_modules/react-native-web/dist/exports/ImageBackground/index.js
var React21 = __toModule(require_react());
var import_react17 = __toModule(require_react());
function _extends12() {
  _extends12 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends12.apply(this, arguments);
}
function _objectWithoutPropertiesLoose10(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
var emptyObject13 = {};
var ImageBackground = /* @__PURE__ */ (0, import_react17.forwardRef)(function(props, forwardedRef) {
  var children = props.children, _props$style = props.style, style = _props$style === void 0 ? emptyObject13 : _props$style, imageStyle = props.imageStyle, imageRef = props.imageRef, rest = _objectWithoutPropertiesLoose10(props, ["children", "style", "imageStyle", "imageRef"]);
  var _StyleSheet$flatten = StyleSheet_default2.flatten(style), height = _StyleSheet$flatten.height, width = _StyleSheet$flatten.width;
  return /* @__PURE__ */ React21.createElement(View_default, {
    ref: forwardedRef,
    style
  }, /* @__PURE__ */ React21.createElement(Image_default, _extends12({}, rest, {
    ref: imageRef,
    style: [StyleSheet_default2.absoluteFill, {
      width,
      height,
      zIndex: -1
    }, imageStyle]
  })), children);
});
ImageBackground.displayName = "ImageBackground";
var ImageBackground_default = ImageBackground;

// node_modules/react-native-web/dist/exports/KeyboardAvoidingView/index.js
var import_react18 = __toModule(require_react());
function _extends13() {
  _extends13 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends13.apply(this, arguments);
}
function _objectWithoutPropertiesLoose11(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
function _inheritsLoose26(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf26(subClass, superClass);
}
function _setPrototypeOf26(o, p) {
  _setPrototypeOf26 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf26(o, p);
}
var KeyboardAvoidingView = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose26(KeyboardAvoidingView2, _React$Component);
  function KeyboardAvoidingView2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.frame = null;
    _this.onLayout = function(event4) {
      _this.frame = event4.nativeEvent.layout;
    };
    return _this;
  }
  var _proto = KeyboardAvoidingView2.prototype;
  _proto.relativeKeyboardHeight = function relativeKeyboardHeight(keyboardFrame) {
    var frame = this.frame;
    if (!frame || !keyboardFrame) {
      return 0;
    }
    var keyboardY = keyboardFrame.screenY - (this.props.keyboardVerticalOffset || 0);
    return Math.max(frame.y + frame.height - keyboardY, 0);
  };
  _proto.onKeyboardChange = function onKeyboardChange(event4) {
  };
  _proto.render = function render3() {
    var _this$props = this.props, behavior = _this$props.behavior, contentContainerStyle = _this$props.contentContainerStyle, keyboardVerticalOffset = _this$props.keyboardVerticalOffset, rest = _objectWithoutPropertiesLoose11(_this$props, ["behavior", "contentContainerStyle", "keyboardVerticalOffset"]);
    return /* @__PURE__ */ import_react18.default.createElement(View_default, _extends13({
      onLayout: this.onLayout
    }, rest));
  };
  return KeyboardAvoidingView2;
}(import_react18.default.Component);
var KeyboardAvoidingView_default = KeyboardAvoidingView;

// node_modules/react-native-web/dist/exports/Pressable/index.js
var React23 = __toModule(require_react());
var import_react19 = __toModule(require_react());

// node_modules/react-native-web/dist/modules/modality/index.js
var import_ExecutionEnvironment16 = __toModule(require_ExecutionEnvironment());

// node_modules/react-native-web/dist/modules/createEventHandle/index.js
var import_ExecutionEnvironment15 = __toModule(require_ExecutionEnvironment());
"use strict";
var emptyFunction4 = function emptyFunction5() {
};
function supportsPassiveEvents() {
  var supported = false;
  if (import_ExecutionEnvironment15.canUseDOM) {
    try {
      var options = {};
      Object.defineProperty(options, "passive", {
        get: function get3() {
          supported = true;
          return false;
        }
      });
      window.addEventListener("test", null, options);
      window.removeEventListener("test", null, options);
    } catch (e) {
    }
  }
  return supported;
}
var canUsePassiveEvents = supportsPassiveEvents();
function getOptions(options) {
  if (options == null) {
    return false;
  }
  return canUsePassiveEvents ? options : Boolean(options.capture);
}
function isPropagationStopped() {
  return this.cancelBubble;
}
function isDefaultPrevented() {
  return this.defaultPrevented;
}
function normalizeEvent(event4) {
  event4.nativeEvent = event4;
  event4.persist = emptyFunction4;
  event4.isDefaultPrevented = isDefaultPrevented;
  event4.isPropagationStopped = isPropagationStopped;
  return event4;
}
function createEventHandle(type, options) {
  var opts2 = getOptions(options);
  return function(target2, listener3) {
    if (target2 == null || typeof target2.addEventListener !== "function") {
      throw new Error("createEventHandle: called on an invalid target.");
    }
    var element = target2;
    if (listener3 != null) {
      var compatListener = function compatListener2(e) {
        return listener3(normalizeEvent(e));
      };
      element.addEventListener(type, compatListener, opts2);
      return function removeListener2() {
        if (element != null) {
          element.removeEventListener(type, compatListener, opts2);
        }
      };
    } else {
      return emptyFunction4;
    }
  };
}

// node_modules/react-native-web/dist/modules/modality/index.js
var supportsPointerEvent = function supportsPointerEvent2() {
  return !!(typeof window !== "undefined" && window.PointerEvent != null);
};
var activeModality = "keyboard";
var modality3 = "keyboard";
var previousModality;
var previousActiveModality;
var isEmulatingMouseEvents2 = false;
var listeners2 = new Set();
var KEYBOARD = "keyboard";
var MOUSE = "mouse";
var TOUCH = "touch";
var BLUR = "blur";
var CONTEXTMENU = "contextmenu";
var FOCUS = "focus";
var KEYDOWN = "keydown";
var MOUSEDOWN = "mousedown";
var MOUSEMOVE = "mousemove";
var MOUSEUP = "mouseup";
var POINTERDOWN = "pointerdown";
var POINTERMOVE = "pointermove";
var SCROLL2 = "scroll";
var SELECTIONCHANGE = "selectionchange";
var TOUCHCANCEL = "touchcancel";
var TOUCHMOVE = "touchmove";
var TOUCHSTART = "touchstart";
var VISIBILITYCHANGE = "visibilitychange";
var bubbleOptions = {
  passive: true
};
var captureOptions = {
  capture: true,
  passive: true
};
var addBlurListener = createEventHandle(BLUR, bubbleOptions);
var addFocusListener = createEventHandle(FOCUS, bubbleOptions);
var addVisibilityChangeListener = createEventHandle(VISIBILITYCHANGE, captureOptions);
var addKeyDownListener = createEventHandle(KEYDOWN, captureOptions);
var addPointerDownListener = createEventHandle(POINTERDOWN, captureOptions);
var addPointerMoveListener = createEventHandle(POINTERMOVE, captureOptions);
var addContextMenuListener = createEventHandle(CONTEXTMENU, captureOptions);
var addMouseDownListener = createEventHandle(MOUSEDOWN, captureOptions);
var addMouseMoveListener = createEventHandle(MOUSEMOVE, captureOptions);
var addMouseUpListener = createEventHandle(MOUSEUP, captureOptions);
var addScrollListener = createEventHandle(SCROLL2, captureOptions);
var addSelectiomChangeListener = createEventHandle(SELECTIONCHANGE, captureOptions);
var addTouchCancelListener = createEventHandle(TOUCHCANCEL, captureOptions);
var addTouchMoveListener = createEventHandle(TOUCHMOVE, captureOptions);
var addTouchStartListener = createEventHandle(TOUCHSTART, captureOptions);
function restoreModality() {
  if (previousModality != null || previousActiveModality != null) {
    if (previousModality != null) {
      modality3 = previousModality;
      previousModality = null;
    }
    if (previousActiveModality != null) {
      activeModality = previousActiveModality;
      previousActiveModality = null;
    }
    callListeners();
  }
}
function onBlurWindow() {
  previousModality = modality3;
  previousActiveModality = activeModality;
  activeModality = KEYBOARD;
  modality3 = KEYBOARD;
  callListeners();
  isEmulatingMouseEvents2 = false;
}
function onFocusWindow() {
  restoreModality();
}
function onKeyDown(event4) {
  if (event4.metaKey || event4.altKey || event4.ctrlKey) {
    return;
  }
  if (modality3 !== KEYBOARD) {
    modality3 = KEYBOARD;
    activeModality = KEYBOARD;
    callListeners();
  }
}
function onVisibilityChange() {
  if (document.visibilityState !== "hidden") {
    restoreModality();
  }
}
function onPointerish(event4) {
  var eventType = event4.type;
  if (supportsPointerEvent()) {
    if (eventType === POINTERDOWN) {
      if (activeModality !== event4.pointerType) {
        modality3 = event4.pointerType;
        activeModality = event4.pointerType;
        callListeners();
      }
      return;
    }
    if (eventType === POINTERMOVE) {
      if (modality3 !== event4.pointerType) {
        modality3 = event4.pointerType;
        callListeners();
      }
      return;
    }
  } else {
    if (!isEmulatingMouseEvents2) {
      if (eventType === MOUSEDOWN) {
        if (activeModality !== MOUSE) {
          modality3 = MOUSE;
          activeModality = MOUSE;
          callListeners();
        }
      }
      if (eventType === MOUSEMOVE) {
        if (modality3 !== MOUSE) {
          modality3 = MOUSE;
          callListeners();
        }
      }
    }
    if (eventType === TOUCHSTART) {
      isEmulatingMouseEvents2 = true;
      if (event4.touches && event4.touches.length > 1) {
        isEmulatingMouseEvents2 = false;
      }
      if (activeModality !== TOUCH) {
        modality3 = TOUCH;
        activeModality = TOUCH;
        callListeners();
      }
      return;
    }
    if (eventType === CONTEXTMENU || eventType === MOUSEUP || eventType === SELECTIONCHANGE || eventType === SCROLL2 || eventType === TOUCHCANCEL || eventType === TOUCHMOVE) {
      isEmulatingMouseEvents2 = false;
    }
  }
}
if (import_ExecutionEnvironment16.canUseDOM) {
  addBlurListener(window, onBlurWindow);
  addFocusListener(window, onFocusWindow);
  addKeyDownListener(document, onKeyDown);
  addPointerDownListener(document, onPointerish);
  addPointerMoveListener(document, onPointerish);
  addVisibilityChangeListener(document, onVisibilityChange);
  addContextMenuListener(document, onPointerish);
  addMouseDownListener(document, onPointerish);
  addMouseMoveListener(document, onPointerish);
  addMouseUpListener(document, onPointerish);
  addTouchCancelListener(document, onPointerish);
  addTouchMoveListener(document, onPointerish);
  addTouchStartListener(document, onPointerish);
  addSelectiomChangeListener(document, onPointerish);
  addScrollListener(document, onPointerish);
}
function callListeners() {
  var value = {
    activeModality,
    modality: modality3
  };
  listeners2.forEach(function(listener3) {
    listener3(value);
  });
}
function getModality() {
  return modality3;
}

// node_modules/react-native-web/dist/modules/useEvent/index.js
function useEvent(event4, options) {
  var targetListeners = useStable(function() {
    return new Map();
  });
  var addListener3 = useStable(function() {
    var addEventListener3 = createEventHandle(event4, options);
    return function(target2, callback) {
      var removeTargetListener = targetListeners.get(target2);
      if (removeTargetListener != null) {
        removeTargetListener();
      }
      if (callback == null) {
        targetListeners.delete(target2);
      }
      var removeEventListener2 = addEventListener3(target2, callback);
      targetListeners.set(target2, removeEventListener2);
      return removeEventListener2;
    };
  });
  useLayoutEffect_default(function() {
    return function() {
      if (addListener3 != null) {
        targetListeners.forEach(function(removeListener2) {
          removeListener2();
        });
        targetListeners.clear();
      }
      addListener3 = null;
    };
  }, [addListener3]);
  return addListener3;
}

// node_modules/react-native-web/dist/modules/useHover/index.js
var emptyObject14 = {};
var opts = {
  passive: true
};
var lockEventType = "react-gui:hover:lock";
var unlockEventType = "react-gui:hover:unlock";
var supportsPointerEvent3 = function supportsPointerEvent4() {
  return !!(typeof window !== "undefined" && window.PointerEvent != null);
};
function dispatchCustomEvent(target2, type, payload) {
  var event4 = document.createEvent("CustomEvent");
  var _ref = payload || emptyObject14, _ref$bubbles = _ref.bubbles, bubbles = _ref$bubbles === void 0 ? true : _ref$bubbles, _ref$cancelable = _ref.cancelable, cancelable = _ref$cancelable === void 0 ? true : _ref$cancelable, detail = _ref.detail;
  event4.initCustomEvent(type, bubbles, cancelable, detail);
  target2.dispatchEvent(event4);
}
function getPointerType(event4) {
  var pointerType = event4.pointerType;
  return pointerType != null ? pointerType : getModality();
}
function useHover(targetRef, config) {
  var contain2 = config.contain, disabled = config.disabled, onHoverStart = config.onHoverStart, onHoverChange = config.onHoverChange, onHoverUpdate = config.onHoverUpdate, onHoverEnd = config.onHoverEnd;
  var canUsePE = supportsPointerEvent3();
  var addMoveListener = useEvent(canUsePE ? "pointermove" : "mousemove", opts);
  var addEnterListener = useEvent(canUsePE ? "pointerenter" : "mouseenter", opts);
  var addLeaveListener = useEvent(canUsePE ? "pointerleave" : "mouseleave", opts);
  var addLockListener = useEvent(lockEventType, opts);
  var addUnlockListener = useEvent(unlockEventType, opts);
  useLayoutEffect_default(function() {
    var target2 = targetRef.current;
    if (target2 !== null) {
      var hoverEnd = function hoverEnd2(e) {
        if (onHoverEnd != null) {
          onHoverEnd(e);
        }
        if (onHoverChange != null) {
          onHoverChange(false);
        }
        addMoveListener(target2, null);
        addLeaveListener(target2, null);
      };
      var leaveListener = function leaveListener2(e) {
        var target3 = targetRef.current;
        if (target3 != null && getPointerType(e) !== "touch") {
          if (contain2) {
            dispatchCustomEvent(target3, unlockEventType);
          }
          hoverEnd(e);
        }
      };
      var moveListener = function moveListener2(e) {
        if (getPointerType(e) !== "touch") {
          if (onHoverUpdate != null) {
            if (e.x == null) {
              e.x = e.clientX;
            }
            if (e.y == null) {
              e.y = e.clientY;
            }
            onHoverUpdate(e);
          }
        }
      };
      var hoverStart = function hoverStart2(e) {
        if (onHoverStart != null) {
          onHoverStart(e);
        }
        if (onHoverChange != null) {
          onHoverChange(true);
        }
        if (onHoverUpdate != null) {
          addMoveListener(target2, !disabled ? moveListener : null);
        }
        addLeaveListener(target2, !disabled ? leaveListener : null);
      };
      var enterListener = function enterListener2(e) {
        var target3 = targetRef.current;
        if (target3 != null && getPointerType(e) !== "touch") {
          if (contain2) {
            dispatchCustomEvent(target3, lockEventType);
          }
          hoverStart(e);
          var lockListener = function lockListener2(lockEvent) {
            if (lockEvent.target !== target3) {
              hoverEnd(e);
            }
          };
          var unlockListener = function unlockListener2(lockEvent) {
            if (lockEvent.target !== target3) {
              hoverStart(e);
            }
          };
          addLockListener(target3, !disabled ? lockListener : null);
          addUnlockListener(target3, !disabled ? unlockListener : null);
        }
      };
      addEnterListener(target2, !disabled ? enterListener : null);
    }
  }, [addEnterListener, addMoveListener, addLeaveListener, addLockListener, addUnlockListener, contain2, disabled, onHoverStart, onHoverChange, onHoverUpdate, onHoverEnd, targetRef]);
}

// node_modules/react-native-web/dist/exports/Pressable/index.js
"use strict";
function _extends14() {
  _extends14 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends14.apply(this, arguments);
}
function _objectWithoutPropertiesLoose12(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
function Pressable(props, forwardedRef) {
  var children = props.children, delayLongPress = props.delayLongPress, delayPressIn = props.delayPressIn, delayPressOut = props.delayPressOut, disabled = props.disabled, focusable = props.focusable, onBlur = props.onBlur, onFocus = props.onFocus, onHoverIn = props.onHoverIn, onHoverOut = props.onHoverOut, onLongPress = props.onLongPress, onPress = props.onPress, onPressMove = props.onPressMove, onPressIn = props.onPressIn, onPressOut = props.onPressOut, style = props.style, testOnly_hovered = props.testOnly_hovered, testOnly_pressed = props.testOnly_pressed, rest = _objectWithoutPropertiesLoose12(props, ["children", "delayLongPress", "delayPressIn", "delayPressOut", "disabled", "focusable", "onBlur", "onFocus", "onHoverIn", "onHoverOut", "onLongPress", "onPress", "onPressMove", "onPressIn", "onPressOut", "style", "testOnly_hovered", "testOnly_pressed"]);
  var _useForceableState = useForceableState(testOnly_hovered === true), hovered = _useForceableState[0], setHovered = _useForceableState[1];
  var _useForceableState2 = useForceableState(false), focused = _useForceableState2[0], setFocused = _useForceableState2[1];
  var _useForceableState3 = useForceableState(testOnly_pressed === true), pressed = _useForceableState3[0], setPressed = _useForceableState3[1];
  var hostRef = (0, import_react19.useRef)(null);
  var setRef = useMergeRefs(forwardedRef, hostRef);
  var pressConfig = (0, import_react19.useMemo)(function() {
    return {
      delayLongPress,
      delayPressStart: delayPressIn,
      delayPressEnd: delayPressOut,
      disabled,
      onLongPress,
      onPress,
      onPressChange: setPressed,
      onPressStart: onPressIn,
      onPressMove,
      onPressEnd: onPressOut
    };
  }, [delayLongPress, delayPressIn, delayPressOut, disabled, onLongPress, onPress, onPressIn, onPressMove, onPressOut, setPressed]);
  var pressEventHandlers = usePressEvents(hostRef, pressConfig);
  useHover(hostRef, {
    contain: true,
    disabled,
    onHoverChange: setHovered,
    onHoverStart: onHoverIn,
    onHoverEnd: onHoverOut
  });
  var interactionState = {
    hovered,
    focused,
    pressed
  };
  function createFocusHandler(callback, value) {
    return function(event4) {
      if (event4.nativeEvent.target === hostRef.current) {
        setFocused(value);
        if (callback != null) {
          callback(event4);
        }
      }
    };
  }
  return /* @__PURE__ */ React23.createElement(View_default, _extends14({}, rest, pressEventHandlers, {
    accessibilityDisabled: disabled,
    focusable: !disabled && focusable !== false,
    onBlur: createFocusHandler(onBlur, false),
    onFocus: createFocusHandler(onFocus, true),
    ref: setRef,
    style: [!disabled && styles11.root, typeof style === "function" ? style(interactionState) : style]
  }), typeof children === "function" ? children(interactionState) : children);
}
function useForceableState(forced) {
  var _useState = (0, import_react19.useState)(false), bool = _useState[0], setBool = _useState[1];
  return [bool || forced, setBool];
}
var styles11 = StyleSheet_default2.create({
  root: {
    cursor: "pointer",
    touchAction: "manipulation"
  }
});
var MemoedPressable = /* @__PURE__ */ (0, import_react19.memo)(/* @__PURE__ */ (0, import_react19.forwardRef)(Pressable));
MemoedPressable.displayName = "Pressable";
var Pressable_default = MemoedPressable;

// node_modules/react-native-web/dist/exports/SafeAreaView/index.js
var import_ExecutionEnvironment17 = __toModule(require_ExecutionEnvironment());
var import_react20 = __toModule(require_react());
function _extends15() {
  _extends15 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends15.apply(this, arguments);
}
function _objectWithoutPropertiesLoose13(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
var cssFunction = function() {
  if (import_ExecutionEnvironment17.canUseDOM && window.CSS && window.CSS.supports && window.CSS.supports("top: constant(safe-area-inset-top)")) {
    return "constant";
  }
  return "env";
}();
var SafeAreaView = /* @__PURE__ */ (0, import_react20.forwardRef)(function(props, ref) {
  var style = props.style, rest = _objectWithoutPropertiesLoose13(props, ["style"]);
  return /* @__PURE__ */ import_react20.default.createElement(View_default, _extends15({}, rest, {
    ref,
    style: StyleSheet_default2.compose(styles12.root, style)
  }));
});
SafeAreaView.displayName = "SafeAreaView";
var styles12 = StyleSheet_default2.create({
  root: {
    paddingTop: cssFunction + "(safe-area-inset-top)",
    paddingRight: cssFunction + "(safe-area-inset-right)",
    paddingBottom: cssFunction + "(safe-area-inset-bottom)",
    paddingLeft: cssFunction + "(safe-area-inset-left)"
  }
});
var SafeAreaView_default = SafeAreaView;

// node_modules/react-native-web/dist/exports/StatusBar/index.js
var emptyFunction6 = function emptyFunction7() {
};
function StatusBar() {
  return null;
}
StatusBar.setBackgroundColor = emptyFunction6;
StatusBar.setBarStyle = emptyFunction6;
StatusBar.setHidden = emptyFunction6;
StatusBar.setNetworkActivityIndicatorVisible = emptyFunction6;
StatusBar.setTranslucent = emptyFunction6;
var StatusBar_default = StatusBar;

// node_modules/react-native-web/dist/exports/Switch/index.js
var React25 = __toModule(require_react());
var import_react21 = __toModule(require_react());
function ownKeys20(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread20(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys20(Object(source), true).forEach(function(key3) {
        _defineProperty20(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys20(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty20(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function _extends16() {
  _extends16 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends16.apply(this, arguments);
}
function _objectWithoutPropertiesLoose14(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
var emptyObject15 = {};
var thumbDefaultBoxShadow = "0px 1px 3px rgba(0,0,0,0.5)";
var thumbFocusedBoxShadow = thumbDefaultBoxShadow + ", 0 0 0 10px rgba(0,0,0,0.1)";
var Switch = /* @__PURE__ */ (0, import_react21.forwardRef)(function(props, forwardedRef) {
  var accessibilityLabel = props.accessibilityLabel, _props$activeThumbCol = props.activeThumbColor, activeThumbColor = _props$activeThumbCol === void 0 ? "#009688" : _props$activeThumbCol, _props$activeTrackCol = props.activeTrackColor, activeTrackColor = _props$activeTrackCol === void 0 ? "#A3D3CF" : _props$activeTrackCol, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, onValueChange = props.onValueChange, _props$style = props.style, style = _props$style === void 0 ? emptyObject15 : _props$style, _props$thumbColor = props.thumbColor, thumbColor = _props$thumbColor === void 0 ? "#FAFAFA" : _props$thumbColor, _props$trackColor = props.trackColor, trackColor = _props$trackColor === void 0 ? "#939393" : _props$trackColor, _props$value = props.value, value = _props$value === void 0 ? false : _props$value, other = _objectWithoutPropertiesLoose14(props, ["accessibilityLabel", "activeThumbColor", "activeTrackColor", "disabled", "onValueChange", "style", "thumbColor", "trackColor", "value"]);
  var thumbRef = (0, import_react21.useRef)(null);
  function handleChange(event4) {
    if (onValueChange != null) {
      onValueChange(event4.nativeEvent.target.checked);
    }
  }
  function handleFocusState(event4) {
    var isFocused = event4.nativeEvent.type === "focus";
    var boxShadow = isFocused ? thumbFocusedBoxShadow : thumbDefaultBoxShadow;
    if (thumbRef.current != null) {
      thumbRef.current.style.boxShadow = boxShadow;
    }
  }
  var _StyleSheet$flatten = StyleSheet_default2.flatten(style), styleHeight = _StyleSheet$flatten.height, styleWidth = _StyleSheet$flatten.width;
  var height = styleHeight || "20px";
  var minWidth2 = multiplyStyleLengthValue_default(height, 2);
  var width = styleWidth > minWidth2 ? styleWidth : minWidth2;
  var trackBorderRadius = multiplyStyleLengthValue_default(height, 0.5);
  var trackCurrentColor = function() {
    if (value === true) {
      if (trackColor != null && typeof trackColor === "object") {
        return trackColor.true;
      } else {
        return activeTrackColor;
      }
    } else {
      if (trackColor != null && typeof trackColor === "object") {
        return trackColor.false;
      } else {
        return trackColor;
      }
    }
  }();
  var thumbCurrentColor = value ? activeThumbColor : thumbColor;
  var thumbHeight = height;
  var thumbWidth = thumbHeight;
  var rootStyle = [styles13.root, style, disabled && styles13.cursorDefault, {
    height,
    width
  }];
  var trackStyle = [styles13.track, {
    backgroundColor: disabled ? "#D5D5D5" : trackCurrentColor,
    borderRadius: trackBorderRadius
  }];
  var thumbStyle = [styles13.thumb, value && styles13.thumbActive, {
    backgroundColor: disabled ? "#BDBDBD" : thumbCurrentColor,
    height: thumbHeight,
    marginStart: value ? multiplyStyleLengthValue_default(thumbWidth, -1) : 0,
    width: thumbWidth
  }];
  var nativeControl = createElement_default("input", {
    accessibilityLabel,
    checked: value,
    disabled,
    onBlur: handleFocusState,
    onChange: handleChange,
    onFocus: handleFocusState,
    ref: forwardedRef,
    style: [styles13.nativeControl, styles13.cursorInherit],
    type: "checkbox",
    role: "switch"
  });
  return /* @__PURE__ */ React25.createElement(View_default, _extends16({}, other, {
    style: rootStyle
  }), /* @__PURE__ */ React25.createElement(View_default, {
    style: trackStyle
  }), /* @__PURE__ */ React25.createElement(View_default, {
    ref: thumbRef,
    style: thumbStyle
  }), nativeControl);
});
Switch.displayName = "Switch";
var styles13 = StyleSheet_default2.create({
  root: {
    cursor: "pointer",
    userSelect: "none"
  },
  cursorDefault: {
    cursor: "default"
  },
  cursorInherit: {
    cursor: "inherit"
  },
  track: _objectSpread20(_objectSpread20({}, StyleSheet_default2.absoluteFillObject), {}, {
    height: "70%",
    margin: "auto",
    transitionDuration: "0.1s",
    width: "100%"
  }),
  thumb: {
    alignSelf: "flex-start",
    borderRadius: "100%",
    boxShadow: thumbDefaultBoxShadow,
    start: "0%",
    transform: [{
      translateZ: 0
    }],
    transitionDuration: "0.1s"
  },
  thumbActive: {
    start: "100%"
  },
  nativeControl: _objectSpread20(_objectSpread20({}, StyleSheet_default2.absoluteFillObject), {}, {
    height: "100%",
    margin: 0,
    opacity: 0,
    padding: 0,
    width: "100%"
  })
});
var Switch_default = Switch;

// node_modules/react-native-web/dist/exports/TextInput/index.js
var import_react22 = __toModule(require_react());
function ownKeys21(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread21(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys21(Object(source), true).forEach(function(key3) {
        _defineProperty21(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys21(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty21(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var isSelectionStale = function isSelectionStale2(node, selection2) {
  var selectionEnd = node.selectionEnd, selectionStart = node.selectionStart;
  var start = selection2.start, end = selection2.end;
  return start !== selectionStart || end !== selectionEnd;
};
var setSelection = function setSelection2(node, selection2) {
  if (isSelectionStale(node, selection2)) {
    var start = selection2.start, end = selection2.end;
    try {
      node.setSelectionRange(start, end || start);
    } catch (e) {
    }
  }
};
var forwardPropsList3 = _objectSpread21(_objectSpread21(_objectSpread21(_objectSpread21(_objectSpread21(_objectSpread21(_objectSpread21(_objectSpread21(_objectSpread21({}, defaultProps), accessibilityProps), clickProps), focusProps), keyboardProps), mouseProps), touchProps), styleProps), {}, {
  autoCapitalize: true,
  autoComplete: true,
  autoCorrect: true,
  autoFocus: true,
  defaultValue: true,
  disabled: true,
  lang: true,
  maxLength: true,
  onChange: true,
  onScroll: true,
  placeholder: true,
  pointerEvents: true,
  readOnly: true,
  rows: true,
  spellCheck: true,
  value: true,
  type: true
});
var pickProps5 = function pickProps6(props) {
  return pick(props, forwardPropsList3);
};
function isEventComposing(nativeEvent) {
  return nativeEvent.isComposing || nativeEvent.keyCode === 229;
}
var TextInput = /* @__PURE__ */ (0, import_react22.forwardRef)(function(props, forwardedRef) {
  var _props$autoCapitalize = props.autoCapitalize, autoCapitalize = _props$autoCapitalize === void 0 ? "sentences" : _props$autoCapitalize, autoComplete = props.autoComplete, autoCompleteType = props.autoCompleteType, _props$autoCorrect = props.autoCorrect, autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect, blurOnSubmit = props.blurOnSubmit, clearTextOnFocus = props.clearTextOnFocus, dir = props.dir, _props$editable = props.editable, editable = _props$editable === void 0 ? true : _props$editable, _props$keyboardType = props.keyboardType, keyboardType = _props$keyboardType === void 0 ? "default" : _props$keyboardType, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, _props$numberOfLines = props.numberOfLines, numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines, onBlur = props.onBlur, onChange3 = props.onChange, onChangeText = props.onChangeText, onContentSizeChange = props.onContentSizeChange, onFocus = props.onFocus, onKeyPress = props.onKeyPress, onLayout = props.onLayout, onMoveShouldSetResponder = props.onMoveShouldSetResponder, onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture, onResponderEnd = props.onResponderEnd, onResponderGrant = props.onResponderGrant, onResponderMove = props.onResponderMove, onResponderReject = props.onResponderReject, onResponderRelease = props.onResponderRelease, onResponderStart = props.onResponderStart, onResponderTerminate = props.onResponderTerminate, onResponderTerminationRequest = props.onResponderTerminationRequest, onScrollShouldSetResponder = props.onScrollShouldSetResponder, onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture, onSelectionChange = props.onSelectionChange, onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder, onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture, onStartShouldSetResponder = props.onStartShouldSetResponder, onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture, onSubmitEditing = props.onSubmitEditing, placeholderTextColor = props.placeholderTextColor, returnKeyType = props.returnKeyType, _props$secureTextEntr = props.secureTextEntry, secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr, selection2 = props.selection, selectTextOnFocus = props.selectTextOnFocus, spellCheck = props.spellCheck;
  var type;
  var inputMode;
  switch (keyboardType) {
    case "email-address":
      type = "email";
      break;
    case "number-pad":
    case "numeric":
      inputMode = "numeric";
      break;
    case "decimal-pad":
      inputMode = "decimal";
      break;
    case "phone-pad":
      type = "tel";
      break;
    case "search":
    case "web-search":
      type = "search";
      break;
    case "url":
      type = "url";
      break;
    default:
      type = "text";
  }
  if (secureTextEntry) {
    type = "password";
  }
  var dimensions2 = (0, import_react22.useRef)({
    height: null,
    width: null
  });
  var hostRef = (0, import_react22.useRef)(null);
  var handleContentSizeChange = (0, import_react22.useCallback)(function() {
    var node = hostRef.current;
    if (multiline && onContentSizeChange && node != null) {
      var newHeight = node.scrollHeight;
      var newWidth = node.scrollWidth;
      if (newHeight !== dimensions2.current.height || newWidth !== dimensions2.current.width) {
        dimensions2.current.height = newHeight;
        dimensions2.current.width = newWidth;
        onContentSizeChange({
          nativeEvent: {
            contentSize: {
              height: dimensions2.current.height,
              width: dimensions2.current.width
            }
          }
        });
      }
    }
  }, [hostRef, multiline, onContentSizeChange]);
  var imperativeRef = (0, import_react22.useMemo)(function() {
    return function(hostNode) {
      if (hostNode != null) {
        hostNode.clear = function() {
          if (hostNode != null) {
            hostNode.value = "";
          }
        };
        hostNode.isFocused = function() {
          return hostNode != null && TextInputState_default.currentlyFocusedField() === hostNode;
        };
        handleContentSizeChange();
      }
    };
  }, [handleContentSizeChange]);
  function handleBlur(e) {
    TextInputState_default._currentlyFocusedNode = null;
    if (onBlur) {
      e.nativeEvent.text = e.target.value;
      onBlur(e);
    }
  }
  function handleChange(e) {
    var text2 = e.target.value;
    e.nativeEvent.text = text2;
    handleContentSizeChange();
    if (onChange3) {
      onChange3(e);
    }
    if (onChangeText) {
      onChangeText(text2);
    }
  }
  function handleFocus(e) {
    var node = hostRef.current;
    if (node != null) {
      TextInputState_default._currentlyFocusedNode = node;
      if (onFocus) {
        e.nativeEvent.text = e.target.value;
        onFocus(e);
      }
      if (clearTextOnFocus) {
        node.value = "";
      }
      if (selectTextOnFocus) {
        setTimeout(function() {
          node.select();
        }, 0);
      }
    }
  }
  function handleKeyDown(e) {
    e.stopPropagation();
    var blurOnSubmitDefault = !multiline;
    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;
    var nativeEvent = e.nativeEvent;
    var isComposing = isEventComposing(nativeEvent);
    if (onKeyPress) {
      onKeyPress(e);
    }
    if (e.key === "Enter" && !e.shiftKey && !isComposing && !e.isDefaultPrevented()) {
      if ((blurOnSubmit || !multiline) && onSubmitEditing) {
        e.preventDefault();
        nativeEvent.text = e.target.value;
        onSubmitEditing(e);
      }
      if (shouldBlurOnSubmit && hostRef.current != null) {
        hostRef.current.blur();
      }
    }
  }
  function handleSelectionChange(e) {
    if (onSelectionChange) {
      try {
        var node = e.target;
        var selectionStart = node.selectionStart, selectionEnd = node.selectionEnd;
        e.nativeEvent.selection = {
          start: selectionStart,
          end: selectionEnd
        };
        e.nativeEvent.text = e.target.value;
        onSelectionChange(e);
      } catch (e2) {
      }
    }
  }
  useLayoutEffect_default(function() {
    var node = hostRef.current;
    if (node != null && selection2 != null) {
      setSelection(node, selection2);
    }
    if (document.activeElement === node) {
      TextInputState_default._currentlyFocusedNode = node;
    }
  }, [hostRef, selection2]);
  var component = multiline ? "textarea" : "input";
  var classList2 = [classes5.textinput];
  var style = StyleSheet_default2.compose(props.style, placeholderTextColor && {
    placeholderTextColor
  });
  useElementLayout(hostRef, onLayout);
  useResponderEvents(hostRef, {
    onMoveShouldSetResponder,
    onMoveShouldSetResponderCapture,
    onResponderEnd,
    onResponderGrant,
    onResponderMove,
    onResponderReject,
    onResponderRelease,
    onResponderStart,
    onResponderTerminate,
    onResponderTerminationRequest,
    onScrollShouldSetResponder,
    onScrollShouldSetResponderCapture,
    onSelectionChangeShouldSetResponder,
    onSelectionChangeShouldSetResponderCapture,
    onStartShouldSetResponder,
    onStartShouldSetResponderCapture
  });
  var supportedProps = pickProps5(props);
  supportedProps.autoCapitalize = autoCapitalize;
  supportedProps.autoComplete = autoComplete || autoCompleteType || "on";
  supportedProps.autoCorrect = autoCorrect ? "on" : "off";
  supportedProps.classList = classList2;
  supportedProps.dir = dir !== void 0 ? dir : "auto";
  supportedProps.enterKeyHint = returnKeyType;
  supportedProps.onBlur = handleBlur;
  supportedProps.onChange = handleChange;
  supportedProps.onFocus = handleFocus;
  supportedProps.onKeyDown = handleKeyDown;
  supportedProps.onSelect = handleSelectionChange;
  supportedProps.readOnly = !editable;
  supportedProps.rows = multiline ? numberOfLines : void 0;
  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;
  supportedProps.style = style;
  supportedProps.type = multiline ? void 0 : type;
  supportedProps.inputMode = inputMode;
  var platformMethodsRef = usePlatformMethods(supportedProps);
  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);
  supportedProps.ref = setRef;
  return createElement_default(component, supportedProps);
});
TextInput.displayName = "TextInput";
TextInput.State = TextInputState_default;
var classes5 = css_default.create({
  textinput: {
    MozAppearance: "textfield",
    WebkitAppearance: "none",
    backgroundColor: "transparent",
    border: "0 solid black",
    borderRadius: 0,
    boxSizing: "border-box",
    font: "14px System",
    margin: 0,
    padding: 0,
    resize: "none"
  }
});
var TextInput_default = TextInput;

// node_modules/react-native-web/dist/exports/TouchableHighlight/index.js
var React26 = __toModule(require_react());
var import_react23 = __toModule(require_react());
"use strict";
function _extends17() {
  _extends17 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends17.apply(this, arguments);
}
function _objectWithoutPropertiesLoose15(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
function createExtraStyles(activeOpacity, underlayColor) {
  return {
    child: {
      opacity: activeOpacity !== null && activeOpacity !== void 0 ? activeOpacity : 0.85
    },
    underlay: {
      backgroundColor: underlayColor === void 0 ? "black" : underlayColor
    }
  };
}
function hasPressHandler(props) {
  return props.onPress != null || props.onPressIn != null || props.onPressOut != null || props.onLongPress != null;
}
function TouchableHighlight(props, forwardedRef) {
  var activeOpacity = props.activeOpacity, children = props.children, delayPressIn = props.delayPressIn, delayPressOut = props.delayPressOut, delayLongPress = props.delayLongPress, disabled = props.disabled, focusable = props.focusable, onHideUnderlay = props.onHideUnderlay, onLongPress = props.onLongPress, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, onShowUnderlay = props.onShowUnderlay, rejectResponderTermination = props.rejectResponderTermination, style = props.style, testOnly_pressed = props.testOnly_pressed, underlayColor = props.underlayColor, rest = _objectWithoutPropertiesLoose15(props, ["activeOpacity", "children", "delayPressIn", "delayPressOut", "delayLongPress", "disabled", "focusable", "onHideUnderlay", "onLongPress", "onPress", "onPressIn", "onPressOut", "onShowUnderlay", "rejectResponderTermination", "style", "testOnly_pressed", "underlayColor"]);
  var hostRef = (0, import_react23.useRef)(null);
  var setRef = useMergeRefs(forwardedRef, hostRef);
  var _useState = (0, import_react23.useState)(testOnly_pressed === true ? createExtraStyles(activeOpacity, underlayColor) : null), extraStyles = _useState[0], setExtraStyles = _useState[1];
  var showUnderlay = (0, import_react23.useCallback)(function() {
    if (!hasPressHandler(props)) {
      return;
    }
    setExtraStyles(createExtraStyles(activeOpacity, underlayColor));
    if (onShowUnderlay != null) {
      onShowUnderlay();
    }
  }, [activeOpacity, onShowUnderlay, props, underlayColor]);
  var hideUnderlay = (0, import_react23.useCallback)(function() {
    if (testOnly_pressed === true) {
      return;
    }
    if (hasPressHandler(props)) {
      setExtraStyles(null);
      if (onHideUnderlay != null) {
        onHideUnderlay();
      }
    }
  }, [onHideUnderlay, props, testOnly_pressed]);
  var pressConfig = (0, import_react23.useMemo)(function() {
    return {
      cancelable: !rejectResponderTermination,
      disabled,
      delayLongPress,
      delayPressStart: delayPressIn,
      delayPressEnd: delayPressOut,
      onLongPress,
      onPress,
      onPressStart: function onPressStart(event4) {
        showUnderlay();
        if (onPressIn != null) {
          onPressIn(event4);
        }
      },
      onPressEnd: function onPressEnd(event4) {
        hideUnderlay();
        if (onPressOut != null) {
          onPressOut(event4);
        }
      }
    };
  }, [delayLongPress, delayPressIn, delayPressOut, disabled, onLongPress, onPress, onPressIn, onPressOut, rejectResponderTermination, showUnderlay, hideUnderlay]);
  var pressEventHandlers = usePressEvents(hostRef, pressConfig);
  var child2 = React26.Children.only(children);
  return /* @__PURE__ */ React26.createElement(View_default, _extends17({}, rest, pressEventHandlers, {
    accessibilityDisabled: disabled,
    focusable: !disabled && focusable !== false,
    ref: setRef,
    style: [styles14.root, style, !disabled && styles14.actionable, extraStyles && extraStyles.underlay]
  }), /* @__PURE__ */ React26.cloneElement(child2, {
    style: StyleSheet_default2.compose(child2.props.style, extraStyles && extraStyles.child)
  }));
}
var styles14 = StyleSheet_default2.create({
  root: {
    userSelect: "none"
  },
  actionable: {
    cursor: "pointer",
    touchAction: "manipulation"
  }
});
var MemoedTouchableHighlight = /* @__PURE__ */ React26.memo(/* @__PURE__ */ React26.forwardRef(TouchableHighlight));
MemoedTouchableHighlight.displayName = "TouchableHighlight";
var TouchableHighlight_default = MemoedTouchableHighlight;

// node_modules/react-native-web/dist/modules/UnimplementedView/index.js
var import_react24 = __toModule(require_react());
function _inheritsLoose27(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf27(subClass, superClass);
}
function _setPrototypeOf27(o, p) {
  _setPrototypeOf27 = Object.setPrototypeOf || function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf27(o, p);
}
var UnimplementedView = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose27(UnimplementedView2, _React$Component);
  function UnimplementedView2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = UnimplementedView2.prototype;
  _proto.setNativeProps = function setNativeProps3() {
  };
  _proto.render = function render3() {
    return /* @__PURE__ */ import_react24.default.createElement(View_default, {
      style: [unimplementedViewStyles, this.props.style]
    }, this.props.children);
  };
  return UnimplementedView2;
}(import_react24.default.Component);
var unimplementedViewStyles = true ? {
  alignSelf: "flex-start",
  borderColor: "red",
  borderWidth: 1
} : {};
var UnimplementedView_default = UnimplementedView;

// node_modules/react-native-web/dist/exports/TouchableNativeFeedback/index.js
var TouchableNativeFeedback_default = UnimplementedView_default;

// node_modules/react-native-web/dist/exports/TouchableWithoutFeedback/index.js
var React28 = __toModule(require_react());
var import_react25 = __toModule(require_react());
"use strict";
var forwardPropsList4 = {
  accessibilityDisabled: true,
  accessibilityLabel: true,
  accessibilityLiveRegion: true,
  accessibilityRole: true,
  accessibilityState: true,
  accessibilityValue: true,
  children: true,
  disabled: true,
  focusable: true,
  nativeID: true,
  onBlur: true,
  onFocus: true,
  onLayout: true,
  testID: true
};
var pickProps7 = function pickProps8(props) {
  return pick(props, forwardPropsList4);
};
function TouchableWithoutFeedback(props, forwardedRef) {
  var delayPressIn = props.delayPressIn, delayPressOut = props.delayPressOut, delayLongPress = props.delayLongPress, disabled = props.disabled, focusable = props.focusable, onLongPress = props.onLongPress, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, rejectResponderTermination = props.rejectResponderTermination;
  var hostRef = (0, import_react25.useRef)(null);
  var pressConfig = (0, import_react25.useMemo)(function() {
    return {
      cancelable: !rejectResponderTermination,
      disabled,
      delayLongPress,
      delayPressStart: delayPressIn,
      delayPressEnd: delayPressOut,
      onLongPress,
      onPress,
      onPressStart: onPressIn,
      onPressEnd: onPressOut
    };
  }, [disabled, delayPressIn, delayPressOut, delayLongPress, onLongPress, onPress, onPressIn, onPressOut, rejectResponderTermination]);
  var pressEventHandlers = usePressEvents(hostRef, pressConfig);
  var element = React28.Children.only(props.children);
  var children = [element.props.children];
  var supportedProps = pickProps7(props);
  supportedProps.accessibilityDisabled = disabled;
  supportedProps.focusable = !disabled && focusable !== false;
  supportedProps.ref = useMergeRefs(forwardedRef, hostRef, element.ref);
  var elementProps = Object.assign(supportedProps, pressEventHandlers);
  return /* @__PURE__ */ React28.cloneElement.apply(React28, [element, elementProps].concat(children));
}
var MemoedTouchableWithoutFeedback = /* @__PURE__ */ React28.memo(/* @__PURE__ */ React28.forwardRef(TouchableWithoutFeedback));
MemoedTouchableWithoutFeedback.displayName = "TouchableWithoutFeedback";
var TouchableWithoutFeedback_default = MemoedTouchableWithoutFeedback;

// node_modules/expo-error-recovery/build/ExpoErrorRecovery.web.js
var import_ExecutionEnvironment18 = __toModule(require_ExecutionEnvironment2());
var LOCAL_STORAGE_KEY = "EXPO_ERROR_RECOVERY_STORAGE";
function _consumeRecoveryProps() {
  if (!import_ExecutionEnvironment18.canUseDOM)
    return null;
  try {
    const props = localStorage.getItem(LOCAL_STORAGE_KEY);
    localStorage.removeItem(LOCAL_STORAGE_KEY);
    return props;
  } catch (e) {
  }
  return null;
}
var ExpoErrorRecovery_web_default = {
  get name() {
    return "ExpoErrorRecovery";
  },
  saveRecoveryProps(props) {
    if (!import_ExecutionEnvironment18.canUseDOM)
      return;
    try {
      localStorage.setItem(LOCAL_STORAGE_KEY, props);
    } catch (e) {
    }
  },
  recoveredProps: _consumeRecoveryProps()
};

// node_modules/expo-error-recovery/build/ErrorRecovery.js
var recoveredProps = _getRecoveredProps();
function _getRecoveredProps() {
  if (ExpoErrorRecovery_web_default.recoveredProps) {
    return JSON.parse(ExpoErrorRecovery_web_default.recoveredProps);
  }
  return null;
}

// node_modules/expo/build/launch/withExpoRoot.web.js
var React29 = __toModule(require_react());
function withExpoRoot(AppRootComponent) {
  return class ExpoRootComponent extends React29.Component {
    render() {
      const props = {
        ...this.props,
        exp: {...this.props.exp, errorRecovery: recoveredProps}
      };
      return React29.createElement(AppRootComponent, Object.assign({}, props));
    }
  };
}

// node_modules/expo/build/launch/registerRootComponent.web.js
function registerRootComponent(component) {
  const App = withExpoRoot(component);
  const RootComponent = (props) => React30.createElement(App, Object.assign({}, props));
  AppRegistry.registerComponent("main", () => RootComponent);
  const rootTag = document.getElementById("root") ?? document.getElementById("main");
  AppRegistry.runApplication("main", {rootTag});
}

// src/App.tsx
var import_react67 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/styles/colors.js
var colors_exports = {};
__export(colors_exports, {
  amber100: () => amber100,
  amber200: () => amber200,
  amber300: () => amber300,
  amber400: () => amber400,
  amber50: () => amber50,
  amber500: () => amber500,
  amber600: () => amber600,
  amber700: () => amber700,
  amber800: () => amber800,
  amber900: () => amber900,
  amberA100: () => amberA100,
  amberA200: () => amberA200,
  amberA400: () => amberA400,
  amberA700: () => amberA700,
  black: () => black,
  blue100: () => blue100,
  blue200: () => blue200,
  blue300: () => blue300,
  blue400: () => blue400,
  blue50: () => blue50,
  blue500: () => blue500,
  blue600: () => blue600,
  blue700: () => blue700,
  blue800: () => blue800,
  blue900: () => blue900,
  blueA100: () => blueA100,
  blueA200: () => blueA200,
  blueA400: () => blueA400,
  blueA700: () => blueA700,
  blueGrey100: () => blueGrey100,
  blueGrey200: () => blueGrey200,
  blueGrey300: () => blueGrey300,
  blueGrey400: () => blueGrey400,
  blueGrey50: () => blueGrey50,
  blueGrey500: () => blueGrey500,
  blueGrey600: () => blueGrey600,
  blueGrey700: () => blueGrey700,
  blueGrey800: () => blueGrey800,
  blueGrey900: () => blueGrey900,
  brown100: () => brown100,
  brown200: () => brown200,
  brown300: () => brown300,
  brown400: () => brown400,
  brown50: () => brown50,
  brown500: () => brown500,
  brown600: () => brown600,
  brown700: () => brown700,
  brown800: () => brown800,
  brown900: () => brown900,
  cyan100: () => cyan100,
  cyan200: () => cyan200,
  cyan300: () => cyan300,
  cyan400: () => cyan400,
  cyan50: () => cyan50,
  cyan500: () => cyan500,
  cyan600: () => cyan600,
  cyan700: () => cyan700,
  cyan800: () => cyan800,
  cyan900: () => cyan900,
  cyanA100: () => cyanA100,
  cyanA200: () => cyanA200,
  cyanA400: () => cyanA400,
  cyanA700: () => cyanA700,
  deepOrange100: () => deepOrange100,
  deepOrange200: () => deepOrange200,
  deepOrange300: () => deepOrange300,
  deepOrange400: () => deepOrange400,
  deepOrange50: () => deepOrange50,
  deepOrange500: () => deepOrange500,
  deepOrange600: () => deepOrange600,
  deepOrange700: () => deepOrange700,
  deepOrange800: () => deepOrange800,
  deepOrange900: () => deepOrange900,
  deepOrangeA100: () => deepOrangeA100,
  deepOrangeA200: () => deepOrangeA200,
  deepOrangeA400: () => deepOrangeA400,
  deepOrangeA700: () => deepOrangeA700,
  deepPurple100: () => deepPurple100,
  deepPurple200: () => deepPurple200,
  deepPurple300: () => deepPurple300,
  deepPurple400: () => deepPurple400,
  deepPurple50: () => deepPurple50,
  deepPurple500: () => deepPurple500,
  deepPurple600: () => deepPurple600,
  deepPurple700: () => deepPurple700,
  deepPurple800: () => deepPurple800,
  deepPurple900: () => deepPurple900,
  deepPurpleA100: () => deepPurpleA100,
  deepPurpleA200: () => deepPurpleA200,
  deepPurpleA400: () => deepPurpleA400,
  deepPurpleA700: () => deepPurpleA700,
  green100: () => green100,
  green200: () => green200,
  green300: () => green300,
  green400: () => green400,
  green50: () => green50,
  green500: () => green500,
  green600: () => green600,
  green700: () => green700,
  green800: () => green800,
  green900: () => green900,
  greenA100: () => greenA100,
  greenA200: () => greenA200,
  greenA400: () => greenA400,
  greenA700: () => greenA700,
  grey100: () => grey100,
  grey200: () => grey200,
  grey300: () => grey300,
  grey400: () => grey400,
  grey50: () => grey50,
  grey500: () => grey500,
  grey600: () => grey600,
  grey700: () => grey700,
  grey800: () => grey800,
  grey900: () => grey900,
  indigo100: () => indigo100,
  indigo200: () => indigo200,
  indigo300: () => indigo300,
  indigo400: () => indigo400,
  indigo50: () => indigo50,
  indigo500: () => indigo500,
  indigo600: () => indigo600,
  indigo700: () => indigo700,
  indigo800: () => indigo800,
  indigo900: () => indigo900,
  indigoA100: () => indigoA100,
  indigoA200: () => indigoA200,
  indigoA400: () => indigoA400,
  indigoA700: () => indigoA700,
  lightBlue100: () => lightBlue100,
  lightBlue200: () => lightBlue200,
  lightBlue300: () => lightBlue300,
  lightBlue400: () => lightBlue400,
  lightBlue50: () => lightBlue50,
  lightBlue500: () => lightBlue500,
  lightBlue600: () => lightBlue600,
  lightBlue700: () => lightBlue700,
  lightBlue800: () => lightBlue800,
  lightBlue900: () => lightBlue900,
  lightBlueA100: () => lightBlueA100,
  lightBlueA200: () => lightBlueA200,
  lightBlueA400: () => lightBlueA400,
  lightBlueA700: () => lightBlueA700,
  lightGreen100: () => lightGreen100,
  lightGreen200: () => lightGreen200,
  lightGreen300: () => lightGreen300,
  lightGreen400: () => lightGreen400,
  lightGreen50: () => lightGreen50,
  lightGreen500: () => lightGreen500,
  lightGreen600: () => lightGreen600,
  lightGreen700: () => lightGreen700,
  lightGreen800: () => lightGreen800,
  lightGreen900: () => lightGreen900,
  lightGreenA100: () => lightGreenA100,
  lightGreenA200: () => lightGreenA200,
  lightGreenA400: () => lightGreenA400,
  lightGreenA700: () => lightGreenA700,
  lime100: () => lime100,
  lime200: () => lime200,
  lime300: () => lime300,
  lime400: () => lime400,
  lime50: () => lime50,
  lime500: () => lime500,
  lime600: () => lime600,
  lime700: () => lime700,
  lime800: () => lime800,
  lime900: () => lime900,
  limeA100: () => limeA100,
  limeA200: () => limeA200,
  limeA400: () => limeA400,
  limeA700: () => limeA700,
  orange100: () => orange100,
  orange200: () => orange200,
  orange300: () => orange300,
  orange400: () => orange400,
  orange50: () => orange50,
  orange500: () => orange500,
  orange600: () => orange600,
  orange700: () => orange700,
  orange800: () => orange800,
  orange900: () => orange900,
  orangeA100: () => orangeA100,
  orangeA200: () => orangeA200,
  orangeA400: () => orangeA400,
  orangeA700: () => orangeA700,
  pink100: () => pink100,
  pink200: () => pink200,
  pink300: () => pink300,
  pink400: () => pink400,
  pink50: () => pink50,
  pink500: () => pink500,
  pink600: () => pink600,
  pink700: () => pink700,
  pink800: () => pink800,
  pink900: () => pink900,
  pinkA100: () => pinkA100,
  pinkA200: () => pinkA200,
  pinkA400: () => pinkA400,
  pinkA700: () => pinkA700,
  purple100: () => purple100,
  purple200: () => purple200,
  purple300: () => purple300,
  purple400: () => purple400,
  purple50: () => purple50,
  purple500: () => purple500,
  purple600: () => purple600,
  purple700: () => purple700,
  purple800: () => purple800,
  purple900: () => purple900,
  purpleA100: () => purpleA100,
  purpleA200: () => purpleA200,
  purpleA400: () => purpleA400,
  purpleA700: () => purpleA700,
  red100: () => red100,
  red200: () => red200,
  red300: () => red300,
  red400: () => red400,
  red50: () => red50,
  red500: () => red500,
  red600: () => red600,
  red700: () => red700,
  red800: () => red800,
  red900: () => red900,
  redA100: () => redA100,
  redA200: () => redA200,
  redA400: () => redA400,
  redA700: () => redA700,
  teal100: () => teal100,
  teal200: () => teal200,
  teal300: () => teal300,
  teal400: () => teal400,
  teal50: () => teal50,
  teal500: () => teal500,
  teal600: () => teal600,
  teal700: () => teal700,
  teal800: () => teal800,
  teal900: () => teal900,
  tealA100: () => tealA100,
  tealA200: () => tealA200,
  tealA400: () => tealA400,
  tealA700: () => tealA700,
  white: () => white,
  yellow100: () => yellow100,
  yellow200: () => yellow200,
  yellow300: () => yellow300,
  yellow400: () => yellow400,
  yellow50: () => yellow50,
  yellow500: () => yellow500,
  yellow600: () => yellow600,
  yellow700: () => yellow700,
  yellow800: () => yellow800,
  yellow900: () => yellow900,
  yellowA100: () => yellowA100,
  yellowA200: () => yellowA200,
  yellowA400: () => yellowA400,
  yellowA700: () => yellowA700
});
var red50 = "#ffebee";
var red100 = "#ffcdd2";
var red200 = "#ef9a9a";
var red300 = "#e57373";
var red400 = "#ef5350";
var red500 = "#f44336";
var red600 = "#e53935";
var red700 = "#d32f2f";
var red800 = "#c62828";
var red900 = "#b71c1c";
var redA100 = "#ff8a80";
var redA200 = "#ff5252";
var redA400 = "#ff1744";
var redA700 = "#d50000";
var pink50 = "#fce4ec";
var pink100 = "#f8bbd0";
var pink200 = "#f48fb1";
var pink300 = "#f06292";
var pink400 = "#ec407a";
var pink500 = "#e91e63";
var pink600 = "#d81b60";
var pink700 = "#c2185b";
var pink800 = "#ad1457";
var pink900 = "#880e4f";
var pinkA100 = "#ff80ab";
var pinkA200 = "#ff4081";
var pinkA400 = "#f50057";
var pinkA700 = "#c51162";
var purple50 = "#f3e5f5";
var purple100 = "#e1bee7";
var purple200 = "#ce93d8";
var purple300 = "#ba68c8";
var purple400 = "#ab47bc";
var purple500 = "#9c27b0";
var purple600 = "#8e24aa";
var purple700 = "#7b1fa2";
var purple800 = "#6a1b9a";
var purple900 = "#4a148c";
var purpleA100 = "#ea80fc";
var purpleA200 = "#e040fb";
var purpleA400 = "#d500f9";
var purpleA700 = "#aa00ff";
var deepPurple50 = "#ede7f6";
var deepPurple100 = "#d1c4e9";
var deepPurple200 = "#b39ddb";
var deepPurple300 = "#9575cd";
var deepPurple400 = "#7e57c2";
var deepPurple500 = "#673ab7";
var deepPurple600 = "#5e35b1";
var deepPurple700 = "#512da8";
var deepPurple800 = "#4527a0";
var deepPurple900 = "#311b92";
var deepPurpleA100 = "#b388ff";
var deepPurpleA200 = "#7c4dff";
var deepPurpleA400 = "#651fff";
var deepPurpleA700 = "#6200ea";
var indigo50 = "#e8eaf6";
var indigo100 = "#c5cae9";
var indigo200 = "#9fa8da";
var indigo300 = "#7986cb";
var indigo400 = "#5c6bc0";
var indigo500 = "#3f51b5";
var indigo600 = "#3949ab";
var indigo700 = "#303f9f";
var indigo800 = "#283593";
var indigo900 = "#1a237e";
var indigoA100 = "#8c9eff";
var indigoA200 = "#536dfe";
var indigoA400 = "#3d5afe";
var indigoA700 = "#304ffe";
var blue50 = "#e3f2fd";
var blue100 = "#bbdefb";
var blue200 = "#90caf9";
var blue300 = "#64b5f6";
var blue400 = "#42a5f5";
var blue500 = "#2196f3";
var blue600 = "#1e88e5";
var blue700 = "#1976d2";
var blue800 = "#1565c0";
var blue900 = "#0d47a1";
var blueA100 = "#82b1ff";
var blueA200 = "#448aff";
var blueA400 = "#2979ff";
var blueA700 = "#2962ff";
var lightBlue50 = "#e1f5fe";
var lightBlue100 = "#b3e5fc";
var lightBlue200 = "#81d4fa";
var lightBlue300 = "#4fc3f7";
var lightBlue400 = "#29b6f6";
var lightBlue500 = "#03a9f4";
var lightBlue600 = "#039be5";
var lightBlue700 = "#0288d1";
var lightBlue800 = "#0277bd";
var lightBlue900 = "#01579b";
var lightBlueA100 = "#80d8ff";
var lightBlueA200 = "#40c4ff";
var lightBlueA400 = "#00b0ff";
var lightBlueA700 = "#0091ea";
var cyan50 = "#e0f7fa";
var cyan100 = "#b2ebf2";
var cyan200 = "#80deea";
var cyan300 = "#4dd0e1";
var cyan400 = "#26c6da";
var cyan500 = "#00bcd4";
var cyan600 = "#00acc1";
var cyan700 = "#0097a7";
var cyan800 = "#00838f";
var cyan900 = "#006064";
var cyanA100 = "#84ffff";
var cyanA200 = "#18ffff";
var cyanA400 = "#00e5ff";
var cyanA700 = "#00b8d4";
var teal50 = "#e0f2f1";
var teal100 = "#b2dfdb";
var teal200 = "#80cbc4";
var teal300 = "#4db6ac";
var teal400 = "#26a69a";
var teal500 = "#009688";
var teal600 = "#00897b";
var teal700 = "#00796b";
var teal800 = "#00695c";
var teal900 = "#004d40";
var tealA100 = "#a7ffeb";
var tealA200 = "#64ffda";
var tealA400 = "#1de9b6";
var tealA700 = "#00bfa5";
var green50 = "#e8f5e9";
var green100 = "#c8e6c9";
var green200 = "#a5d6a7";
var green300 = "#81c784";
var green400 = "#66bb6a";
var green500 = "#4caf50";
var green600 = "#43a047";
var green700 = "#388e3c";
var green800 = "#2e7d32";
var green900 = "#1b5e20";
var greenA100 = "#b9f6ca";
var greenA200 = "#69f0ae";
var greenA400 = "#00e676";
var greenA700 = "#00c853";
var lightGreen50 = "#f1f8e9";
var lightGreen100 = "#dcedc8";
var lightGreen200 = "#c5e1a5";
var lightGreen300 = "#aed581";
var lightGreen400 = "#9ccc65";
var lightGreen500 = "#8bc34a";
var lightGreen600 = "#7cb342";
var lightGreen700 = "#689f38";
var lightGreen800 = "#558b2f";
var lightGreen900 = "#33691e";
var lightGreenA100 = "#ccff90";
var lightGreenA200 = "#b2ff59";
var lightGreenA400 = "#76ff03";
var lightGreenA700 = "#64dd17";
var lime50 = "#f9fbe7";
var lime100 = "#f0f4c3";
var lime200 = "#e6ee9c";
var lime300 = "#dce775";
var lime400 = "#d4e157";
var lime500 = "#cddc39";
var lime600 = "#c0ca33";
var lime700 = "#afb42b";
var lime800 = "#9e9d24";
var lime900 = "#827717";
var limeA100 = "#f4ff81";
var limeA200 = "#eeff41";
var limeA400 = "#c6ff00";
var limeA700 = "#aeea00";
var yellow50 = "#fffde7";
var yellow100 = "#fff9c4";
var yellow200 = "#fff59d";
var yellow300 = "#fff176";
var yellow400 = "#ffee58";
var yellow500 = "#ffeb3b";
var yellow600 = "#fdd835";
var yellow700 = "#fbc02d";
var yellow800 = "#f9a825";
var yellow900 = "#f57f17";
var yellowA100 = "#ffff8d";
var yellowA200 = "#ffff00";
var yellowA400 = "#ffea00";
var yellowA700 = "#ffd600";
var amber50 = "#fff8e1";
var amber100 = "#ffecb3";
var amber200 = "#ffe082";
var amber300 = "#ffd54f";
var amber400 = "#ffca28";
var amber500 = "#ffc107";
var amber600 = "#ffb300";
var amber700 = "#ffa000";
var amber800 = "#ff8f00";
var amber900 = "#ff6f00";
var amberA100 = "#ffe57f";
var amberA200 = "#ffd740";
var amberA400 = "#ffc400";
var amberA700 = "#ffab00";
var orange50 = "#fff3e0";
var orange100 = "#ffe0b2";
var orange200 = "#ffcc80";
var orange300 = "#ffb74d";
var orange400 = "#ffa726";
var orange500 = "#ff9800";
var orange600 = "#fb8c00";
var orange700 = "#f57c00";
var orange800 = "#ef6c00";
var orange900 = "#e65100";
var orangeA100 = "#ffd180";
var orangeA200 = "#ffab40";
var orangeA400 = "#ff9100";
var orangeA700 = "#ff6d00";
var deepOrange50 = "#fbe9e7";
var deepOrange100 = "#ffccbc";
var deepOrange200 = "#ffab91";
var deepOrange300 = "#ff8a65";
var deepOrange400 = "#ff7043";
var deepOrange500 = "#ff5722";
var deepOrange600 = "#f4511e";
var deepOrange700 = "#e64a19";
var deepOrange800 = "#d84315";
var deepOrange900 = "#bf360c";
var deepOrangeA100 = "#ff9e80";
var deepOrangeA200 = "#ff6e40";
var deepOrangeA400 = "#ff3d00";
var deepOrangeA700 = "#dd2c00";
var brown50 = "#efebe9";
var brown100 = "#d7ccc8";
var brown200 = "#bcaaa4";
var brown300 = "#a1887f";
var brown400 = "#8d6e63";
var brown500 = "#795548";
var brown600 = "#6d4c41";
var brown700 = "#5d4037";
var brown800 = "#4e342e";
var brown900 = "#3e2723";
var blueGrey50 = "#eceff1";
var blueGrey100 = "#cfd8dc";
var blueGrey200 = "#b0bec5";
var blueGrey300 = "#90a4ae";
var blueGrey400 = "#78909c";
var blueGrey500 = "#607d8b";
var blueGrey600 = "#546e7a";
var blueGrey700 = "#455a64";
var blueGrey800 = "#37474f";
var blueGrey900 = "#263238";
var grey50 = "#fafafa";
var grey100 = "#f5f5f5";
var grey200 = "#eeeeee";
var grey300 = "#e0e0e0";
var grey400 = "#bdbdbd";
var grey500 = "#9e9e9e";
var grey600 = "#757575";
var grey700 = "#616161";
var grey800 = "#424242";
var grey900 = "#212121";
var black = "#000000";
var white = "#ffffff";

// node_modules/react-native-paper/lib/module/core/theming.js
var import_react_theme_provider = __toModule(require_lib());

// node_modules/react-native-paper/lib/module/styles/DefaultTheme.js
var import_color = __toModule(require_color());

// node_modules/react-native-paper/lib/module/styles/fonts.js
var fontConfig = {
  web: {
    regular: {
      fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
      fontWeight: "400"
    },
    medium: {
      fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
      fontWeight: "500"
    },
    light: {
      fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
      fontWeight: "300"
    },
    thin: {
      fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
      fontWeight: "100"
    }
  },
  ios: {
    regular: {
      fontFamily: "System",
      fontWeight: "400"
    },
    medium: {
      fontFamily: "System",
      fontWeight: "500"
    },
    light: {
      fontFamily: "System",
      fontWeight: "300"
    },
    thin: {
      fontFamily: "System",
      fontWeight: "100"
    }
  },
  default: {
    regular: {
      fontFamily: "sans-serif",
      fontWeight: "normal"
    },
    medium: {
      fontFamily: "sans-serif-medium",
      fontWeight: "normal"
    },
    light: {
      fontFamily: "sans-serif-light",
      fontWeight: "normal"
    },
    thin: {
      fontFamily: "sans-serif-thin",
      fontWeight: "normal"
    }
  }
};
function configureFonts(config) {
  const fonts = Platform_default.select({
    ...fontConfig,
    ...config
  });
  return fonts;
}

// node_modules/react-native-paper/lib/module/styles/DefaultTheme.js
var DefaultTheme = {
  dark: false,
  roundness: 4,
  colors: {
    primary: "#6200ee",
    accent: "#03dac4",
    background: "#f6f6f6",
    surface: white,
    error: "#B00020",
    text: black,
    onBackground: "#000000",
    onSurface: "#000000",
    disabled: (0, import_color.default)(black).alpha(0.26).rgb().string(),
    placeholder: (0, import_color.default)(black).alpha(0.54).rgb().string(),
    backdrop: (0, import_color.default)(black).alpha(0.5).rgb().string(),
    notification: pinkA400
  },
  fonts: configureFonts(),
  animation: {
    scale: 1
  }
};
var DefaultTheme_default = DefaultTheme;

// node_modules/react-native-paper/lib/module/core/theming.js
var {
  ThemeProvider,
  withTheme,
  useTheme
} = (0, import_react_theme_provider.createTheming)(DefaultTheme_default);

// node_modules/react-native-paper/lib/module/core/Provider.js
var React38 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/core/settings.js
var React35 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/MaterialCommunityIcon.js
var React34 = __toModule(require_react());
function _extends18() {
  _extends18 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends18.apply(this, arguments);
}
var MaterialCommunityIcons;

// node_modules/@unimodules/react-native-adapter/build/errors/CodedError.js
var CodedError = class extends Error {
  constructor(code2, message2) {
    super(message2);
    this.code = code2;
  }
};

// node_modules/expo-font/build/ExpoFontLoader.web.js
var import_ExecutionEnvironment19 = __toModule(require_ExecutionEnvironment2());
var import_fontfaceobserver = __toModule(require_fontfaceobserver_standalone());

// node_modules/expo-font/build/Font.types.js
var FontDisplay;
(function(FontDisplay2) {
  FontDisplay2["AUTO"] = "auto";
  FontDisplay2["SWAP"] = "swap";
  FontDisplay2["BLOCK"] = "block";
  FontDisplay2["FALLBACK"] = "fallback";
  FontDisplay2["OPTIONAL"] = "optional";
})(FontDisplay || (FontDisplay = {}));

// node_modules/expo-font/build/ExpoFontLoader.web.js
function getFontFaceStyleSheet() {
  if (!import_ExecutionEnvironment19.canUseDOM) {
    return null;
  }
  const styleSheet = getStyleElement();
  return styleSheet.sheet ? styleSheet.sheet : null;
}
function getFontFaceRules() {
  const sheet = getFontFaceStyleSheet();
  if (sheet) {
    const rules = [...sheet.cssRules];
    const items2 = [];
    for (let i = 0; i < rules.length; i++) {
      const rule2 = rules[i];
      if (rule2 instanceof CSSFontFaceRule) {
        items2.push({rule: rule2, index: i});
      }
    }
    return items2;
  }
  return [];
}
function getFontFaceRulesMatchingResource(fontFamilyName, options) {
  const rules = getFontFaceRules();
  return rules.filter(({rule: rule2}) => {
    return rule2.style.fontFamily === fontFamilyName && (options && options.display ? options.display === rule2.style.fontDisplay : true);
  });
}
var ExpoFontLoader_web_default = {
  get name() {
    return "ExpoFontLoader";
  },
  async unloadAllAsync() {
    if (!import_ExecutionEnvironment19.canUseDOM)
      return;
    const element = document.getElementById(ID);
    if (element && element instanceof HTMLStyleElement) {
      document.removeChild(element);
    }
  },
  async unloadAsync(fontFamilyName, options) {
    const sheet = getFontFaceStyleSheet();
    if (!sheet)
      return;
    const items2 = getFontFaceRulesMatchingResource(fontFamilyName, options);
    for (const item of items2) {
      sheet.deleteRule(item.index);
    }
  },
  async loadAsync(fontFamilyName, resource) {
    if (!import_ExecutionEnvironment19.canUseDOM) {
      return;
    }
    const canInjectStyle = document.head && typeof document.head.appendChild === "function";
    if (!canInjectStyle) {
      throw new CodedError("ERR_WEB_ENVIRONMENT", `The browser's \`document.head\` element doesn't support injecting fonts.`);
    }
    const style = _createWebStyle(fontFamilyName, resource);
    document.head.appendChild(style);
    if (!isFontLoadingListenerSupported()) {
      return;
    }
    return new import_fontfaceobserver.default(fontFamilyName, {display: resource.display}).load();
  }
};
var ID = "expo-generated-fonts";
function getStyleElement() {
  const element = document.getElementById(ID);
  if (element && element instanceof HTMLStyleElement) {
    return element;
  }
  const styleElement = document.createElement("style");
  styleElement.id = ID;
  styleElement.type = "text/css";
  return styleElement;
}
function _createWebStyle(fontFamily, resource) {
  const fontStyle = `@font-face {
    font-family: ${fontFamily};
    src: url(${resource.uri});
    font-display: ${resource.display || FontDisplay.AUTO};
  }`;
  const styleElement = getStyleElement();
  if (styleElement.styleSheet) {
    const styleElementIE = styleElement;
    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText ? styleElementIE.styleSheet.cssText + fontStyle : fontStyle;
  } else {
    const textNode = document.createTextNode(fontStyle);
    styleElement.appendChild(textNode);
  }
  return styleElement;
}
function isFontLoadingListenerSupported() {
  const {userAgent} = window.navigator;
  const isIOS2 = !!userAgent.match(/iPad|iPhone/i);
  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  const isEdge = userAgent.includes("Edge");
  const isIE = userAgent.includes("Trident");
  const isFirefox = userAgent.includes("Firefox");
  return !isSafari && !isIOS2 && !isEdge && !isIE && !isFirefox;
}

// node_modules/expo-font/build/FontLoader.web.js
function uriFromFontSource(asset) {
  if (typeof asset === "string") {
    return asset || null;
  } else if (typeof asset === "object") {
    return asset.uri || asset.localUri || null;
  }
  return null;
}
function displayFromFontSource(asset) {
  return asset.display || FontDisplay.AUTO;
}
function getAssetForSource(source) {
  const uri = uriFromFontSource(source);
  const display = displayFromFontSource(source);
  if (!uri || typeof uri !== "string") {
    throwInvalidSourceError(uri);
  }
  return {
    uri,
    display
  };
}
function throwInvalidSourceError(source) {
  let type = typeof source;
  if (type === "object")
    type = JSON.stringify(source, null, 2);
  throw new CodedError(`ERR_FONT_SOURCE`, `Expected font asset of type \`string | FontResource | Asset\` (number is not supported on web) instead got: ${type}`);
}
async function loadSingleFontAsync(name, input) {
  if (typeof input !== "object" || typeof input.uri !== "string" || input.downloadAsync) {
    throwInvalidSourceError(input);
  }
  await ExpoFontLoader_web_default.loadAsync(name, input);
}

// node_modules/expo-font/build/Font.js
var loaded = {};
var loadPromises = {};
function isLoaded(fontFamily) {
  return fontFamily in loaded;
}
async function loadAsync(fontFamilyOrFontMap, source) {
  if (typeof fontFamilyOrFontMap === "object") {
    if (source) {
      throw new CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \`loadAsync()\` can only be used with a \`string\` value as the first argument.`);
    }
    const fontMap = fontFamilyOrFontMap;
    const names = Object.keys(fontMap);
    await Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name])));
    return;
  }
  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);
}
async function loadFontInNamespaceAsync(fontFamily, source) {
  if (!source) {
    throw new CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { "${fontFamily}": ${source} }. Expected asset of type \`FontSource\` for fontFamily of name: "${fontFamily}"`);
  }
  if (loaded[fontFamily]) {
    return;
  }
  if (loadPromises[fontFamily]) {
    return loadPromises[fontFamily];
  }
  const asset = getAssetForSource(source);
  loadPromises[fontFamily] = (async () => {
    try {
      await loadSingleFontAsync(fontFamily, asset);
      loaded[fontFamily] = true;
    } finally {
      delete loadPromises[fontFamily];
    }
  })();
  await loadPromises[fontFamily];
}

// node_modules/@expo/vector-icons/build/createIconSet.js
var import_react28 = __toModule(require_react());

// node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js
var import_react27 = __toModule(require_react());
var import_prop_types2 = __toModule(require_prop_types());

// node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/ensure-native-module-available.js
var NativeIconAPI = NativeModules_default.RNVectorIconsManager || NativeModules_default.RNVectorIconsModule;
function ensureNativeModuleAvailable() {
  if (!NativeIconAPI) {
    if (Platform_default.OS === "android") {
      throw new Error("RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.");
    }
    throw new Error("RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.");
  }
}

// node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-source-cache.js
var TYPE_VALUE = "value";
var TYPE_ERROR = "error";
function createIconSourceCache() {
  const cache2 = new Map();
  const setValue = (key3, value) => cache2.set(key3, {type: TYPE_VALUE, data: value});
  const setError = (key3, error2) => cache2.set(key3, {type: TYPE_ERROR, data: error2});
  const has2 = (key3) => cache2.has(key3);
  const get3 = (key3) => {
    if (!cache2.has(key3)) {
      return void 0;
    }
    const {type, data: data2} = cache2.get(key3);
    if (type === TYPE_ERROR) {
      throw data2;
    }
    return data2;
  };
  return {setValue, setError, has: has2, get: get3};
}

// node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/icon-button.js
var import_lodash = __toModule(require_lodash());
var import_lodash2 = __toModule(require_lodash2());
var import_lodash3 = __toModule(require_lodash3());
var import_react26 = __toModule(require_react());
var styles15 = StyleSheet_default2.create({
  container: {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    padding: 8
  },
  touchable: {
    overflow: "hidden"
  },
  icon: {
    marginRight: 10
  },
  text: {
    fontWeight: "600",
    backgroundColor: "transparent"
  }
});
var IOS7_BLUE = "#007AFF";
var TEXT_PROP_NAMES = [
  "ellipsizeMode",
  "numberOfLines",
  "textBreakStrategy",
  "selectable",
  "suppressHighlighting",
  "allowFontScaling",
  "adjustsFontSizeToFit",
  "minimumFontScale"
];
var TOUCHABLE_PROP_NAMES = [
  "accessible",
  "accessibilityLabel",
  "accessibilityHint",
  "accessibilityComponentType",
  "accessibilityRole",
  "accessibilityStates",
  "accessibilityTraits",
  "onFocus",
  "onBlur",
  "disabled",
  "onPress",
  "onPressIn",
  "onPressOut",
  "onLayout",
  "onLongPress",
  "nativeID",
  "testID",
  "delayPressIn",
  "delayPressOut",
  "delayLongPress",
  "activeOpacity",
  "underlayColor",
  "selectionColor",
  "onShowUnderlay",
  "onHideUnderlay",
  "hasTVPreferredFocus",
  "tvParallaxProperties"
];
function createIconButtonComponent(Icon2) {
  return class IconButton extends import_react26.PureComponent {
    static defaultProps = {
      backgroundColor: IOS7_BLUE,
      borderRadius: 5,
      color: "white",
      size: 20
    };
    render() {
      const {style, iconStyle, children, ...restProps} = this.props;
      const iconProps = (0, import_lodash3.default)(restProps, TEXT_PROP_NAMES, "style", "name", "size", "color");
      const touchableProps = (0, import_lodash3.default)(restProps, TOUCHABLE_PROP_NAMES);
      const props = (0, import_lodash2.default)(restProps, Object.keys(iconProps), Object.keys(touchableProps), "iconStyle", "borderRadius", "backgroundColor");
      iconProps.style = iconStyle ? [styles15.icon, iconStyle] : styles15.icon;
      const colorStyle = (0, import_lodash3.default)(this.props, "color");
      const blockStyle = (0, import_lodash3.default)(this.props, "backgroundColor", "borderRadius");
      return /* @__PURE__ */ import_react26.default.createElement(TouchableHighlight_default, {
        style: [styles15.touchable, blockStyle],
        ...touchableProps
      }, /* @__PURE__ */ import_react26.default.createElement(View_default, {
        style: [styles15.container, blockStyle, style],
        ...props
      }, /* @__PURE__ */ import_react26.default.createElement(Icon2, {
        ...iconProps
      }), (0, import_lodash.default)(children) ? /* @__PURE__ */ import_react26.default.createElement(Text_default, {
        style: [styles15.text, colorStyle]
      }, children) : children));
    }
  };
}

// node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js
var NativeIconAPI2 = NativeModules_default.RNVectorIconsManager || NativeModules_default.RNVectorIconsModule;
var DEFAULT_ICON_SIZE = 12;
var DEFAULT_ICON_COLOR = "black";
function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {
  const fontBasename = fontFile ? fontFile.replace(/\.(otf|ttf)$/, "") : fontFamily;
  const fontReference = Platform_default.select({
    windows: `/Assets/${fontFile}#${fontFamily}`,
    android: fontBasename,
    web: fontBasename,
    default: fontFamily
  });
  class Icon2 extends import_react27.PureComponent {
    root = null;
    static defaultProps = {
      size: DEFAULT_ICON_SIZE,
      allowFontScaling: false
    };
    setNativeProps(nativeProps) {
      if (this.root) {
        this.root.setNativeProps(nativeProps);
      }
    }
    handleRef = (ref) => {
      this.root = ref;
    };
    render() {
      const {name, size, color: color39, style, children, ...props} = this.props;
      let glyph = name ? glyphMap[name] || "?" : "";
      if (typeof glyph === "number") {
        glyph = String.fromCodePoint(glyph);
      }
      const styleDefaults = {
        fontSize: size,
        color: color39
      };
      const styleOverrides = {
        fontFamily: fontReference,
        fontWeight: "normal",
        fontStyle: "normal"
      };
      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];
      props.ref = this.handleRef;
      return /* @__PURE__ */ import_react27.default.createElement(Text_default, {
        ...props
      }, glyph, children);
    }
  }
  const imageSourceCache = createIconSourceCache();
  function resolveGlyph(name) {
    const glyph = glyphMap[name] || "?";
    if (typeof glyph === "number") {
      return String.fromCodePoint(glyph);
    }
    return glyph;
  }
  function getImageSourceSync(name, size = DEFAULT_ICON_SIZE, color39 = DEFAULT_ICON_COLOR) {
    ensureNativeModuleAvailable();
    const glyph = resolveGlyph(name);
    const processedColor = processColor_default(color39);
    const cacheKey = `${glyph}:${size}:${processedColor}`;
    if (imageSourceCache.has(cacheKey)) {
      return imageSourceCache.get(cacheKey);
    }
    try {
      const imagePath = NativeIconAPI2.getImageForFontSync(fontReference, glyph, size, processedColor);
      const value = {uri: imagePath, scale: PixelRatio.get()};
      imageSourceCache.setValue(cacheKey, value);
      return value;
    } catch (error2) {
      imageSourceCache.setError(cacheKey, error2);
      throw error2;
    }
  }
  async function getImageSource(name, size = DEFAULT_ICON_SIZE, color39 = DEFAULT_ICON_COLOR) {
    ensureNativeModuleAvailable();
    const glyph = resolveGlyph(name);
    const processedColor = processColor_default(color39);
    const cacheKey = `${glyph}:${size}:${processedColor}`;
    if (imageSourceCache.has(cacheKey)) {
      return imageSourceCache.get(cacheKey);
    }
    try {
      const imagePath = await NativeIconAPI2.getImageForFont(fontReference, glyph, size, processedColor);
      const value = {uri: imagePath, scale: PixelRatio.get()};
      imageSourceCache.setValue(cacheKey, value);
      return value;
    } catch (error2) {
      imageSourceCache.setError(cacheKey, error2);
      throw error2;
    }
  }
  async function loadFont(file3 = fontFile) {
    if (Platform_default.OS === "ios") {
      ensureNativeModuleAvailable();
      if (!file3) {
        throw new Error("Unable to load font, because no file was specified. ");
      }
      await NativeIconAPI2.loadFontWithFileName(...file3.split("."));
    }
  }
  function hasIcon(name) {
    return Object.prototype.hasOwnProperty.call(glyphMap, name);
  }
  function getRawGlyphMap() {
    return glyphMap;
  }
  function getFontFamily() {
    return fontReference;
  }
  Icon2.Button = createIconButtonComponent(Icon2);
  Icon2.TabBarItemIOS = Icon2.TabBarItem;
  Icon2.getImageSource = getImageSource;
  Icon2.getImageSourceSync = getImageSourceSync;
  Icon2.loadFont = loadFont;
  Icon2.hasIcon = hasIcon;
  Icon2.getRawGlyphMap = getRawGlyphMap;
  Icon2.getFontFamily = getFontFamily;
  return Icon2;
}

// node_modules/@expo/vector-icons/build/createIconSet.js
function createIconSet_default(glyphMap, fontName, expoAssetId, fontStyle) {
  var _a;
  const font2 = {[fontName]: expoAssetId};
  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);
  return _a = class Icon extends import_react28.default.Component {
    constructor() {
      super(...arguments);
      this._mounted = false;
      this.state = {
        fontIsLoaded: isLoaded(fontName)
      };
    }
    async componentDidMount() {
      this._mounted = true;
      if (!this.state.fontIsLoaded) {
        await loadAsync(font2);
        this._mounted && this.setState({fontIsLoaded: true});
      }
    }
    componentWillUnmount() {
      this._mounted = false;
    }
    setNativeProps(props) {
      if (this._icon) {
        this._icon.setNativeProps(props);
      }
    }
    render() {
      if (!this.state.fontIsLoaded) {
        return /* @__PURE__ */ import_react28.default.createElement(Text_default, null);
      }
      return /* @__PURE__ */ import_react28.default.createElement(RNVIconComponent, {
        ref: (view) => {
          this._icon = view;
        },
        ...this.props
      });
    }
  }, _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = createIconButtonComponent(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = () => glyphMap, _a.getFontFamily = () => fontName, _a.loadFont = () => loadAsync(font2), _a.font = font2, _a;
}

// node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/Fonts/MaterialCommunityIcons.ttf
var MaterialCommunityIcons_default = "/assets/MaterialCommunityIcons-QCSDDVWU.ttf";

// node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/glyphmaps/MaterialCommunityIcons.json
var ab_testing = 983497;
var abjad_arabic = 987944;
var abjad_hebrew = 987945;
var abugida_devanagari = 987946;
var abugida_thai = 987947;
var access_point = 983043;
var access_point_network = 983042;
var access_point_network_off = 986081;
var account = 983044;
var account_alert = 983045;
var account_alert_outline = 985936;
var account_arrow_left = 985937;
var account_arrow_left_outline = 985938;
var account_arrow_right = 985939;
var account_arrow_right_outline = 985940;
var account_box = 983046;
var account_box_multiple = 985396;
var account_box_multiple_outline = 987146;
var account_box_outline = 983047;
var account_cancel = 987871;
var account_cancel_outline = 987872;
var account_cash = 987287;
var account_cash_outline = 987288;
var account_check = 983048;
var account_check_outline = 986082;
var account_child = 985737;
var account_child_circle = 985738;
var account_child_outline = 987336;
var account_circle = 983049;
var account_circle_outline = 985941;
var account_clock = 985942;
var account_clock_outline = 985943;
var account_cog = 988016;
var account_cog_outline = 988017;
var account_convert = 983050;
var account_convert_outline = 987905;
var account_cowboy_hat = 986779;
var account_details = 984625;
var account_details_outline = 988018;
var account_edit = 984764;
var account_edit_outline = 987131;
var account_group = 985161;
var account_group_outline = 985944;
var account_hard_hat = 984501;
var account_heart = 985241;
var account_heart_outline = 986083;
var account_key = 983051;
var account_key_outline = 986084;
var account_lock = 987486;
var account_lock_outline = 987487;
var account_minus = 983053;
var account_minus_outline = 985836;
var account_multiple = 983054;
var account_multiple_check = 985285;
var account_multiple_check_outline = 987646;
var account_multiple_minus = 984531;
var account_multiple_minus_outline = 986085;
var account_multiple_outline = 983055;
var account_multiple_plus = 983056;
var account_multiple_plus_outline = 985088;
var account_multiple_remove = 987658;
var account_multiple_remove_outline = 987659;
var account_music = 985091;
var account_music_outline = 986345;
var account_network = 983057;
var account_network_outline = 986086;
var account_off = 983058;
var account_off_outline = 986087;
var account_outline = 983059;
var account_plus = 983060;
var account_plus_outline = 985089;
var account_question = 985945;
var account_question_outline = 985946;
var account_remove = 983061;
var account_remove_outline = 985837;
var account_search = 983062;
var account_search_outline = 985397;
var account_settings = 984624;
var account_settings_outline = 987337;
var account_star = 983063;
var account_star_outline = 986088;
var account_supervisor = 985739;
var account_supervisor_circle = 985740;
var account_supervisor_outline = 987437;
var account_switch = 983065;
var account_switch_outline = 984267;
var account_tie = 986339;
var account_tie_outline = 987338;
var account_tie_voice = 987912;
var account_tie_voice_off = 987914;
var account_tie_voice_off_outline = 987915;
var account_tie_voice_outline = 987913;
var account_voice = 984523;
var adjust = 983066;
var adobe = 985398;
var adobe_acrobat = 987037;
var air_conditioner = 983067;
var air_filter = 986435;
var air_horn = 986540;
var air_humidifier = 987289;
var air_humidifier_off = 988262;
var air_purifier = 986436;
var airbag = 986089;
var airballoon = 983068;
var airballoon_outline = 987147;
var airplane = 983069;
var airplane_landing = 984532;
var airplane_off = 983070;
var airplane_takeoff = 984533;
var airport = 985163;
var alarm = 983072;
var alarm_bell = 984974;
var alarm_check = 983073;
var alarm_light = 984975;
var alarm_light_outline = 986090;
var alarm_multiple = 983074;
var alarm_note = 986737;
var alarm_note_off = 986738;
var alarm_off = 983075;
var alarm_plus = 983076;
var alarm_snooze = 984718;
var album = 983077;
var alert = 983078;
var alert_box = 983079;
var alert_box_outline = 986340;
var alert_circle = 983080;
var alert_circle_check = 987629;
var alert_circle_check_outline = 987630;
var alert_circle_outline = 984534;
var alert_decagram = 984765;
var alert_decagram_outline = 986341;
var alert_minus = 988347;
var alert_minus_outline = 988350;
var alert_octagon = 983081;
var alert_octagon_outline = 986342;
var alert_octagram = 984935;
var alert_octagram_outline = 986343;
var alert_outline = 983082;
var alert_plus = 988346;
var alert_plus_outline = 988349;
var alert_remove = 988348;
var alert_remove_outline = 988351;
var alert_rhombus = 987598;
var alert_rhombus_outline = 987599;
var alien = 985242;
var alien_outline = 987339;
var align_horizontal_center = 987587;
var align_horizontal_left = 987586;
var align_horizontal_right = 987588;
var align_vertical_bottom = 987589;
var align_vertical_center = 987590;
var align_vertical_top = 987591;
var all_inclusive = 984766;
var allergy = 987736;
var alpha = 983083;
var alpha_a = 985838;
var alpha_a_box = 985864;
var alpha_a_box_outline = 986091;
var alpha_a_circle = 986092;
var alpha_a_circle_outline = 986093;
var alpha_b = 985839;
var alpha_b_box = 985865;
var alpha_b_box_outline = 986094;
var alpha_b_circle = 986095;
var alpha_b_circle_outline = 986096;
var alpha_c = 985840;
var alpha_c_box = 985866;
var alpha_c_box_outline = 986097;
var alpha_c_circle = 986098;
var alpha_c_circle_outline = 986099;
var alpha_d = 985841;
var alpha_d_box = 985867;
var alpha_d_box_outline = 986100;
var alpha_d_circle = 986101;
var alpha_d_circle_outline = 986102;
var alpha_e = 985842;
var alpha_e_box = 985868;
var alpha_e_box_outline = 986103;
var alpha_e_circle = 986104;
var alpha_e_circle_outline = 986105;
var alpha_f = 985843;
var alpha_f_box = 985869;
var alpha_f_box_outline = 986106;
var alpha_f_circle = 986107;
var alpha_f_circle_outline = 986108;
var alpha_g = 985844;
var alpha_g_box = 985870;
var alpha_g_box_outline = 986109;
var alpha_g_circle = 986110;
var alpha_g_circle_outline = 986111;
var alpha_h = 985845;
var alpha_h_box = 985871;
var alpha_h_box_outline = 986112;
var alpha_h_circle = 986113;
var alpha_h_circle_outline = 986114;
var alpha_i = 985846;
var alpha_i_box = 985872;
var alpha_i_box_outline = 986115;
var alpha_i_circle = 986116;
var alpha_i_circle_outline = 986117;
var alpha_j = 985847;
var alpha_j_box = 985873;
var alpha_j_box_outline = 986118;
var alpha_j_circle = 986119;
var alpha_j_circle_outline = 986120;
var alpha_k = 985848;
var alpha_k_box = 985874;
var alpha_k_box_outline = 986121;
var alpha_k_circle = 986122;
var alpha_k_circle_outline = 986123;
var alpha_l = 985849;
var alpha_l_box = 985875;
var alpha_l_box_outline = 986124;
var alpha_l_circle = 986125;
var alpha_l_circle_outline = 986126;
var alpha_m = 985850;
var alpha_m_box = 985876;
var alpha_m_box_outline = 986127;
var alpha_m_circle = 986128;
var alpha_m_circle_outline = 986129;
var alpha_n = 985851;
var alpha_n_box = 985877;
var alpha_n_box_outline = 986130;
var alpha_n_circle = 986131;
var alpha_n_circle_outline = 986132;
var alpha_o = 985852;
var alpha_o_box = 985878;
var alpha_o_box_outline = 986133;
var alpha_o_circle = 986134;
var alpha_o_circle_outline = 986135;
var alpha_p = 985853;
var alpha_p_box = 985879;
var alpha_p_box_outline = 986136;
var alpha_p_circle = 986137;
var alpha_p_circle_outline = 986138;
var alpha_q = 985854;
var alpha_q_box = 985880;
var alpha_q_box_outline = 986139;
var alpha_q_circle = 986140;
var alpha_q_circle_outline = 986141;
var alpha_r = 985855;
var alpha_r_box = 985881;
var alpha_r_box_outline = 986142;
var alpha_r_circle = 986143;
var alpha_r_circle_outline = 986144;
var alpha_s = 985856;
var alpha_s_box = 985882;
var alpha_s_box_outline = 986145;
var alpha_s_circle = 986146;
var alpha_s_circle_outline = 986147;
var alpha_t = 985857;
var alpha_t_box = 985883;
var alpha_t_box_outline = 986148;
var alpha_t_circle = 986149;
var alpha_t_circle_outline = 986150;
var alpha_u = 985858;
var alpha_u_box = 985884;
var alpha_u_box_outline = 986151;
var alpha_u_circle = 986152;
var alpha_u_circle_outline = 986153;
var alpha_v = 985859;
var alpha_v_box = 985885;
var alpha_v_box_outline = 986154;
var alpha_v_circle = 986155;
var alpha_v_circle_outline = 986156;
var alpha_w = 985860;
var alpha_w_box = 985886;
var alpha_w_box_outline = 986157;
var alpha_w_circle = 986158;
var alpha_w_circle_outline = 986159;
var alpha_x = 985861;
var alpha_x_box = 985887;
var alpha_x_box_outline = 986160;
var alpha_x_circle = 986161;
var alpha_x_circle_outline = 986162;
var alpha_y = 985862;
var alpha_y_box = 985888;
var alpha_y_box_outline = 986163;
var alpha_y_circle = 986164;
var alpha_y_circle_outline = 986165;
var alpha_z = 985863;
var alpha_z_box = 985889;
var alpha_z_box_outline = 986166;
var alpha_z_circle = 986167;
var alpha_z_circle_outline = 986168;
var alphabet_aurebesh = 987948;
var alphabet_cyrillic = 987949;
var alphabet_greek = 987950;
var alphabet_latin = 987951;
var alphabet_piqad = 987952;
var alphabet_tengwar = 987959;
var alphabetical = 983084;
var alphabetical_off = 987148;
var alphabetical_variant = 987149;
var alphabetical_variant_off = 987150;
var altimeter = 984535;
var amazon = 983085;
var amazon_alexa = 985286;
var ambulance = 983087;
var ammunition = 986344;
var ampersand = 985741;
var amplifier = 983088;
var amplifier_off = 987573;
var anchor = 983089;
var android = 983090;
var android_auto = 985742;
var android_debug_bridge = 983091;
var android_messages = 986437;
var android_studio = 983092;
var angle_acute = 985399;
var angle_obtuse = 985400;
var angle_right = 985401;
var angular = 984754;
var angularjs = 984767;
var animation = 984536;
var animation_outline = 985743;
var animation_play = 985402;
var animation_play_outline = 985744;
var ansible = 987290;
var antenna = 987417;
var anvil = 985243;
var apache_kafka = 987151;
var api = 987291;
var api_off = 987735;
var apple = 983093;
var apple_airplay = 983071;
var apple_finder = 983094;
var apple_icloud = 983096;
var apple_ios = 983095;
var apple_keyboard_caps = 984626;
var apple_keyboard_command = 984627;
var apple_keyboard_control = 984628;
var apple_keyboard_option = 984629;
var apple_keyboard_shift = 984630;
var apple_safari = 983097;
var application = 984596;
var application_export = 986541;
var application_import = 986542;
var approximately_equal = 987038;
var approximately_equal_box = 987039;
var apps = 983099;
var apps_box = 986438;
var arch = 985287;
var archive = 983100;
var archive_arrow_down = 987737;
var archive_arrow_down_outline = 987738;
var archive_arrow_up = 987739;
var archive_arrow_up_outline = 987740;
var archive_outline = 987662;
var arm_flex = 987095;
var arm_flex_outline = 987094;
var arrange_bring_forward = 983101;
var arrange_bring_to_front = 983102;
var arrange_send_backward = 983103;
var arrange_send_to_back = 983104;
var arrow_all = 983105;
var arrow_bottom_left = 983106;
var arrow_bottom_left_bold_outline = 985527;
var arrow_bottom_left_thick = 985528;
var arrow_bottom_right = 983107;
var arrow_bottom_right_bold_outline = 985529;
var arrow_bottom_right_thick = 985530;
var arrow_collapse = 984597;
var arrow_collapse_all = 983108;
var arrow_collapse_down = 984978;
var arrow_collapse_horizontal = 985164;
var arrow_collapse_left = 984979;
var arrow_collapse_right = 984980;
var arrow_collapse_up = 984981;
var arrow_collapse_vertical = 985165;
var arrow_decision = 985531;
var arrow_decision_auto = 985532;
var arrow_decision_auto_outline = 985533;
var arrow_decision_outline = 985534;
var arrow_down = 983109;
var arrow_down_bold = 984878;
var arrow_down_bold_box = 984879;
var arrow_down_bold_box_outline = 984880;
var arrow_down_bold_circle = 983111;
var arrow_down_bold_circle_outline = 983112;
var arrow_down_bold_hexagon_outline = 983113;
var arrow_down_bold_outline = 985535;
var arrow_down_box = 984768;
var arrow_down_circle = 986331;
var arrow_down_circle_outline = 986332;
var arrow_down_drop_circle = 983114;
var arrow_down_drop_circle_outline = 983115;
var arrow_down_thick = 983110;
var arrow_expand = 984598;
var arrow_expand_all = 983116;
var arrow_expand_down = 984982;
var arrow_expand_horizontal = 985166;
var arrow_expand_left = 984983;
var arrow_expand_right = 984984;
var arrow_expand_up = 984985;
var arrow_expand_vertical = 985167;
var arrow_horizontal_lock = 987483;
var arrow_left = 983117;
var arrow_left_bold = 984881;
var arrow_left_bold_box = 984882;
var arrow_left_bold_box_outline = 984883;
var arrow_left_bold_circle = 983119;
var arrow_left_bold_circle_outline = 983120;
var arrow_left_bold_hexagon_outline = 983121;
var arrow_left_bold_outline = 985536;
var arrow_left_box = 984769;
var arrow_left_circle = 986333;
var arrow_left_circle_outline = 986334;
var arrow_left_drop_circle = 983122;
var arrow_left_drop_circle_outline = 983123;
var arrow_left_right = 986739;
var arrow_left_right_bold = 986740;
var arrow_left_right_bold_outline = 985537;
var arrow_left_thick = 983118;
var arrow_right = 983124;
var arrow_right_bold = 984884;
var arrow_right_bold_box = 984885;
var arrow_right_bold_box_outline = 984886;
var arrow_right_bold_circle = 983126;
var arrow_right_bold_circle_outline = 983127;
var arrow_right_bold_hexagon_outline = 983128;
var arrow_right_bold_outline = 985538;
var arrow_right_box = 984770;
var arrow_right_circle = 986335;
var arrow_right_circle_outline = 986336;
var arrow_right_drop_circle = 983129;
var arrow_right_drop_circle_outline = 983130;
var arrow_right_thick = 983125;
var arrow_split_horizontal = 985403;
var arrow_split_vertical = 985404;
var arrow_top_left = 983131;
var arrow_top_left_bold_outline = 985539;
var arrow_top_left_bottom_right = 986741;
var arrow_top_left_bottom_right_bold = 986742;
var arrow_top_left_thick = 985540;
var arrow_top_right = 983132;
var arrow_top_right_bold_outline = 985541;
var arrow_top_right_bottom_left = 986743;
var arrow_top_right_bottom_left_bold = 986744;
var arrow_top_right_thick = 985542;
var arrow_up = 983133;
var arrow_up_bold = 984887;
var arrow_up_bold_box = 984888;
var arrow_up_bold_box_outline = 984889;
var arrow_up_bold_circle = 983135;
var arrow_up_bold_circle_outline = 983136;
var arrow_up_bold_hexagon_outline = 983137;
var arrow_up_bold_outline = 985543;
var arrow_up_box = 984771;
var arrow_up_circle = 986337;
var arrow_up_circle_outline = 986338;
var arrow_up_down = 986745;
var arrow_up_down_bold = 986746;
var arrow_up_down_bold_outline = 985544;
var arrow_up_drop_circle = 983138;
var arrow_up_drop_circle_outline = 983139;
var arrow_up_thick = 983134;
var arrow_vertical_lock = 987484;
var artstation = 985947;
var aspect_ratio = 985636;
var assistant = 983140;
var asterisk = 984772;
var at = 983141;
var atlassian = 985092;
var atm = 986439;
var atom = 984936;
var atom_variant = 986747;
var attachment = 983142;
var audio_video = 985405;
var audio_video_off = 987574;
var augmented_reality = 985168;
var auto_download = 988030;
var auto_fix = 983144;
var auto_upload = 983145;
var autorenew = 983146;
var av_timer = 983147;
var aws = 986639;
var axe = 985288;
var axis = 986440;
var axis_arrow = 986441;
var axis_arrow_info = 988174;
var axis_arrow_lock = 986442;
var axis_lock = 986443;
var axis_x_arrow = 986444;
var axis_x_arrow_lock = 986445;
var axis_x_rotate_clockwise = 986446;
var axis_x_rotate_counterclockwise = 986447;
var axis_x_y_arrow_lock = 986448;
var axis_y_arrow = 986449;
var axis_y_arrow_lock = 986450;
var axis_y_rotate_clockwise = 986451;
var axis_y_rotate_counterclockwise = 986452;
var axis_z_arrow = 986453;
var axis_z_arrow_lock = 986454;
var axis_z_rotate_clockwise = 986455;
var axis_z_rotate_counterclockwise = 986456;
var babel = 985637;
var baby = 983148;
var baby_bottle = 986937;
var baby_bottle_outline = 986938;
var baby_buggy = 988128;
var baby_carriage = 984719;
var baby_carriage_off = 987040;
var baby_face = 986748;
var baby_face_outline = 986749;
var backburger = 983149;
var backspace = 983150;
var backspace_outline = 985948;
var backspace_reverse = 986750;
var backspace_reverse_outline = 986751;
var backup_restore = 983151;
var bacteria = 986837;
var bacteria_outline = 986838;
var badge_account = 986535;
var badge_account_alert = 986536;
var badge_account_alert_outline = 986537;
var badge_account_horizontal = 986637;
var badge_account_horizontal_outline = 986638;
var badge_account_outline = 986538;
var badminton = 985169;
var bag_carry_on = 986939;
var bag_carry_on_check = 986469;
var bag_carry_on_off = 986940;
var bag_checked = 986941;
var bag_personal = 986640;
var bag_personal_off = 986641;
var bag_personal_off_outline = 986642;
var bag_personal_outline = 986643;
var baguette = 986942;
var balloon = 985638;
var ballot = 985545;
var ballot_outline = 985546;
var ballot_recount = 986169;
var ballot_recount_outline = 986170;
var bandage = 986543;
var bandcamp = 984693;
var bank = 983152;
var bank_minus = 986544;
var bank_outline = 986752;
var bank_plus = 986545;
var bank_remove = 986546;
var bank_transfer = 985639;
var bank_transfer_in = 985640;
var bank_transfer_out = 985641;
var barcode = 983153;
var barcode_off = 987702;
var barcode_scan = 983154;
var barley = 983155;
var barley_off = 985949;
var barn = 985950;
var barrel = 983156;
var baseball = 985170;
var baseball_bat = 985171;
var bash = 987523;
var basket = 983158;
var basket_fill = 983159;
var basket_outline = 987521;
var basket_unfill = 983160;
var basketball = 985094;
var basketball_hoop = 986171;
var basketball_hoop_outline = 986172;
var bat = 985951;
var battery = 983161;
var battery_10 = 983162;
var battery_10_bluetooth = 985406;
var battery_20 = 983163;
var battery_20_bluetooth = 985407;
var battery_30 = 983164;
var battery_30_bluetooth = 985408;
var battery_40 = 983165;
var battery_40_bluetooth = 985409;
var battery_50 = 983166;
var battery_50_bluetooth = 985410;
var battery_60 = 983167;
var battery_60_bluetooth = 985411;
var battery_70 = 983168;
var battery_70_bluetooth = 985412;
var battery_80 = 983169;
var battery_80_bluetooth = 985413;
var battery_90 = 983170;
var battery_90_bluetooth = 985414;
var battery_alert = 983171;
var battery_alert_bluetooth = 985415;
var battery_alert_variant = 987340;
var battery_alert_variant_outline = 987341;
var battery_bluetooth = 985416;
var battery_bluetooth_variant = 985417;
var battery_charging = 983172;
var battery_charging_10 = 985244;
var battery_charging_100 = 983173;
var battery_charging_20 = 983174;
var battery_charging_30 = 983175;
var battery_charging_40 = 983176;
var battery_charging_50 = 985245;
var battery_charging_60 = 983177;
var battery_charging_70 = 985246;
var battery_charging_80 = 983178;
var battery_charging_90 = 983179;
var battery_charging_high = 987814;
var battery_charging_low = 987812;
var battery_charging_medium = 987813;
var battery_charging_outline = 985247;
var battery_charging_wireless = 985095;
var battery_charging_wireless_10 = 985096;
var battery_charging_wireless_20 = 985097;
var battery_charging_wireless_30 = 985098;
var battery_charging_wireless_40 = 985099;
var battery_charging_wireless_50 = 985100;
var battery_charging_wireless_60 = 985101;
var battery_charging_wireless_70 = 985102;
var battery_charging_wireless_80 = 985103;
var battery_charging_wireless_90 = 985104;
var battery_charging_wireless_alert = 985105;
var battery_charging_wireless_outline = 985106;
var battery_heart = 987663;
var battery_heart_outline = 987664;
var battery_heart_variant = 987665;
var battery_high = 987811;
var battery_low = 987809;
var battery_medium = 987810;
var battery_minus = 983180;
var battery_negative = 983181;
var battery_off = 987741;
var battery_off_outline = 987742;
var battery_outline = 983182;
var battery_plus = 983183;
var battery_positive = 983184;
var battery_unknown = 983185;
var battery_unknown_bluetooth = 985418;
var battlenet = 985952;
var beach = 983186;
var beaker = 986346;
var beaker_alert = 987689;
var beaker_alert_outline = 987690;
var beaker_check = 987691;
var beaker_check_outline = 987692;
var beaker_minus = 987693;
var beaker_minus_outline = 987694;
var beaker_outline = 984720;
var beaker_plus = 987695;
var beaker_plus_outline = 987696;
var beaker_question = 987697;
var beaker_question_outline = 987698;
var beaker_remove = 987699;
var beaker_remove_outline = 987700;
var bed = 983779;
var bed_double = 987092;
var bed_double_outline = 987091;
var bed_empty = 985248;
var bed_king = 987090;
var bed_king_outline = 987089;
var bed_outline = 983193;
var bed_queen = 987088;
var bed_queen_outline = 987099;
var bed_single = 987245;
var bed_single_outline = 987246;
var bee = 987041;
var bee_flower = 987042;
var beehive_off_outline = 988141;
var beehive_outline = 987342;
var beer = 983192;
var beer_outline = 987916;
var bell = 983194;
var bell_alert = 986457;
var bell_alert_outline = 986753;
var bell_cancel = 988135;
var bell_cancel_outline = 988136;
var bell_check = 987621;
var bell_check_outline = 987622;
var bell_circle = 986458;
var bell_circle_outline = 986459;
var bell_minus = 988137;
var bell_minus_outline = 988138;
var bell_off = 983195;
var bell_off_outline = 985745;
var bell_outline = 983196;
var bell_plus = 983197;
var bell_plus_outline = 985746;
var bell_remove = 988139;
var bell_remove_outline = 988140;
var bell_ring = 983198;
var bell_ring_outline = 983199;
var bell_sleep = 983200;
var bell_sleep_outline = 985747;
var beta = 983201;
var betamax = 985547;
var biathlon = 986644;
var bicycle = 987292;
var bicycle_basket = 987701;
var bike = 983203;
var bike_fast = 987423;
var billboard = 987152;
var billiards = 985953;
var billiards_rack = 985954;
var binoculars = 983205;
var bio = 983206;
var biohazard = 983207;
var bitbucket = 983208;
var bitcoin = 985107;
var black_mesa = 983209;
var blender = 986347;
var blender_software = 983211;
var blinds = 983212;
var blinds_open = 987153;
var block_helper = 983213;
var blogger = 983214;
var blood_bag = 986348;
var bluetooth = 983215;
var bluetooth_audio = 983216;
var bluetooth_connect = 983217;
var bluetooth_off = 983218;
var bluetooth_settings = 983219;
var bluetooth_transfer = 983220;
var blur2 = 983221;
var blur_linear = 983222;
var blur_off = 983223;
var blur_radial = 983224;
var bolnisi_cross = 986349;
var bolt = 986547;
var bomb = 984721;
var bomb_off = 984773;
var bone = 983225;
var book = 983226;
var book_account = 988077;
var book_account_outline = 988078;
var book_alphabet = 984605;
var book_cross = 983202;
var book_information_variant = 987247;
var book_lock = 984986;
var book_lock_open = 984987;
var book_minus = 984537;
var book_minus_multiple = 985748;
var book_minus_multiple_outline = 985355;
var book_multiple = 983227;
var book_multiple_outline = 984118;
var book_music = 983143;
var book_open = 983229;
var book_open_outline = 985955;
var book_open_page_variant = 984538;
var book_open_variant = 983230;
var book_outline = 985956;
var book_play = 986754;
var book_play_outline = 986755;
var book_plus = 984539;
var book_plus_multiple = 985749;
var book_plus_multiple_outline = 985822;
var book_remove = 985751;
var book_remove_multiple = 985750;
var book_remove_multiple_outline = 984266;
var book_search = 986756;
var book_search_outline = 986757;
var book_variant = 983231;
var book_variant_multiple = 983228;
var bookmark = 983232;
var bookmark_check = 983233;
var bookmark_check_outline = 988027;
var bookmark_minus = 985548;
var bookmark_minus_outline = 985549;
var bookmark_multiple = 986645;
var bookmark_multiple_outline = 986646;
var bookmark_music = 983234;
var bookmark_music_outline = 988025;
var bookmark_off = 985550;
var bookmark_off_outline = 985551;
var bookmark_outline = 983235;
var bookmark_plus = 983237;
var bookmark_plus_outline = 983236;
var bookmark_remove = 983238;
var bookmark_remove_outline = 988026;
var bookshelf = 987743;
var boom_gate = 986758;
var boom_gate_alert = 986759;
var boom_gate_alert_outline = 986760;
var boom_gate_down = 986761;
var boom_gate_down_outline = 986762;
var boom_gate_outline = 986763;
var boom_gate_up = 986764;
var boom_gate_up_outline = 986765;
var boombox = 984540;
var boomerang = 987343;
var bootstrap = 984774;
var border_all = 983239;
var border_all_variant = 985249;
var border_bottom = 983240;
var border_bottom_variant = 985250;
var border_color = 983241;
var border_horizontal = 983242;
var border_inside = 983243;
var border_left = 983244;
var border_left_variant = 985251;
var border_none = 983245;
var border_none_variant = 985252;
var border_outside = 983246;
var border_right = 983247;
var border_right_variant = 985253;
var border_style = 983248;
var border_top = 983249;
var border_top_variant = 985254;
var border_vertical = 983250;
var bottle_soda = 987248;
var bottle_soda_classic = 987249;
var bottle_soda_classic_outline = 988003;
var bottle_soda_outline = 987250;
var bottle_tonic = 987438;
var bottle_tonic_outline = 987439;
var bottle_tonic_plus = 987440;
var bottle_tonic_plus_outline = 987441;
var bottle_tonic_skull = 987442;
var bottle_tonic_skull_outline = 987443;
var bottle_wine = 985172;
var bottle_wine_outline = 987920;
var bow_tie = 984696;
var bowl = 983694;
var bowl_mix = 984599;
var bowl_mix_outline = 983780;
var bowl_outline = 983721;
var bowling = 983251;
var box = 983252;
var box_cutter = 983253;
var box_cutter_off = 985930;
var box_shadow = 984631;
var boxing_glove = 985957;
var braille = 985552;
var brain = 985553;
var bread_slice = 986350;
var bread_slice_outline = 986351;
var bridge = 984600;
var briefcase = 983254;
var briefcase_account = 986352;
var briefcase_account_outline = 986353;
var briefcase_check = 983255;
var briefcase_check_outline = 987934;
var briefcase_clock = 987344;
var briefcase_clock_outline = 987345;
var briefcase_download = 983256;
var briefcase_download_outline = 986173;
var briefcase_edit = 985752;
var briefcase_edit_outline = 986174;
var briefcase_minus = 985642;
var briefcase_minus_outline = 986175;
var briefcase_outline = 985108;
var briefcase_plus = 985643;
var briefcase_plus_outline = 986176;
var briefcase_remove = 985644;
var briefcase_remove_outline = 986177;
var briefcase_search = 985645;
var briefcase_search_outline = 986178;
var briefcase_upload = 983257;
var briefcase_upload_outline = 986179;
var briefcase_variant = 988308;
var briefcase_variant_outline = 988309;
var brightness_1 = 983258;
var brightness_2 = 983259;
var brightness_3 = 983260;
var brightness_4 = 983261;
var brightness_5 = 983262;
var brightness_6 = 983263;
var brightness_7 = 983264;
var brightness_auto = 983265;
var brightness_percent = 986354;
var broom = 983266;
var brush = 983267;
var bucket = 988181;
var bucket_outline = 988182;
var buddhism = 985419;
var buffer = 984601;
var buffet = 984440;
var bug = 983268;
var bug_check = 985646;
var bug_check_outline = 985647;
var bug_outline = 985648;
var bugle = 986548;
var bulldozer = 985890;
var bullet = 986355;
var bulletin_board = 983269;
var bullhorn = 983270;
var bullhorn_outline = 985891;
var bullseye = 984541;
var bullseye_arrow = 985289;
var bulma = 987879;
var bunk_bed = 987906;
var bunk_bed_outline = 983191;
var bus = 983271;
var bus_alert = 985753;
var bus_articulated_end = 984988;
var bus_articulated_front = 984989;
var bus_clock = 985290;
var bus_double_decker = 984990;
var bus_marker = 987666;
var bus_multiple = 986943;
var bus_school = 984991;
var bus_side = 984992;
var bus_stop = 987154;
var bus_stop_covered = 987155;
var bus_stop_uncovered = 987156;
var cable_data = 988052;
var cached = 983272;
var cactus = 986549;
var cake = 983273;
var cake_layered = 983274;
var cake_variant = 983275;
var calculator = 983276;
var calculator_variant = 985754;
var calendar = 983277;
var calendar_account = 986839;
var calendar_account_outline = 986840;
var calendar_alert = 985649;
var calendar_arrow_left = 987444;
var calendar_arrow_right = 987445;
var calendar_blank = 983278;
var calendar_blank_multiple = 987251;
var calendar_blank_outline = 985958;
var calendar_check = 983279;
var calendar_check_outline = 986180;
var calendar_clock = 983280;
var calendar_edit = 985255;
var calendar_export = 985892;
var calendar_heart = 985554;
var calendar_import = 985893;
var calendar_minus = 986460;
var calendar_month = 986647;
var calendar_month_outline = 986648;
var calendar_multiple = 983281;
var calendar_multiple_check = 983282;
var calendar_multiselect = 985650;
var calendar_outline = 985959;
var calendar_plus = 983283;
var calendar_question = 984722;
var calendar_range = 984697;
var calendar_range_outline = 985960;
var calendar_refresh = 983521;
var calendar_refresh_outline = 983555;
var calendar_remove = 983284;
var calendar_remove_outline = 986181;
var calendar_search = 985420;
var calendar_star = 985555;
var calendar_sync = 986766;
var calendar_sync_outline = 986767;
var calendar_text = 983285;
var calendar_text_outline = 986182;
var calendar_today = 983286;
var calendar_week = 985651;
var calendar_week_begin = 985652;
var calendar_weekend = 986841;
var calendar_weekend_outline = 986842;
var call_made = 983287;
var call_merge = 983288;
var call_missed = 983289;
var call_received = 983290;
var call_split = 983291;
var camcorder = 983292;
var camcorder_off = 983295;
var camera = 983296;
var camera_account = 985291;
var camera_burst = 984723;
var camera_control = 985961;
var camera_enhance = 983297;
var camera_enhance_outline = 985962;
var camera_front = 983298;
var camera_front_variant = 983299;
var camera_gopro = 984993;
var camera_image = 985292;
var camera_iris = 983300;
var camera_metering_center = 984994;
var camera_metering_matrix = 984995;
var camera_metering_partial = 984996;
var camera_metering_spot = 984997;
var camera_off = 984543;
var camera_outline = 986461;
var camera_party_mode = 983301;
var camera_plus = 986843;
var camera_plus_outline = 986844;
var camera_rear = 983302;
var camera_rear_variant = 983303;
var camera_retake = 986649;
var camera_retake_outline = 986650;
var camera_switch = 983304;
var camera_switch_outline = 985162;
var camera_timer = 983305;
var camera_wireless = 986550;
var camera_wireless_outline = 986551;
var campfire = 986845;
var cancel = 984890;
var candle = 984546;
var candycane = 983306;
var cannabis = 984998;
var caps_lock = 985755;
var car = 983307;
var car_2_plus = 987157;
var car_3_plus = 987158;
var car_arrow_left = 988082;
var car_arrow_right = 988083;
var car_back = 986651;
var car_battery = 983308;
var car_brake_abs = 986183;
var car_brake_alert = 986184;
var car_brake_hold = 986462;
var car_brake_parking = 986463;
var car_brake_retarder = 987159;
var car_child_seat = 987043;
var car_clutch = 987160;
var car_cog = 988108;
var car_connected = 983309;
var car_convertible = 984999;
var car_coolant_level = 987161;
var car_cruise_control = 986464;
var car_defrost_front = 986465;
var car_defrost_rear = 986466;
var car_door = 985963;
var car_door_lock = 987293;
var car_electric = 985964;
var car_esp = 986185;
var car_estate = 985e3;
var car_hatchback = 985001;
var car_info = 987582;
var car_key = 985965;
var car_light_dimmed = 986186;
var car_light_fog = 986187;
var car_light_high = 986188;
var car_limousine = 985293;
var car_multiple = 985966;
var car_off = 986652;
var car_parking_lights = 986467;
var car_pickup = 985002;
var car_seat = 987044;
var car_seat_cooler = 987045;
var car_seat_heater = 987046;
var car_settings = 988109;
var car_shift_pattern = 986944;
var car_side = 985003;
var car_sports = 985004;
var car_tire_alert = 986189;
var car_traction_control = 986468;
var car_turbocharger = 987162;
var car_wash = 983310;
var car_windshield = 987163;
var car_windshield_outline = 987164;
var carabiner = 988352;
var caravan = 985005;
var card = 985967;
var card_account_details = 984530;
var card_account_details_outline = 986539;
var card_account_details_star = 983715;
var card_account_details_star_outline = 984795;
var card_account_mail = 983438;
var card_account_mail_outline = 986776;
var card_account_phone = 986777;
var card_account_phone_outline = 986778;
var card_bulleted = 985968;
var card_bulleted_off = 985969;
var card_bulleted_off_outline = 985970;
var card_bulleted_outline = 985971;
var card_bulleted_settings = 985972;
var card_bulleted_settings_outline = 985973;
var card_outline = 985974;
var card_plus = 987647;
var card_plus_outline = 987648;
var card_search = 987252;
var card_search_outline = 987253;
var card_text = 985975;
var card_text_outline = 985976;
var cards = 984632;
var cards_club = 985294;
var cards_diamond = 985295;
var cards_diamond_outline = 987165;
var cards_heart = 985296;
var cards_outline = 984633;
var cards_playing_outline = 984634;
var cards_spade = 985297;
var cards_variant = 984775;
var carrot = 983311;
var cart = 983312;
var cart_arrow_down = 986470;
var cart_arrow_right = 986190;
var cart_arrow_up = 986471;
var cart_minus = 986472;
var cart_off = 984683;
var cart_outline = 983313;
var cart_plus = 983314;
var cart_remove = 986473;
var case_sensitive_alt = 983315;
var cash = 983316;
var cash_100 = 983317;
var cash_marker = 986552;
var cash_minus = 987744;
var cash_multiple = 983318;
var cash_plus = 987745;
var cash_refund = 985756;
var cash_register = 986356;
var cash_remove = 987746;
var cash_usd = 987510;
var cash_usd_outline = 983319;
var cassette = 985556;
var cast = 983320;
var cast_audio = 987166;
var cast_connected = 983321;
var cast_education = 986653;
var cast_off = 984970;
var castle = 983322;
var cat = 983323;
var cctv = 985006;
var ceiling_light = 984937;
var cellphone = 983324;
var cellphone_android = 983325;
var cellphone_arrow_down = 985557;
var cellphone_basic = 983326;
var cellphone_charging = 988055;
var cellphone_cog = 985425;
var cellphone_dock = 983327;
var cellphone_erase = 985421;
var cellphone_information = 986945;
var cellphone_iphone = 983328;
var cellphone_key = 985422;
var cellphone_link = 983329;
var cellphone_link_off = 983330;
var cellphone_lock = 985423;
var cellphone_message = 985299;
var cellphone_message_off = 987346;
var cellphone_nfc = 986768;
var cellphone_nfc_off = 987864;
var cellphone_off = 985424;
var cellphone_play = 987167;
var cellphone_screenshot = 985653;
var cellphone_settings = 983331;
var cellphone_sound = 985426;
var cellphone_text = 985298;
var cellphone_wireless = 985109;
var celtic_cross = 986357;
var centos = 987418;
var certificate = 983332;
var certificate_outline = 987528;
var chair_rolling = 986952;
var chair_school = 983333;
var charity = 986191;
var chart_arc = 983334;
var chart_areaspline = 983335;
var chart_areaspline_variant = 986769;
var chart_bar = 983336;
var chart_bar_stacked = 984938;
var chart_bell_curve = 986192;
var chart_bell_curve_cumulative = 987047;
var chart_bubble = 984547;
var chart_donut = 985007;
var chart_donut_variant = 985008;
var chart_gantt = 984684;
var chart_histogram = 983337;
var chart_line = 983338;
var chart_line_stacked = 984939;
var chart_line_variant = 985009;
var chart_multiline = 985300;
var chart_multiple = 987667;
var chart_pie = 983339;
var chart_ppf = 988032;
var chart_sankey = 987615;
var chart_sankey_variant = 987616;
var chart_scatter_plot = 986770;
var chart_scatter_plot_hexbin = 984685;
var chart_timeline = 984686;
var chart_timeline_variant = 986771;
var chart_tree = 986772;
var chat = 985977;
var chat_alert = 985978;
var chat_alert_outline = 987849;
var chat_minus = 988176;
var chat_minus_outline = 988179;
var chat_outline = 986846;
var chat_plus = 988175;
var chat_plus_outline = 988178;
var chat_processing = 985979;
var chat_processing_outline = 987850;
var chat_remove = 988177;
var chat_remove_outline = 988180;
var chat_sleep = 987857;
var chat_sleep_outline = 987858;
var check = 983340;
var check_all = 983341;
var check_bold = 986654;
var check_box_multiple_outline = 986193;
var check_box_outline = 986194;
var check_circle = 984544;
var check_circle_outline = 984545;
var check_decagram = 984977;
var check_network = 986195;
var check_network_outline = 986196;
var check_outline = 985173;
var check_underline = 986655;
var check_underline_circle = 986656;
var check_underline_circle_outline = 986657;
var checkbook = 985757;
var checkbox_blank = 983342;
var checkbox_blank_circle = 983343;
var checkbox_blank_circle_outline = 983344;
var checkbox_blank_off = 987884;
var checkbox_blank_off_outline = 987885;
var checkbox_blank_outline = 983345;
var checkbox_intermediate = 985174;
var checkbox_marked = 983346;
var checkbox_marked_circle = 983347;
var checkbox_marked_circle_outline = 983348;
var checkbox_marked_outline = 983349;
var checkbox_multiple_blank = 983350;
var checkbox_multiple_blank_circle = 984635;
var checkbox_multiple_blank_circle_outline = 984636;
var checkbox_multiple_blank_outline = 983351;
var checkbox_multiple_marked = 983352;
var checkbox_multiple_marked_circle = 984637;
var checkbox_multiple_marked_circle_outline = 984638;
var checkbox_multiple_marked_outline = 983353;
var checkerboard = 983354;
var checkerboard_minus = 987650;
var checkerboard_plus = 987649;
var checkerboard_remove = 987651;
var cheese = 987833;
var cheese_off = 988142;
var chef_hat = 985980;
var chemical_weapon = 983355;
var chess_bishop = 985180;
var chess_king = 985175;
var chess_knight = 985176;
var chess_pawn = 985177;
var chess_queen = 985178;
var chess_rook = 985179;
var chevron_double_down = 983356;
var chevron_double_left = 983357;
var chevron_double_right = 983358;
var chevron_double_up = 983359;
var chevron_down = 983360;
var chevron_down_box = 985558;
var chevron_down_box_outline = 985559;
var chevron_down_circle = 985894;
var chevron_down_circle_outline = 985895;
var chevron_left = 983361;
var chevron_left_box = 985560;
var chevron_left_box_outline = 985561;
var chevron_left_circle = 985896;
var chevron_left_circle_outline = 985897;
var chevron_right = 983362;
var chevron_right_box = 985562;
var chevron_right_box_outline = 985563;
var chevron_right_circle = 985898;
var chevron_right_circle_outline = 985899;
var chevron_triple_down = 986553;
var chevron_triple_left = 986554;
var chevron_triple_right = 986555;
var chevron_triple_up = 986556;
var chevron_up = 983363;
var chevron_up_box = 985564;
var chevron_up_box_outline = 985565;
var chevron_up_circle = 985900;
var chevron_up_circle_outline = 985901;
var chili_hot = 985010;
var chili_medium = 985011;
var chili_mild = 985012;
var chili_off = 988263;
var chip = 984602;
var christianity = 985427;
var christianity_outline = 986358;
var church = 983364;
var cigar = 987529;
var cigar_off = 988187;
var circle = 984933;
var circle_double = 986773;
var circle_edit_outline = 985301;
var circle_expand = 986774;
var circle_half = 988053;
var circle_half_full = 988054;
var circle_medium = 985566;
var circle_multiple = 985912;
var circle_multiple_outline = 984725;
var circle_off_outline = 987347;
var circle_outline = 984934;
var circle_slice_1 = 985758;
var circle_slice_2 = 985759;
var circle_slice_3 = 985760;
var circle_slice_4 = 985761;
var circle_slice_5 = 985762;
var circle_slice_6 = 985763;
var circle_slice_7 = 985764;
var circle_slice_8 = 985765;
var circle_small = 985567;
var circular_saw = 986658;
var city = 983366;
var city_variant = 985654;
var city_variant_outline = 985655;
var clipboard = 983367;
var clipboard_account = 983368;
var clipboard_account_outline = 986197;
var clipboard_alert = 983369;
var clipboard_alert_outline = 986359;
var clipboard_arrow_down = 983370;
var clipboard_arrow_down_outline = 986198;
var clipboard_arrow_left = 983371;
var clipboard_arrow_left_outline = 986360;
var clipboard_arrow_right = 986361;
var clipboard_arrow_right_outline = 986362;
var clipboard_arrow_up = 986199;
var clipboard_arrow_up_outline = 986200;
var clipboard_check = 983374;
var clipboard_check_multiple = 987747;
var clipboard_check_multiple_outline = 987748;
var clipboard_check_outline = 985256;
var clipboard_file = 987749;
var clipboard_file_outline = 987750;
var clipboard_flow = 984776;
var clipboard_flow_outline = 987415;
var clipboard_list = 987348;
var clipboard_list_outline = 987349;
var clipboard_multiple = 987751;
var clipboard_multiple_outline = 987752;
var clipboard_outline = 983372;
var clipboard_play = 986201;
var clipboard_play_multiple = 987753;
var clipboard_play_multiple_outline = 987754;
var clipboard_play_outline = 986202;
var clipboard_plus = 984913;
var clipboard_plus_outline = 987935;
var clipboard_pulse = 985181;
var clipboard_pulse_outline = 985182;
var clipboard_text = 983373;
var clipboard_text_multiple = 987755;
var clipboard_text_multiple_outline = 987756;
var clipboard_text_outline = 985656;
var clipboard_text_play = 986203;
var clipboard_text_play_outline = 986204;
var clippy = 983375;
var clock = 985428;
var clock_alert = 985429;
var clock_alert_outline = 984526;
var clock_check = 987048;
var clock_check_outline = 987049;
var clock_digital = 986775;
var clock_end = 983377;
var clock_fast = 983378;
var clock_in = 983379;
var clock_out = 983380;
var clock_outline = 983376;
var clock_start = 983381;
var clock_time_eight = 988230;
var clock_time_eight_outline = 988242;
var clock_time_eleven = 988233;
var clock_time_eleven_outline = 988245;
var clock_time_five = 988227;
var clock_time_five_outline = 988239;
var clock_time_four = 988226;
var clock_time_four_outline = 988238;
var clock_time_nine = 988231;
var clock_time_nine_outline = 988243;
var clock_time_one = 988223;
var clock_time_one_outline = 988235;
var clock_time_seven = 988229;
var clock_time_seven_outline = 988241;
var clock_time_six = 988228;
var clock_time_six_outline = 988240;
var clock_time_ten = 988232;
var clock_time_ten_outline = 988244;
var clock_time_three = 988225;
var clock_time_three_outline = 988237;
var clock_time_twelve = 988234;
var clock_time_twelve_outline = 988246;
var clock_time_two = 988224;
var clock_time_two_outline = 988236;
var close = 983382;
var close_box = 983383;
var close_box_multiple = 986205;
var close_box_multiple_outline = 986206;
var close_box_outline = 983384;
var close_circle = 983385;
var close_circle_multiple = 984618;
var close_circle_multiple_outline = 985219;
var close_circle_outline = 983386;
var close_network = 983387;
var close_network_outline = 986207;
var close_octagon = 983388;
var close_octagon_outline = 983389;
var close_outline = 984777;
var close_thick = 988056;
var closed_caption = 983390;
var closed_caption_outline = 986557;
var cloud = 983391;
var cloud_alert = 985568;
var cloud_braces = 985013;
var cloud_check = 983392;
var cloud_check_outline = 987852;
var cloud_circle = 983393;
var cloud_download = 983394;
var cloud_download_outline = 985981;
var cloud_lock = 987633;
var cloud_lock_outline = 987634;
var cloud_off_outline = 983396;
var cloud_outline = 983395;
var cloud_print = 983397;
var cloud_print_outline = 983398;
var cloud_question = 985657;
var cloud_refresh = 984362;
var cloud_search = 985430;
var cloud_search_outline = 985431;
var cloud_sync = 984639;
var cloud_sync_outline = 987862;
var cloud_tags = 985014;
var cloud_upload = 983399;
var cloud_upload_outline = 985982;
var clover = 985110;
var coach_lamp = 987168;
var coat_rack = 987294;
var code_array = 983400;
var code_braces = 983401;
var code_braces_box = 987350;
var code_brackets = 983402;
var code_equal = 983403;
var code_greater_than = 983404;
var code_greater_than_or_equal = 983405;
var code_json = 984614;
var code_less_than = 983406;
var code_less_than_or_equal = 983407;
var code_not_equal = 983408;
var code_not_equal_variant = 983409;
var code_parentheses = 983410;
var code_parentheses_box = 987351;
var code_string = 983411;
var code_tags = 983412;
var code_tags_check = 984724;
var codepen = 983413;
var coffee = 983414;
var coffee_maker = 987295;
var coffee_off = 987050;
var coffee_off_outline = 987051;
var coffee_outline = 984778;
var coffee_to_go = 983415;
var coffee_to_go_outline = 987918;
var coffin = 985983;
var cog = 984211;
var cog_box = 984212;
var cog_clockwise = 987613;
var cog_counterclockwise = 987614;
var cog_off = 988110;
var cog_off_outline = 988111;
var cog_outline = 985275;
var cog_refresh = 988254;
var cog_refresh_outline = 988255;
var cog_sync = 988256;
var cog_sync_outline = 988257;
var cog_transfer = 987227;
var cog_transfer_outline = 987228;
var cogs = 985302;
var collage = 984640;
var collapse_all = 985766;
var collapse_all_outline = 985767;
var color_helper = 983417;
var comma = 986659;
var comma_box = 986667;
var comma_box_outline = 986660;
var comma_circle = 986661;
var comma_circle_outline = 986662;
var comment = 983418;
var comment_account = 983419;
var comment_account_outline = 983420;
var comment_alert = 983421;
var comment_alert_outline = 983422;
var comment_arrow_left = 985569;
var comment_arrow_left_outline = 985570;
var comment_arrow_right = 985571;
var comment_arrow_right_outline = 985572;
var comment_check = 983423;
var comment_check_outline = 983424;
var comment_edit = 987583;
var comment_edit_outline = 987844;
var comment_eye = 985658;
var comment_eye_outline = 985659;
var comment_multiple = 985183;
var comment_multiple_outline = 983425;
var comment_outline = 983426;
var comment_plus = 985573;
var comment_plus_outline = 983427;
var comment_processing = 983428;
var comment_processing_outline = 983429;
var comment_question = 985111;
var comment_question_outline = 983430;
var comment_quote = 987169;
var comment_quote_outline = 987170;
var comment_remove = 984542;
var comment_remove_outline = 983431;
var comment_search = 985660;
var comment_search_outline = 985661;
var comment_text = 983432;
var comment_text_multiple = 985184;
var comment_text_multiple_outline = 985185;
var comment_text_outline = 983433;
var compare = 983434;
var compare_horizontal = 988306;
var compare_vertical = 988307;
var compass = 983435;
var compass_off = 985984;
var compass_off_outline = 985985;
var compass_outline = 983436;
var compass_rose = 988034;
var concourse_ci = 987296;
var console2 = 983437;
var console_line = 985015;
var console_network = 985257;
var console_network_outline = 986208;
var consolidate = 987352;
var contactless_payment = 986474;
var contactless_payment_circle = 983841;
var contactless_payment_circle_outline = 984072;
var contacts = 984779;
var contacts_outline = 984504;
var contain = 985662;
var contain_end = 985663;
var contain_start = 985664;
var content_copy = 983439;
var content_cut = 983440;
var content_duplicate = 983441;
var content_paste = 983442;
var content_save = 983443;
var content_save_alert = 986946;
var content_save_alert_outline = 986947;
var content_save_all = 983444;
var content_save_all_outline = 986948;
var content_save_cog = 988251;
var content_save_cog_outline = 988252;
var content_save_edit = 986363;
var content_save_edit_outline = 986364;
var content_save_move = 986663;
var content_save_move_outline = 986664;
var content_save_outline = 985112;
var content_save_settings = 984603;
var content_save_settings_outline = 985902;
var contrast = 983445;
var contrast_box = 983446;
var contrast_circle = 983447;
var controller_classic = 985986;
var controller_classic_outline = 985987;
var cookie = 983448;
var coolant_temperature = 984008;
var copyright = 984550;
var cordova = 985432;
var corn = 985016;
var corn_off = 988143;
var cosine_wave = 988281;
var counter = 983449;
var cow = 983450;
var cpu_32_bit = 986847;
var cpu_64_bit = 986848;
var crane = 985186;
var creation = 984692;
var creative_commons = 986475;
var credit_card = 987119;
var credit_card_check = 988112;
var credit_card_check_outline = 988113;
var credit_card_clock = 986849;
var credit_card_clock_outline = 986850;
var credit_card_marker = 984744;
var credit_card_marker_outline = 986558;
var credit_card_minus = 987052;
var credit_card_minus_outline = 987053;
var credit_card_multiple = 987120;
var credit_card_multiple_outline = 983452;
var credit_card_off = 987121;
var credit_card_off_outline = 984548;
var credit_card_outline = 983451;
var credit_card_plus = 987122;
var credit_card_plus_outline = 984694;
var credit_card_refund = 987123;
var credit_card_refund_outline = 985768;
var credit_card_remove = 987054;
var credit_card_remove_outline = 987055;
var credit_card_scan = 987124;
var credit_card_scan_outline = 983453;
var credit_card_settings = 987125;
var credit_card_settings_outline = 985303;
var credit_card_wireless = 985090;
var credit_card_wireless_off = 984442;
var credit_card_wireless_off_outline = 984443;
var credit_card_wireless_outline = 986476;
var cricket = 986477;
var crop = 983454;
var crop_free = 983455;
var crop_landscape = 983456;
var crop_portrait = 983457;
var crop_rotate = 984726;
var crop_square = 983458;
var crosshairs = 983459;
var crosshairs_gps = 983460;
var crosshairs_off = 986949;
var crosshairs_question = 987446;
var crown = 983461;
var crown_outline = 987600;
var cryengine = 985433;
var crystal_ball = 985903;
var cube = 983462;
var cube_off = 988188;
var cube_off_outline = 988189;
var cube_outline = 983463;
var cube_scan = 985988;
var cube_send = 983464;
var cube_unfolded = 983465;
var cup = 983466;
var cup_off = 984549;
var cup_off_outline = 988029;
var cup_outline = 987919;
var cup_water = 983467;
var cupboard = 986950;
var cupboard_outline = 986951;
var cupcake = 985434;
var curling = 985187;
var currency_bdt = 985188;
var currency_brl = 985989;
var currency_btc = 983468;
var currency_cny = 985018;
var currency_eth = 985019;
var currency_eur = 983469;
var currency_eur_off = 987925;
var currency_gbp = 983470;
var currency_ils = 986209;
var currency_inr = 983471;
var currency_jpy = 985020;
var currency_krw = 985021;
var currency_kzt = 985189;
var currency_ngn = 983472;
var currency_php = 985574;
var currency_rial = 986780;
var currency_rub = 983473;
var currency_sign = 985022;
var currency_try = 983474;
var currency_twd = 985023;
var currency_usd = 983489;
var currency_usd_circle = 987499;
var currency_usd_circle_outline = 983416;
var currency_usd_off = 984698;
var current_ac = 988288;
var current_dc = 985436;
var cursor_default = 983488;
var cursor_default_click = 986365;
var cursor_default_click_outline = 986366;
var cursor_default_gesture = 987431;
var cursor_default_gesture_outline = 987432;
var cursor_default_outline = 983487;
var cursor_move = 983486;
var cursor_pointer = 983485;
var cursor_text = 984551;
var database = 983484;
var database_check = 985769;
var database_edit = 985990;
var database_export = 985438;
var database_import = 985437;
var database_lock = 985770;
var database_marker = 987894;
var database_minus = 983483;
var database_plus = 983482;
var database_refresh = 984514;
var database_remove = 986368;
var database_search = 985190;
var database_settings = 986369;
var database_sync = 986367;
var death_star = 985304;
var death_star_variant = 985305;
var deathly_hallows = 985991;
var debian = 985306;
var debug_step_into = 983481;
var debug_step_out = 983480;
var debug_step_over = 983479;
var decagram = 984940;
var decagram_outline = 984941;
var decimal = 987297;
var decimal_comma = 987298;
var decimal_comma_decrease = 987299;
var decimal_comma_increase = 987300;
var decimal_decrease = 983478;
var decimal_increase = 983477;
var delete2 = 983476;
var delete_alert = 987301;
var delete_alert_outline = 987302;
var delete_circle = 984707;
var delete_circle_outline = 985992;
var delete_empty = 984780;
var delete_empty_outline = 986781;
var delete_forever = 984552;
var delete_forever_outline = 985993;
var delete_off = 987303;
var delete_off_outline = 987304;
var delete_outline = 985575;
var delete_restore = 985113;
var delete_sweep = 984553;
var delete_sweep_outline = 986210;
var delete_variant = 983475;
var delta = 983490;
var desk = 987705;
var desk_lamp = 985439;
var deskphone = 983491;
var desktop_classic = 985024;
var desktop_mac = 983492;
var desktop_mac_dashboard = 985576;
var desktop_tower = 983493;
var desktop_tower_monitor = 985771;
var details = 983494;
var dev_to = 986478;
var developer_board = 984727;
var deviantart = 983495;
var devices = 987056;
var diabetes = 987430;
var dialpad = 984604;
var diameter = 986211;
var diameter_outline = 986212;
var diameter_variant = 986213;
var diamond = 985994;
var diamond_outline = 985995;
var diamond_stone = 983496;
var dice_1 = 983498;
var dice_1_outline = 987466;
var dice_2 = 983499;
var dice_2_outline = 987467;
var dice_3 = 983500;
var dice_3_outline = 987468;
var dice_4 = 983501;
var dice_4_outline = 987469;
var dice_5 = 983502;
var dice_5_outline = 987470;
var dice_6 = 983503;
var dice_6_outline = 987471;
var dice_d10 = 987475;
var dice_d10_outline = 984943;
var dice_d12 = 987476;
var dice_d12_outline = 985191;
var dice_d20 = 987477;
var dice_d20_outline = 984554;
var dice_d4 = 987472;
var dice_d4_outline = 984555;
var dice_d6 = 987473;
var dice_d6_outline = 984557;
var dice_d8 = 987474;
var dice_d8_outline = 984556;
var dice_multiple = 984942;
var dice_multiple_outline = 987478;
var digital_ocean = 987703;
var dip_switch = 985025;
var directions = 983504;
var directions_fork = 984641;
var disc = 984558;
var disc_alert = 983505;
var disc_player = 985440;
var discord = 984687;
var dishwasher = 985772;
var dishwasher_alert = 987576;
var dishwasher_off = 987577;
var disqus = 983506;
var distribute_horizontal_center = 987593;
var distribute_horizontal_left = 987592;
var distribute_horizontal_right = 987594;
var distribute_vertical_bottom = 987595;
var distribute_vertical_center = 987596;
var distribute_vertical_top = 987597;
var diving_flippers = 986559;
var diving_helmet = 986560;
var diving_scuba = 986561;
var diving_scuba_flag = 986562;
var diving_scuba_tank = 986563;
var diving_scuba_tank_multiple = 986564;
var diving_snorkel = 986565;
var division = 983508;
var division_box = 983509;
var dlna = 985665;
var dna = 984708;
var dns = 983510;
var dns_outline = 985996;
var do_not_disturb = 984728;
var do_not_disturb_off = 984729;
var dock_bottom = 987305;
var dock_left = 987306;
var dock_right = 987307;
var dock_window = 987308;
var docker = 985192;
var doctor = 985666;
var dog = 985667;
var dog_service = 985773;
var dog_side = 985668;
var dolby = 984755;
var dolly = 986782;
var domain = 983511;
var domain_off = 986479;
var domain_plus = 987309;
var domain_remove = 987310;
var dome_light = 988190;
var domino_mask = 987171;
var donkey = 985026;
var door = 985114;
var door_closed = 985115;
var door_closed_lock = 987311;
var door_open = 985116;
var doorbell = 987878;
var doorbell_video = 985193;
var dot_net = 985774;
var dots_horizontal = 983512;
var dots_horizontal_circle = 985027;
var dots_horizontal_circle_outline = 985997;
var dots_vertical = 983513;
var dots_vertical_circle = 985028;
var dots_vertical_circle_outline = 985998;
var douban = 984730;
var download = 983514;
var download_box = 988258;
var download_box_outline = 988259;
var download_circle = 988260;
var download_circle_outline = 988261;
var download_lock = 987936;
var download_lock_outline = 987937;
var download_multiple = 985577;
var download_network = 984820;
var download_network_outline = 986214;
var download_off = 987312;
var download_off_outline = 987313;
var download_outline = 985999;
var drag = 983515;
var drag_horizontal = 983516;
var drag_horizontal_variant = 987888;
var drag_variant = 986e3;
var drag_vertical = 983517;
var drag_vertical_variant = 987889;
var drama_masks = 986370;
var draw = 986953;
var drawing = 983518;
var drawing_box = 983519;
var dresser = 986954;
var dresser_outline = 986955;
var drone = 983522;
var dropbox = 983523;
var drupal = 983524;
var duck = 983525;
var dumbbell = 983526;
var dump_truck = 986215;
var ear_hearing = 985029;
var ear_hearing_off = 985669;
var earth = 983527;
var earth_arrow_right = 987921;
var earth_box = 984781;
var earth_box_minus = 988167;
var earth_box_off = 984782;
var earth_box_plus = 988166;
var earth_box_remove = 988168;
var earth_minus = 988164;
var earth_off = 983528;
var earth_plus = 988163;
var earth_remove = 988165;
var egg = 985775;
var egg_easter = 985776;
var egg_off = 988144;
var egg_off_outline = 988145;
var egg_outline = 988146;
var eight_track = 985578;
var eject = 983530;
var eject_outline = 986001;
var electric_switch = 986783;
var electric_switch_closed = 987353;
var electron_framework = 987172;
var elephant = 985030;
var elevation_decline = 983531;
var elevation_rise = 983532;
var elevator = 983533;
var elevator_down = 987842;
var elevator_passenger = 988033;
var elevator_up = 987841;
var ellipse = 986784;
var ellipse_outline = 986785;
var email = 983534;
var email_alert = 984783;
var email_alert_outline = 986434;
var email_box = 986371;
var email_check = 985777;
var email_check_outline = 985778;
var email_edit = 986851;
var email_edit_outline = 986852;
var email_lock = 983537;
var email_mark_as_unread = 986002;
var email_minus = 986853;
var email_minus_outline = 986854;
var email_multiple = 986855;
var email_multiple_outline = 986856;
var email_newsletter = 987057;
var email_off = 988131;
var email_off_outline = 988132;
var email_open = 983535;
var email_open_multiple = 986857;
var email_open_multiple_outline = 986858;
var email_open_outline = 984559;
var email_outline = 983536;
var email_plus = 985579;
var email_plus_outline = 985580;
var email_receive = 987354;
var email_receive_outline = 987355;
var email_search = 985441;
var email_search_outline = 985442;
var email_send = 987356;
var email_send_outline = 987357;
var email_sync = 987847;
var email_sync_outline = 987848;
var email_variant = 984560;
var ember = 985904;
var emby = 984756;
var emoticon = 986216;
var emoticon_angry = 986217;
var emoticon_angry_outline = 986218;
var emoticon_confused = 987358;
var emoticon_confused_outline = 987359;
var emoticon_cool = 986219;
var emoticon_cool_outline = 983539;
var emoticon_cry = 986220;
var emoticon_cry_outline = 986221;
var emoticon_dead = 986222;
var emoticon_dead_outline = 984731;
var emoticon_devil = 986223;
var emoticon_devil_outline = 983540;
var emoticon_excited = 986224;
var emoticon_excited_outline = 984732;
var emoticon_frown = 986956;
var emoticon_frown_outline = 986957;
var emoticon_happy = 986225;
var emoticon_happy_outline = 983541;
var emoticon_kiss = 986226;
var emoticon_kiss_outline = 986227;
var emoticon_lol = 987668;
var emoticon_lol_outline = 987669;
var emoticon_neutral = 986228;
var emoticon_neutral_outline = 983542;
var emoticon_outline = 983538;
var emoticon_poop = 983543;
var emoticon_poop_outline = 986229;
var emoticon_sad = 986230;
var emoticon_sad_outline = 983544;
var emoticon_tongue = 983545;
var emoticon_tongue_outline = 986231;
var emoticon_wink = 986232;
var emoticon_wink_outline = 986233;
var engine = 983546;
var engine_off = 985670;
var engine_off_outline = 985671;
var engine_outline = 983547;
var epsilon = 987360;
var equal = 983548;
var equal_box = 983549;
var equalizer = 986786;
var equalizer_outline = 986787;
var eraser = 983550;
var eraser_variant = 984642;
var escalator = 983551;
var escalator_box = 988057;
var escalator_down = 987840;
var escalator_up = 987839;
var eslint = 986234;
var et = 985779;
var ethereum = 985194;
var ethernet = 983552;
var ethernet_cable = 983553;
var ethernet_cable_off = 983554;
var ev_station = 984561;
var evernote = 983556;
var excavator = 987173;
var exclamation = 983557;
var exclamation_thick = 987704;
var exit_run = 985672;
var exit_to_app = 983558;
var expand_all = 985780;
var expand_all_outline = 985781;
var expansion_card = 985262;
var expansion_card_variant = 987058;
var exponent = 985443;
var exponent_box = 985444;
var export2 = 983559;
var export_variant = 986003;
var eye = 983560;
var eye_check = 986372;
var eye_check_outline = 986373;
var eye_circle = 986004;
var eye_circle_outline = 986005;
var eye_minus = 987174;
var eye_minus_outline = 987175;
var eye_off = 983561;
var eye_off_outline = 984785;
var eye_outline = 984784;
var eye_plus = 985195;
var eye_plus_outline = 985196;
var eye_settings = 985197;
var eye_settings_outline = 985198;
var eyedropper = 983562;
var eyedropper_minus = 988125;
var eyedropper_off = 988127;
var eyedropper_plus = 988124;
var eyedropper_remove = 988126;
var eyedropper_variant = 983563;
var face = 984643;
var face_agent = 986480;
var face_outline = 986006;
var face_profile = 984644;
var face_profile_woman = 987254;
var face_recognition = 986235;
var face_woman = 987255;
var face_woman_outline = 987256;
var facebook = 983564;
var facebook_messenger = 983566;
var facebook_workplace = 985905;
var factory = 983567;
var fan = 983568;
var fan_alert = 988268;
var fan_chevron_down = 988269;
var fan_chevron_up = 988270;
var fan_minus = 988272;
var fan_off = 985117;
var fan_plus = 988271;
var fan_remove = 988273;
var fan_speed_1 = 988274;
var fan_speed_2 = 988275;
var fan_speed_3 = 988276;
var fast_forward = 983569;
var fast_forward_10 = 986481;
var fast_forward_30 = 986374;
var fast_forward_5 = 987640;
var fast_forward_outline = 984786;
var fax = 983570;
var feather = 984787;
var feature_search = 985673;
var feature_search_outline = 985674;
var fedora = 985307;
var fencing = 988353;
var ferris_wheel = 986788;
var ferry = 983571;
var file = 983572;
var file_account = 984891;
var file_account_outline = 987176;
var file_alert = 985675;
var file_alert_outline = 985676;
var file_cabinet = 985782;
var file_cad = 986859;
var file_cad_box = 986860;
var file_cancel = 986566;
var file_cancel_outline = 986567;
var file_certificate = 987526;
var file_certificate_outline = 987527;
var file_chart = 983573;
var file_chart_outline = 987177;
var file_check = 983574;
var file_check_outline = 986665;
var file_clock = 987873;
var file_clock_outline = 987874;
var file_cloud = 983575;
var file_cloud_outline = 987178;
var file_code = 983598;
var file_code_outline = 987179;
var file_cog = 987259;
var file_cog_outline = 987260;
var file_compare = 985258;
var file_delimited = 983576;
var file_delimited_outline = 986789;
var file_document = 983577;
var file_document_edit = 986568;
var file_document_edit_outline = 986569;
var file_document_outline = 985582;
var file_download = 985445;
var file_download_outline = 985446;
var file_edit = 987623;
var file_edit_outline = 987624;
var file_excel = 983579;
var file_excel_box = 983580;
var file_excel_box_outline = 987180;
var file_excel_outline = 987181;
var file_export = 983581;
var file_export_outline = 987182;
var file_eye = 986570;
var file_eye_outline = 986571;
var file_find = 983582;
var file_find_outline = 986007;
var file_hidden = 984595;
var file_image = 983583;
var file_image_outline = 986800;
var file_import = 983584;
var file_import_outline = 987183;
var file_key = 987524;
var file_key_outline = 987525;
var file_link = 987511;
var file_link_outline = 987512;
var file_lock = 983585;
var file_lock_outline = 987184;
var file_move = 985785;
var file_move_outline = 987185;
var file_multiple = 983586;
var file_multiple_outline = 987186;
var file_music = 983587;
var file_music_outline = 986666;
var file_outline = 983588;
var file_pdf = 983589;
var file_pdf_box = 983590;
var file_pdf_box_outline = 987059;
var file_pdf_outline = 986669;
var file_percent = 985118;
var file_percent_outline = 987187;
var file_phone = 987513;
var file_phone_outline = 987514;
var file_plus = 984914;
var file_plus_outline = 986861;
var file_powerpoint = 983591;
var file_powerpoint_box = 983592;
var file_powerpoint_box_outline = 987188;
var file_powerpoint_outline = 987189;
var file_presentation_box = 983593;
var file_question = 985199;
var file_question_outline = 987190;
var file_refresh = 985368;
var file_refresh_outline = 984385;
var file_remove = 986008;
var file_remove_outline = 987191;
var file_replace = 985906;
var file_replace_outline = 985907;
var file_restore = 984688;
var file_restore_outline = 987192;
var file_search = 986236;
var file_search_outline = 986237;
var file_send = 983594;
var file_send_outline = 987193;
var file_settings = 987257;
var file_settings_outline = 987258;
var file_star = 987194;
var file_star_outline = 987195;
var file_swap = 987060;
var file_swap_outline = 987061;
var file_sync = 987670;
var file_sync_outline = 987671;
var file_table = 986238;
var file_table_box = 987361;
var file_table_box_multiple = 987362;
var file_table_box_multiple_outline = 987363;
var file_table_box_outline = 987364;
var file_table_outline = 986239;
var file_tree = 984645;
var file_tree_outline = 988114;
var file_undo = 985308;
var file_undo_outline = 987196;
var file_upload = 985677;
var file_upload_outline = 985678;
var file_video = 983595;
var file_video_outline = 986668;
var file_word = 983596;
var file_word_box = 983597;
var file_word_box_outline = 987197;
var file_word_outline = 987198;
var film = 983599;
var filmstrip = 983600;
var filmstrip_box = 983858;
var filmstrip_box_multiple = 986392;
var filmstrip_off = 983601;
var filter2 = 983602;
var filter_menu = 987365;
var filter_menu_outline = 987366;
var filter_minus = 986862;
var filter_minus_outline = 986863;
var filter_outline = 983603;
var filter_plus = 986864;
var filter_plus_outline = 986865;
var filter_remove = 983604;
var filter_remove_outline = 983605;
var filter_variant = 983606;
var filter_variant_minus = 987410;
var filter_variant_plus = 987411;
var filter_variant_remove = 987199;
var finance = 985119;
var find_replace = 984788;
var fingerprint = 983607;
var fingerprint_off = 986801;
var fire = 983608;
var fire_extinguisher = 986866;
var fire_hydrant = 987447;
var fire_hydrant_alert = 987448;
var fire_hydrant_off = 987449;
var fire_truck = 985259;
var firebase = 985447;
var firefox = 983609;
var fireplace = 986670;
var fireplace_off = 986671;
var firework = 986672;
var fish = 983610;
var fish_off = 988147;
var fishbowl = 986867;
var fishbowl_outline = 986868;
var fit_to_page = 986869;
var fit_to_page_outline = 986870;
var flag = 983611;
var flag_checkered = 983612;
var flag_minus = 986009;
var flag_minus_outline = 987314;
var flag_outline = 983613;
var flag_plus = 986010;
var flag_plus_outline = 987315;
var flag_remove = 986011;
var flag_remove_outline = 987316;
var flag_triangle = 983615;
var flag_variant = 983616;
var flag_variant_outline = 983614;
var flare = 986482;
var flash = 983617;
var flash_alert = 986871;
var flash_alert_outline = 986872;
var flash_auto = 983618;
var flash_circle = 985120;
var flash_off = 983619;
var flash_outline = 984789;
var flash_red_eye = 984699;
var flashlight = 983620;
var flashlight_off = 983621;
var flask = 983187;
var flask_empty = 983188;
var flask_empty_minus = 987706;
var flask_empty_minus_outline = 987707;
var flask_empty_off = 988148;
var flask_empty_off_outline = 988149;
var flask_empty_outline = 983189;
var flask_empty_plus = 987708;
var flask_empty_plus_outline = 987709;
var flask_empty_remove = 987710;
var flask_empty_remove_outline = 987711;
var flask_minus = 987712;
var flask_minus_outline = 987713;
var flask_off = 988150;
var flask_off_outline = 988151;
var flask_outline = 983190;
var flask_plus = 987714;
var flask_plus_outline = 987715;
var flask_remove = 987716;
var flask_remove_outline = 987717;
var flask_round_bottom = 987723;
var flask_round_bottom_empty = 987724;
var flask_round_bottom_empty_outline = 987725;
var flask_round_bottom_outline = 987726;
var fleur_de_lis = 987907;
var flip_horizontal = 987367;
var flip_to_back = 983623;
var flip_to_front = 983624;
var flip_vertical = 987368;
var floor_lamp = 985309;
var floor_lamp_dual = 987200;
var floor_lamp_variant = 987201;
var floor_plan = 985121;
var floppy = 983625;
var floppy_variant = 985583;
var flower = 983626;
var flower_outline = 985584;
var flower_poppy = 986376;
var flower_tulip = 985585;
var flower_tulip_outline = 985586;
var focus_auto = 986958;
var focus_field = 986959;
var focus_field_horizontal = 986960;
var focus_field_vertical = 986961;
var folder = 983627;
var folder_account = 983628;
var folder_account_outline = 986012;
var folder_alert = 986572;
var folder_alert_outline = 986573;
var folder_clock = 985786;
var folder_clock_outline = 985787;
var folder_cog = 987263;
var folder_cog_outline = 987264;
var folder_download = 983629;
var folder_download_outline = 987369;
var folder_edit = 985310;
var folder_edit_outline = 986574;
var folder_google_drive = 983630;
var folder_heart = 987370;
var folder_heart_outline = 987371;
var folder_home = 987317;
var folder_home_outline = 987318;
var folder_image = 983631;
var folder_information = 987319;
var folder_information_outline = 987320;
var folder_key = 985260;
var folder_key_network = 985261;
var folder_key_network_outline = 986240;
var folder_key_outline = 987372;
var folder_lock = 983632;
var folder_lock_open = 983633;
var folder_marker = 987757;
var folder_marker_outline = 987758;
var folder_move = 983634;
var folder_move_outline = 987718;
var folder_multiple = 983635;
var folder_multiple_image = 983636;
var folder_multiple_outline = 983637;
var folder_multiple_plus = 988286;
var folder_multiple_plus_outline = 988287;
var folder_music = 987993;
var folder_music_outline = 987994;
var folder_network = 985200;
var folder_network_outline = 986241;
var folder_open = 984944;
var folder_open_outline = 986575;
var folder_outline = 983638;
var folder_plus = 983639;
var folder_plus_outline = 986013;
var folder_pound = 986377;
var folder_pound_outline = 986378;
var folder_refresh = 984905;
var folder_refresh_outline = 984386;
var folder_remove = 983640;
var folder_remove_outline = 986014;
var folder_search = 985448;
var folder_search_outline = 985449;
var folder_settings = 987261;
var folder_settings_outline = 987262;
var folder_star = 984733;
var folder_star_multiple = 988115;
var folder_star_multiple_outline = 988116;
var folder_star_outline = 986015;
var folder_swap = 987062;
var folder_swap_outline = 987063;
var folder_sync = 986379;
var folder_sync_outline = 986380;
var folder_table = 987875;
var folder_table_outline = 987876;
var folder_text = 986242;
var folder_text_outline = 986243;
var folder_upload = 983641;
var folder_upload_outline = 987373;
var folder_zip = 984811;
var folder_zip_outline = 985017;
var font_awesome = 983098;
var food = 983642;
var food_apple = 983643;
var food_apple_outline = 986244;
var food_croissant = 985032;
var food_drumstick = 988191;
var food_drumstick_off = 988264;
var food_drumstick_off_outline = 988265;
var food_drumstick_outline = 988192;
var food_fork_drink = 984562;
var food_off = 984563;
var food_steak = 988266;
var food_steak_off = 988267;
var food_variant = 983644;
var food_variant_off = 988133;
var foot_print = 986962;
var football = 983645;
var football_australian = 983646;
var football_helmet = 983647;
var forklift = 985033;
var form_dropdown = 988160;
var form_select = 988161;
var form_textarea = 987285;
var form_textbox = 984590;
var form_textbox_lock = 987997;
var form_textbox_password = 985077;
var format_align_bottom = 984915;
var format_align_center = 983648;
var format_align_justify = 983649;
var format_align_left = 983650;
var format_align_middle = 984916;
var format_align_right = 983651;
var format_align_top = 984917;
var format_annotation_minus = 985788;
var format_annotation_plus = 984646;
var format_bold = 983652;
var format_clear = 983653;
var format_color_fill = 983654;
var format_color_highlight = 986673;
var format_color_marker_cancel = 987923;
var format_color_text = 984734;
var format_columns = 985311;
var format_float_center = 983655;
var format_float_left = 983656;
var format_float_none = 983657;
var format_float_right = 983658;
var format_font = 984790;
var format_font_size_decrease = 985587;
var format_font_size_increase = 985588;
var format_header_1 = 983659;
var format_header_2 = 983660;
var format_header_3 = 983661;
var format_header_4 = 983662;
var format_header_5 = 983663;
var format_header_6 = 983664;
var format_header_decrease = 983665;
var format_header_equal = 983666;
var format_header_increase = 983667;
var format_header_pound = 983668;
var format_horizontal_align_center = 984606;
var format_horizontal_align_left = 984607;
var format_horizontal_align_right = 984608;
var format_indent_decrease = 983669;
var format_indent_increase = 983670;
var format_italic = 983671;
var format_letter_case = 985908;
var format_letter_case_lower = 985909;
var format_letter_case_upper = 985910;
var format_letter_ends_with = 987064;
var format_letter_matches = 987065;
var format_letter_starts_with = 987066;
var format_line_spacing = 983672;
var format_line_style = 984520;
var format_line_weight = 984521;
var format_list_bulleted = 983673;
var format_list_bulleted_square = 986576;
var format_list_bulleted_triangle = 986802;
var format_list_bulleted_type = 983674;
var format_list_checkbox = 985450;
var format_list_checks = 984918;
var format_list_numbered = 983675;
var format_list_numbered_rtl = 986381;
var format_list_text = 987759;
var format_overline = 986803;
var format_page_break = 984791;
var format_paint = 983676;
var format_paragraph = 983677;
var format_pilcrow = 984792;
var format_quote_close = 983678;
var format_quote_close_outline = 987560;
var format_quote_open = 984919;
var format_quote_open_outline = 987559;
var format_rotate_90 = 984746;
var format_section = 984735;
var format_size = 983679;
var format_strikethrough = 983680;
var format_strikethrough_variant = 983681;
var format_subscript = 983682;
var format_superscript = 983683;
var format_text = 983684;
var format_text_rotation_angle_down = 987067;
var format_text_rotation_angle_up = 987068;
var format_text_rotation_down = 986483;
var format_text_rotation_down_vertical = 987069;
var format_text_rotation_none = 986484;
var format_text_rotation_up = 987070;
var format_text_rotation_vertical = 987071;
var format_text_variant = 986674;
var format_text_wrapping_clip = 986382;
var format_text_wrapping_overflow = 986383;
var format_text_wrapping_wrap = 986384;
var format_textbox = 986385;
var format_textdirection_l_to_r = 983685;
var format_textdirection_r_to_l = 983686;
var format_title = 984564;
var format_underline = 983687;
var format_vertical_align_bottom = 984609;
var format_vertical_align_center = 984610;
var format_vertical_align_top = 984611;
var format_wrap_inline = 983688;
var format_wrap_square = 983689;
var format_wrap_tight = 983690;
var format_wrap_top_bottom = 983691;
var forum = 983692;
var forum_outline = 985122;
var forward = 983693;
var forwardburger = 986485;
var fountain = 985451;
var fountain_pen = 986386;
var fountain_pen_tip = 986387;
var freebsd = 985312;
var frequently_asked_questions = 986804;
var fridge = 983696;
var fridge_alert = 987569;
var fridge_alert_outline = 987570;
var fridge_bottom = 983698;
var fridge_off = 987567;
var fridge_off_outline = 987568;
var fridge_outline = 983695;
var fridge_top = 983697;
var fruit_cherries = 987202;
var fruit_cherries_off = 988152;
var fruit_citrus = 987203;
var fruit_citrus_off = 988153;
var fruit_grapes = 987204;
var fruit_grapes_outline = 987205;
var fruit_pineapple = 987206;
var fruit_watermelon = 987207;
var fuel = 985034;
var fullscreen = 983699;
var fullscreen_exit = 983700;
var function2 = 983701;
var function_variant = 985201;
var furigana_horizontal = 987265;
var furigana_vertical = 987266;
var fuse = 986245;
var fuse_alert = 988205;
var fuse_blade = 986246;
var fuse_off = 988204;
var gamepad = 983702;
var gamepad_circle = 986675;
var gamepad_circle_down = 986676;
var gamepad_circle_left = 986677;
var gamepad_circle_outline = 986678;
var gamepad_circle_right = 986679;
var gamepad_circle_up = 986680;
var gamepad_down = 986681;
var gamepad_left = 986682;
var gamepad_right = 986683;
var gamepad_round = 986684;
var gamepad_round_down = 986685;
var gamepad_round_left = 986686;
var gamepad_round_outline = 986687;
var gamepad_round_right = 986688;
var gamepad_round_up = 986689;
var gamepad_square = 986805;
var gamepad_square_outline = 986806;
var gamepad_up = 986690;
var gamepad_variant = 983703;
var gamepad_variant_outline = 986807;
var gamma = 987374;
var gantry_crane = 986577;
var garage = 984793;
var garage_alert = 985202;
var garage_alert_variant = 987861;
var garage_open = 984794;
var garage_open_variant = 987860;
var garage_variant = 987859;
var gas_cylinder = 984647;
var gas_station = 983704;
var gas_station_off = 988169;
var gas_station_off_outline = 988170;
var gas_station_outline = 986808;
var gate = 983705;
var gate_and = 985313;
var gate_arrow_right = 987497;
var gate_nand = 985314;
var gate_nor = 985315;
var gate_not = 985316;
var gate_open = 987498;
var gate_or = 985317;
var gate_xnor = 985318;
var gate_xor = 985319;
var gatsby = 986691;
var gauge = 983706;
var gauge_empty = 985203;
var gauge_full = 985204;
var gauge_low = 985205;
var gavel = 983707;
var gender_female = 983708;
var gender_male = 983709;
var gender_male_female = 983710;
var gender_male_female_variant = 987455;
var gender_non_binary = 987456;
var gender_transgender = 983711;
var gentoo = 985320;
var gesture = 985035;
var gesture_double_tap = 984892;
var gesture_pinch = 985789;
var gesture_spread = 985790;
var gesture_swipe = 986486;
var gesture_swipe_down = 984893;
var gesture_swipe_horizontal = 985791;
var gesture_swipe_left = 984894;
var gesture_swipe_right = 984895;
var gesture_swipe_up = 984896;
var gesture_swipe_vertical = 985792;
var gesture_tap = 984897;
var gesture_tap_box = 987817;
var gesture_tap_button = 987816;
var gesture_tap_hold = 986487;
var gesture_two_double_tap = 984898;
var gesture_two_tap = 984899;
var ghost = 983712;
var ghost_off = 985589;
var gif = 986488;
var gift = 986692;
var gift_outline = 983713;
var git = 983714;
var github = 983716;
var gitlab = 986016;
var glass_cocktail = 983894;
var glass_flute = 983717;
var glass_mug = 983718;
var glass_mug_variant = 987414;
var glass_pint_outline = 987917;
var glass_stange = 983719;
var glass_tulip = 983720;
var glass_wine = 985206;
var glasses = 983722;
var globe_light = 987863;
var globe_model = 985321;
var gmail = 983723;
var gnome = 983724;
var go_kart = 986489;
var go_kart_track = 986490;
var gog = 986017;
var gold = 987727;
var golf = 985123;
var golf_cart = 987556;
var golf_tee = 987267;
var gondola = 984710;
var goodreads = 986491;
var google = 983725;
var google_ads = 986247;
var google_analytics = 985036;
var google_assistant = 985037;
var google_cardboard = 983726;
var google_chrome = 983727;
var google_circles = 983728;
var google_circles_communities = 983729;
var google_circles_extended = 983730;
var google_circles_group = 983731;
var google_classroom = 983744;
var google_cloud = 987638;
var google_controller = 983732;
var google_controller_off = 983733;
var google_downasaur = 988002;
var google_drive = 983734;
var google_earth = 983735;
var google_fit = 985452;
var google_glass = 983736;
var google_hangouts = 983753;
var google_home = 985124;
var google_keep = 984796;
var google_lens = 985590;
var google_maps = 984565;
var google_my_business = 987208;
var google_nearby = 983737;
var google_photos = 984797;
var google_play = 983740;
var google_plus = 983741;
var google_podcast = 986809;
var google_spreadsheet = 985591;
var google_street_view = 986248;
var google_translate = 983743;
var gradient2 = 984736;
var grain = 986492;
var graph = 987209;
var graph_outline = 987210;
var graphql = 985207;
var grave_stone = 986018;
var grease_pencil = 984648;
var greater_than = 985453;
var greater_than_or_equal = 985454;
var grid2 = 983745;
var grid_large = 984920;
var grid_off = 983746;
var grill = 986693;
var grill_outline = 987530;
var group = 983747;
var guitar_acoustic = 984945;
var guitar_electric = 983748;
var guitar_pick = 983749;
var guitar_pick_outline = 983750;
var guy_fawkes_mask = 985125;
var hail = 985793;
var hair_dryer = 987375;
var hair_dryer_outline = 987376;
var halloween = 986019;
var hamburger = 984709;
var hammer = 985322;
var hammer_screwdriver = 987938;
var hammer_wrench = 987939;
var hand = 985679;
var hand_heart = 987377;
var hand_left = 986694;
var hand_okay = 985680;
var hand_peace = 985681;
var hand_peace_variant = 985682;
var hand_pointing_down = 985683;
var hand_pointing_left = 985684;
var hand_pointing_right = 983751;
var hand_pointing_up = 985685;
var hand_right = 986695;
var hand_saw = 986696;
var hand_water = 988063;
var handball = 986963;
var handcuffs = 987454;
var handshake = 987672;
var hanger = 983752;
var hard_hat = 985455;
var harddisk = 983754;
var harddisk_plus = 987211;
var harddisk_remove = 987212;
var hat_fedora = 986020;
var hazard_lights = 986249;
var hdr = 986493;
var hdr_off = 986494;
var head = 987998;
var head_alert = 987960;
var head_alert_outline = 987961;
var head_check = 987962;
var head_check_outline = 987963;
var head_cog = 987964;
var head_cog_outline = 987965;
var head_dots_horizontal = 987966;
var head_dots_horizontal_outline = 987967;
var head_flash = 987968;
var head_flash_outline = 987969;
var head_heart = 987970;
var head_heart_outline = 987971;
var head_lightbulb = 987972;
var head_lightbulb_outline = 987973;
var head_minus = 987974;
var head_minus_outline = 987975;
var head_outline = 987999;
var head_plus = 987976;
var head_plus_outline = 987977;
var head_question = 987978;
var head_question_outline = 987979;
var head_remove = 987980;
var head_remove_outline = 987981;
var head_snowflake = 987982;
var head_snowflake_outline = 987983;
var head_sync = 987984;
var head_sync_outline = 987985;
var headphones = 983755;
var headphones_bluetooth = 985456;
var headphones_box = 983756;
var headphones_off = 985038;
var headphones_settings = 983757;
var headset = 983758;
var headset_dock = 983759;
var headset_off = 983760;
var heart = 983761;
var heart_box = 983762;
var heart_box_outline = 983763;
var heart_broken = 983764;
var heart_broken_outline = 986388;
var heart_circle = 985457;
var heart_circle_outline = 985458;
var heart_flash = 986873;
var heart_half = 984799;
var heart_half_full = 984798;
var heart_half_outline = 984800;
var heart_minus = 988207;
var heart_minus_outline = 988210;
var heart_multiple = 985686;
var heart_multiple_outline = 985687;
var heart_off = 984921;
var heart_off_outline = 988212;
var heart_outline = 983765;
var heart_plus = 988206;
var heart_plus_outline = 988209;
var heart_pulse = 984566;
var heart_remove = 988208;
var heart_remove_outline = 988211;
var helicopter = 985794;
var help = 983766;
var help_box = 984971;
var help_circle = 983767;
var help_circle_outline = 984613;
var help_network = 984821;
var help_network_outline = 986250;
var help_rhombus = 986021;
var help_rhombus_outline = 986022;
var hexadecimal = 987815;
var hexagon = 983768;
var hexagon_multiple = 984801;
var hexagon_multiple_outline = 987378;
var hexagon_outline = 983769;
var hexagon_slice_1 = 985795;
var hexagon_slice_2 = 985796;
var hexagon_slice_3 = 985797;
var hexagon_slice_4 = 985798;
var hexagon_slice_5 = 985799;
var hexagon_slice_6 = 985800;
var hexagram = 985801;
var hexagram_outline = 985802;
var high_definition = 985039;
var high_definition_box = 985208;
var highway = 984567;
var hiking = 986495;
var hinduism = 985459;
var history = 983770;
var hockey_puck = 985209;
var hockey_sticks = 985210;
var hololens = 983771;
var home = 983772;
var home_account = 985126;
var home_alert = 985211;
var home_analytics = 986810;
var home_assistant = 985040;
var home_automation = 985041;
var home_circle = 985042;
var home_circle_outline = 987213;
var home_city = 986389;
var home_city_outline = 986390;
var home_currency_usd = 985263;
var home_edit = 987481;
var home_edit_outline = 987482;
var home_export_outline = 987035;
var home_flood = 986874;
var home_floor_0 = 986578;
var home_floor_1 = 986496;
var home_floor_2 = 986497;
var home_floor_3 = 986498;
var home_floor_a = 986499;
var home_floor_b = 986500;
var home_floor_g = 986501;
var home_floor_l = 986502;
var home_floor_negative_1 = 986579;
var home_group = 986580;
var home_heart = 985127;
var home_import_outline = 987036;
var home_lightbulb = 987729;
var home_lightbulb_outline = 987730;
var home_lock = 985323;
var home_lock_open = 985324;
var home_map_marker = 984568;
var home_minus = 985460;
var home_minus_outline = 988117;
var home_modern = 983773;
var home_outline = 984737;
var home_plus = 985461;
var home_plus_outline = 988118;
var home_remove = 987719;
var home_remove_outline = 988119;
var home_roof = 987435;
var home_search = 988080;
var home_search_outline = 988081;
var home_thermometer = 986964;
var home_thermometer_outline = 986965;
var home_variant = 983774;
var home_variant_outline = 986023;
var hook = 984802;
var hook_off = 984803;
var hops = 983775;
var horizontal_rotate_clockwise = 987379;
var horizontal_rotate_counterclockwise = 987380;
var horseshoe = 985688;
var hospital = 987126;
var hospital_box = 983776;
var hospital_box_outline = 987127;
var hospital_building = 983777;
var hospital_marker = 983778;
var hot_tub = 985128;
var hours_24 = 988280;
var hubspot = 986391;
var hulu = 985129;
var human = 983782;
var human_baby_changing_table = 988043;
var human_child = 983783;
var human_female = 984649;
var human_female_boy = 985689;
var human_female_female = 985690;
var human_female_girl = 985691;
var human_greeting = 984650;
var human_handsdown = 984651;
var human_handsup = 984652;
var human_male = 984653;
var human_male_boy = 985692;
var human_male_child = 988044;
var human_male_female = 983784;
var human_male_girl = 985693;
var human_male_height = 986875;
var human_male_height_variant = 986876;
var human_male_male = 985694;
var human_pregnant = 984527;
var human_wheelchair = 988045;
var humble_bundle = 984900;
var hvac = 987986;
var hydraulic_oil_level = 987940;
var hydraulic_oil_temperature = 987941;
var hydro_power = 987877;
var ice_cream = 985130;
var ice_cream_off = 986706;
var ice_pop = 986877;
var id_card = 987072;
var identifier = 986878;
var ideogram_cjk = 987953;
var ideogram_cjk_variant = 987954;
var iframe = 986251;
var iframe_array = 987381;
var iframe_array_outline = 987382;
var iframe_braces = 987383;
var iframe_braces_outline = 987384;
var iframe_outline = 986252;
var iframe_parentheses = 987385;
var iframe_parentheses_outline = 987386;
var iframe_variable = 987387;
var iframe_variable_outline = 987388;
var image = 983785;
var image_album = 983786;
var image_area = 983787;
var image_area_close = 983788;
var image_auto_adjust = 987073;
var image_broken = 983789;
var image_broken_variant = 983790;
var image_edit = 987619;
var image_edit_outline = 987620;
var image_filter_black_white = 983792;
var image_filter_center_focus = 983793;
var image_filter_center_focus_strong = 986879;
var image_filter_center_focus_strong_outline = 986880;
var image_filter_center_focus_weak = 983794;
var image_filter_drama = 983795;
var image_filter_frames = 983796;
var image_filter_hdr = 983797;
var image_filter_none = 983798;
var image_filter_tilt_shift = 983799;
var image_filter_vintage = 983800;
var image_frame = 986697;
var image_minus = 988185;
var image_move = 985592;
var image_multiple = 983801;
var image_multiple_outline = 983791;
var image_off = 985131;
var image_off_outline = 987601;
var image_outline = 985462;
var image_plus = 985212;
var image_remove = 988184;
var image_search = 985463;
var image_search_outline = 985464;
var image_size_select_actual = 986253;
var image_size_select_large = 986254;
var image_size_select_small = 986255;
var import2 = 983802;
var inbox = 984711;
var inbox_arrow_down = 983803;
var inbox_arrow_down_outline = 987760;
var inbox_arrow_up = 984017;
var inbox_arrow_up_outline = 987761;
var inbox_full = 987762;
var inbox_full_outline = 987763;
var inbox_multiple = 985264;
var inbox_multiple_outline = 986024;
var inbox_outline = 987764;
var incognito = 984569;
var incognito_circle = 988193;
var incognito_circle_off = 988194;
var incognito_off = 983157;
var infinity = 984804;
var information = 983804;
var information_outline = 983805;
var information_variant = 984654;
var instagram = 983806;
var instrument_triangle = 987214;
var invert_colors = 983809;
var invert_colors_off = 986698;
var iobroker = 987880;
var ip = 985695;
var ip_network = 985696;
var ip_network_outline = 986256;
var ipod = 986257;
var islam = 985465;
var island = 987215;
var iv_bag = 987321;
var jabber = 986581;
var jeepney = 983810;
var jellyfish = 986881;
var jellyfish_outline = 986882;
var jira = 983811;
var jquery = 985213;
var jsfiddle = 983812;
var judaism = 985466;
var jump_rope = 987903;
var kabaddi = 986503;
var karate = 985132;
var keg = 983813;
var kettle = 984570;
var kettle_alert = 987927;
var kettle_alert_outline = 987928;
var kettle_off = 987931;
var kettle_off_outline = 987932;
var kettle_outline = 986966;
var kettle_steam = 987929;
var kettle_steam_outline = 987930;
var kettlebell = 987904;
var key = 983814;
var key_arrow_right = 987922;
var key_change = 983815;
var key_link = 987551;
var key_minus = 983816;
var key_outline = 986582;
var key_plus = 983817;
var key_remove = 983818;
var key_star = 987550;
var key_variant = 983819;
var key_wireless = 987074;
var keyboard = 983820;
var keyboard_backspace = 983821;
var keyboard_caps = 983822;
var keyboard_close = 983823;
var keyboard_esc = 987831;
var keyboard_f1 = 987819;
var keyboard_f10 = 987828;
var keyboard_f11 = 987829;
var keyboard_f12 = 987830;
var keyboard_f2 = 987820;
var keyboard_f3 = 987821;
var keyboard_f4 = 987822;
var keyboard_f5 = 987823;
var keyboard_f6 = 987824;
var keyboard_f7 = 987825;
var keyboard_f8 = 987826;
var keyboard_f9 = 987827;
var keyboard_off = 983824;
var keyboard_off_outline = 986699;
var keyboard_outline = 985467;
var keyboard_return = 983825;
var keyboard_settings = 985593;
var keyboard_settings_outline = 985594;
var keyboard_space = 987216;
var keyboard_tab = 983826;
var keyboard_variant = 983827;
var khanda = 987389;
var kickstarter = 984901;
var klingon = 987995;
var knife = 985595;
var knife_military = 985596;
var kodi = 983828;
var kubernetes = 987390;
var label = 983829;
var label_multiple = 988021;
var label_multiple_outline = 988022;
var label_off = 985803;
var label_off_outline = 985804;
var label_outline = 983830;
var label_percent = 987882;
var label_percent_outline = 987883;
var label_variant = 985805;
var label_variant_outline = 985806;
var ladybug = 985133;
var lambda = 984615;
var lamp = 984757;
var lan = 983831;
var lan_check = 987818;
var lan_connect = 983832;
var lan_disconnect = 983833;
var lan_pending = 983834;
var language_c = 984689;
var language_cpp = 984690;
var language_csharp = 983835;
var language_css3 = 983836;
var language_fortran = 987674;
var language_go = 985043;
var language_haskell = 986258;
var language_html5 = 983837;
var language_java = 985911;
var language_javascript = 983838;
var language_kotlin = 987673;
var language_lua = 985265;
var language_markdown = 983892;
var language_markdown_outline = 986971;
var language_php = 983839;
var language_python = 983840;
var language_r = 985044;
var language_ruby = 986413;
var language_ruby_on_rails = 985807;
var language_swift = 984805;
var language_typescript = 984806;
var language_xaml = 984691;
var laptop = 983842;
var laptop_chromebook = 983843;
var laptop_mac = 983844;
var laptop_off = 984807;
var laptop_windows = 983845;
var laravel = 985808;
var laser_pointer = 988292;
var lasso = 986883;
var lastpass = 984134;
var latitude = 986967;
var launch = 983847;
var lava_lamp = 985045;
var layers = 983848;
var layers_minus = 986700;
var layers_off = 983849;
var layers_off_outline = 985597;
var layers_outline = 985598;
var layers_plus = 986701;
var layers_remove = 986702;
var layers_search = 987654;
var layers_search_outline = 987655;
var layers_triple = 986968;
var layers_triple_outline = 986969;
var lead_pencil = 984655;
var leaf = 983850;
var leaf_maple = 986259;
var leaf_maple_off = 987866;
var leaf_off = 987865;
var leak = 986583;
var leak_off = 986584;
var led_off = 983851;
var led_on = 983852;
var led_outline = 983853;
var led_strip = 985046;
var led_strip_variant = 987217;
var led_variant_off = 983854;
var led_variant_on = 983855;
var led_variant_outline = 983856;
var leek = 987517;
var less_than = 985468;
var less_than_or_equal = 985469;
var library = 983857;
var library_shelves = 986025;
var license = 987075;
var lifebuoy = 985214;
var light_switch = 985470;
var lightbulb = 983861;
var lightbulb_cfl = 987656;
var lightbulb_cfl_off = 987657;
var lightbulb_cfl_spiral = 987765;
var lightbulb_cfl_spiral_off = 987843;
var lightbulb_group = 987731;
var lightbulb_group_off = 987853;
var lightbulb_group_off_outline = 987854;
var lightbulb_group_outline = 987732;
var lightbulb_multiple = 987733;
var lightbulb_multiple_off = 987855;
var lightbulb_multiple_off_outline = 987856;
var lightbulb_multiple_outline = 987734;
var lightbulb_off = 986703;
var lightbulb_off_outline = 986704;
var lightbulb_on = 984808;
var lightbulb_on_outline = 984809;
var lightbulb_outline = 983862;
var lighthouse = 985599;
var lighthouse_on = 985600;
var lightning_bolt = 988171;
var lightning_bolt_outline = 988172;
var lingerie = 988278;
var link = 983863;
var link_box = 986394;
var link_box_outline = 986395;
var link_box_variant = 986396;
var link_box_variant_outline = 986397;
var link_lock = 987322;
var link_off = 983864;
var link_plus = 986260;
var link_variant = 983865;
var link_variant_minus = 987391;
var link_variant_off = 983866;
var link_variant_plus = 987392;
var link_variant_remove = 987393;
var linkedin = 983867;
var linux = 983869;
var linux_mint = 985325;
var lipstick = 988085;
var litecoin = 985697;
var loading = 984946;
var location_enter = 987076;
var location_exit = 987077;
var lock = 983870;
var lock_alert = 985326;
var lock_check = 988058;
var lock_clock = 985471;
var lock_open = 983871;
var lock_open_alert = 988059;
var lock_open_check = 988060;
var lock_open_outline = 983872;
var lock_open_variant = 987078;
var lock_open_variant_outline = 987079;
var lock_outline = 983873;
var lock_pattern = 984810;
var lock_plus = 984571;
var lock_question = 985327;
var lock_reset = 984947;
var lock_smart = 985266;
var locker = 985047;
var locker_multiple = 985048;
var login = 983874;
var login_variant = 984572;
var logout = 983875;
var logout_variant = 984573;
var longitude = 986970;
var looks = 983876;
var loupe = 983877;
var lumx = 983878;
var lungs = 987268;
var magnet = 983879;
var magnet_on = 983880;
var magnify = 983881;
var magnify_close = 985472;
var magnify_minus = 983882;
var magnify_minus_cursor = 985698;
var magnify_minus_outline = 984812;
var magnify_plus = 983883;
var magnify_plus_cursor = 985699;
var magnify_plus_outline = 984813;
var magnify_remove_cursor = 987660;
var magnify_remove_outline = 987661;
var magnify_scan = 987766;
var mail = 986811;
var mailbox = 984814;
var mailbox_open = 986504;
var mailbox_open_outline = 986505;
var mailbox_open_up = 986506;
var mailbox_open_up_outline = 986507;
var mailbox_outline = 986508;
var mailbox_up = 986509;
var mailbox_up_outline = 986510;
var map = 983885;
var map_check = 986812;
var map_check_outline = 986813;
var map_clock = 986398;
var map_clock_outline = 986399;
var map_legend = 985601;
var map_marker = 983886;
var map_marker_alert = 986885;
var map_marker_alert_outline = 986886;
var map_marker_check = 986261;
var map_marker_check_outline = 987899;
var map_marker_circle = 983887;
var map_marker_distance = 985328;
var map_marker_down = 987394;
var map_marker_left = 987867;
var map_marker_left_outline = 987869;
var map_marker_minus = 984656;
var map_marker_minus_outline = 987897;
var map_marker_multiple = 983888;
var map_marker_multiple_outline = 987767;
var map_marker_off = 983889;
var map_marker_off_outline = 987901;
var map_marker_outline = 985049;
var map_marker_path = 986400;
var map_marker_plus = 984657;
var map_marker_plus_outline = 987896;
var map_marker_question = 986887;
var map_marker_question_outline = 986888;
var map_marker_radius = 983890;
var map_marker_radius_outline = 987900;
var map_marker_remove = 986889;
var map_marker_remove_outline = 987898;
var map_marker_remove_variant = 986890;
var map_marker_right = 987868;
var map_marker_right_outline = 987870;
var map_marker_up = 987395;
var map_minus = 985473;
var map_outline = 985474;
var map_plus = 985475;
var map_search = 985476;
var map_search_outline = 985477;
var mapbox = 986026;
var margin = 983891;
var marker = 984658;
var marker_cancel = 986585;
var marker_check = 983893;
var mastodon = 985809;
var material_design = 985478;
var material_ui = 983895;
var math_compass = 983896;
var math_cos = 986262;
var math_integral = 987080;
var math_integral_box = 987081;
var math_log = 987269;
var math_norm = 987082;
var math_norm_box = 987083;
var math_sin = 986263;
var math_tan = 986264;
var matrix = 984616;
var medal = 985479;
var medal_outline = 987942;
var medical_bag = 984815;
var meditation = 987515;
var memory = 983899;
var menu = 983900;
var menu_down = 983901;
var menu_down_outline = 984758;
var menu_left = 983902;
var menu_left_outline = 985602;
var menu_open = 986027;
var menu_right = 983903;
var menu_right_outline = 985603;
var menu_swap = 985700;
var menu_swap_outline = 985701;
var menu_up = 983904;
var menu_up_outline = 984759;
var merge = 986972;
var message = 983905;
var message_alert = 983906;
var message_alert_outline = 985604;
var message_arrow_left = 987890;
var message_arrow_left_outline = 987891;
var message_arrow_right = 987892;
var message_arrow_right_outline = 987893;
var message_bulleted = 984738;
var message_bulleted_off = 984739;
var message_cog = 984817;
var message_cog_outline = 987506;
var message_draw = 983907;
var message_image = 983908;
var message_image_outline = 987500;
var message_lock = 987084;
var message_lock_outline = 987501;
var message_minus = 987502;
var message_minus_outline = 987503;
var message_outline = 983909;
var message_plus = 984659;
var message_plus_outline = 987323;
var message_processing = 983910;
var message_processing_outline = 987504;
var message_reply = 983911;
var message_reply_text = 983912;
var message_settings = 984816;
var message_settings_outline = 987505;
var message_text = 983913;
var message_text_clock = 987507;
var message_text_clock_outline = 987508;
var message_text_lock = 987085;
var message_text_lock_outline = 987509;
var message_text_outline = 983914;
var message_video = 983915;
var meteor = 984617;
var metronome = 985050;
var metronome_tick = 985051;
var micro_sd = 985052;
var microphone = 983916;
var microphone_minus = 985267;
var microphone_off = 983917;
var microphone_outline = 983918;
var microphone_plus = 985268;
var microphone_settings = 983919;
var microphone_variant = 983920;
var microphone_variant_off = 983921;
var microscope = 984660;
var microsoft = 983922;
var microsoft_access = 988046;
var microsoft_azure = 985093;
var microsoft_azure_devops = 987093;
var microsoft_bing = 983204;
var microsoft_dynamics_365 = 985480;
var microsoft_edge = 983529;
var microsoft_edge_legacy = 987728;
var microsoft_excel = 988047;
var microsoft_internet_explorer = 983808;
var microsoft_office = 984006;
var microsoft_onedrive = 984010;
var microsoft_onenote = 984903;
var microsoft_outlook = 986402;
var microsoft_powerpoint = 988048;
var microsoft_sharepoint = 988049;
var microsoft_teams = 983739;
var microsoft_visual_studio = 984592;
var microsoft_visual_studio_code = 985630;
var microsoft_windows = 984499;
var microsoft_windows_classic = 985633;
var microsoft_word = 988050;
var microsoft_xbox = 984505;
var microsoft_xbox_controller = 984506;
var microsoft_xbox_controller_battery_alert = 984907;
var microsoft_xbox_controller_battery_charging = 985634;
var microsoft_xbox_controller_battery_empty = 984908;
var microsoft_xbox_controller_battery_full = 984909;
var microsoft_xbox_controller_battery_low = 984910;
var microsoft_xbox_controller_battery_medium = 984911;
var microsoft_xbox_controller_battery_unknown = 984912;
var microsoft_xbox_controller_menu = 986735;
var microsoft_xbox_controller_off = 984507;
var microsoft_xbox_controller_view = 986736;
var microsoft_yammer = 984969;
var microwave = 986265;
var microwave_off = 988195;
var middleware = 986973;
var middleware_outline = 986974;
var midi = 985329;
var midi_port = 985330;
var mine = 986586;
var minecraft = 983923;
var mini_sd = 985605;
var minidisc = 985606;
var minus = 983924;
var minus_box = 983925;
var minus_box_multiple = 987457;
var minus_box_multiple_outline = 987458;
var minus_box_outline = 984818;
var minus_circle = 983926;
var minus_circle_multiple = 983898;
var minus_circle_multiple_outline = 985811;
var minus_circle_off = 988249;
var minus_circle_off_outline = 988250;
var minus_circle_outline = 983927;
var minus_network = 983928;
var minus_network_outline = 986266;
var mirror = 987645;
var mixed_martial_arts = 986511;
var mixed_reality = 985215;
var mixer = 985053;
var molecule = 986028;
var molecule_co = 987902;
var molecule_co2 = 985060;
var monitor = 983929;
var monitor_cellphone = 985481;
var monitor_cellphone_star = 985482;
var monitor_clean = 987396;
var monitor_dashboard = 985607;
var monitor_edit = 987846;
var monitor_eye = 988084;
var monitor_lock = 986587;
var monitor_multiple = 983930;
var monitor_off = 986512;
var monitor_screenshot = 986705;
var monitor_share = 988291;
var monitor_speaker = 986975;
var monitor_speaker_off = 986976;
var monitor_star = 986588;
var moon_first_quarter = 986977;
var moon_full = 986978;
var moon_last_quarter = 986979;
var moon_new = 986980;
var moon_waning_crescent = 986981;
var moon_waning_gibbous = 986982;
var moon_waxing_crescent = 986983;
var moon_waxing_gibbous = 986984;
var moped = 987270;
var more = 983931;
var mother_heart = 987924;
var mother_nurse = 986401;
var motion_sensor = 986513;
var motion_sensor_off = 988213;
var motorbike = 983932;
var mouse = 983933;
var mouse_bluetooth = 985483;
var mouse_off = 983934;
var mouse_variant = 983935;
var mouse_variant_off = 983936;
var move_resize = 984661;
var move_resize_variant = 984662;
var movie = 983937;
var movie_edit = 987426;
var movie_edit_outline = 987427;
var movie_filter = 987428;
var movie_filter_outline = 987429;
var movie_open = 987086;
var movie_open_outline = 987087;
var movie_outline = 986589;
var movie_roll = 985054;
var movie_search = 987602;
var movie_search_outline = 987603;
var muffin = 985484;
var multiplication = 983938;
var multiplication_box = 983939;
var mushroom = 985055;
var mushroom_off = 988154;
var mushroom_off_outline = 988155;
var mushroom_outline = 985056;
var music = 984922;
var music_accidental_double_flat = 986985;
var music_accidental_double_sharp = 986986;
var music_accidental_flat = 986987;
var music_accidental_natural = 986988;
var music_accidental_sharp = 986989;
var music_box = 983940;
var music_box_multiple = 983859;
var music_box_multiple_outline = 986884;
var music_box_outline = 983941;
var music_circle = 983942;
var music_circle_outline = 985812;
var music_clef_alto = 986990;
var music_clef_bass = 986991;
var music_clef_treble = 986992;
var music_note = 983943;
var music_note_bluetooth = 984574;
var music_note_bluetooth_off = 984575;
var music_note_eighth = 983944;
var music_note_eighth_dotted = 986993;
var music_note_half = 983945;
var music_note_half_dotted = 986994;
var music_note_off = 983946;
var music_note_off_outline = 986995;
var music_note_outline = 986996;
var music_note_plus = 986590;
var music_note_quarter = 983947;
var music_note_quarter_dotted = 986997;
var music_note_sixteenth = 983948;
var music_note_sixteenth_dotted = 986998;
var music_note_whole = 983949;
var music_note_whole_dotted = 986999;
var music_off = 984923;
var music_rest_eighth = 987e3;
var music_rest_half = 987001;
var music_rest_quarter = 987002;
var music_rest_sixteenth = 987003;
var music_rest_whole = 987004;
var nail = 986591;
var nas = 985331;
var nativescript = 985216;
var nature = 983950;
var nature_people = 983951;
var navigation = 983952;
var near_me = 984525;
var necklace = 986891;
var needle = 983953;
var netflix = 984902;
var network = 984819;
var network_off = 986267;
var network_off_outline = 986268;
var network_outline = 986269;
var network_strength_1 = 985332;
var network_strength_1_alert = 985333;
var network_strength_2 = 985334;
var network_strength_2_alert = 985335;
var network_strength_3 = 985336;
var network_strength_3_alert = 985337;
var network_strength_4 = 985338;
var network_strength_4_alert = 985339;
var network_strength_off = 985340;
var network_strength_off_outline = 985341;
var network_strength_outline = 985342;
var new_box = 983956;
var newspaper = 983957;
var newspaper_minus = 986892;
var newspaper_plus = 986893;
var newspaper_variant = 987137;
var newspaper_variant_multiple = 987138;
var newspaper_variant_multiple_outline = 987139;
var newspaper_variant_outline = 987140;
var nfc = 983958;
var nfc_search_variant = 986707;
var nfc_tap = 983959;
var nfc_variant = 983960;
var nfc_variant_off = 986708;
var ninja = 984948;
var nintendo_game_boy = 988051;
var nintendo_switch = 985057;
var nintendo_wii = 984491;
var nintendo_wiiu = 984877;
var nix = 987397;
var nodejs = 983961;
var noodles = 987518;
var not_equal = 985485;
var not_equal_variant = 985486;
var note = 983962;
var note_multiple = 984760;
var note_multiple_outline = 984761;
var note_outline = 983963;
var note_plus = 983964;
var note_plus_outline = 983965;
var note_text = 983966;
var note_text_outline = 987607;
var notebook = 985134;
var notebook_multiple = 986709;
var notebook_outline = 986815;
var notification_clear_all = 983967;
var npm = 984823;
var nuke = 984740;
var null2 = 985058;
var numeric = 983968;
var numeric_0 = 985913;
var numeric_0_box = 983969;
var numeric_0_box_multiple = 986894;
var numeric_0_box_multiple_outline = 983970;
var numeric_0_box_outline = 983971;
var numeric_0_circle = 986270;
var numeric_0_circle_outline = 986271;
var numeric_1 = 985914;
var numeric_1_box = 983972;
var numeric_1_box_multiple = 986895;
var numeric_1_box_multiple_outline = 983973;
var numeric_1_box_outline = 983974;
var numeric_1_circle = 986272;
var numeric_1_circle_outline = 986273;
var numeric_10 = 987113;
var numeric_10_box = 987005;
var numeric_10_box_multiple = 987114;
var numeric_10_box_multiple_outline = 987115;
var numeric_10_box_outline = 987006;
var numeric_10_circle = 987116;
var numeric_10_circle_outline = 987117;
var numeric_2 = 985915;
var numeric_2_box = 983975;
var numeric_2_box_multiple = 986896;
var numeric_2_box_multiple_outline = 983976;
var numeric_2_box_outline = 983977;
var numeric_2_circle = 986274;
var numeric_2_circle_outline = 986275;
var numeric_3 = 985916;
var numeric_3_box = 983978;
var numeric_3_box_multiple = 986897;
var numeric_3_box_multiple_outline = 983979;
var numeric_3_box_outline = 983980;
var numeric_3_circle = 986276;
var numeric_3_circle_outline = 986277;
var numeric_4 = 985917;
var numeric_4_box = 983981;
var numeric_4_box_multiple = 986898;
var numeric_4_box_multiple_outline = 983986;
var numeric_4_box_outline = 983982;
var numeric_4_circle = 986278;
var numeric_4_circle_outline = 986279;
var numeric_5 = 985918;
var numeric_5_box = 983985;
var numeric_5_box_multiple = 986899;
var numeric_5_box_multiple_outline = 983983;
var numeric_5_box_outline = 983984;
var numeric_5_circle = 986280;
var numeric_5_circle_outline = 986281;
var numeric_6 = 985919;
var numeric_6_box = 983987;
var numeric_6_box_multiple = 986900;
var numeric_6_box_multiple_outline = 983988;
var numeric_6_box_outline = 983989;
var numeric_6_circle = 986282;
var numeric_6_circle_outline = 986283;
var numeric_7 = 985920;
var numeric_7_box = 983990;
var numeric_7_box_multiple = 986901;
var numeric_7_box_multiple_outline = 983991;
var numeric_7_box_outline = 983992;
var numeric_7_circle = 986284;
var numeric_7_circle_outline = 986285;
var numeric_8 = 985921;
var numeric_8_box = 983993;
var numeric_8_box_multiple = 986902;
var numeric_8_box_multiple_outline = 983994;
var numeric_8_box_outline = 983995;
var numeric_8_circle = 986286;
var numeric_8_circle_outline = 986287;
var numeric_9 = 985922;
var numeric_9_box = 983996;
var numeric_9_box_multiple = 986903;
var numeric_9_box_multiple_outline = 983997;
var numeric_9_box_outline = 983998;
var numeric_9_circle = 986288;
var numeric_9_circle_outline = 986289;
var numeric_9_plus = 987118;
var numeric_9_plus_box = 983999;
var numeric_9_plus_box_multiple = 986904;
var numeric_9_plus_box_multiple_outline = 984e3;
var numeric_9_plus_box_outline = 984001;
var numeric_9_plus_circle = 986290;
var numeric_9_plus_circle_outline = 986291;
var numeric_negative_1 = 987218;
var nut = 984824;
var nutrition = 984002;
var nuxt = 987398;
var oar = 984700;
var ocarina = 986592;
var oci = 987881;
var ocr = 987450;
var octagon = 984003;
var octagon_outline = 984004;
var octagram = 984825;
var octagram_outline = 984949;
var odnoklassniki = 984005;
var offer = 987675;
var office_building = 985489;
var oil = 984007;
var oil_lamp = 986905;
var oil_level = 987219;
var oil_temperature = 987128;
var omega = 984009;
var one_up = 986029;
var onepassword = 985217;
var opacity = 984524;
var open_in_app = 984011;
var open_in_new = 984012;
var open_source_initiative = 986030;
var openid = 984013;
var opera = 984014;
var orbit = 983064;
var order_alphabetical_ascending = 983565;
var order_alphabetical_descending = 986375;
var order_bool_ascending = 983742;
var order_bool_ascending_variant = 985487;
var order_bool_descending = 988036;
var order_bool_descending_variant = 985488;
var order_numeric_ascending = 984389;
var order_numeric_descending = 984390;
var origin = 985923;
var ornament = 984015;
var ornament_variant = 984016;
var outdoor_lamp = 987220;
var overscan = 987141;
var owl = 984018;
var pac_man = 986031;
var package2 = 984019;
var package_down = 984020;
var package_up = 984021;
var package_variant = 984022;
var package_variant_closed = 984023;
var page_first = 984576;
var page_last = 984577;
var page_layout_body = 984826;
var page_layout_footer = 984827;
var page_layout_header = 984828;
var page_layout_header_footer = 987007;
var page_layout_sidebar_left = 984829;
var page_layout_sidebar_right = 984830;
var page_next = 986032;
var page_next_outline = 986033;
var page_previous = 986034;
var page_previous_outline = 986035;
var pail = 988183;
var pail_minus = 988215;
var pail_minus_outline = 988220;
var pail_off = 988217;
var pail_off_outline = 988222;
var pail_outline = 988218;
var pail_plus = 988214;
var pail_plus_outline = 988219;
var pail_remove = 988216;
var pail_remove_outline = 988221;
var palette = 984024;
var palette_advanced = 984025;
var palette_outline = 986636;
var palette_swatch = 985269;
var palette_swatch_outline = 987996;
var palm_tree = 987221;
var pan = 986036;
var pan_bottom_left = 986037;
var pan_bottom_right = 986038;
var pan_down = 986039;
var pan_horizontal = 986040;
var pan_left = 986041;
var pan_right = 986042;
var pan_top_left = 986043;
var pan_top_right = 986044;
var pan_up = 986045;
var pan_vertical = 986046;
var panda = 984026;
var pandora = 984027;
var panorama = 984028;
var panorama_fisheye = 984029;
var panorama_horizontal = 984030;
var panorama_vertical = 984031;
var panorama_wide_angle = 984032;
var paper_cut_vertical = 984033;
var paper_roll = 987479;
var paper_roll_outline = 987480;
var paperclip = 984034;
var parachute = 986292;
var parachute_outline = 986293;
var parking = 984035;
var party_popper = 987222;
var passport = 985059;
var passport_biometric = 986593;
var pasta = 987488;
var patio_heater = 987008;
var patreon = 985218;
var pause = 984036;
var pause_circle = 984037;
var pause_circle_outline = 984038;
var pause_octagon = 984039;
var pause_octagon_outline = 984040;
var paw = 984041;
var paw_off = 984663;
var pdf_box = 986710;
var peace = 985220;
var peanut = 987132;
var peanut_off = 987133;
var peanut_off_outline = 987135;
var peanut_outline = 987134;
var pen = 984042;
var pen_lock = 986594;
var pen_minus = 986595;
var pen_off = 986596;
var pen_plus = 986597;
var pen_remove = 986598;
var pencil = 984043;
var pencil_box = 984044;
var pencil_box_multiple = 987460;
var pencil_box_multiple_outline = 987461;
var pencil_box_outline = 984045;
var pencil_circle = 984831;
var pencil_circle_outline = 984950;
var pencil_lock = 984046;
var pencil_lock_outline = 986599;
var pencil_minus = 986600;
var pencil_minus_outline = 986601;
var pencil_off = 984047;
var pencil_off_outline = 986602;
var pencil_outline = 986294;
var pencil_plus = 986603;
var pencil_plus_outline = 986604;
var pencil_remove = 986605;
var pencil_remove_outline = 986606;
var pencil_ruler = 987987;
var penguin = 986816;
var pentagon = 984833;
var pentagon_outline = 984832;
var percent = 984048;
var percent_outline = 987768;
var periodic_table = 985270;
var perspective_less = 986403;
var perspective_more = 986404;
var pharmacy = 984049;
var phone = 984050;
var phone_alert = 986906;
var phone_alert_outline = 987534;
var phone_bluetooth = 984051;
var phone_bluetooth_outline = 987535;
var phone_cancel = 987324;
var phone_cancel_outline = 987536;
var phone_check = 987561;
var phone_check_outline = 987562;
var phone_classic = 984578;
var phone_classic_off = 987769;
var phone_forward = 984052;
var phone_forward_outline = 987537;
var phone_hangup = 984053;
var phone_hangup_outline = 987538;
var phone_in_talk = 984054;
var phone_in_talk_outline = 987522;
var phone_incoming = 984055;
var phone_incoming_outline = 987539;
var phone_lock = 984056;
var phone_lock_outline = 987540;
var phone_log = 984057;
var phone_log_outline = 987541;
var phone_message = 987542;
var phone_message_outline = 987543;
var phone_minus = 984664;
var phone_minus_outline = 987544;
var phone_missed = 984058;
var phone_missed_outline = 987557;
var phone_off = 986607;
var phone_off_outline = 987558;
var phone_outgoing = 984059;
var phone_outgoing_outline = 987545;
var phone_outline = 986608;
var phone_paused = 984060;
var phone_paused_outline = 987546;
var phone_plus = 984665;
var phone_plus_outline = 987547;
var phone_return = 985135;
var phone_return_outline = 987548;
var phone_ring = 987563;
var phone_ring_outline = 987564;
var phone_rotate_landscape = 985221;
var phone_rotate_portrait = 985222;
var phone_settings = 984061;
var phone_settings_outline = 987549;
var phone_voip = 984062;
var pi = 984063;
var pi_box = 984064;
var pi_hole = 986609;
var piano = 984701;
var pickaxe = 985271;
var picture_in_picture_bottom_right = 986711;
var picture_in_picture_bottom_right_outline = 986712;
var picture_in_picture_top_right = 986713;
var picture_in_picture_top_right_outline = 986714;
var pier = 985223;
var pier_crane = 985224;
var pig = 984065;
var pig_variant = 987142;
var piggy_bank = 987143;
var pill = 984066;
var pillar = 984834;
var pin = 984067;
var pin_off = 984068;
var pin_off_outline = 985392;
var pin_outline = 985393;
var pine_tree = 984069;
var pine_tree_box = 984070;
var pine_tree_fire = 988186;
var pinterest = 984071;
var pinwheel = 985813;
var pinwheel_outline = 985814;
var pipe = 985061;
var pipe_disconnected = 985062;
var pipe_leak = 985225;
var pipe_wrench = 987988;
var pirate = 985608;
var pistol = 984835;
var piston = 985226;
var pizza = 984073;
var play = 984074;
var play_box = 987770;
var play_box_multiple = 986393;
var play_box_multiple_outline = 988134;
var play_box_outline = 984075;
var play_circle = 984076;
var play_circle_outline = 984077;
var play_network = 985227;
var play_network_outline = 986295;
var play_outline = 986907;
var play_pause = 984078;
var play_protected_content = 984079;
var play_speed = 985343;
var playlist_check = 984519;
var playlist_edit = 985344;
var playlist_minus = 984080;
var playlist_music = 986296;
var playlist_music_outline = 986297;
var playlist_play = 984081;
var playlist_plus = 984082;
var playlist_remove = 984083;
var playlist_star = 986610;
var plex = 984762;
var plus = 984085;
var plus_box = 984086;
var plus_box_multiple = 983860;
var plus_box_multiple_outline = 987459;
var plus_box_outline = 984836;
var plus_circle = 984087;
var plus_circle_multiple = 983884;
var plus_circle_multiple_outline = 984088;
var plus_circle_outline = 984089;
var plus_minus = 985490;
var plus_minus_box = 985491;
var plus_minus_variant = 988361;
var plus_network = 984090;
var plus_network_outline = 986298;
var plus_one = 984091;
var plus_outline = 984837;
var plus_thick = 987628;
var podcast = 985492;
var podium = 986405;
var podium_bronze = 986406;
var podium_gold = 986407;
var podium_silver = 986408;
var point_of_sale = 986514;
var pokeball = 984093;
var pokemon_go = 985609;
var poker_chip = 985136;
var polaroid = 984094;
var police_badge = 987495;
var police_badge_outline = 987496;
var poll = 984095;
var poll_box = 984096;
var poll_box_outline = 987771;
var polo = 988355;
var polymer = 984097;
var pool = 984582;
var popcorn = 984098;
var post = 987144;
var post_outline = 987145;
var postage_stamp = 986299;
var pot = 983781;
var pot_mix = 984667;
var pot_mix_outline = 984695;
var pot_outline = 983807;
var pot_steam = 984666;
var pot_steam_outline = 983846;
var pound = 984099;
var pound_box = 984100;
var pound_box_outline = 987519;
var power = 984101;
var power_cycle = 985345;
var power_off = 985346;
var power_on = 985347;
var power_plug = 984741;
var power_plug_off = 984742;
var power_plug_off_outline = 988196;
var power_plug_outline = 988197;
var power_settings = 984102;
var power_sleep = 985348;
var power_socket = 984103;
var power_socket_au = 985349;
var power_socket_de = 987399;
var power_socket_eu = 985063;
var power_socket_fr = 987400;
var power_socket_jp = 987401;
var power_socket_uk = 985064;
var power_socket_us = 985065;
var power_standby = 985350;
var powershell = 985610;
var prescription = 984838;
var presentation = 984104;
var presentation_play = 984105;
var printer = 984106;
var printer_3d = 984107;
var printer_3d_nozzle = 986715;
var printer_3d_nozzle_alert = 987584;
var printer_3d_nozzle_alert_outline = 987585;
var printer_3d_nozzle_outline = 986716;
var printer_alert = 984108;
var printer_check = 987462;
var printer_eye = 988248;
var printer_off = 986717;
var printer_pos = 987223;
var printer_search = 988247;
var printer_settings = 984839;
var printer_wireless = 985611;
var priority_high = 984579;
var priority_low = 984580;
var professional_hexagon = 984109;
var progress_alert = 986300;
var progress_check = 985493;
var progress_clock = 985494;
var progress_close = 987402;
var progress_download = 985495;
var progress_upload = 985496;
var progress_wrench = 986301;
var projector = 984110;
var projector_screen = 984111;
var propane_tank = 987991;
var propane_tank_outline = 987992;
var protocol = 987096;
var publish = 984743;
var pulse = 984112;
var pump = 988162;
var pumpkin = 986047;
var purse = 986908;
var purse_outline = 986909;
var puzzle = 984113;
var puzzle_check = 988198;
var puzzle_check_outline = 988199;
var puzzle_edit = 988371;
var puzzle_edit_outline = 988377;
var puzzle_heart = 988372;
var puzzle_heart_outline = 988378;
var puzzle_minus = 988369;
var puzzle_minus_outline = 988375;
var puzzle_outline = 985702;
var puzzle_plus = 988368;
var puzzle_plus_outline = 988374;
var puzzle_remove = 988370;
var puzzle_remove_outline = 988376;
var puzzle_star = 988373;
var puzzle_star_outline = 988379;
var qi = 985497;
var qqchat = 984581;
var qrcode = 984114;
var qrcode_edit = 985272;
var qrcode_minus = 987532;
var qrcode_plus = 987531;
var qrcode_remove = 987533;
var qrcode_scan = 984115;
var quadcopter = 984116;
var quality_high = 984117;
var quality_low = 985612;
var quality_medium = 985613;
var quora = 986409;
var rabbit = 985351;
var racing_helmet = 986515;
var racquetball = 986516;
var radar = 984119;
var radiator = 984120;
var radiator_disabled = 985815;
var radiator_off = 985816;
var radio = 984121;
var radio_am = 986302;
var radio_fm = 986303;
var radio_handheld = 984122;
var radio_off = 987676;
var radio_tower = 984123;
var radioactive = 984124;
var radioactive_off = 986817;
var radiobox_blank = 984125;
var radiobox_marked = 984126;
var radiology_box = 988357;
var radiology_box_outline = 988358;
var radius = 986304;
var radius_outline = 986305;
var railroad_light = 986910;
var raspberry_pi = 984127;
var ray_end = 984128;
var ray_end_arrow = 984129;
var ray_start = 984130;
var ray_start_arrow = 984131;
var ray_start_end = 984132;
var ray_vertex = 984133;
var react = 984840;
var read = 984135;
var receipt = 984137;
var record = 984138;
var record_circle = 986818;
var record_circle_outline = 986819;
var record_player = 985498;
var record_rec = 984139;
var rectangle = 986718;
var rectangle_outline = 986719;
var recycle = 984140;
var recycle_variant = 988061;
var reddit = 984141;
var redhat = 987419;
var redo = 984142;
var redo_variant = 984143;
var reflect_horizontal = 985614;
var reflect_vertical = 985615;
var refresh = 984144;
var refresh_circle = 988023;
var regex = 984145;
var registered_trademark = 985703;
var relation_many_to_many = 988310;
var relation_many_to_one = 988311;
var relation_many_to_one_or_many = 988312;
var relation_many_to_only_one = 988313;
var relation_many_to_zero_or_many = 988314;
var relation_many_to_zero_or_one = 988315;
var relation_one_or_many_to_many = 988316;
var relation_one_or_many_to_one = 988317;
var relation_one_or_many_to_one_or_many = 988318;
var relation_one_or_many_to_only_one = 988319;
var relation_one_or_many_to_zero_or_many = 988320;
var relation_one_or_many_to_zero_or_one = 988321;
var relation_one_to_many = 988322;
var relation_one_to_one = 988323;
var relation_one_to_one_or_many = 988324;
var relation_one_to_only_one = 988325;
var relation_one_to_zero_or_many = 988326;
var relation_one_to_zero_or_one = 988327;
var relation_only_one_to_many = 988328;
var relation_only_one_to_one = 988329;
var relation_only_one_to_one_or_many = 988330;
var relation_only_one_to_only_one = 988331;
var relation_only_one_to_zero_or_many = 988332;
var relation_only_one_to_zero_or_one = 988333;
var relation_zero_or_many_to_many = 988334;
var relation_zero_or_many_to_one = 988335;
var relation_zero_or_many_to_one_or_many = 988336;
var relation_zero_or_many_to_only_one = 988337;
var relation_zero_or_many_to_zero_or_many = 988338;
var relation_zero_or_many_to_zero_or_one = 988339;
var relation_zero_or_one_to_many = 988340;
var relation_zero_or_one_to_one = 988341;
var relation_zero_or_one_to_one_or_many = 988342;
var relation_zero_or_one_to_only_one = 988343;
var relation_zero_or_one_to_zero_or_many = 988344;
var relation_zero_or_one_to_zero_or_one = 988345;
var relative_scale = 984146;
var reload = 984147;
var reload_alert = 987403;
var reminder = 985228;
var remote = 984148;
var remote_desktop = 985273;
var remote_off = 986820;
var remote_tv = 986821;
var remote_tv_off = 986822;
var rename_box = 984149;
var reorder_horizontal = 984712;
var reorder_vertical = 984713;
var repeat = 984150;
var repeat_off = 984151;
var repeat_once = 984152;
var replay = 984153;
var reply = 984154;
var reply_all = 984155;
var reply_all_outline = 986911;
var reply_circle = 987566;
var reply_outline = 986912;
var reproduction = 984156;
var resistor = 985924;
var resistor_nodes = 985925;
var resize = 985704;
var resize_bottom_right = 984157;
var responsive = 984158;
var restart = 984841;
var restart_alert = 987404;
var restart_off = 986517;
var restore = 985499;
var restore_alert = 987405;
var rewind = 984159;
var rewind_10 = 986410;
var rewind_30 = 986518;
var rewind_5 = 987641;
var rewind_outline = 984842;
var rhombus = 984843;
var rhombus_medium = 985616;
var rhombus_medium_outline = 988380;
var rhombus_outline = 984844;
var rhombus_split = 985617;
var rhombus_split_outline = 988381;
var ribbon = 984160;
var rice = 985066;
var ring = 985067;
var rivet = 986720;
var road = 984161;
var road_variant = 984162;
var robber = 987224;
var robot = 984745;
var robot_industrial = 985926;
var robot_mower = 987639;
var robot_mower_outline = 987635;
var robot_vacuum = 984845;
var robot_vacuum_variant = 985352;
var rocket = 984163;
var rocket_launch = 988382;
var rocket_launch_outline = 988383;
var rocket_outline = 988079;
var rodent = 987943;
var roller_skate = 986411;
var roller_skate_off = 983365;
var rollerblade = 986412;
var rollerblade_off = 983086;
var rollupjs = 986048;
var roman_numeral_1 = 987272;
var roman_numeral_10 = 987281;
var roman_numeral_2 = 987273;
var roman_numeral_3 = 987274;
var roman_numeral_4 = 987275;
var roman_numeral_5 = 987276;
var roman_numeral_6 = 987277;
var roman_numeral_7 = 987278;
var roman_numeral_8 = 987279;
var roman_numeral_9 = 987280;
var room_service = 985229;
var room_service_outline = 986519;
var rotate_3d = 986823;
var rotate_3d_variant = 984164;
var rotate_left = 984165;
var rotate_left_variant = 984166;
var rotate_orbit = 986520;
var rotate_right = 984167;
var rotate_right_variant = 984168;
var rounded_corner = 984583;
var router = 987618;
var router_network = 987271;
var router_wireless = 984169;
var router_wireless_settings = 985705;
var routes = 984170;
var routes_clock = 987225;
var rowing = 984584;
var rss = 984171;
var rss_box = 984172;
var rss_off = 986913;
var rug = 988277;
var rugby = 986521;
var ruler = 984173;
var ruler_square = 986306;
var ruler_square_compass = 986814;
var run = 984846;
var run_fast = 984174;
var rv_truck = 987604;
var sack = 986414;
var sack_percent = 986415;
var safe = 985706;
var safe_square = 987772;
var safe_square_outline = 987773;
var safety_goggles = 986416;
var sail_boat = 986824;
var sale = 984175;
var salesforce = 985230;
var sass = 985068;
var satellite = 984176;
var satellite_uplink = 985353;
var satellite_variant = 984177;
var sausage = 985274;
var saw_blade = 986721;
var sawtooth_wave = 988282;
var saxophone = 984585;
var scale = 984178;
var scale_balance = 984529;
var scale_bathroom = 984179;
var scale_off = 987226;
var scan_helper = 988120;
var scanner = 984747;
var scanner_off = 985354;
var scatter_plot = 986825;
var scatter_plot_outline = 986826;
var school = 984180;
var school_outline = 987520;
var scissors_cutting = 985707;
var scooter = 987625;
var scoreboard = 987774;
var scoreboard_outline = 987775;
var screen_rotation = 984181;
var screen_rotation_lock = 984184;
var screw_flat_top = 986611;
var screw_lag = 986612;
var screw_machine_flat_top = 986613;
var screw_machine_round_top = 986614;
var screw_round_top = 986615;
var screwdriver = 984182;
var script = 986049;
var script_outline = 984183;
var script_text = 986050;
var script_text_outline = 986051;
var sd = 984185;
var seal = 984186;
var seal_variant = 987097;
var search_web = 984847;
var seat = 986307;
var seat_flat = 984187;
var seat_flat_angled = 984188;
var seat_individual_suite = 984189;
var seat_legroom_extra = 984190;
var seat_legroom_normal = 984191;
var seat_legroom_reduced = 984192;
var seat_outline = 986308;
var seat_passenger = 987721;
var seat_recline_extra = 984193;
var seat_recline_normal = 984194;
var seatbelt = 986309;
var security = 984195;
var security_network = 984196;
var seed = 986722;
var seed_off = 988157;
var seed_off_outline = 988158;
var seed_outline = 986723;
var segment = 986827;
var select2 = 984197;
var select_all = 984198;
var select_color = 986417;
var select_compare = 985817;
var select_drag = 985708;
var select_group = 987010;
var select_inverse = 984199;
var select_marker = 987776;
var select_multiple = 987777;
var select_multiple_marker = 987778;
var select_off = 984200;
var select_place = 987098;
var select_search = 987652;
var selection = 984201;
var selection_drag = 985709;
var selection_ellipse = 986418;
var selection_ellipse_arrow_inside = 986914;
var selection_marker = 987779;
var selection_multiple = 987781;
var selection_multiple_marker = 987780;
var selection_off = 984951;
var selection_search = 987653;
var semantic_web = 987926;
var send = 984202;
var send_check = 987489;
var send_check_outline = 987490;
var send_circle = 986616;
var send_circle_outline = 986617;
var send_clock = 987491;
var send_clock_outline = 987492;
var send_lock = 985069;
var send_lock_outline = 987494;
var send_outline = 987493;
var serial_port = 984668;
var server = 984203;
var server_minus = 984204;
var server_network = 984205;
var server_network_off = 984206;
var server_off = 984207;
var server_plus = 984208;
var server_remove = 984209;
var server_security = 984210;
var set_all = 984952;
var set_center = 984953;
var set_center_right = 984954;
var set_left = 984955;
var set_left_center = 984956;
var set_left_right = 984957;
var set_merge = 988384;
var set_none = 984958;
var set_right = 984959;
var set_split = 988385;
var set_square = 988253;
var set_top_box = 985503;
var settings_helper = 985710;
var shaker = 987406;
var shaker_outline = 987407;
var shape = 985137;
var shape_circle_plus = 984669;
var shape_outline = 985138;
var shape_oval_plus = 987642;
var shape_plus = 984213;
var shape_polygon_plus = 984670;
var shape_rectangle_plus = 984671;
var shape_square_plus = 984672;
var share = 984214;
var share_all = 987636;
var share_all_outline = 987637;
var share_circle = 987565;
var share_off = 986915;
var share_off_outline = 986916;
var share_outline = 985394;
var share_variant = 984215;
var sheep = 986310;
var shield = 984216;
var shield_account = 985231;
var shield_account_outline = 985618;
var shield_airplane = 984763;
var shield_airplane_outline = 986311;
var shield_alert = 986828;
var shield_alert_outline = 986829;
var shield_bug = 988122;
var shield_bug_outline = 988123;
var shield_car = 987011;
var shield_check = 984421;
var shield_check_outline = 986312;
var shield_cross = 986313;
var shield_cross_outline = 986314;
var shield_edit = 987552;
var shield_edit_outline = 987553;
var shield_half = 988e3;
var shield_half_full = 984960;
var shield_home = 984714;
var shield_home_outline = 986315;
var shield_key = 986052;
var shield_key_outline = 986053;
var shield_link_variant = 986419;
var shield_link_variant_outline = 986420;
var shield_lock = 985501;
var shield_lock_outline = 986316;
var shield_off = 985502;
var shield_off_outline = 985500;
var shield_outline = 984217;
var shield_plus = 985818;
var shield_plus_outline = 985819;
var shield_refresh = 983210;
var shield_refresh_outline = 983520;
var shield_remove = 985820;
var shield_remove_outline = 985821;
var shield_search = 986522;
var shield_star = 987451;
var shield_star_outline = 987452;
var shield_sun = 987229;
var shield_sun_outline = 987230;
var shield_sync = 987554;
var shield_sync_outline = 987555;
var ship_wheel = 985139;
var shoe_formal = 985927;
var shoe_heel = 985928;
var shoe_print = 986618;
var shopping = 984218;
var shopping_music = 984219;
var shopping_outline = 987605;
var shopping_search = 987012;
var shovel = 984848;
var shovel_off = 984849;
var shower = 985504;
var shower_head = 985505;
var shredder = 984220;
var shuffle = 984221;
var shuffle_disabled = 984222;
var shuffle_variant = 984223;
var shuriken = 988031;
var sigma = 984224;
var sigma_lower = 984619;
var sign_caution = 984225;
var sign_direction = 984961;
var sign_direction_minus = 987136;
var sign_direction_plus = 987100;
var sign_direction_remove = 987101;
var sign_real_estate = 987416;
var sign_text = 984962;
var signal = 984226;
var signal_2g = 984850;
var signal_3g = 984851;
var signal_4g = 984852;
var signal_5g = 985711;
var signal_cellular_1 = 985276;
var signal_cellular_2 = 985277;
var signal_cellular_3 = 985278;
var signal_cellular_outline = 985279;
var signal_distance_variant = 986724;
var signal_hspa = 984853;
var signal_hspa_plus = 984854;
var signal_off = 984963;
var signal_variant = 984586;
var signature = 986619;
var signature_freehand = 986620;
var signature_image = 986621;
var signature_text = 986622;
var silo = 985929;
var silverware = 984227;
var silverware_clean = 987102;
var silverware_fork = 984228;
var silverware_fork_knife = 985712;
var silverware_spoon = 984229;
var silverware_variant = 984230;
var sim = 984231;
var sim_alert = 984232;
var sim_off = 984233;
var simple_icons = 987933;
var sina_weibo = 985823;
var sine_wave = 985435;
var sitemap = 984234;
var size_l = 988070;
var size_m = 988069;
var size_s = 988068;
var size_xl = 988071;
var size_xs = 988067;
var size_xxl = 988072;
var size_xxs = 988066;
var size_xxxl = 988073;
var skate = 986421;
var skateboard = 988354;
var skew_less = 986422;
var skew_more = 986423;
var ski = 987908;
var ski_cross_country = 987909;
var ski_water = 987910;
var skip_backward = 984235;
var skip_backward_outline = 986917;
var skip_forward = 984236;
var skip_forward_outline = 986918;
var skip_next = 984237;
var skip_next_circle = 984673;
var skip_next_circle_outline = 984674;
var skip_next_outline = 986919;
var skip_previous = 984238;
var skip_previous_circle = 984675;
var skip_previous_circle_outline = 984676;
var skip_previous_outline = 986920;
var skull = 984716;
var skull_crossbones = 986054;
var skull_crossbones_outline = 986055;
var skull_outline = 986056;
var skull_scan = 988359;
var skull_scan_outline = 988360;
var skype = 984239;
var skype_business = 984240;
var slack = 984241;
var slash_forward = 987103;
var slash_forward_box = 987104;
var sleep = 984242;
var sleep_off = 984243;
var slope_downhill = 986623;
var slope_uphill = 986624;
var slot_machine = 987412;
var slot_machine_outline = 987413;
var smart_card = 987325;
var smart_card_outline = 987326;
var smart_card_reader = 987327;
var smart_card_reader_outline = 987328;
var smog = 985713;
var smoke_detector = 983954;
var smoking = 984244;
var smoking_off = 984245;
var smoking_pipe = 988173;
var smoking_pipe_off = 988200;
var snapchat = 984246;
var snowboard = 987911;
var snowflake = 984855;
var snowflake_alert = 986921;
var snowflake_melt = 987851;
var snowflake_variant = 986922;
var snowman = 984247;
var soccer = 984248;
var soccer_field = 985140;
var sofa = 984249;
var solar_panel = 986523;
var solar_panel_large = 986524;
var solar_power = 985714;
var soldering_iron = 987282;
var solid = 984717;
var sony_playstation = 984084;
var sort = 984250;
var sort_alphabetical_ascending = 984509;
var sort_alphabetical_ascending_variant = 987464;
var sort_alphabetical_descending = 984511;
var sort_alphabetical_descending_variant = 987465;
var sort_alphabetical_variant = 984251;
var sort_ascending = 984252;
var sort_bool_ascending = 988037;
var sort_bool_ascending_variant = 988038;
var sort_bool_descending = 988039;
var sort_bool_descending_variant = 988040;
var sort_descending = 984253;
var sort_numeric_ascending = 988041;
var sort_numeric_ascending_variant = 985357;
var sort_numeric_descending = 988042;
var sort_numeric_descending_variant = 985810;
var sort_numeric_variant = 984254;
var sort_reverse_variant = 983868;
var sort_variant = 984255;
var sort_variant_lock = 986317;
var sort_variant_lock_open = 986318;
var sort_variant_remove = 987463;
var soundcloud = 984256;
var source_branch = 984620;
var source_branch_check = 988367;
var source_branch_minus = 988363;
var source_branch_plus = 988362;
var source_branch_refresh = 988365;
var source_branch_remove = 988364;
var source_branch_sync = 988366;
var source_commit = 984856;
var source_commit_end = 984857;
var source_commit_end_local = 984858;
var source_commit_local = 984859;
var source_commit_next_local = 984860;
var source_commit_start = 984861;
var source_commit_start_next_local = 984862;
var source_fork = 984257;
var source_merge = 984621;
var source_pull = 984258;
var source_repository = 986319;
var source_repository_multiple = 986320;
var soy_sauce = 985070;
var soy_sauce_off = 988156;
var spa = 986321;
var spa_outline = 986322;
var space_invaders = 986057;
var space_station = 988035;
var spade = 986725;
var speaker = 984259;
var speaker_bluetooth = 985506;
var speaker_multiple = 986424;
var speaker_off = 984260;
var speaker_wireless = 984863;
var speedometer = 984261;
var speedometer_medium = 987013;
var speedometer_slow = 987014;
var spellcheck = 984262;
var spider = 987626;
var spider_thread = 987627;
var spider_web = 986058;
var spoon_sugar = 988201;
var spotify = 984263;
var spotlight = 984264;
var spotlight_beam = 984265;
var spray = 984677;
var spray_bottle = 985824;
var sprinkler = 987231;
var sprinkler_variant = 987232;
var sprout = 986726;
var sprout_outline = 986727;
var square = 984932;
var square_edit_outline = 985356;
var square_medium = 985619;
var square_medium_outline = 985620;
var square_off = 987886;
var square_off_outline = 987887;
var square_outline = 984931;
var square_root = 984964;
var square_root_box = 985507;
var square_small = 985621;
var square_wave = 988283;
var squeegee = 985825;
var ssh = 985280;
var stack_exchange = 984587;
var stack_overflow = 984268;
var stackpath = 983897;
var stadium = 987129;
var stadium_variant = 984864;
var stairs = 984269;
var stairs_box = 988062;
var stairs_down = 987838;
var stairs_up = 987837;
var stamper = 986425;
var standard_definition = 985071;
var star = 984270;
var star_box = 985715;
var star_box_multiple = 987782;
var star_box_multiple_outline = 987783;
var star_box_outline = 985716;
var star_circle = 984271;
var star_circle_outline = 985508;
var star_face = 985509;
var star_four_points = 985826;
var star_four_points_outline = 985827;
var star_half = 983622;
var star_half_full = 984272;
var star_off = 984273;
var star_outline = 984274;
var star_three_points = 985828;
var star_three_points_outline = 985829;
var state_machine = 987631;
var steam = 984275;
var steering = 984276;
var steering_off = 985358;
var step_backward = 984277;
var step_backward_2 = 984278;
var step_forward = 984279;
var step_forward_2 = 984280;
var stethoscope = 984281;
var sticker = 988004;
var sticker_alert = 988005;
var sticker_alert_outline = 988006;
var sticker_check = 988007;
var sticker_check_outline = 988008;
var sticker_circle_outline = 984528;
var sticker_emoji = 984965;
var sticker_minus = 988009;
var sticker_minus_outline = 988010;
var sticker_outline = 988011;
var sticker_plus = 988012;
var sticker_plus_outline = 988013;
var sticker_remove = 988014;
var sticker_remove_outline = 988015;
var stocking = 984282;
var stomach = 987283;
var stop = 984283;
var stop_circle = 984678;
var stop_circle_outline = 984679;
var store = 984284;
var store_24_hour = 984285;
var store_outline = 988001;
var storefront = 985031;
var storefront_outline = 987329;
var stove = 984286;
var strategy = 987606;
var stretch_to_page = 986923;
var stretch_to_page_outline = 986924;
var string_lights = 987834;
var string_lights_off = 987835;
var subdirectory_arrow_left = 984588;
var subdirectory_arrow_right = 984589;
var subtitles = 985622;
var subtitles_outline = 985623;
var subway = 984748;
var subway_alert_variant = 986525;
var subway_variant = 984287;
var summit = 984966;
var sunglasses = 984288;
var surround_sound = 984517;
var surround_sound_2_0 = 985072;
var surround_sound_3_1 = 985073;
var surround_sound_5_1 = 985074;
var surround_sound_7_1 = 985075;
var svg = 984865;
var swap_horizontal = 984289;
var swap_horizontal_bold = 986061;
var swap_horizontal_circle = 987105;
var swap_horizontal_circle_outline = 987106;
var swap_horizontal_variant = 985281;
var swap_vertical = 984290;
var swap_vertical_bold = 986062;
var swap_vertical_circle = 987107;
var swap_vertical_circle_outline = 987108;
var swap_vertical_variant = 985282;
var swim = 984291;
var switch2 = 984292;
var sword = 984293;
var sword_cross = 984967;
var syllabary_hangul = 987955;
var syllabary_hiragana = 987956;
var syllabary_katakana = 987957;
var syllabary_katakana_halfwidth = 987958;
var symfony = 985830;
var sync = 984294;
var sync_alert = 984295;
var sync_circle = 988024;
var sync_off = 984296;
var tab = 984297;
var tab_minus = 985931;
var tab_plus = 984924;
var tab_remove = 985932;
var tab_unselected = 984298;
var table = 984299;
var table_account = 988089;
var table_alert = 988090;
var table_arrow_down = 988091;
var table_arrow_left = 988092;
var table_arrow_right = 988093;
var table_arrow_up = 988094;
var table_border = 985624;
var table_cancel = 988095;
var table_chair = 987233;
var table_check = 988096;
var table_clock = 988097;
var table_cog = 988098;
var table_column = 985141;
var table_column_plus_after = 984300;
var table_column_plus_before = 984301;
var table_column_remove = 984302;
var table_column_width = 984303;
var table_edit = 984304;
var table_eye = 987284;
var table_eye_off = 988099;
var table_furniture = 984508;
var table_headers_eye = 987677;
var table_headers_eye_off = 987678;
var table_heart = 988100;
var table_key = 988101;
var table_large = 984305;
var table_large_plus = 987015;
var table_large_remove = 987016;
var table_lock = 988102;
var table_merge_cells = 985510;
var table_minus = 988103;
var table_multiple = 988104;
var table_network = 988105;
var table_of_contents = 985142;
var table_off = 988106;
var table_plus = 985717;
var table_refresh = 988064;
var table_remove = 985718;
var table_row = 985143;
var table_row_height = 984306;
var table_row_plus_after = 984307;
var table_row_plus_before = 984308;
var table_row_remove = 984309;
var table_search = 985359;
var table_settings = 985144;
var table_split_cell = 988202;
var table_star = 988107;
var table_sync = 988065;
var table_tennis = 986728;
var tablet = 984310;
var tablet_android = 984311;
var tablet_cellphone = 985511;
var tablet_dashboard = 986830;
var tablet_ipad = 984312;
var taco = 984930;
var tag = 984313;
var tag_faces = 984314;
var tag_heart = 984715;
var tag_heart_outline = 986063;
var tag_minus = 985360;
var tag_minus_outline = 987679;
var tag_multiple = 984315;
var tag_multiple_outline = 987895;
var tag_off = 987680;
var tag_off_outline = 987681;
var tag_outline = 984316;
var tag_plus = 984866;
var tag_plus_outline = 987682;
var tag_remove = 984867;
var tag_remove_outline = 987683;
var tag_text = 987684;
var tag_text_outline = 984317;
var tailwind = 988159;
var tank = 986426;
var tanker_truck = 987109;
var tape_measure = 985933;
var target = 984318;
var target_account = 986064;
var target_variant = 985719;
var taxi = 984319;
var tea = 986526;
var tea_outline = 986527;
var teach = 985232;
var teamviewer = 984320;
var telegram = 984321;
var telescope = 985934;
var television = 984322;
var television_ambient_light = 987990;
var television_box = 985145;
var television_classic = 985076;
var television_classic_off = 985146;
var television_clean = 987408;
var television_guide = 984323;
var television_off = 985147;
var television_pause = 987017;
var television_play = 986831;
var television_stop = 987018;
var temperature_celsius = 984324;
var temperature_fahrenheit = 984325;
var temperature_kelvin = 984326;
var tennis = 986528;
var tennis_ball = 984327;
var tent = 984328;
var terraform = 987234;
var terrain = 984329;
var test_tube = 984680;
var test_tube_empty = 985361;
var test_tube_off = 985362;
var text = 985512;
var text_box = 983578;
var text_box_check = 986790;
var text_box_check_outline = 986791;
var text_box_minus = 986792;
var text_box_minus_outline = 986793;
var text_box_multiple = 985783;
var text_box_multiple_outline = 985784;
var text_box_outline = 985581;
var text_box_plus = 986794;
var text_box_plus_outline = 986795;
var text_box_remove = 986796;
var text_box_remove_outline = 986797;
var text_box_search = 986798;
var text_box_search_outline = 986799;
var text_recognition = 987453;
var text_search = 988088;
var text_shadow = 984681;
var text_short = 985513;
var text_subject = 985514;
var text_to_speech = 984330;
var text_to_speech_off = 984331;
var texture = 984332;
var texture_box = 987110;
var theater = 984333;
var theme_light_dark = 984334;
var thermometer = 984335;
var thermometer_alert = 986625;
var thermometer_chevron_down = 986626;
var thermometer_chevron_up = 986627;
var thermometer_high = 987330;
var thermometer_lines = 984336;
var thermometer_low = 987331;
var thermometer_minus = 986628;
var thermometer_plus = 986629;
var thermostat = 983955;
var thermostat_box = 985233;
var thought_bubble = 985078;
var thought_bubble_outline = 985079;
var thumb_down = 984337;
var thumb_down_outline = 984338;
var thumb_up = 984339;
var thumb_up_outline = 984340;
var thumbs_up_down = 984341;
var ticket = 984342;
var ticket_account = 984343;
var ticket_confirmation = 984344;
var ticket_confirmation_outline = 988074;
var ticket_outline = 985363;
var ticket_percent = 984868;
var ticket_percent_outline = 988203;
var tie = 984345;
var tilde = 984869;
var timelapse = 984346;
var timeline = 986065;
var timeline_alert = 987029;
var timeline_alert_outline = 987032;
var timeline_clock = 987643;
var timeline_clock_outline = 987644;
var timeline_help = 987033;
var timeline_help_outline = 987034;
var timeline_outline = 986066;
var timeline_plus = 987030;
var timeline_plus_outline = 987031;
var timeline_text = 986067;
var timeline_text_outline = 986068;
var timer = 988075;
var timer_10 = 984348;
var timer_3 = 984349;
var timer_off = 988076;
var timer_off_outline = 984350;
var timer_outline = 984347;
var timer_sand = 984351;
var timer_sand_empty = 984749;
var timer_sand_full = 984972;
var timetable = 984352;
var toaster = 987235;
var toaster_off = 987575;
var toaster_oven = 986323;
var toggle_switch = 984353;
var toggle_switch_off = 984354;
var toggle_switch_off_outline = 985625;
var toggle_switch_outline = 985626;
var toilet = 985515;
var toolbox = 985516;
var toolbox_outline = 985517;
var tools = 987236;
var tooltip = 984355;
var tooltip_account = 983052;
var tooltip_edit = 984356;
var tooltip_edit_outline = 987845;
var tooltip_image = 984357;
var tooltip_image_outline = 986069;
var tooltip_outline = 984358;
var tooltip_plus = 986070;
var tooltip_plus_outline = 984359;
var tooltip_text = 984360;
var tooltip_text_outline = 986071;
var tooth = 985283;
var tooth_outline = 984361;
var toothbrush = 987433;
var toothbrush_electric = 987436;
var toothbrush_paste = 987434;
var tortoise = 986427;
var toslink = 987832;
var tournament = 985518;
var tow_truck = 985148;
var tower_beach = 984705;
var tower_fire = 984706;
var toy_brick = 987784;
var toy_brick_marker = 987785;
var toy_brick_marker_outline = 987786;
var toy_brick_minus = 987787;
var toy_brick_minus_outline = 987788;
var toy_brick_outline = 987789;
var toy_brick_plus = 987790;
var toy_brick_plus_outline = 987791;
var toy_brick_remove = 987792;
var toy_brick_remove_outline = 987793;
var toy_brick_search = 987794;
var toy_brick_search_outline = 987795;
var track_light = 985364;
var trackpad = 985080;
var trackpad_lock = 985395;
var tractor = 985234;
var tractor_variant = 988356;
var trademark = 985720;
var traffic_cone = 988028;
var traffic_light = 984363;
var train = 984364;
var train_car = 986072;
var train_variant = 985284;
var tram = 984365;
var tram_side = 987111;
var transcribe = 984366;
var transcribe_close = 984367;
var transfer = 987237;
var transfer_down = 986529;
var transfer_left = 986530;
var transfer_right = 984368;
var transfer_up = 986531;
var transit_connection = 986428;
var transit_connection_variant = 986429;
var transit_detour = 987019;
var transit_transfer = 984750;
var transition2 = 985365;
var transition_masked = 985366;
var translate = 984522;
var translate_off = 986630;
var transmission_tower = 986430;
var trash_can = 985721;
var trash_can_outline = 985722;
var tray = 987796;
var tray_alert = 987797;
var tray_full = 987798;
var tray_minus = 987799;
var tray_plus = 987800;
var tray_remove = 987801;
var treasure_chest = 984870;
var tree = 984369;
var tree_outline = 986729;
var trello = 984370;
var trending_down = 984371;
var trending_neutral = 984372;
var trending_up = 984373;
var triangle = 984374;
var triangle_outline = 984375;
var triangle_wave = 988284;
var triforce = 986073;
var trophy = 984376;
var trophy_award = 984377;
var trophy_broken = 986532;
var trophy_outline = 984378;
var trophy_variant = 984379;
var trophy_variant_outline = 984380;
var truck = 984381;
var truck_check = 986324;
var truck_check_outline = 987802;
var truck_delivery = 984382;
var truck_delivery_outline = 987803;
var truck_fast = 984968;
var truck_fast_outline = 987804;
var truck_outline = 987805;
var truck_trailer = 984871;
var trumpet = 987286;
var tshirt_crew = 985723;
var tshirt_crew_outline = 984383;
var tshirt_v = 985724;
var tshirt_v_outline = 984384;
var tumble_dryer = 985367;
var tumble_dryer_alert = 987578;
var tumble_dryer_off = 987579;
var tune = 984622;
var tune_vertical = 984682;
var turnstile = 986325;
var turnstile_outline = 986326;
var turtle = 986327;
var twitch = 984387;
var twitter = 984388;
var twitter_retweet = 984391;
var two_factor_authentication = 985519;
var typewriter = 986925;
var ubisoft = 986074;
var ubuntu = 984392;
var ufo = 987332;
var ufo_outline = 987333;
var ultra_high_definition = 985081;
var umbraco = 984393;
var umbrella = 984394;
var umbrella_closed = 985520;
var umbrella_closed_outline = 988130;
var umbrella_closed_variant = 988129;
var umbrella_outline = 984395;
var undo = 984396;
var undo_variant = 984397;
var unfold_less_horizontal = 984398;
var unfold_less_vertical = 984928;
var unfold_more_horizontal = 984399;
var unfold_more_vertical = 984929;
var ungroup = 984400;
var unicode = 986832;
var unity = 984751;
var unreal = 985521;
var untappd = 984401;
var update = 984752;
var upload = 984402;
var upload_lock = 988019;
var upload_lock_outline = 988020;
var upload_multiple = 985149;
var upload_network = 984822;
var upload_network_outline = 986328;
var upload_off = 987334;
var upload_off_outline = 987335;
var upload_outline = 986631;
var usb = 984403;
var usb_flash_drive = 987806;
var usb_flash_drive_outline = 987807;
var usb_port = 987632;
var valve = 987238;
var valve_closed = 987239;
var valve_open = 987240;
var van_passenger = 985082;
var van_utility = 985083;
var vanish = 985084;
var vanity_light = 987617;
var variable = 985831;
var variable_box = 987409;
var vector_arrange_above = 984404;
var vector_arrange_below = 984405;
var vector_bezier = 985832;
var vector_circle = 984406;
var vector_circle_variant = 984407;
var vector_combine = 984408;
var vector_curve = 984409;
var vector_difference = 984410;
var vector_difference_ab = 984411;
var vector_difference_ba = 984412;
var vector_ellipse = 985235;
var vector_intersection = 984413;
var vector_line = 984414;
var vector_link = 987112;
var vector_point = 984415;
var vector_polygon = 984416;
var vector_polyline = 984417;
var vector_polyline_edit = 987685;
var vector_polyline_minus = 987686;
var vector_polyline_plus = 987687;
var vector_polyline_remove = 987688;
var vector_radius = 984906;
var vector_rectangle = 984518;
var vector_selection = 984418;
var vector_square = 983041;
var vector_triangle = 984419;
var vector_union = 984420;
var vhs = 985627;
var vibrate = 984422;
var vibrate_off = 986329;
var video = 984423;
var video_3d = 985085;
var video_3d_off = 988121;
var video_3d_variant = 986833;
var video_4k_box = 985150;
var video_account = 985369;
var video_box = 983293;
var video_box_off = 983294;
var video_check = 987241;
var video_check_outline = 987242;
var video_image = 985370;
var video_input_antenna = 985151;
var video_input_component = 985152;
var video_input_hdmi = 985153;
var video_input_scart = 987020;
var video_input_svideo = 985154;
var video_minus = 985522;
var video_minus_outline = 983738;
var video_off = 984424;
var video_off_outline = 986075;
var video_outline = 986076;
var video_plus = 985523;
var video_plus_outline = 983507;
var video_stabilization = 985371;
var video_switch = 984425;
var video_switch_outline = 984976;
var video_vintage = 985628;
var video_wireless = 986834;
var video_wireless_outline = 986835;
var view_agenda = 984426;
var view_agenda_outline = 987608;
var view_array = 984427;
var view_array_outline = 988293;
var view_carousel = 984428;
var view_carousel_outline = 988294;
var view_column = 984429;
var view_column_outline = 988295;
var view_comfy = 986730;
var view_comfy_outline = 988296;
var view_compact = 986731;
var view_compact_outline = 986732;
var view_dashboard = 984430;
var view_dashboard_outline = 985629;
var view_dashboard_variant = 985155;
var view_dashboard_variant_outline = 988297;
var view_day = 984431;
var view_day_outline = 988298;
var view_grid = 984432;
var view_grid_outline = 987609;
var view_grid_plus = 987021;
var view_grid_plus_outline = 987610;
var view_headline = 984433;
var view_list = 984434;
var view_list_outline = 988299;
var view_module = 984435;
var view_module_outline = 988300;
var view_parallel = 984872;
var view_parallel_outline = 988301;
var view_quilt = 984436;
var view_quilt_outline = 988302;
var view_sequential = 984873;
var view_sequential_outline = 988303;
var view_split_horizontal = 986059;
var view_split_vertical = 986060;
var view_stream = 984437;
var view_stream_outline = 988304;
var view_week = 984438;
var view_week_outline = 988305;
var vimeo = 984439;
var violin = 984591;
var virtual_reality = 985236;
var virus = 988086;
var virus_outline = 988087;
var vk = 984441;
var vlc = 984444;
var voice_off = 986836;
var voicemail = 984445;
var volleyball = 985524;
var volume_high = 984446;
var volume_low = 984447;
var volume_medium = 984448;
var volume_minus = 984926;
var volume_mute = 984927;
var volume_off = 984449;
var volume_plus = 984925;
var volume_source = 987424;
var volume_variant_off = 986632;
var volume_vibrate = 987425;
var vote = 985631;
var vote_outline = 985632;
var vpn = 984450;
var vuejs = 985156;
var vuetify = 986733;
var walk = 984451;
var wall = 985086;
var wall_sconce = 985372;
var wall_sconce_flat = 985373;
var wall_sconce_flat_variant = 984092;
var wall_sconce_round = 984904;
var wall_sconce_round_variant = 985374;
var wallet = 984452;
var wallet_giftcard = 984453;
var wallet_membership = 984454;
var wallet_outline = 986077;
var wallet_plus = 987022;
var wallet_plus_outline = 987023;
var wallet_travel = 984455;
var wallpaper = 986633;
var wan = 984456;
var wardrobe = 987024;
var wardrobe_outline = 987025;
var warehouse = 987009;
var washing_machine = 984874;
var washing_machine_alert = 987580;
var washing_machine_off = 987581;
var watch = 984457;
var watch_export = 984458;
var watch_export_variant = 985237;
var watch_import = 984459;
var watch_import_variant = 985238;
var watch_variant = 985239;
var watch_vibrate = 984753;
var watch_vibrate_off = 986330;
var water = 984460;
var water_boiler = 987026;
var water_boiler_alert = 987571;
var water_boiler_off = 987572;
var water_off = 984461;
var water_outline = 986634;
var water_percent = 984462;
var water_polo = 987808;
var water_pump = 984463;
var water_pump_off = 987027;
var water_well = 987243;
var water_well_outline = 987244;
var watering_can = 988289;
var watering_can_outline = 988290;
var watermark = 984594;
var wave = 986926;
var waveform = 988285;
var waves = 984973;
var waze = 986078;
var weather_cloudy = 984464;
var weather_cloudy_alert = 986927;
var weather_cloudy_arrow_right = 986734;
var weather_fog = 984465;
var weather_hail = 984466;
var weather_hazy = 986928;
var weather_hurricane = 985240;
var weather_lightning = 984467;
var weather_lightning_rainy = 984702;
var weather_night = 984468;
var weather_night_partly_cloudy = 986929;
var weather_partly_cloudy = 984469;
var weather_partly_lightning = 986930;
var weather_partly_rainy = 986931;
var weather_partly_snowy = 986932;
var weather_partly_snowy_rainy = 986933;
var weather_pouring = 984470;
var weather_rainy = 984471;
var weather_snowy = 984472;
var weather_snowy_heavy = 986934;
var weather_snowy_rainy = 984703;
var weather_sunny = 984473;
var weather_sunny_alert = 986935;
var weather_sunset = 984474;
var weather_sunset_down = 984475;
var weather_sunset_up = 984476;
var weather_tornado = 986936;
var weather_windy = 984477;
var weather_windy_variant = 984478;
var web = 984479;
var web_box = 987028;
var web_clock = 987722;
var webcam = 984480;
var webhook = 984623;
var webpack = 984875;
var webrtc = 987720;
var wechat = 984593;
var weight = 984481;
var weight_gram = 986431;
var weight_kilogram = 984482;
var weight_lifter = 987485;
var weight_pound = 985525;
var whatsapp = 984483;
var wheelchair_accessibility = 984484;
var whistle = 985526;
var whistle_outline = 987836;
var white_balance_auto = 984485;
var white_balance_incandescent = 984486;
var white_balance_iridescent = 984487;
var white_balance_sunny = 984488;
var widgets = 984876;
var widgets_outline = 987989;
var wifi = 984489;
var wifi_off = 984490;
var wifi_star = 986635;
var wifi_strength_1 = 985375;
var wifi_strength_1_alert = 985376;
var wifi_strength_1_lock = 985377;
var wifi_strength_2 = 985378;
var wifi_strength_2_alert = 985379;
var wifi_strength_2_lock = 985380;
var wifi_strength_3 = 985381;
var wifi_strength_3_alert = 985382;
var wifi_strength_3_lock = 985383;
var wifi_strength_4 = 985384;
var wifi_strength_4_alert = 985385;
var wifi_strength_4_lock = 985386;
var wifi_strength_alert_outline = 985387;
var wifi_strength_lock_outline = 985388;
var wifi_strength_off = 985389;
var wifi_strength_off_outline = 985390;
var wifi_strength_outline = 985391;
var wikipedia = 984492;
var wind_turbine = 986533;
var window_close = 984493;
var window_closed = 984494;
var window_closed_variant = 987611;
var window_maximize = 984495;
var window_minimize = 984496;
var window_open = 984497;
var window_open_variant = 987612;
var window_restore = 984498;
var window_shutter = 987420;
var window_shutter_alert = 987421;
var window_shutter_open = 987422;
var wiper = 985833;
var wiper_wash = 986534;
var wizard_hat = 988279;
var wordpress = 984500;
var wrap = 984502;
var wrap_disabled = 986079;
var wrench = 984503;
var wrench_outline = 986080;
var xamarin = 985157;
var xamarin_outline = 985158;
var xing = 984510;
var xml = 984512;
var xmpp = 985087;
var y_combinator = 984612;
var yahoo = 985935;
var yeast = 984513;
var yin_yang = 984704;
var yoga = 987516;
var youtube = 984515;
var youtube_gaming = 985160;
var youtube_studio = 985159;
var youtube_subscription = 986432;
var youtube_tv = 984136;
var z_wave = 985834;
var zend = 985835;
var zigbee = 986433;
var zip_box = 984516;
var zip_box_outline = 987130;
var zip_disk = 985635;
var zodiac_aquarius = 985725;
var zodiac_aries = 985726;
var zodiac_cancer = 985727;
var zodiac_capricorn = 985728;
var zodiac_gemini = 985729;
var zodiac_leo = 985730;
var zodiac_libra = 985731;
var zodiac_pisces = 985732;
var zodiac_sagittarius = 985733;
var zodiac_scorpio = 985734;
var zodiac_taurus = 985735;
var zodiac_virgo = 985736;
var blank = 63116;
var MaterialCommunityIcons_default2 = {
  "ab-testing": ab_testing,
  "abjad-arabic": abjad_arabic,
  "abjad-hebrew": abjad_hebrew,
  "abugida-devanagari": abugida_devanagari,
  "abugida-thai": abugida_thai,
  "access-point": access_point,
  "access-point-network": access_point_network,
  "access-point-network-off": access_point_network_off,
  account,
  "account-alert": account_alert,
  "account-alert-outline": account_alert_outline,
  "account-arrow-left": account_arrow_left,
  "account-arrow-left-outline": account_arrow_left_outline,
  "account-arrow-right": account_arrow_right,
  "account-arrow-right-outline": account_arrow_right_outline,
  "account-box": account_box,
  "account-box-multiple": account_box_multiple,
  "account-box-multiple-outline": account_box_multiple_outline,
  "account-box-outline": account_box_outline,
  "account-cancel": account_cancel,
  "account-cancel-outline": account_cancel_outline,
  "account-cash": account_cash,
  "account-cash-outline": account_cash_outline,
  "account-check": account_check,
  "account-check-outline": account_check_outline,
  "account-child": account_child,
  "account-child-circle": account_child_circle,
  "account-child-outline": account_child_outline,
  "account-circle": account_circle,
  "account-circle-outline": account_circle_outline,
  "account-clock": account_clock,
  "account-clock-outline": account_clock_outline,
  "account-cog": account_cog,
  "account-cog-outline": account_cog_outline,
  "account-convert": account_convert,
  "account-convert-outline": account_convert_outline,
  "account-cowboy-hat": account_cowboy_hat,
  "account-details": account_details,
  "account-details-outline": account_details_outline,
  "account-edit": account_edit,
  "account-edit-outline": account_edit_outline,
  "account-group": account_group,
  "account-group-outline": account_group_outline,
  "account-hard-hat": account_hard_hat,
  "account-heart": account_heart,
  "account-heart-outline": account_heart_outline,
  "account-key": account_key,
  "account-key-outline": account_key_outline,
  "account-lock": account_lock,
  "account-lock-outline": account_lock_outline,
  "account-minus": account_minus,
  "account-minus-outline": account_minus_outline,
  "account-multiple": account_multiple,
  "account-multiple-check": account_multiple_check,
  "account-multiple-check-outline": account_multiple_check_outline,
  "account-multiple-minus": account_multiple_minus,
  "account-multiple-minus-outline": account_multiple_minus_outline,
  "account-multiple-outline": account_multiple_outline,
  "account-multiple-plus": account_multiple_plus,
  "account-multiple-plus-outline": account_multiple_plus_outline,
  "account-multiple-remove": account_multiple_remove,
  "account-multiple-remove-outline": account_multiple_remove_outline,
  "account-music": account_music,
  "account-music-outline": account_music_outline,
  "account-network": account_network,
  "account-network-outline": account_network_outline,
  "account-off": account_off,
  "account-off-outline": account_off_outline,
  "account-outline": account_outline,
  "account-plus": account_plus,
  "account-plus-outline": account_plus_outline,
  "account-question": account_question,
  "account-question-outline": account_question_outline,
  "account-remove": account_remove,
  "account-remove-outline": account_remove_outline,
  "account-search": account_search,
  "account-search-outline": account_search_outline,
  "account-settings": account_settings,
  "account-settings-outline": account_settings_outline,
  "account-star": account_star,
  "account-star-outline": account_star_outline,
  "account-supervisor": account_supervisor,
  "account-supervisor-circle": account_supervisor_circle,
  "account-supervisor-outline": account_supervisor_outline,
  "account-switch": account_switch,
  "account-switch-outline": account_switch_outline,
  "account-tie": account_tie,
  "account-tie-outline": account_tie_outline,
  "account-tie-voice": account_tie_voice,
  "account-tie-voice-off": account_tie_voice_off,
  "account-tie-voice-off-outline": account_tie_voice_off_outline,
  "account-tie-voice-outline": account_tie_voice_outline,
  "account-voice": account_voice,
  adjust,
  adobe,
  "adobe-acrobat": adobe_acrobat,
  "air-conditioner": air_conditioner,
  "air-filter": air_filter,
  "air-horn": air_horn,
  "air-humidifier": air_humidifier,
  "air-humidifier-off": air_humidifier_off,
  "air-purifier": air_purifier,
  airbag,
  airballoon,
  "airballoon-outline": airballoon_outline,
  airplane,
  "airplane-landing": airplane_landing,
  "airplane-off": airplane_off,
  "airplane-takeoff": airplane_takeoff,
  airport,
  alarm,
  "alarm-bell": alarm_bell,
  "alarm-check": alarm_check,
  "alarm-light": alarm_light,
  "alarm-light-outline": alarm_light_outline,
  "alarm-multiple": alarm_multiple,
  "alarm-note": alarm_note,
  "alarm-note-off": alarm_note_off,
  "alarm-off": alarm_off,
  "alarm-plus": alarm_plus,
  "alarm-snooze": alarm_snooze,
  album,
  alert,
  "alert-box": alert_box,
  "alert-box-outline": alert_box_outline,
  "alert-circle": alert_circle,
  "alert-circle-check": alert_circle_check,
  "alert-circle-check-outline": alert_circle_check_outline,
  "alert-circle-outline": alert_circle_outline,
  "alert-decagram": alert_decagram,
  "alert-decagram-outline": alert_decagram_outline,
  "alert-minus": alert_minus,
  "alert-minus-outline": alert_minus_outline,
  "alert-octagon": alert_octagon,
  "alert-octagon-outline": alert_octagon_outline,
  "alert-octagram": alert_octagram,
  "alert-octagram-outline": alert_octagram_outline,
  "alert-outline": alert_outline,
  "alert-plus": alert_plus,
  "alert-plus-outline": alert_plus_outline,
  "alert-remove": alert_remove,
  "alert-remove-outline": alert_remove_outline,
  "alert-rhombus": alert_rhombus,
  "alert-rhombus-outline": alert_rhombus_outline,
  alien,
  "alien-outline": alien_outline,
  "align-horizontal-center": align_horizontal_center,
  "align-horizontal-left": align_horizontal_left,
  "align-horizontal-right": align_horizontal_right,
  "align-vertical-bottom": align_vertical_bottom,
  "align-vertical-center": align_vertical_center,
  "align-vertical-top": align_vertical_top,
  "all-inclusive": all_inclusive,
  allergy,
  alpha,
  "alpha-a": alpha_a,
  "alpha-a-box": alpha_a_box,
  "alpha-a-box-outline": alpha_a_box_outline,
  "alpha-a-circle": alpha_a_circle,
  "alpha-a-circle-outline": alpha_a_circle_outline,
  "alpha-b": alpha_b,
  "alpha-b-box": alpha_b_box,
  "alpha-b-box-outline": alpha_b_box_outline,
  "alpha-b-circle": alpha_b_circle,
  "alpha-b-circle-outline": alpha_b_circle_outline,
  "alpha-c": alpha_c,
  "alpha-c-box": alpha_c_box,
  "alpha-c-box-outline": alpha_c_box_outline,
  "alpha-c-circle": alpha_c_circle,
  "alpha-c-circle-outline": alpha_c_circle_outline,
  "alpha-d": alpha_d,
  "alpha-d-box": alpha_d_box,
  "alpha-d-box-outline": alpha_d_box_outline,
  "alpha-d-circle": alpha_d_circle,
  "alpha-d-circle-outline": alpha_d_circle_outline,
  "alpha-e": alpha_e,
  "alpha-e-box": alpha_e_box,
  "alpha-e-box-outline": alpha_e_box_outline,
  "alpha-e-circle": alpha_e_circle,
  "alpha-e-circle-outline": alpha_e_circle_outline,
  "alpha-f": alpha_f,
  "alpha-f-box": alpha_f_box,
  "alpha-f-box-outline": alpha_f_box_outline,
  "alpha-f-circle": alpha_f_circle,
  "alpha-f-circle-outline": alpha_f_circle_outline,
  "alpha-g": alpha_g,
  "alpha-g-box": alpha_g_box,
  "alpha-g-box-outline": alpha_g_box_outline,
  "alpha-g-circle": alpha_g_circle,
  "alpha-g-circle-outline": alpha_g_circle_outline,
  "alpha-h": alpha_h,
  "alpha-h-box": alpha_h_box,
  "alpha-h-box-outline": alpha_h_box_outline,
  "alpha-h-circle": alpha_h_circle,
  "alpha-h-circle-outline": alpha_h_circle_outline,
  "alpha-i": alpha_i,
  "alpha-i-box": alpha_i_box,
  "alpha-i-box-outline": alpha_i_box_outline,
  "alpha-i-circle": alpha_i_circle,
  "alpha-i-circle-outline": alpha_i_circle_outline,
  "alpha-j": alpha_j,
  "alpha-j-box": alpha_j_box,
  "alpha-j-box-outline": alpha_j_box_outline,
  "alpha-j-circle": alpha_j_circle,
  "alpha-j-circle-outline": alpha_j_circle_outline,
  "alpha-k": alpha_k,
  "alpha-k-box": alpha_k_box,
  "alpha-k-box-outline": alpha_k_box_outline,
  "alpha-k-circle": alpha_k_circle,
  "alpha-k-circle-outline": alpha_k_circle_outline,
  "alpha-l": alpha_l,
  "alpha-l-box": alpha_l_box,
  "alpha-l-box-outline": alpha_l_box_outline,
  "alpha-l-circle": alpha_l_circle,
  "alpha-l-circle-outline": alpha_l_circle_outline,
  "alpha-m": alpha_m,
  "alpha-m-box": alpha_m_box,
  "alpha-m-box-outline": alpha_m_box_outline,
  "alpha-m-circle": alpha_m_circle,
  "alpha-m-circle-outline": alpha_m_circle_outline,
  "alpha-n": alpha_n,
  "alpha-n-box": alpha_n_box,
  "alpha-n-box-outline": alpha_n_box_outline,
  "alpha-n-circle": alpha_n_circle,
  "alpha-n-circle-outline": alpha_n_circle_outline,
  "alpha-o": alpha_o,
  "alpha-o-box": alpha_o_box,
  "alpha-o-box-outline": alpha_o_box_outline,
  "alpha-o-circle": alpha_o_circle,
  "alpha-o-circle-outline": alpha_o_circle_outline,
  "alpha-p": alpha_p,
  "alpha-p-box": alpha_p_box,
  "alpha-p-box-outline": alpha_p_box_outline,
  "alpha-p-circle": alpha_p_circle,
  "alpha-p-circle-outline": alpha_p_circle_outline,
  "alpha-q": alpha_q,
  "alpha-q-box": alpha_q_box,
  "alpha-q-box-outline": alpha_q_box_outline,
  "alpha-q-circle": alpha_q_circle,
  "alpha-q-circle-outline": alpha_q_circle_outline,
  "alpha-r": alpha_r,
  "alpha-r-box": alpha_r_box,
  "alpha-r-box-outline": alpha_r_box_outline,
  "alpha-r-circle": alpha_r_circle,
  "alpha-r-circle-outline": alpha_r_circle_outline,
  "alpha-s": alpha_s,
  "alpha-s-box": alpha_s_box,
  "alpha-s-box-outline": alpha_s_box_outline,
  "alpha-s-circle": alpha_s_circle,
  "alpha-s-circle-outline": alpha_s_circle_outline,
  "alpha-t": alpha_t,
  "alpha-t-box": alpha_t_box,
  "alpha-t-box-outline": alpha_t_box_outline,
  "alpha-t-circle": alpha_t_circle,
  "alpha-t-circle-outline": alpha_t_circle_outline,
  "alpha-u": alpha_u,
  "alpha-u-box": alpha_u_box,
  "alpha-u-box-outline": alpha_u_box_outline,
  "alpha-u-circle": alpha_u_circle,
  "alpha-u-circle-outline": alpha_u_circle_outline,
  "alpha-v": alpha_v,
  "alpha-v-box": alpha_v_box,
  "alpha-v-box-outline": alpha_v_box_outline,
  "alpha-v-circle": alpha_v_circle,
  "alpha-v-circle-outline": alpha_v_circle_outline,
  "alpha-w": alpha_w,
  "alpha-w-box": alpha_w_box,
  "alpha-w-box-outline": alpha_w_box_outline,
  "alpha-w-circle": alpha_w_circle,
  "alpha-w-circle-outline": alpha_w_circle_outline,
  "alpha-x": alpha_x,
  "alpha-x-box": alpha_x_box,
  "alpha-x-box-outline": alpha_x_box_outline,
  "alpha-x-circle": alpha_x_circle,
  "alpha-x-circle-outline": alpha_x_circle_outline,
  "alpha-y": alpha_y,
  "alpha-y-box": alpha_y_box,
  "alpha-y-box-outline": alpha_y_box_outline,
  "alpha-y-circle": alpha_y_circle,
  "alpha-y-circle-outline": alpha_y_circle_outline,
  "alpha-z": alpha_z,
  "alpha-z-box": alpha_z_box,
  "alpha-z-box-outline": alpha_z_box_outline,
  "alpha-z-circle": alpha_z_circle,
  "alpha-z-circle-outline": alpha_z_circle_outline,
  "alphabet-aurebesh": alphabet_aurebesh,
  "alphabet-cyrillic": alphabet_cyrillic,
  "alphabet-greek": alphabet_greek,
  "alphabet-latin": alphabet_latin,
  "alphabet-piqad": alphabet_piqad,
  "alphabet-tengwar": alphabet_tengwar,
  alphabetical,
  "alphabetical-off": alphabetical_off,
  "alphabetical-variant": alphabetical_variant,
  "alphabetical-variant-off": alphabetical_variant_off,
  altimeter,
  amazon,
  "amazon-alexa": amazon_alexa,
  ambulance,
  ammunition,
  ampersand,
  amplifier,
  "amplifier-off": amplifier_off,
  anchor,
  android,
  "android-auto": android_auto,
  "android-debug-bridge": android_debug_bridge,
  "android-messages": android_messages,
  "android-studio": android_studio,
  "angle-acute": angle_acute,
  "angle-obtuse": angle_obtuse,
  "angle-right": angle_right,
  angular,
  angularjs,
  animation,
  "animation-outline": animation_outline,
  "animation-play": animation_play,
  "animation-play-outline": animation_play_outline,
  ansible,
  antenna,
  anvil,
  "apache-kafka": apache_kafka,
  api,
  "api-off": api_off,
  apple,
  "apple-airplay": apple_airplay,
  "apple-finder": apple_finder,
  "apple-icloud": apple_icloud,
  "apple-ios": apple_ios,
  "apple-keyboard-caps": apple_keyboard_caps,
  "apple-keyboard-command": apple_keyboard_command,
  "apple-keyboard-control": apple_keyboard_control,
  "apple-keyboard-option": apple_keyboard_option,
  "apple-keyboard-shift": apple_keyboard_shift,
  "apple-safari": apple_safari,
  application,
  "application-export": application_export,
  "application-import": application_import,
  "approximately-equal": approximately_equal,
  "approximately-equal-box": approximately_equal_box,
  apps,
  "apps-box": apps_box,
  arch,
  archive,
  "archive-arrow-down": archive_arrow_down,
  "archive-arrow-down-outline": archive_arrow_down_outline,
  "archive-arrow-up": archive_arrow_up,
  "archive-arrow-up-outline": archive_arrow_up_outline,
  "archive-outline": archive_outline,
  "arm-flex": arm_flex,
  "arm-flex-outline": arm_flex_outline,
  "arrange-bring-forward": arrange_bring_forward,
  "arrange-bring-to-front": arrange_bring_to_front,
  "arrange-send-backward": arrange_send_backward,
  "arrange-send-to-back": arrange_send_to_back,
  "arrow-all": arrow_all,
  "arrow-bottom-left": arrow_bottom_left,
  "arrow-bottom-left-bold-outline": arrow_bottom_left_bold_outline,
  "arrow-bottom-left-thick": arrow_bottom_left_thick,
  "arrow-bottom-right": arrow_bottom_right,
  "arrow-bottom-right-bold-outline": arrow_bottom_right_bold_outline,
  "arrow-bottom-right-thick": arrow_bottom_right_thick,
  "arrow-collapse": arrow_collapse,
  "arrow-collapse-all": arrow_collapse_all,
  "arrow-collapse-down": arrow_collapse_down,
  "arrow-collapse-horizontal": arrow_collapse_horizontal,
  "arrow-collapse-left": arrow_collapse_left,
  "arrow-collapse-right": arrow_collapse_right,
  "arrow-collapse-up": arrow_collapse_up,
  "arrow-collapse-vertical": arrow_collapse_vertical,
  "arrow-decision": arrow_decision,
  "arrow-decision-auto": arrow_decision_auto,
  "arrow-decision-auto-outline": arrow_decision_auto_outline,
  "arrow-decision-outline": arrow_decision_outline,
  "arrow-down": arrow_down,
  "arrow-down-bold": arrow_down_bold,
  "arrow-down-bold-box": arrow_down_bold_box,
  "arrow-down-bold-box-outline": arrow_down_bold_box_outline,
  "arrow-down-bold-circle": arrow_down_bold_circle,
  "arrow-down-bold-circle-outline": arrow_down_bold_circle_outline,
  "arrow-down-bold-hexagon-outline": arrow_down_bold_hexagon_outline,
  "arrow-down-bold-outline": arrow_down_bold_outline,
  "arrow-down-box": arrow_down_box,
  "arrow-down-circle": arrow_down_circle,
  "arrow-down-circle-outline": arrow_down_circle_outline,
  "arrow-down-drop-circle": arrow_down_drop_circle,
  "arrow-down-drop-circle-outline": arrow_down_drop_circle_outline,
  "arrow-down-thick": arrow_down_thick,
  "arrow-expand": arrow_expand,
  "arrow-expand-all": arrow_expand_all,
  "arrow-expand-down": arrow_expand_down,
  "arrow-expand-horizontal": arrow_expand_horizontal,
  "arrow-expand-left": arrow_expand_left,
  "arrow-expand-right": arrow_expand_right,
  "arrow-expand-up": arrow_expand_up,
  "arrow-expand-vertical": arrow_expand_vertical,
  "arrow-horizontal-lock": arrow_horizontal_lock,
  "arrow-left": arrow_left,
  "arrow-left-bold": arrow_left_bold,
  "arrow-left-bold-box": arrow_left_bold_box,
  "arrow-left-bold-box-outline": arrow_left_bold_box_outline,
  "arrow-left-bold-circle": arrow_left_bold_circle,
  "arrow-left-bold-circle-outline": arrow_left_bold_circle_outline,
  "arrow-left-bold-hexagon-outline": arrow_left_bold_hexagon_outline,
  "arrow-left-bold-outline": arrow_left_bold_outline,
  "arrow-left-box": arrow_left_box,
  "arrow-left-circle": arrow_left_circle,
  "arrow-left-circle-outline": arrow_left_circle_outline,
  "arrow-left-drop-circle": arrow_left_drop_circle,
  "arrow-left-drop-circle-outline": arrow_left_drop_circle_outline,
  "arrow-left-right": arrow_left_right,
  "arrow-left-right-bold": arrow_left_right_bold,
  "arrow-left-right-bold-outline": arrow_left_right_bold_outline,
  "arrow-left-thick": arrow_left_thick,
  "arrow-right": arrow_right,
  "arrow-right-bold": arrow_right_bold,
  "arrow-right-bold-box": arrow_right_bold_box,
  "arrow-right-bold-box-outline": arrow_right_bold_box_outline,
  "arrow-right-bold-circle": arrow_right_bold_circle,
  "arrow-right-bold-circle-outline": arrow_right_bold_circle_outline,
  "arrow-right-bold-hexagon-outline": arrow_right_bold_hexagon_outline,
  "arrow-right-bold-outline": arrow_right_bold_outline,
  "arrow-right-box": arrow_right_box,
  "arrow-right-circle": arrow_right_circle,
  "arrow-right-circle-outline": arrow_right_circle_outline,
  "arrow-right-drop-circle": arrow_right_drop_circle,
  "arrow-right-drop-circle-outline": arrow_right_drop_circle_outline,
  "arrow-right-thick": arrow_right_thick,
  "arrow-split-horizontal": arrow_split_horizontal,
  "arrow-split-vertical": arrow_split_vertical,
  "arrow-top-left": arrow_top_left,
  "arrow-top-left-bold-outline": arrow_top_left_bold_outline,
  "arrow-top-left-bottom-right": arrow_top_left_bottom_right,
  "arrow-top-left-bottom-right-bold": arrow_top_left_bottom_right_bold,
  "arrow-top-left-thick": arrow_top_left_thick,
  "arrow-top-right": arrow_top_right,
  "arrow-top-right-bold-outline": arrow_top_right_bold_outline,
  "arrow-top-right-bottom-left": arrow_top_right_bottom_left,
  "arrow-top-right-bottom-left-bold": arrow_top_right_bottom_left_bold,
  "arrow-top-right-thick": arrow_top_right_thick,
  "arrow-up": arrow_up,
  "arrow-up-bold": arrow_up_bold,
  "arrow-up-bold-box": arrow_up_bold_box,
  "arrow-up-bold-box-outline": arrow_up_bold_box_outline,
  "arrow-up-bold-circle": arrow_up_bold_circle,
  "arrow-up-bold-circle-outline": arrow_up_bold_circle_outline,
  "arrow-up-bold-hexagon-outline": arrow_up_bold_hexagon_outline,
  "arrow-up-bold-outline": arrow_up_bold_outline,
  "arrow-up-box": arrow_up_box,
  "arrow-up-circle": arrow_up_circle,
  "arrow-up-circle-outline": arrow_up_circle_outline,
  "arrow-up-down": arrow_up_down,
  "arrow-up-down-bold": arrow_up_down_bold,
  "arrow-up-down-bold-outline": arrow_up_down_bold_outline,
  "arrow-up-drop-circle": arrow_up_drop_circle,
  "arrow-up-drop-circle-outline": arrow_up_drop_circle_outline,
  "arrow-up-thick": arrow_up_thick,
  "arrow-vertical-lock": arrow_vertical_lock,
  artstation,
  "aspect-ratio": aspect_ratio,
  assistant,
  asterisk,
  at,
  atlassian,
  atm,
  atom,
  "atom-variant": atom_variant,
  attachment,
  "audio-video": audio_video,
  "audio-video-off": audio_video_off,
  "augmented-reality": augmented_reality,
  "auto-download": auto_download,
  "auto-fix": auto_fix,
  "auto-upload": auto_upload,
  autorenew,
  "av-timer": av_timer,
  aws,
  axe,
  axis,
  "axis-arrow": axis_arrow,
  "axis-arrow-info": axis_arrow_info,
  "axis-arrow-lock": axis_arrow_lock,
  "axis-lock": axis_lock,
  "axis-x-arrow": axis_x_arrow,
  "axis-x-arrow-lock": axis_x_arrow_lock,
  "axis-x-rotate-clockwise": axis_x_rotate_clockwise,
  "axis-x-rotate-counterclockwise": axis_x_rotate_counterclockwise,
  "axis-x-y-arrow-lock": axis_x_y_arrow_lock,
  "axis-y-arrow": axis_y_arrow,
  "axis-y-arrow-lock": axis_y_arrow_lock,
  "axis-y-rotate-clockwise": axis_y_rotate_clockwise,
  "axis-y-rotate-counterclockwise": axis_y_rotate_counterclockwise,
  "axis-z-arrow": axis_z_arrow,
  "axis-z-arrow-lock": axis_z_arrow_lock,
  "axis-z-rotate-clockwise": axis_z_rotate_clockwise,
  "axis-z-rotate-counterclockwise": axis_z_rotate_counterclockwise,
  babel,
  baby,
  "baby-bottle": baby_bottle,
  "baby-bottle-outline": baby_bottle_outline,
  "baby-buggy": baby_buggy,
  "baby-carriage": baby_carriage,
  "baby-carriage-off": baby_carriage_off,
  "baby-face": baby_face,
  "baby-face-outline": baby_face_outline,
  backburger,
  backspace,
  "backspace-outline": backspace_outline,
  "backspace-reverse": backspace_reverse,
  "backspace-reverse-outline": backspace_reverse_outline,
  "backup-restore": backup_restore,
  bacteria,
  "bacteria-outline": bacteria_outline,
  "badge-account": badge_account,
  "badge-account-alert": badge_account_alert,
  "badge-account-alert-outline": badge_account_alert_outline,
  "badge-account-horizontal": badge_account_horizontal,
  "badge-account-horizontal-outline": badge_account_horizontal_outline,
  "badge-account-outline": badge_account_outline,
  badminton,
  "bag-carry-on": bag_carry_on,
  "bag-carry-on-check": bag_carry_on_check,
  "bag-carry-on-off": bag_carry_on_off,
  "bag-checked": bag_checked,
  "bag-personal": bag_personal,
  "bag-personal-off": bag_personal_off,
  "bag-personal-off-outline": bag_personal_off_outline,
  "bag-personal-outline": bag_personal_outline,
  baguette,
  balloon,
  ballot,
  "ballot-outline": ballot_outline,
  "ballot-recount": ballot_recount,
  "ballot-recount-outline": ballot_recount_outline,
  bandage,
  bandcamp,
  bank,
  "bank-minus": bank_minus,
  "bank-outline": bank_outline,
  "bank-plus": bank_plus,
  "bank-remove": bank_remove,
  "bank-transfer": bank_transfer,
  "bank-transfer-in": bank_transfer_in,
  "bank-transfer-out": bank_transfer_out,
  barcode,
  "barcode-off": barcode_off,
  "barcode-scan": barcode_scan,
  barley,
  "barley-off": barley_off,
  barn,
  barrel,
  baseball,
  "baseball-bat": baseball_bat,
  bash,
  basket,
  "basket-fill": basket_fill,
  "basket-outline": basket_outline,
  "basket-unfill": basket_unfill,
  basketball,
  "basketball-hoop": basketball_hoop,
  "basketball-hoop-outline": basketball_hoop_outline,
  bat,
  battery,
  "battery-10": battery_10,
  "battery-10-bluetooth": battery_10_bluetooth,
  "battery-20": battery_20,
  "battery-20-bluetooth": battery_20_bluetooth,
  "battery-30": battery_30,
  "battery-30-bluetooth": battery_30_bluetooth,
  "battery-40": battery_40,
  "battery-40-bluetooth": battery_40_bluetooth,
  "battery-50": battery_50,
  "battery-50-bluetooth": battery_50_bluetooth,
  "battery-60": battery_60,
  "battery-60-bluetooth": battery_60_bluetooth,
  "battery-70": battery_70,
  "battery-70-bluetooth": battery_70_bluetooth,
  "battery-80": battery_80,
  "battery-80-bluetooth": battery_80_bluetooth,
  "battery-90": battery_90,
  "battery-90-bluetooth": battery_90_bluetooth,
  "battery-alert": battery_alert,
  "battery-alert-bluetooth": battery_alert_bluetooth,
  "battery-alert-variant": battery_alert_variant,
  "battery-alert-variant-outline": battery_alert_variant_outline,
  "battery-bluetooth": battery_bluetooth,
  "battery-bluetooth-variant": battery_bluetooth_variant,
  "battery-charging": battery_charging,
  "battery-charging-10": battery_charging_10,
  "battery-charging-100": battery_charging_100,
  "battery-charging-20": battery_charging_20,
  "battery-charging-30": battery_charging_30,
  "battery-charging-40": battery_charging_40,
  "battery-charging-50": battery_charging_50,
  "battery-charging-60": battery_charging_60,
  "battery-charging-70": battery_charging_70,
  "battery-charging-80": battery_charging_80,
  "battery-charging-90": battery_charging_90,
  "battery-charging-high": battery_charging_high,
  "battery-charging-low": battery_charging_low,
  "battery-charging-medium": battery_charging_medium,
  "battery-charging-outline": battery_charging_outline,
  "battery-charging-wireless": battery_charging_wireless,
  "battery-charging-wireless-10": battery_charging_wireless_10,
  "battery-charging-wireless-20": battery_charging_wireless_20,
  "battery-charging-wireless-30": battery_charging_wireless_30,
  "battery-charging-wireless-40": battery_charging_wireless_40,
  "battery-charging-wireless-50": battery_charging_wireless_50,
  "battery-charging-wireless-60": battery_charging_wireless_60,
  "battery-charging-wireless-70": battery_charging_wireless_70,
  "battery-charging-wireless-80": battery_charging_wireless_80,
  "battery-charging-wireless-90": battery_charging_wireless_90,
  "battery-charging-wireless-alert": battery_charging_wireless_alert,
  "battery-charging-wireless-outline": battery_charging_wireless_outline,
  "battery-heart": battery_heart,
  "battery-heart-outline": battery_heart_outline,
  "battery-heart-variant": battery_heart_variant,
  "battery-high": battery_high,
  "battery-low": battery_low,
  "battery-medium": battery_medium,
  "battery-minus": battery_minus,
  "battery-negative": battery_negative,
  "battery-off": battery_off,
  "battery-off-outline": battery_off_outline,
  "battery-outline": battery_outline,
  "battery-plus": battery_plus,
  "battery-positive": battery_positive,
  "battery-unknown": battery_unknown,
  "battery-unknown-bluetooth": battery_unknown_bluetooth,
  battlenet,
  beach,
  beaker,
  "beaker-alert": beaker_alert,
  "beaker-alert-outline": beaker_alert_outline,
  "beaker-check": beaker_check,
  "beaker-check-outline": beaker_check_outline,
  "beaker-minus": beaker_minus,
  "beaker-minus-outline": beaker_minus_outline,
  "beaker-outline": beaker_outline,
  "beaker-plus": beaker_plus,
  "beaker-plus-outline": beaker_plus_outline,
  "beaker-question": beaker_question,
  "beaker-question-outline": beaker_question_outline,
  "beaker-remove": beaker_remove,
  "beaker-remove-outline": beaker_remove_outline,
  bed,
  "bed-double": bed_double,
  "bed-double-outline": bed_double_outline,
  "bed-empty": bed_empty,
  "bed-king": bed_king,
  "bed-king-outline": bed_king_outline,
  "bed-outline": bed_outline,
  "bed-queen": bed_queen,
  "bed-queen-outline": bed_queen_outline,
  "bed-single": bed_single,
  "bed-single-outline": bed_single_outline,
  bee,
  "bee-flower": bee_flower,
  "beehive-off-outline": beehive_off_outline,
  "beehive-outline": beehive_outline,
  beer,
  "beer-outline": beer_outline,
  bell,
  "bell-alert": bell_alert,
  "bell-alert-outline": bell_alert_outline,
  "bell-cancel": bell_cancel,
  "bell-cancel-outline": bell_cancel_outline,
  "bell-check": bell_check,
  "bell-check-outline": bell_check_outline,
  "bell-circle": bell_circle,
  "bell-circle-outline": bell_circle_outline,
  "bell-minus": bell_minus,
  "bell-minus-outline": bell_minus_outline,
  "bell-off": bell_off,
  "bell-off-outline": bell_off_outline,
  "bell-outline": bell_outline,
  "bell-plus": bell_plus,
  "bell-plus-outline": bell_plus_outline,
  "bell-remove": bell_remove,
  "bell-remove-outline": bell_remove_outline,
  "bell-ring": bell_ring,
  "bell-ring-outline": bell_ring_outline,
  "bell-sleep": bell_sleep,
  "bell-sleep-outline": bell_sleep_outline,
  beta,
  betamax,
  biathlon,
  bicycle,
  "bicycle-basket": bicycle_basket,
  bike,
  "bike-fast": bike_fast,
  billboard,
  billiards,
  "billiards-rack": billiards_rack,
  binoculars,
  bio,
  biohazard,
  bitbucket,
  bitcoin,
  "black-mesa": black_mesa,
  blender,
  "blender-software": blender_software,
  blinds,
  "blinds-open": blinds_open,
  "block-helper": block_helper,
  blogger,
  "blood-bag": blood_bag,
  bluetooth,
  "bluetooth-audio": bluetooth_audio,
  "bluetooth-connect": bluetooth_connect,
  "bluetooth-off": bluetooth_off,
  "bluetooth-settings": bluetooth_settings,
  "bluetooth-transfer": bluetooth_transfer,
  blur: blur2,
  "blur-linear": blur_linear,
  "blur-off": blur_off,
  "blur-radial": blur_radial,
  "bolnisi-cross": bolnisi_cross,
  bolt,
  bomb,
  "bomb-off": bomb_off,
  bone,
  book,
  "book-account": book_account,
  "book-account-outline": book_account_outline,
  "book-alphabet": book_alphabet,
  "book-cross": book_cross,
  "book-information-variant": book_information_variant,
  "book-lock": book_lock,
  "book-lock-open": book_lock_open,
  "book-minus": book_minus,
  "book-minus-multiple": book_minus_multiple,
  "book-minus-multiple-outline": book_minus_multiple_outline,
  "book-multiple": book_multiple,
  "book-multiple-outline": book_multiple_outline,
  "book-music": book_music,
  "book-open": book_open,
  "book-open-outline": book_open_outline,
  "book-open-page-variant": book_open_page_variant,
  "book-open-variant": book_open_variant,
  "book-outline": book_outline,
  "book-play": book_play,
  "book-play-outline": book_play_outline,
  "book-plus": book_plus,
  "book-plus-multiple": book_plus_multiple,
  "book-plus-multiple-outline": book_plus_multiple_outline,
  "book-remove": book_remove,
  "book-remove-multiple": book_remove_multiple,
  "book-remove-multiple-outline": book_remove_multiple_outline,
  "book-search": book_search,
  "book-search-outline": book_search_outline,
  "book-variant": book_variant,
  "book-variant-multiple": book_variant_multiple,
  bookmark,
  "bookmark-check": bookmark_check,
  "bookmark-check-outline": bookmark_check_outline,
  "bookmark-minus": bookmark_minus,
  "bookmark-minus-outline": bookmark_minus_outline,
  "bookmark-multiple": bookmark_multiple,
  "bookmark-multiple-outline": bookmark_multiple_outline,
  "bookmark-music": bookmark_music,
  "bookmark-music-outline": bookmark_music_outline,
  "bookmark-off": bookmark_off,
  "bookmark-off-outline": bookmark_off_outline,
  "bookmark-outline": bookmark_outline,
  "bookmark-plus": bookmark_plus,
  "bookmark-plus-outline": bookmark_plus_outline,
  "bookmark-remove": bookmark_remove,
  "bookmark-remove-outline": bookmark_remove_outline,
  bookshelf,
  "boom-gate": boom_gate,
  "boom-gate-alert": boom_gate_alert,
  "boom-gate-alert-outline": boom_gate_alert_outline,
  "boom-gate-down": boom_gate_down,
  "boom-gate-down-outline": boom_gate_down_outline,
  "boom-gate-outline": boom_gate_outline,
  "boom-gate-up": boom_gate_up,
  "boom-gate-up-outline": boom_gate_up_outline,
  boombox,
  boomerang,
  bootstrap,
  "border-all": border_all,
  "border-all-variant": border_all_variant,
  "border-bottom": border_bottom,
  "border-bottom-variant": border_bottom_variant,
  "border-color": border_color,
  "border-horizontal": border_horizontal,
  "border-inside": border_inside,
  "border-left": border_left,
  "border-left-variant": border_left_variant,
  "border-none": border_none,
  "border-none-variant": border_none_variant,
  "border-outside": border_outside,
  "border-right": border_right,
  "border-right-variant": border_right_variant,
  "border-style": border_style,
  "border-top": border_top,
  "border-top-variant": border_top_variant,
  "border-vertical": border_vertical,
  "bottle-soda": bottle_soda,
  "bottle-soda-classic": bottle_soda_classic,
  "bottle-soda-classic-outline": bottle_soda_classic_outline,
  "bottle-soda-outline": bottle_soda_outline,
  "bottle-tonic": bottle_tonic,
  "bottle-tonic-outline": bottle_tonic_outline,
  "bottle-tonic-plus": bottle_tonic_plus,
  "bottle-tonic-plus-outline": bottle_tonic_plus_outline,
  "bottle-tonic-skull": bottle_tonic_skull,
  "bottle-tonic-skull-outline": bottle_tonic_skull_outline,
  "bottle-wine": bottle_wine,
  "bottle-wine-outline": bottle_wine_outline,
  "bow-tie": bow_tie,
  bowl,
  "bowl-mix": bowl_mix,
  "bowl-mix-outline": bowl_mix_outline,
  "bowl-outline": bowl_outline,
  bowling,
  box,
  "box-cutter": box_cutter,
  "box-cutter-off": box_cutter_off,
  "box-shadow": box_shadow,
  "boxing-glove": boxing_glove,
  braille,
  brain,
  "bread-slice": bread_slice,
  "bread-slice-outline": bread_slice_outline,
  bridge,
  briefcase,
  "briefcase-account": briefcase_account,
  "briefcase-account-outline": briefcase_account_outline,
  "briefcase-check": briefcase_check,
  "briefcase-check-outline": briefcase_check_outline,
  "briefcase-clock": briefcase_clock,
  "briefcase-clock-outline": briefcase_clock_outline,
  "briefcase-download": briefcase_download,
  "briefcase-download-outline": briefcase_download_outline,
  "briefcase-edit": briefcase_edit,
  "briefcase-edit-outline": briefcase_edit_outline,
  "briefcase-minus": briefcase_minus,
  "briefcase-minus-outline": briefcase_minus_outline,
  "briefcase-outline": briefcase_outline,
  "briefcase-plus": briefcase_plus,
  "briefcase-plus-outline": briefcase_plus_outline,
  "briefcase-remove": briefcase_remove,
  "briefcase-remove-outline": briefcase_remove_outline,
  "briefcase-search": briefcase_search,
  "briefcase-search-outline": briefcase_search_outline,
  "briefcase-upload": briefcase_upload,
  "briefcase-upload-outline": briefcase_upload_outline,
  "briefcase-variant": briefcase_variant,
  "briefcase-variant-outline": briefcase_variant_outline,
  "brightness-1": brightness_1,
  "brightness-2": brightness_2,
  "brightness-3": brightness_3,
  "brightness-4": brightness_4,
  "brightness-5": brightness_5,
  "brightness-6": brightness_6,
  "brightness-7": brightness_7,
  "brightness-auto": brightness_auto,
  "brightness-percent": brightness_percent,
  broom,
  brush,
  bucket,
  "bucket-outline": bucket_outline,
  buddhism,
  buffer,
  buffet,
  bug,
  "bug-check": bug_check,
  "bug-check-outline": bug_check_outline,
  "bug-outline": bug_outline,
  bugle,
  bulldozer,
  bullet,
  "bulletin-board": bulletin_board,
  bullhorn,
  "bullhorn-outline": bullhorn_outline,
  bullseye,
  "bullseye-arrow": bullseye_arrow,
  bulma,
  "bunk-bed": bunk_bed,
  "bunk-bed-outline": bunk_bed_outline,
  bus,
  "bus-alert": bus_alert,
  "bus-articulated-end": bus_articulated_end,
  "bus-articulated-front": bus_articulated_front,
  "bus-clock": bus_clock,
  "bus-double-decker": bus_double_decker,
  "bus-marker": bus_marker,
  "bus-multiple": bus_multiple,
  "bus-school": bus_school,
  "bus-side": bus_side,
  "bus-stop": bus_stop,
  "bus-stop-covered": bus_stop_covered,
  "bus-stop-uncovered": bus_stop_uncovered,
  "cable-data": cable_data,
  cached,
  cactus,
  cake,
  "cake-layered": cake_layered,
  "cake-variant": cake_variant,
  calculator,
  "calculator-variant": calculator_variant,
  calendar,
  "calendar-account": calendar_account,
  "calendar-account-outline": calendar_account_outline,
  "calendar-alert": calendar_alert,
  "calendar-arrow-left": calendar_arrow_left,
  "calendar-arrow-right": calendar_arrow_right,
  "calendar-blank": calendar_blank,
  "calendar-blank-multiple": calendar_blank_multiple,
  "calendar-blank-outline": calendar_blank_outline,
  "calendar-check": calendar_check,
  "calendar-check-outline": calendar_check_outline,
  "calendar-clock": calendar_clock,
  "calendar-edit": calendar_edit,
  "calendar-export": calendar_export,
  "calendar-heart": calendar_heart,
  "calendar-import": calendar_import,
  "calendar-minus": calendar_minus,
  "calendar-month": calendar_month,
  "calendar-month-outline": calendar_month_outline,
  "calendar-multiple": calendar_multiple,
  "calendar-multiple-check": calendar_multiple_check,
  "calendar-multiselect": calendar_multiselect,
  "calendar-outline": calendar_outline,
  "calendar-plus": calendar_plus,
  "calendar-question": calendar_question,
  "calendar-range": calendar_range,
  "calendar-range-outline": calendar_range_outline,
  "calendar-refresh": calendar_refresh,
  "calendar-refresh-outline": calendar_refresh_outline,
  "calendar-remove": calendar_remove,
  "calendar-remove-outline": calendar_remove_outline,
  "calendar-search": calendar_search,
  "calendar-star": calendar_star,
  "calendar-sync": calendar_sync,
  "calendar-sync-outline": calendar_sync_outline,
  "calendar-text": calendar_text,
  "calendar-text-outline": calendar_text_outline,
  "calendar-today": calendar_today,
  "calendar-week": calendar_week,
  "calendar-week-begin": calendar_week_begin,
  "calendar-weekend": calendar_weekend,
  "calendar-weekend-outline": calendar_weekend_outline,
  "call-made": call_made,
  "call-merge": call_merge,
  "call-missed": call_missed,
  "call-received": call_received,
  "call-split": call_split,
  camcorder,
  "camcorder-off": camcorder_off,
  camera,
  "camera-account": camera_account,
  "camera-burst": camera_burst,
  "camera-control": camera_control,
  "camera-enhance": camera_enhance,
  "camera-enhance-outline": camera_enhance_outline,
  "camera-front": camera_front,
  "camera-front-variant": camera_front_variant,
  "camera-gopro": camera_gopro,
  "camera-image": camera_image,
  "camera-iris": camera_iris,
  "camera-metering-center": camera_metering_center,
  "camera-metering-matrix": camera_metering_matrix,
  "camera-metering-partial": camera_metering_partial,
  "camera-metering-spot": camera_metering_spot,
  "camera-off": camera_off,
  "camera-outline": camera_outline,
  "camera-party-mode": camera_party_mode,
  "camera-plus": camera_plus,
  "camera-plus-outline": camera_plus_outline,
  "camera-rear": camera_rear,
  "camera-rear-variant": camera_rear_variant,
  "camera-retake": camera_retake,
  "camera-retake-outline": camera_retake_outline,
  "camera-switch": camera_switch,
  "camera-switch-outline": camera_switch_outline,
  "camera-timer": camera_timer,
  "camera-wireless": camera_wireless,
  "camera-wireless-outline": camera_wireless_outline,
  campfire,
  cancel,
  candle,
  candycane,
  cannabis,
  "caps-lock": caps_lock,
  car,
  "car-2-plus": car_2_plus,
  "car-3-plus": car_3_plus,
  "car-arrow-left": car_arrow_left,
  "car-arrow-right": car_arrow_right,
  "car-back": car_back,
  "car-battery": car_battery,
  "car-brake-abs": car_brake_abs,
  "car-brake-alert": car_brake_alert,
  "car-brake-hold": car_brake_hold,
  "car-brake-parking": car_brake_parking,
  "car-brake-retarder": car_brake_retarder,
  "car-child-seat": car_child_seat,
  "car-clutch": car_clutch,
  "car-cog": car_cog,
  "car-connected": car_connected,
  "car-convertible": car_convertible,
  "car-coolant-level": car_coolant_level,
  "car-cruise-control": car_cruise_control,
  "car-defrost-front": car_defrost_front,
  "car-defrost-rear": car_defrost_rear,
  "car-door": car_door,
  "car-door-lock": car_door_lock,
  "car-electric": car_electric,
  "car-esp": car_esp,
  "car-estate": car_estate,
  "car-hatchback": car_hatchback,
  "car-info": car_info,
  "car-key": car_key,
  "car-light-dimmed": car_light_dimmed,
  "car-light-fog": car_light_fog,
  "car-light-high": car_light_high,
  "car-limousine": car_limousine,
  "car-multiple": car_multiple,
  "car-off": car_off,
  "car-parking-lights": car_parking_lights,
  "car-pickup": car_pickup,
  "car-seat": car_seat,
  "car-seat-cooler": car_seat_cooler,
  "car-seat-heater": car_seat_heater,
  "car-settings": car_settings,
  "car-shift-pattern": car_shift_pattern,
  "car-side": car_side,
  "car-sports": car_sports,
  "car-tire-alert": car_tire_alert,
  "car-traction-control": car_traction_control,
  "car-turbocharger": car_turbocharger,
  "car-wash": car_wash,
  "car-windshield": car_windshield,
  "car-windshield-outline": car_windshield_outline,
  carabiner,
  caravan,
  card,
  "card-account-details": card_account_details,
  "card-account-details-outline": card_account_details_outline,
  "card-account-details-star": card_account_details_star,
  "card-account-details-star-outline": card_account_details_star_outline,
  "card-account-mail": card_account_mail,
  "card-account-mail-outline": card_account_mail_outline,
  "card-account-phone": card_account_phone,
  "card-account-phone-outline": card_account_phone_outline,
  "card-bulleted": card_bulleted,
  "card-bulleted-off": card_bulleted_off,
  "card-bulleted-off-outline": card_bulleted_off_outline,
  "card-bulleted-outline": card_bulleted_outline,
  "card-bulleted-settings": card_bulleted_settings,
  "card-bulleted-settings-outline": card_bulleted_settings_outline,
  "card-outline": card_outline,
  "card-plus": card_plus,
  "card-plus-outline": card_plus_outline,
  "card-search": card_search,
  "card-search-outline": card_search_outline,
  "card-text": card_text,
  "card-text-outline": card_text_outline,
  cards,
  "cards-club": cards_club,
  "cards-diamond": cards_diamond,
  "cards-diamond-outline": cards_diamond_outline,
  "cards-heart": cards_heart,
  "cards-outline": cards_outline,
  "cards-playing-outline": cards_playing_outline,
  "cards-spade": cards_spade,
  "cards-variant": cards_variant,
  carrot,
  cart,
  "cart-arrow-down": cart_arrow_down,
  "cart-arrow-right": cart_arrow_right,
  "cart-arrow-up": cart_arrow_up,
  "cart-minus": cart_minus,
  "cart-off": cart_off,
  "cart-outline": cart_outline,
  "cart-plus": cart_plus,
  "cart-remove": cart_remove,
  "case-sensitive-alt": case_sensitive_alt,
  cash,
  "cash-100": cash_100,
  "cash-marker": cash_marker,
  "cash-minus": cash_minus,
  "cash-multiple": cash_multiple,
  "cash-plus": cash_plus,
  "cash-refund": cash_refund,
  "cash-register": cash_register,
  "cash-remove": cash_remove,
  "cash-usd": cash_usd,
  "cash-usd-outline": cash_usd_outline,
  cassette,
  cast,
  "cast-audio": cast_audio,
  "cast-connected": cast_connected,
  "cast-education": cast_education,
  "cast-off": cast_off,
  castle,
  cat,
  cctv,
  "ceiling-light": ceiling_light,
  cellphone,
  "cellphone-android": cellphone_android,
  "cellphone-arrow-down": cellphone_arrow_down,
  "cellphone-basic": cellphone_basic,
  "cellphone-charging": cellphone_charging,
  "cellphone-cog": cellphone_cog,
  "cellphone-dock": cellphone_dock,
  "cellphone-erase": cellphone_erase,
  "cellphone-information": cellphone_information,
  "cellphone-iphone": cellphone_iphone,
  "cellphone-key": cellphone_key,
  "cellphone-link": cellphone_link,
  "cellphone-link-off": cellphone_link_off,
  "cellphone-lock": cellphone_lock,
  "cellphone-message": cellphone_message,
  "cellphone-message-off": cellphone_message_off,
  "cellphone-nfc": cellphone_nfc,
  "cellphone-nfc-off": cellphone_nfc_off,
  "cellphone-off": cellphone_off,
  "cellphone-play": cellphone_play,
  "cellphone-screenshot": cellphone_screenshot,
  "cellphone-settings": cellphone_settings,
  "cellphone-sound": cellphone_sound,
  "cellphone-text": cellphone_text,
  "cellphone-wireless": cellphone_wireless,
  "celtic-cross": celtic_cross,
  centos,
  certificate,
  "certificate-outline": certificate_outline,
  "chair-rolling": chair_rolling,
  "chair-school": chair_school,
  charity,
  "chart-arc": chart_arc,
  "chart-areaspline": chart_areaspline,
  "chart-areaspline-variant": chart_areaspline_variant,
  "chart-bar": chart_bar,
  "chart-bar-stacked": chart_bar_stacked,
  "chart-bell-curve": chart_bell_curve,
  "chart-bell-curve-cumulative": chart_bell_curve_cumulative,
  "chart-bubble": chart_bubble,
  "chart-donut": chart_donut,
  "chart-donut-variant": chart_donut_variant,
  "chart-gantt": chart_gantt,
  "chart-histogram": chart_histogram,
  "chart-line": chart_line,
  "chart-line-stacked": chart_line_stacked,
  "chart-line-variant": chart_line_variant,
  "chart-multiline": chart_multiline,
  "chart-multiple": chart_multiple,
  "chart-pie": chart_pie,
  "chart-ppf": chart_ppf,
  "chart-sankey": chart_sankey,
  "chart-sankey-variant": chart_sankey_variant,
  "chart-scatter-plot": chart_scatter_plot,
  "chart-scatter-plot-hexbin": chart_scatter_plot_hexbin,
  "chart-timeline": chart_timeline,
  "chart-timeline-variant": chart_timeline_variant,
  "chart-tree": chart_tree,
  chat,
  "chat-alert": chat_alert,
  "chat-alert-outline": chat_alert_outline,
  "chat-minus": chat_minus,
  "chat-minus-outline": chat_minus_outline,
  "chat-outline": chat_outline,
  "chat-plus": chat_plus,
  "chat-plus-outline": chat_plus_outline,
  "chat-processing": chat_processing,
  "chat-processing-outline": chat_processing_outline,
  "chat-remove": chat_remove,
  "chat-remove-outline": chat_remove_outline,
  "chat-sleep": chat_sleep,
  "chat-sleep-outline": chat_sleep_outline,
  check,
  "check-all": check_all,
  "check-bold": check_bold,
  "check-box-multiple-outline": check_box_multiple_outline,
  "check-box-outline": check_box_outline,
  "check-circle": check_circle,
  "check-circle-outline": check_circle_outline,
  "check-decagram": check_decagram,
  "check-network": check_network,
  "check-network-outline": check_network_outline,
  "check-outline": check_outline,
  "check-underline": check_underline,
  "check-underline-circle": check_underline_circle,
  "check-underline-circle-outline": check_underline_circle_outline,
  checkbook,
  "checkbox-blank": checkbox_blank,
  "checkbox-blank-circle": checkbox_blank_circle,
  "checkbox-blank-circle-outline": checkbox_blank_circle_outline,
  "checkbox-blank-off": checkbox_blank_off,
  "checkbox-blank-off-outline": checkbox_blank_off_outline,
  "checkbox-blank-outline": checkbox_blank_outline,
  "checkbox-intermediate": checkbox_intermediate,
  "checkbox-marked": checkbox_marked,
  "checkbox-marked-circle": checkbox_marked_circle,
  "checkbox-marked-circle-outline": checkbox_marked_circle_outline,
  "checkbox-marked-outline": checkbox_marked_outline,
  "checkbox-multiple-blank": checkbox_multiple_blank,
  "checkbox-multiple-blank-circle": checkbox_multiple_blank_circle,
  "checkbox-multiple-blank-circle-outline": checkbox_multiple_blank_circle_outline,
  "checkbox-multiple-blank-outline": checkbox_multiple_blank_outline,
  "checkbox-multiple-marked": checkbox_multiple_marked,
  "checkbox-multiple-marked-circle": checkbox_multiple_marked_circle,
  "checkbox-multiple-marked-circle-outline": checkbox_multiple_marked_circle_outline,
  "checkbox-multiple-marked-outline": checkbox_multiple_marked_outline,
  checkerboard,
  "checkerboard-minus": checkerboard_minus,
  "checkerboard-plus": checkerboard_plus,
  "checkerboard-remove": checkerboard_remove,
  cheese,
  "cheese-off": cheese_off,
  "chef-hat": chef_hat,
  "chemical-weapon": chemical_weapon,
  "chess-bishop": chess_bishop,
  "chess-king": chess_king,
  "chess-knight": chess_knight,
  "chess-pawn": chess_pawn,
  "chess-queen": chess_queen,
  "chess-rook": chess_rook,
  "chevron-double-down": chevron_double_down,
  "chevron-double-left": chevron_double_left,
  "chevron-double-right": chevron_double_right,
  "chevron-double-up": chevron_double_up,
  "chevron-down": chevron_down,
  "chevron-down-box": chevron_down_box,
  "chevron-down-box-outline": chevron_down_box_outline,
  "chevron-down-circle": chevron_down_circle,
  "chevron-down-circle-outline": chevron_down_circle_outline,
  "chevron-left": chevron_left,
  "chevron-left-box": chevron_left_box,
  "chevron-left-box-outline": chevron_left_box_outline,
  "chevron-left-circle": chevron_left_circle,
  "chevron-left-circle-outline": chevron_left_circle_outline,
  "chevron-right": chevron_right,
  "chevron-right-box": chevron_right_box,
  "chevron-right-box-outline": chevron_right_box_outline,
  "chevron-right-circle": chevron_right_circle,
  "chevron-right-circle-outline": chevron_right_circle_outline,
  "chevron-triple-down": chevron_triple_down,
  "chevron-triple-left": chevron_triple_left,
  "chevron-triple-right": chevron_triple_right,
  "chevron-triple-up": chevron_triple_up,
  "chevron-up": chevron_up,
  "chevron-up-box": chevron_up_box,
  "chevron-up-box-outline": chevron_up_box_outline,
  "chevron-up-circle": chevron_up_circle,
  "chevron-up-circle-outline": chevron_up_circle_outline,
  "chili-hot": chili_hot,
  "chili-medium": chili_medium,
  "chili-mild": chili_mild,
  "chili-off": chili_off,
  chip,
  christianity,
  "christianity-outline": christianity_outline,
  church,
  cigar,
  "cigar-off": cigar_off,
  circle,
  "circle-double": circle_double,
  "circle-edit-outline": circle_edit_outline,
  "circle-expand": circle_expand,
  "circle-half": circle_half,
  "circle-half-full": circle_half_full,
  "circle-medium": circle_medium,
  "circle-multiple": circle_multiple,
  "circle-multiple-outline": circle_multiple_outline,
  "circle-off-outline": circle_off_outline,
  "circle-outline": circle_outline,
  "circle-slice-1": circle_slice_1,
  "circle-slice-2": circle_slice_2,
  "circle-slice-3": circle_slice_3,
  "circle-slice-4": circle_slice_4,
  "circle-slice-5": circle_slice_5,
  "circle-slice-6": circle_slice_6,
  "circle-slice-7": circle_slice_7,
  "circle-slice-8": circle_slice_8,
  "circle-small": circle_small,
  "circular-saw": circular_saw,
  city,
  "city-variant": city_variant,
  "city-variant-outline": city_variant_outline,
  clipboard,
  "clipboard-account": clipboard_account,
  "clipboard-account-outline": clipboard_account_outline,
  "clipboard-alert": clipboard_alert,
  "clipboard-alert-outline": clipboard_alert_outline,
  "clipboard-arrow-down": clipboard_arrow_down,
  "clipboard-arrow-down-outline": clipboard_arrow_down_outline,
  "clipboard-arrow-left": clipboard_arrow_left,
  "clipboard-arrow-left-outline": clipboard_arrow_left_outline,
  "clipboard-arrow-right": clipboard_arrow_right,
  "clipboard-arrow-right-outline": clipboard_arrow_right_outline,
  "clipboard-arrow-up": clipboard_arrow_up,
  "clipboard-arrow-up-outline": clipboard_arrow_up_outline,
  "clipboard-check": clipboard_check,
  "clipboard-check-multiple": clipboard_check_multiple,
  "clipboard-check-multiple-outline": clipboard_check_multiple_outline,
  "clipboard-check-outline": clipboard_check_outline,
  "clipboard-file": clipboard_file,
  "clipboard-file-outline": clipboard_file_outline,
  "clipboard-flow": clipboard_flow,
  "clipboard-flow-outline": clipboard_flow_outline,
  "clipboard-list": clipboard_list,
  "clipboard-list-outline": clipboard_list_outline,
  "clipboard-multiple": clipboard_multiple,
  "clipboard-multiple-outline": clipboard_multiple_outline,
  "clipboard-outline": clipboard_outline,
  "clipboard-play": clipboard_play,
  "clipboard-play-multiple": clipboard_play_multiple,
  "clipboard-play-multiple-outline": clipboard_play_multiple_outline,
  "clipboard-play-outline": clipboard_play_outline,
  "clipboard-plus": clipboard_plus,
  "clipboard-plus-outline": clipboard_plus_outline,
  "clipboard-pulse": clipboard_pulse,
  "clipboard-pulse-outline": clipboard_pulse_outline,
  "clipboard-text": clipboard_text,
  "clipboard-text-multiple": clipboard_text_multiple,
  "clipboard-text-multiple-outline": clipboard_text_multiple_outline,
  "clipboard-text-outline": clipboard_text_outline,
  "clipboard-text-play": clipboard_text_play,
  "clipboard-text-play-outline": clipboard_text_play_outline,
  clippy,
  clock,
  "clock-alert": clock_alert,
  "clock-alert-outline": clock_alert_outline,
  "clock-check": clock_check,
  "clock-check-outline": clock_check_outline,
  "clock-digital": clock_digital,
  "clock-end": clock_end,
  "clock-fast": clock_fast,
  "clock-in": clock_in,
  "clock-out": clock_out,
  "clock-outline": clock_outline,
  "clock-start": clock_start,
  "clock-time-eight": clock_time_eight,
  "clock-time-eight-outline": clock_time_eight_outline,
  "clock-time-eleven": clock_time_eleven,
  "clock-time-eleven-outline": clock_time_eleven_outline,
  "clock-time-five": clock_time_five,
  "clock-time-five-outline": clock_time_five_outline,
  "clock-time-four": clock_time_four,
  "clock-time-four-outline": clock_time_four_outline,
  "clock-time-nine": clock_time_nine,
  "clock-time-nine-outline": clock_time_nine_outline,
  "clock-time-one": clock_time_one,
  "clock-time-one-outline": clock_time_one_outline,
  "clock-time-seven": clock_time_seven,
  "clock-time-seven-outline": clock_time_seven_outline,
  "clock-time-six": clock_time_six,
  "clock-time-six-outline": clock_time_six_outline,
  "clock-time-ten": clock_time_ten,
  "clock-time-ten-outline": clock_time_ten_outline,
  "clock-time-three": clock_time_three,
  "clock-time-three-outline": clock_time_three_outline,
  "clock-time-twelve": clock_time_twelve,
  "clock-time-twelve-outline": clock_time_twelve_outline,
  "clock-time-two": clock_time_two,
  "clock-time-two-outline": clock_time_two_outline,
  close,
  "close-box": close_box,
  "close-box-multiple": close_box_multiple,
  "close-box-multiple-outline": close_box_multiple_outline,
  "close-box-outline": close_box_outline,
  "close-circle": close_circle,
  "close-circle-multiple": close_circle_multiple,
  "close-circle-multiple-outline": close_circle_multiple_outline,
  "close-circle-outline": close_circle_outline,
  "close-network": close_network,
  "close-network-outline": close_network_outline,
  "close-octagon": close_octagon,
  "close-octagon-outline": close_octagon_outline,
  "close-outline": close_outline,
  "close-thick": close_thick,
  "closed-caption": closed_caption,
  "closed-caption-outline": closed_caption_outline,
  cloud,
  "cloud-alert": cloud_alert,
  "cloud-braces": cloud_braces,
  "cloud-check": cloud_check,
  "cloud-check-outline": cloud_check_outline,
  "cloud-circle": cloud_circle,
  "cloud-download": cloud_download,
  "cloud-download-outline": cloud_download_outline,
  "cloud-lock": cloud_lock,
  "cloud-lock-outline": cloud_lock_outline,
  "cloud-off-outline": cloud_off_outline,
  "cloud-outline": cloud_outline,
  "cloud-print": cloud_print,
  "cloud-print-outline": cloud_print_outline,
  "cloud-question": cloud_question,
  "cloud-refresh": cloud_refresh,
  "cloud-search": cloud_search,
  "cloud-search-outline": cloud_search_outline,
  "cloud-sync": cloud_sync,
  "cloud-sync-outline": cloud_sync_outline,
  "cloud-tags": cloud_tags,
  "cloud-upload": cloud_upload,
  "cloud-upload-outline": cloud_upload_outline,
  clover,
  "coach-lamp": coach_lamp,
  "coat-rack": coat_rack,
  "code-array": code_array,
  "code-braces": code_braces,
  "code-braces-box": code_braces_box,
  "code-brackets": code_brackets,
  "code-equal": code_equal,
  "code-greater-than": code_greater_than,
  "code-greater-than-or-equal": code_greater_than_or_equal,
  "code-json": code_json,
  "code-less-than": code_less_than,
  "code-less-than-or-equal": code_less_than_or_equal,
  "code-not-equal": code_not_equal,
  "code-not-equal-variant": code_not_equal_variant,
  "code-parentheses": code_parentheses,
  "code-parentheses-box": code_parentheses_box,
  "code-string": code_string,
  "code-tags": code_tags,
  "code-tags-check": code_tags_check,
  codepen,
  coffee,
  "coffee-maker": coffee_maker,
  "coffee-off": coffee_off,
  "coffee-off-outline": coffee_off_outline,
  "coffee-outline": coffee_outline,
  "coffee-to-go": coffee_to_go,
  "coffee-to-go-outline": coffee_to_go_outline,
  coffin,
  cog,
  "cog-box": cog_box,
  "cog-clockwise": cog_clockwise,
  "cog-counterclockwise": cog_counterclockwise,
  "cog-off": cog_off,
  "cog-off-outline": cog_off_outline,
  "cog-outline": cog_outline,
  "cog-refresh": cog_refresh,
  "cog-refresh-outline": cog_refresh_outline,
  "cog-sync": cog_sync,
  "cog-sync-outline": cog_sync_outline,
  "cog-transfer": cog_transfer,
  "cog-transfer-outline": cog_transfer_outline,
  cogs,
  collage,
  "collapse-all": collapse_all,
  "collapse-all-outline": collapse_all_outline,
  "color-helper": color_helper,
  comma,
  "comma-box": comma_box,
  "comma-box-outline": comma_box_outline,
  "comma-circle": comma_circle,
  "comma-circle-outline": comma_circle_outline,
  comment,
  "comment-account": comment_account,
  "comment-account-outline": comment_account_outline,
  "comment-alert": comment_alert,
  "comment-alert-outline": comment_alert_outline,
  "comment-arrow-left": comment_arrow_left,
  "comment-arrow-left-outline": comment_arrow_left_outline,
  "comment-arrow-right": comment_arrow_right,
  "comment-arrow-right-outline": comment_arrow_right_outline,
  "comment-check": comment_check,
  "comment-check-outline": comment_check_outline,
  "comment-edit": comment_edit,
  "comment-edit-outline": comment_edit_outline,
  "comment-eye": comment_eye,
  "comment-eye-outline": comment_eye_outline,
  "comment-multiple": comment_multiple,
  "comment-multiple-outline": comment_multiple_outline,
  "comment-outline": comment_outline,
  "comment-plus": comment_plus,
  "comment-plus-outline": comment_plus_outline,
  "comment-processing": comment_processing,
  "comment-processing-outline": comment_processing_outline,
  "comment-question": comment_question,
  "comment-question-outline": comment_question_outline,
  "comment-quote": comment_quote,
  "comment-quote-outline": comment_quote_outline,
  "comment-remove": comment_remove,
  "comment-remove-outline": comment_remove_outline,
  "comment-search": comment_search,
  "comment-search-outline": comment_search_outline,
  "comment-text": comment_text,
  "comment-text-multiple": comment_text_multiple,
  "comment-text-multiple-outline": comment_text_multiple_outline,
  "comment-text-outline": comment_text_outline,
  compare,
  "compare-horizontal": compare_horizontal,
  "compare-vertical": compare_vertical,
  compass,
  "compass-off": compass_off,
  "compass-off-outline": compass_off_outline,
  "compass-outline": compass_outline,
  "compass-rose": compass_rose,
  "concourse-ci": concourse_ci,
  console: console2,
  "console-line": console_line,
  "console-network": console_network,
  "console-network-outline": console_network_outline,
  consolidate,
  "contactless-payment": contactless_payment,
  "contactless-payment-circle": contactless_payment_circle,
  "contactless-payment-circle-outline": contactless_payment_circle_outline,
  contacts,
  "contacts-outline": contacts_outline,
  contain,
  "contain-end": contain_end,
  "contain-start": contain_start,
  "content-copy": content_copy,
  "content-cut": content_cut,
  "content-duplicate": content_duplicate,
  "content-paste": content_paste,
  "content-save": content_save,
  "content-save-alert": content_save_alert,
  "content-save-alert-outline": content_save_alert_outline,
  "content-save-all": content_save_all,
  "content-save-all-outline": content_save_all_outline,
  "content-save-cog": content_save_cog,
  "content-save-cog-outline": content_save_cog_outline,
  "content-save-edit": content_save_edit,
  "content-save-edit-outline": content_save_edit_outline,
  "content-save-move": content_save_move,
  "content-save-move-outline": content_save_move_outline,
  "content-save-outline": content_save_outline,
  "content-save-settings": content_save_settings,
  "content-save-settings-outline": content_save_settings_outline,
  contrast,
  "contrast-box": contrast_box,
  "contrast-circle": contrast_circle,
  "controller-classic": controller_classic,
  "controller-classic-outline": controller_classic_outline,
  cookie,
  "coolant-temperature": coolant_temperature,
  copyright,
  cordova,
  corn,
  "corn-off": corn_off,
  "cosine-wave": cosine_wave,
  counter,
  cow,
  "cpu-32-bit": cpu_32_bit,
  "cpu-64-bit": cpu_64_bit,
  crane,
  creation,
  "creative-commons": creative_commons,
  "credit-card": credit_card,
  "credit-card-check": credit_card_check,
  "credit-card-check-outline": credit_card_check_outline,
  "credit-card-clock": credit_card_clock,
  "credit-card-clock-outline": credit_card_clock_outline,
  "credit-card-marker": credit_card_marker,
  "credit-card-marker-outline": credit_card_marker_outline,
  "credit-card-minus": credit_card_minus,
  "credit-card-minus-outline": credit_card_minus_outline,
  "credit-card-multiple": credit_card_multiple,
  "credit-card-multiple-outline": credit_card_multiple_outline,
  "credit-card-off": credit_card_off,
  "credit-card-off-outline": credit_card_off_outline,
  "credit-card-outline": credit_card_outline,
  "credit-card-plus": credit_card_plus,
  "credit-card-plus-outline": credit_card_plus_outline,
  "credit-card-refund": credit_card_refund,
  "credit-card-refund-outline": credit_card_refund_outline,
  "credit-card-remove": credit_card_remove,
  "credit-card-remove-outline": credit_card_remove_outline,
  "credit-card-scan": credit_card_scan,
  "credit-card-scan-outline": credit_card_scan_outline,
  "credit-card-settings": credit_card_settings,
  "credit-card-settings-outline": credit_card_settings_outline,
  "credit-card-wireless": credit_card_wireless,
  "credit-card-wireless-off": credit_card_wireless_off,
  "credit-card-wireless-off-outline": credit_card_wireless_off_outline,
  "credit-card-wireless-outline": credit_card_wireless_outline,
  cricket,
  crop,
  "crop-free": crop_free,
  "crop-landscape": crop_landscape,
  "crop-portrait": crop_portrait,
  "crop-rotate": crop_rotate,
  "crop-square": crop_square,
  crosshairs,
  "crosshairs-gps": crosshairs_gps,
  "crosshairs-off": crosshairs_off,
  "crosshairs-question": crosshairs_question,
  crown,
  "crown-outline": crown_outline,
  cryengine,
  "crystal-ball": crystal_ball,
  cube,
  "cube-off": cube_off,
  "cube-off-outline": cube_off_outline,
  "cube-outline": cube_outline,
  "cube-scan": cube_scan,
  "cube-send": cube_send,
  "cube-unfolded": cube_unfolded,
  cup,
  "cup-off": cup_off,
  "cup-off-outline": cup_off_outline,
  "cup-outline": cup_outline,
  "cup-water": cup_water,
  cupboard,
  "cupboard-outline": cupboard_outline,
  cupcake,
  curling,
  "currency-bdt": currency_bdt,
  "currency-brl": currency_brl,
  "currency-btc": currency_btc,
  "currency-cny": currency_cny,
  "currency-eth": currency_eth,
  "currency-eur": currency_eur,
  "currency-eur-off": currency_eur_off,
  "currency-gbp": currency_gbp,
  "currency-ils": currency_ils,
  "currency-inr": currency_inr,
  "currency-jpy": currency_jpy,
  "currency-krw": currency_krw,
  "currency-kzt": currency_kzt,
  "currency-ngn": currency_ngn,
  "currency-php": currency_php,
  "currency-rial": currency_rial,
  "currency-rub": currency_rub,
  "currency-sign": currency_sign,
  "currency-try": currency_try,
  "currency-twd": currency_twd,
  "currency-usd": currency_usd,
  "currency-usd-circle": currency_usd_circle,
  "currency-usd-circle-outline": currency_usd_circle_outline,
  "currency-usd-off": currency_usd_off,
  "current-ac": current_ac,
  "current-dc": current_dc,
  "cursor-default": cursor_default,
  "cursor-default-click": cursor_default_click,
  "cursor-default-click-outline": cursor_default_click_outline,
  "cursor-default-gesture": cursor_default_gesture,
  "cursor-default-gesture-outline": cursor_default_gesture_outline,
  "cursor-default-outline": cursor_default_outline,
  "cursor-move": cursor_move,
  "cursor-pointer": cursor_pointer,
  "cursor-text": cursor_text,
  database,
  "database-check": database_check,
  "database-edit": database_edit,
  "database-export": database_export,
  "database-import": database_import,
  "database-lock": database_lock,
  "database-marker": database_marker,
  "database-minus": database_minus,
  "database-plus": database_plus,
  "database-refresh": database_refresh,
  "database-remove": database_remove,
  "database-search": database_search,
  "database-settings": database_settings,
  "database-sync": database_sync,
  "death-star": death_star,
  "death-star-variant": death_star_variant,
  "deathly-hallows": deathly_hallows,
  debian,
  "debug-step-into": debug_step_into,
  "debug-step-out": debug_step_out,
  "debug-step-over": debug_step_over,
  decagram,
  "decagram-outline": decagram_outline,
  decimal,
  "decimal-comma": decimal_comma,
  "decimal-comma-decrease": decimal_comma_decrease,
  "decimal-comma-increase": decimal_comma_increase,
  "decimal-decrease": decimal_decrease,
  "decimal-increase": decimal_increase,
  delete: delete2,
  "delete-alert": delete_alert,
  "delete-alert-outline": delete_alert_outline,
  "delete-circle": delete_circle,
  "delete-circle-outline": delete_circle_outline,
  "delete-empty": delete_empty,
  "delete-empty-outline": delete_empty_outline,
  "delete-forever": delete_forever,
  "delete-forever-outline": delete_forever_outline,
  "delete-off": delete_off,
  "delete-off-outline": delete_off_outline,
  "delete-outline": delete_outline,
  "delete-restore": delete_restore,
  "delete-sweep": delete_sweep,
  "delete-sweep-outline": delete_sweep_outline,
  "delete-variant": delete_variant,
  delta,
  desk,
  "desk-lamp": desk_lamp,
  deskphone,
  "desktop-classic": desktop_classic,
  "desktop-mac": desktop_mac,
  "desktop-mac-dashboard": desktop_mac_dashboard,
  "desktop-tower": desktop_tower,
  "desktop-tower-monitor": desktop_tower_monitor,
  details,
  "dev-to": dev_to,
  "developer-board": developer_board,
  deviantart,
  devices,
  diabetes,
  dialpad,
  diameter,
  "diameter-outline": diameter_outline,
  "diameter-variant": diameter_variant,
  diamond,
  "diamond-outline": diamond_outline,
  "diamond-stone": diamond_stone,
  "dice-1": dice_1,
  "dice-1-outline": dice_1_outline,
  "dice-2": dice_2,
  "dice-2-outline": dice_2_outline,
  "dice-3": dice_3,
  "dice-3-outline": dice_3_outline,
  "dice-4": dice_4,
  "dice-4-outline": dice_4_outline,
  "dice-5": dice_5,
  "dice-5-outline": dice_5_outline,
  "dice-6": dice_6,
  "dice-6-outline": dice_6_outline,
  "dice-d10": dice_d10,
  "dice-d10-outline": dice_d10_outline,
  "dice-d12": dice_d12,
  "dice-d12-outline": dice_d12_outline,
  "dice-d20": dice_d20,
  "dice-d20-outline": dice_d20_outline,
  "dice-d4": dice_d4,
  "dice-d4-outline": dice_d4_outline,
  "dice-d6": dice_d6,
  "dice-d6-outline": dice_d6_outline,
  "dice-d8": dice_d8,
  "dice-d8-outline": dice_d8_outline,
  "dice-multiple": dice_multiple,
  "dice-multiple-outline": dice_multiple_outline,
  "digital-ocean": digital_ocean,
  "dip-switch": dip_switch,
  directions,
  "directions-fork": directions_fork,
  disc,
  "disc-alert": disc_alert,
  "disc-player": disc_player,
  discord,
  dishwasher,
  "dishwasher-alert": dishwasher_alert,
  "dishwasher-off": dishwasher_off,
  disqus,
  "distribute-horizontal-center": distribute_horizontal_center,
  "distribute-horizontal-left": distribute_horizontal_left,
  "distribute-horizontal-right": distribute_horizontal_right,
  "distribute-vertical-bottom": distribute_vertical_bottom,
  "distribute-vertical-center": distribute_vertical_center,
  "distribute-vertical-top": distribute_vertical_top,
  "diving-flippers": diving_flippers,
  "diving-helmet": diving_helmet,
  "diving-scuba": diving_scuba,
  "diving-scuba-flag": diving_scuba_flag,
  "diving-scuba-tank": diving_scuba_tank,
  "diving-scuba-tank-multiple": diving_scuba_tank_multiple,
  "diving-snorkel": diving_snorkel,
  division,
  "division-box": division_box,
  dlna,
  dna,
  dns,
  "dns-outline": dns_outline,
  "do-not-disturb": do_not_disturb,
  "do-not-disturb-off": do_not_disturb_off,
  "dock-bottom": dock_bottom,
  "dock-left": dock_left,
  "dock-right": dock_right,
  "dock-window": dock_window,
  docker,
  doctor,
  dog,
  "dog-service": dog_service,
  "dog-side": dog_side,
  dolby,
  dolly,
  domain,
  "domain-off": domain_off,
  "domain-plus": domain_plus,
  "domain-remove": domain_remove,
  "dome-light": dome_light,
  "domino-mask": domino_mask,
  donkey,
  door,
  "door-closed": door_closed,
  "door-closed-lock": door_closed_lock,
  "door-open": door_open,
  doorbell,
  "doorbell-video": doorbell_video,
  "dot-net": dot_net,
  "dots-horizontal": dots_horizontal,
  "dots-horizontal-circle": dots_horizontal_circle,
  "dots-horizontal-circle-outline": dots_horizontal_circle_outline,
  "dots-vertical": dots_vertical,
  "dots-vertical-circle": dots_vertical_circle,
  "dots-vertical-circle-outline": dots_vertical_circle_outline,
  douban,
  download,
  "download-box": download_box,
  "download-box-outline": download_box_outline,
  "download-circle": download_circle,
  "download-circle-outline": download_circle_outline,
  "download-lock": download_lock,
  "download-lock-outline": download_lock_outline,
  "download-multiple": download_multiple,
  "download-network": download_network,
  "download-network-outline": download_network_outline,
  "download-off": download_off,
  "download-off-outline": download_off_outline,
  "download-outline": download_outline,
  drag,
  "drag-horizontal": drag_horizontal,
  "drag-horizontal-variant": drag_horizontal_variant,
  "drag-variant": drag_variant,
  "drag-vertical": drag_vertical,
  "drag-vertical-variant": drag_vertical_variant,
  "drama-masks": drama_masks,
  draw,
  drawing,
  "drawing-box": drawing_box,
  dresser,
  "dresser-outline": dresser_outline,
  drone,
  dropbox,
  drupal,
  duck,
  dumbbell,
  "dump-truck": dump_truck,
  "ear-hearing": ear_hearing,
  "ear-hearing-off": ear_hearing_off,
  earth,
  "earth-arrow-right": earth_arrow_right,
  "earth-box": earth_box,
  "earth-box-minus": earth_box_minus,
  "earth-box-off": earth_box_off,
  "earth-box-plus": earth_box_plus,
  "earth-box-remove": earth_box_remove,
  "earth-minus": earth_minus,
  "earth-off": earth_off,
  "earth-plus": earth_plus,
  "earth-remove": earth_remove,
  egg,
  "egg-easter": egg_easter,
  "egg-off": egg_off,
  "egg-off-outline": egg_off_outline,
  "egg-outline": egg_outline,
  "eight-track": eight_track,
  eject,
  "eject-outline": eject_outline,
  "electric-switch": electric_switch,
  "electric-switch-closed": electric_switch_closed,
  "electron-framework": electron_framework,
  elephant,
  "elevation-decline": elevation_decline,
  "elevation-rise": elevation_rise,
  elevator,
  "elevator-down": elevator_down,
  "elevator-passenger": elevator_passenger,
  "elevator-up": elevator_up,
  ellipse,
  "ellipse-outline": ellipse_outline,
  email,
  "email-alert": email_alert,
  "email-alert-outline": email_alert_outline,
  "email-box": email_box,
  "email-check": email_check,
  "email-check-outline": email_check_outline,
  "email-edit": email_edit,
  "email-edit-outline": email_edit_outline,
  "email-lock": email_lock,
  "email-mark-as-unread": email_mark_as_unread,
  "email-minus": email_minus,
  "email-minus-outline": email_minus_outline,
  "email-multiple": email_multiple,
  "email-multiple-outline": email_multiple_outline,
  "email-newsletter": email_newsletter,
  "email-off": email_off,
  "email-off-outline": email_off_outline,
  "email-open": email_open,
  "email-open-multiple": email_open_multiple,
  "email-open-multiple-outline": email_open_multiple_outline,
  "email-open-outline": email_open_outline,
  "email-outline": email_outline,
  "email-plus": email_plus,
  "email-plus-outline": email_plus_outline,
  "email-receive": email_receive,
  "email-receive-outline": email_receive_outline,
  "email-search": email_search,
  "email-search-outline": email_search_outline,
  "email-send": email_send,
  "email-send-outline": email_send_outline,
  "email-sync": email_sync,
  "email-sync-outline": email_sync_outline,
  "email-variant": email_variant,
  ember,
  emby,
  emoticon,
  "emoticon-angry": emoticon_angry,
  "emoticon-angry-outline": emoticon_angry_outline,
  "emoticon-confused": emoticon_confused,
  "emoticon-confused-outline": emoticon_confused_outline,
  "emoticon-cool": emoticon_cool,
  "emoticon-cool-outline": emoticon_cool_outline,
  "emoticon-cry": emoticon_cry,
  "emoticon-cry-outline": emoticon_cry_outline,
  "emoticon-dead": emoticon_dead,
  "emoticon-dead-outline": emoticon_dead_outline,
  "emoticon-devil": emoticon_devil,
  "emoticon-devil-outline": emoticon_devil_outline,
  "emoticon-excited": emoticon_excited,
  "emoticon-excited-outline": emoticon_excited_outline,
  "emoticon-frown": emoticon_frown,
  "emoticon-frown-outline": emoticon_frown_outline,
  "emoticon-happy": emoticon_happy,
  "emoticon-happy-outline": emoticon_happy_outline,
  "emoticon-kiss": emoticon_kiss,
  "emoticon-kiss-outline": emoticon_kiss_outline,
  "emoticon-lol": emoticon_lol,
  "emoticon-lol-outline": emoticon_lol_outline,
  "emoticon-neutral": emoticon_neutral,
  "emoticon-neutral-outline": emoticon_neutral_outline,
  "emoticon-outline": emoticon_outline,
  "emoticon-poop": emoticon_poop,
  "emoticon-poop-outline": emoticon_poop_outline,
  "emoticon-sad": emoticon_sad,
  "emoticon-sad-outline": emoticon_sad_outline,
  "emoticon-tongue": emoticon_tongue,
  "emoticon-tongue-outline": emoticon_tongue_outline,
  "emoticon-wink": emoticon_wink,
  "emoticon-wink-outline": emoticon_wink_outline,
  engine,
  "engine-off": engine_off,
  "engine-off-outline": engine_off_outline,
  "engine-outline": engine_outline,
  epsilon,
  equal,
  "equal-box": equal_box,
  equalizer,
  "equalizer-outline": equalizer_outline,
  eraser,
  "eraser-variant": eraser_variant,
  escalator,
  "escalator-box": escalator_box,
  "escalator-down": escalator_down,
  "escalator-up": escalator_up,
  eslint,
  et,
  ethereum,
  ethernet,
  "ethernet-cable": ethernet_cable,
  "ethernet-cable-off": ethernet_cable_off,
  "ev-station": ev_station,
  evernote,
  excavator,
  exclamation,
  "exclamation-thick": exclamation_thick,
  "exit-run": exit_run,
  "exit-to-app": exit_to_app,
  "expand-all": expand_all,
  "expand-all-outline": expand_all_outline,
  "expansion-card": expansion_card,
  "expansion-card-variant": expansion_card_variant,
  exponent,
  "exponent-box": exponent_box,
  export: export2,
  "export-variant": export_variant,
  eye,
  "eye-check": eye_check,
  "eye-check-outline": eye_check_outline,
  "eye-circle": eye_circle,
  "eye-circle-outline": eye_circle_outline,
  "eye-minus": eye_minus,
  "eye-minus-outline": eye_minus_outline,
  "eye-off": eye_off,
  "eye-off-outline": eye_off_outline,
  "eye-outline": eye_outline,
  "eye-plus": eye_plus,
  "eye-plus-outline": eye_plus_outline,
  "eye-settings": eye_settings,
  "eye-settings-outline": eye_settings_outline,
  eyedropper,
  "eyedropper-minus": eyedropper_minus,
  "eyedropper-off": eyedropper_off,
  "eyedropper-plus": eyedropper_plus,
  "eyedropper-remove": eyedropper_remove,
  "eyedropper-variant": eyedropper_variant,
  face,
  "face-agent": face_agent,
  "face-outline": face_outline,
  "face-profile": face_profile,
  "face-profile-woman": face_profile_woman,
  "face-recognition": face_recognition,
  "face-woman": face_woman,
  "face-woman-outline": face_woman_outline,
  facebook,
  "facebook-messenger": facebook_messenger,
  "facebook-workplace": facebook_workplace,
  factory,
  fan,
  "fan-alert": fan_alert,
  "fan-chevron-down": fan_chevron_down,
  "fan-chevron-up": fan_chevron_up,
  "fan-minus": fan_minus,
  "fan-off": fan_off,
  "fan-plus": fan_plus,
  "fan-remove": fan_remove,
  "fan-speed-1": fan_speed_1,
  "fan-speed-2": fan_speed_2,
  "fan-speed-3": fan_speed_3,
  "fast-forward": fast_forward,
  "fast-forward-10": fast_forward_10,
  "fast-forward-30": fast_forward_30,
  "fast-forward-5": fast_forward_5,
  "fast-forward-outline": fast_forward_outline,
  fax,
  feather,
  "feature-search": feature_search,
  "feature-search-outline": feature_search_outline,
  fedora,
  fencing,
  "ferris-wheel": ferris_wheel,
  ferry,
  file,
  "file-account": file_account,
  "file-account-outline": file_account_outline,
  "file-alert": file_alert,
  "file-alert-outline": file_alert_outline,
  "file-cabinet": file_cabinet,
  "file-cad": file_cad,
  "file-cad-box": file_cad_box,
  "file-cancel": file_cancel,
  "file-cancel-outline": file_cancel_outline,
  "file-certificate": file_certificate,
  "file-certificate-outline": file_certificate_outline,
  "file-chart": file_chart,
  "file-chart-outline": file_chart_outline,
  "file-check": file_check,
  "file-check-outline": file_check_outline,
  "file-clock": file_clock,
  "file-clock-outline": file_clock_outline,
  "file-cloud": file_cloud,
  "file-cloud-outline": file_cloud_outline,
  "file-code": file_code,
  "file-code-outline": file_code_outline,
  "file-cog": file_cog,
  "file-cog-outline": file_cog_outline,
  "file-compare": file_compare,
  "file-delimited": file_delimited,
  "file-delimited-outline": file_delimited_outline,
  "file-document": file_document,
  "file-document-edit": file_document_edit,
  "file-document-edit-outline": file_document_edit_outline,
  "file-document-outline": file_document_outline,
  "file-download": file_download,
  "file-download-outline": file_download_outline,
  "file-edit": file_edit,
  "file-edit-outline": file_edit_outline,
  "file-excel": file_excel,
  "file-excel-box": file_excel_box,
  "file-excel-box-outline": file_excel_box_outline,
  "file-excel-outline": file_excel_outline,
  "file-export": file_export,
  "file-export-outline": file_export_outline,
  "file-eye": file_eye,
  "file-eye-outline": file_eye_outline,
  "file-find": file_find,
  "file-find-outline": file_find_outline,
  "file-hidden": file_hidden,
  "file-image": file_image,
  "file-image-outline": file_image_outline,
  "file-import": file_import,
  "file-import-outline": file_import_outline,
  "file-key": file_key,
  "file-key-outline": file_key_outline,
  "file-link": file_link,
  "file-link-outline": file_link_outline,
  "file-lock": file_lock,
  "file-lock-outline": file_lock_outline,
  "file-move": file_move,
  "file-move-outline": file_move_outline,
  "file-multiple": file_multiple,
  "file-multiple-outline": file_multiple_outline,
  "file-music": file_music,
  "file-music-outline": file_music_outline,
  "file-outline": file_outline,
  "file-pdf": file_pdf,
  "file-pdf-box": file_pdf_box,
  "file-pdf-box-outline": file_pdf_box_outline,
  "file-pdf-outline": file_pdf_outline,
  "file-percent": file_percent,
  "file-percent-outline": file_percent_outline,
  "file-phone": file_phone,
  "file-phone-outline": file_phone_outline,
  "file-plus": file_plus,
  "file-plus-outline": file_plus_outline,
  "file-powerpoint": file_powerpoint,
  "file-powerpoint-box": file_powerpoint_box,
  "file-powerpoint-box-outline": file_powerpoint_box_outline,
  "file-powerpoint-outline": file_powerpoint_outline,
  "file-presentation-box": file_presentation_box,
  "file-question": file_question,
  "file-question-outline": file_question_outline,
  "file-refresh": file_refresh,
  "file-refresh-outline": file_refresh_outline,
  "file-remove": file_remove,
  "file-remove-outline": file_remove_outline,
  "file-replace": file_replace,
  "file-replace-outline": file_replace_outline,
  "file-restore": file_restore,
  "file-restore-outline": file_restore_outline,
  "file-search": file_search,
  "file-search-outline": file_search_outline,
  "file-send": file_send,
  "file-send-outline": file_send_outline,
  "file-settings": file_settings,
  "file-settings-outline": file_settings_outline,
  "file-star": file_star,
  "file-star-outline": file_star_outline,
  "file-swap": file_swap,
  "file-swap-outline": file_swap_outline,
  "file-sync": file_sync,
  "file-sync-outline": file_sync_outline,
  "file-table": file_table,
  "file-table-box": file_table_box,
  "file-table-box-multiple": file_table_box_multiple,
  "file-table-box-multiple-outline": file_table_box_multiple_outline,
  "file-table-box-outline": file_table_box_outline,
  "file-table-outline": file_table_outline,
  "file-tree": file_tree,
  "file-tree-outline": file_tree_outline,
  "file-undo": file_undo,
  "file-undo-outline": file_undo_outline,
  "file-upload": file_upload,
  "file-upload-outline": file_upload_outline,
  "file-video": file_video,
  "file-video-outline": file_video_outline,
  "file-word": file_word,
  "file-word-box": file_word_box,
  "file-word-box-outline": file_word_box_outline,
  "file-word-outline": file_word_outline,
  film,
  filmstrip,
  "filmstrip-box": filmstrip_box,
  "filmstrip-box-multiple": filmstrip_box_multiple,
  "filmstrip-off": filmstrip_off,
  filter: filter2,
  "filter-menu": filter_menu,
  "filter-menu-outline": filter_menu_outline,
  "filter-minus": filter_minus,
  "filter-minus-outline": filter_minus_outline,
  "filter-outline": filter_outline,
  "filter-plus": filter_plus,
  "filter-plus-outline": filter_plus_outline,
  "filter-remove": filter_remove,
  "filter-remove-outline": filter_remove_outline,
  "filter-variant": filter_variant,
  "filter-variant-minus": filter_variant_minus,
  "filter-variant-plus": filter_variant_plus,
  "filter-variant-remove": filter_variant_remove,
  finance,
  "find-replace": find_replace,
  fingerprint,
  "fingerprint-off": fingerprint_off,
  fire,
  "fire-extinguisher": fire_extinguisher,
  "fire-hydrant": fire_hydrant,
  "fire-hydrant-alert": fire_hydrant_alert,
  "fire-hydrant-off": fire_hydrant_off,
  "fire-truck": fire_truck,
  firebase,
  firefox,
  fireplace,
  "fireplace-off": fireplace_off,
  firework,
  fish,
  "fish-off": fish_off,
  fishbowl,
  "fishbowl-outline": fishbowl_outline,
  "fit-to-page": fit_to_page,
  "fit-to-page-outline": fit_to_page_outline,
  flag,
  "flag-checkered": flag_checkered,
  "flag-minus": flag_minus,
  "flag-minus-outline": flag_minus_outline,
  "flag-outline": flag_outline,
  "flag-plus": flag_plus,
  "flag-plus-outline": flag_plus_outline,
  "flag-remove": flag_remove,
  "flag-remove-outline": flag_remove_outline,
  "flag-triangle": flag_triangle,
  "flag-variant": flag_variant,
  "flag-variant-outline": flag_variant_outline,
  flare,
  flash,
  "flash-alert": flash_alert,
  "flash-alert-outline": flash_alert_outline,
  "flash-auto": flash_auto,
  "flash-circle": flash_circle,
  "flash-off": flash_off,
  "flash-outline": flash_outline,
  "flash-red-eye": flash_red_eye,
  flashlight,
  "flashlight-off": flashlight_off,
  flask,
  "flask-empty": flask_empty,
  "flask-empty-minus": flask_empty_minus,
  "flask-empty-minus-outline": flask_empty_minus_outline,
  "flask-empty-off": flask_empty_off,
  "flask-empty-off-outline": flask_empty_off_outline,
  "flask-empty-outline": flask_empty_outline,
  "flask-empty-plus": flask_empty_plus,
  "flask-empty-plus-outline": flask_empty_plus_outline,
  "flask-empty-remove": flask_empty_remove,
  "flask-empty-remove-outline": flask_empty_remove_outline,
  "flask-minus": flask_minus,
  "flask-minus-outline": flask_minus_outline,
  "flask-off": flask_off,
  "flask-off-outline": flask_off_outline,
  "flask-outline": flask_outline,
  "flask-plus": flask_plus,
  "flask-plus-outline": flask_plus_outline,
  "flask-remove": flask_remove,
  "flask-remove-outline": flask_remove_outline,
  "flask-round-bottom": flask_round_bottom,
  "flask-round-bottom-empty": flask_round_bottom_empty,
  "flask-round-bottom-empty-outline": flask_round_bottom_empty_outline,
  "flask-round-bottom-outline": flask_round_bottom_outline,
  "fleur-de-lis": fleur_de_lis,
  "flip-horizontal": flip_horizontal,
  "flip-to-back": flip_to_back,
  "flip-to-front": flip_to_front,
  "flip-vertical": flip_vertical,
  "floor-lamp": floor_lamp,
  "floor-lamp-dual": floor_lamp_dual,
  "floor-lamp-variant": floor_lamp_variant,
  "floor-plan": floor_plan,
  floppy,
  "floppy-variant": floppy_variant,
  flower,
  "flower-outline": flower_outline,
  "flower-poppy": flower_poppy,
  "flower-tulip": flower_tulip,
  "flower-tulip-outline": flower_tulip_outline,
  "focus-auto": focus_auto,
  "focus-field": focus_field,
  "focus-field-horizontal": focus_field_horizontal,
  "focus-field-vertical": focus_field_vertical,
  folder,
  "folder-account": folder_account,
  "folder-account-outline": folder_account_outline,
  "folder-alert": folder_alert,
  "folder-alert-outline": folder_alert_outline,
  "folder-clock": folder_clock,
  "folder-clock-outline": folder_clock_outline,
  "folder-cog": folder_cog,
  "folder-cog-outline": folder_cog_outline,
  "folder-download": folder_download,
  "folder-download-outline": folder_download_outline,
  "folder-edit": folder_edit,
  "folder-edit-outline": folder_edit_outline,
  "folder-google-drive": folder_google_drive,
  "folder-heart": folder_heart,
  "folder-heart-outline": folder_heart_outline,
  "folder-home": folder_home,
  "folder-home-outline": folder_home_outline,
  "folder-image": folder_image,
  "folder-information": folder_information,
  "folder-information-outline": folder_information_outline,
  "folder-key": folder_key,
  "folder-key-network": folder_key_network,
  "folder-key-network-outline": folder_key_network_outline,
  "folder-key-outline": folder_key_outline,
  "folder-lock": folder_lock,
  "folder-lock-open": folder_lock_open,
  "folder-marker": folder_marker,
  "folder-marker-outline": folder_marker_outline,
  "folder-move": folder_move,
  "folder-move-outline": folder_move_outline,
  "folder-multiple": folder_multiple,
  "folder-multiple-image": folder_multiple_image,
  "folder-multiple-outline": folder_multiple_outline,
  "folder-multiple-plus": folder_multiple_plus,
  "folder-multiple-plus-outline": folder_multiple_plus_outline,
  "folder-music": folder_music,
  "folder-music-outline": folder_music_outline,
  "folder-network": folder_network,
  "folder-network-outline": folder_network_outline,
  "folder-open": folder_open,
  "folder-open-outline": folder_open_outline,
  "folder-outline": folder_outline,
  "folder-plus": folder_plus,
  "folder-plus-outline": folder_plus_outline,
  "folder-pound": folder_pound,
  "folder-pound-outline": folder_pound_outline,
  "folder-refresh": folder_refresh,
  "folder-refresh-outline": folder_refresh_outline,
  "folder-remove": folder_remove,
  "folder-remove-outline": folder_remove_outline,
  "folder-search": folder_search,
  "folder-search-outline": folder_search_outline,
  "folder-settings": folder_settings,
  "folder-settings-outline": folder_settings_outline,
  "folder-star": folder_star,
  "folder-star-multiple": folder_star_multiple,
  "folder-star-multiple-outline": folder_star_multiple_outline,
  "folder-star-outline": folder_star_outline,
  "folder-swap": folder_swap,
  "folder-swap-outline": folder_swap_outline,
  "folder-sync": folder_sync,
  "folder-sync-outline": folder_sync_outline,
  "folder-table": folder_table,
  "folder-table-outline": folder_table_outline,
  "folder-text": folder_text,
  "folder-text-outline": folder_text_outline,
  "folder-upload": folder_upload,
  "folder-upload-outline": folder_upload_outline,
  "folder-zip": folder_zip,
  "folder-zip-outline": folder_zip_outline,
  "font-awesome": font_awesome,
  food,
  "food-apple": food_apple,
  "food-apple-outline": food_apple_outline,
  "food-croissant": food_croissant,
  "food-drumstick": food_drumstick,
  "food-drumstick-off": food_drumstick_off,
  "food-drumstick-off-outline": food_drumstick_off_outline,
  "food-drumstick-outline": food_drumstick_outline,
  "food-fork-drink": food_fork_drink,
  "food-off": food_off,
  "food-steak": food_steak,
  "food-steak-off": food_steak_off,
  "food-variant": food_variant,
  "food-variant-off": food_variant_off,
  "foot-print": foot_print,
  football,
  "football-australian": football_australian,
  "football-helmet": football_helmet,
  forklift,
  "form-dropdown": form_dropdown,
  "form-select": form_select,
  "form-textarea": form_textarea,
  "form-textbox": form_textbox,
  "form-textbox-lock": form_textbox_lock,
  "form-textbox-password": form_textbox_password,
  "format-align-bottom": format_align_bottom,
  "format-align-center": format_align_center,
  "format-align-justify": format_align_justify,
  "format-align-left": format_align_left,
  "format-align-middle": format_align_middle,
  "format-align-right": format_align_right,
  "format-align-top": format_align_top,
  "format-annotation-minus": format_annotation_minus,
  "format-annotation-plus": format_annotation_plus,
  "format-bold": format_bold,
  "format-clear": format_clear,
  "format-color-fill": format_color_fill,
  "format-color-highlight": format_color_highlight,
  "format-color-marker-cancel": format_color_marker_cancel,
  "format-color-text": format_color_text,
  "format-columns": format_columns,
  "format-float-center": format_float_center,
  "format-float-left": format_float_left,
  "format-float-none": format_float_none,
  "format-float-right": format_float_right,
  "format-font": format_font,
  "format-font-size-decrease": format_font_size_decrease,
  "format-font-size-increase": format_font_size_increase,
  "format-header-1": format_header_1,
  "format-header-2": format_header_2,
  "format-header-3": format_header_3,
  "format-header-4": format_header_4,
  "format-header-5": format_header_5,
  "format-header-6": format_header_6,
  "format-header-decrease": format_header_decrease,
  "format-header-equal": format_header_equal,
  "format-header-increase": format_header_increase,
  "format-header-pound": format_header_pound,
  "format-horizontal-align-center": format_horizontal_align_center,
  "format-horizontal-align-left": format_horizontal_align_left,
  "format-horizontal-align-right": format_horizontal_align_right,
  "format-indent-decrease": format_indent_decrease,
  "format-indent-increase": format_indent_increase,
  "format-italic": format_italic,
  "format-letter-case": format_letter_case,
  "format-letter-case-lower": format_letter_case_lower,
  "format-letter-case-upper": format_letter_case_upper,
  "format-letter-ends-with": format_letter_ends_with,
  "format-letter-matches": format_letter_matches,
  "format-letter-starts-with": format_letter_starts_with,
  "format-line-spacing": format_line_spacing,
  "format-line-style": format_line_style,
  "format-line-weight": format_line_weight,
  "format-list-bulleted": format_list_bulleted,
  "format-list-bulleted-square": format_list_bulleted_square,
  "format-list-bulleted-triangle": format_list_bulleted_triangle,
  "format-list-bulleted-type": format_list_bulleted_type,
  "format-list-checkbox": format_list_checkbox,
  "format-list-checks": format_list_checks,
  "format-list-numbered": format_list_numbered,
  "format-list-numbered-rtl": format_list_numbered_rtl,
  "format-list-text": format_list_text,
  "format-overline": format_overline,
  "format-page-break": format_page_break,
  "format-paint": format_paint,
  "format-paragraph": format_paragraph,
  "format-pilcrow": format_pilcrow,
  "format-quote-close": format_quote_close,
  "format-quote-close-outline": format_quote_close_outline,
  "format-quote-open": format_quote_open,
  "format-quote-open-outline": format_quote_open_outline,
  "format-rotate-90": format_rotate_90,
  "format-section": format_section,
  "format-size": format_size,
  "format-strikethrough": format_strikethrough,
  "format-strikethrough-variant": format_strikethrough_variant,
  "format-subscript": format_subscript,
  "format-superscript": format_superscript,
  "format-text": format_text,
  "format-text-rotation-angle-down": format_text_rotation_angle_down,
  "format-text-rotation-angle-up": format_text_rotation_angle_up,
  "format-text-rotation-down": format_text_rotation_down,
  "format-text-rotation-down-vertical": format_text_rotation_down_vertical,
  "format-text-rotation-none": format_text_rotation_none,
  "format-text-rotation-up": format_text_rotation_up,
  "format-text-rotation-vertical": format_text_rotation_vertical,
  "format-text-variant": format_text_variant,
  "format-text-wrapping-clip": format_text_wrapping_clip,
  "format-text-wrapping-overflow": format_text_wrapping_overflow,
  "format-text-wrapping-wrap": format_text_wrapping_wrap,
  "format-textbox": format_textbox,
  "format-textdirection-l-to-r": format_textdirection_l_to_r,
  "format-textdirection-r-to-l": format_textdirection_r_to_l,
  "format-title": format_title,
  "format-underline": format_underline,
  "format-vertical-align-bottom": format_vertical_align_bottom,
  "format-vertical-align-center": format_vertical_align_center,
  "format-vertical-align-top": format_vertical_align_top,
  "format-wrap-inline": format_wrap_inline,
  "format-wrap-square": format_wrap_square,
  "format-wrap-tight": format_wrap_tight,
  "format-wrap-top-bottom": format_wrap_top_bottom,
  forum,
  "forum-outline": forum_outline,
  forward,
  forwardburger,
  fountain,
  "fountain-pen": fountain_pen,
  "fountain-pen-tip": fountain_pen_tip,
  freebsd,
  "frequently-asked-questions": frequently_asked_questions,
  fridge,
  "fridge-alert": fridge_alert,
  "fridge-alert-outline": fridge_alert_outline,
  "fridge-bottom": fridge_bottom,
  "fridge-off": fridge_off,
  "fridge-off-outline": fridge_off_outline,
  "fridge-outline": fridge_outline,
  "fridge-top": fridge_top,
  "fruit-cherries": fruit_cherries,
  "fruit-cherries-off": fruit_cherries_off,
  "fruit-citrus": fruit_citrus,
  "fruit-citrus-off": fruit_citrus_off,
  "fruit-grapes": fruit_grapes,
  "fruit-grapes-outline": fruit_grapes_outline,
  "fruit-pineapple": fruit_pineapple,
  "fruit-watermelon": fruit_watermelon,
  fuel,
  fullscreen,
  "fullscreen-exit": fullscreen_exit,
  function: function2,
  "function-variant": function_variant,
  "furigana-horizontal": furigana_horizontal,
  "furigana-vertical": furigana_vertical,
  fuse,
  "fuse-alert": fuse_alert,
  "fuse-blade": fuse_blade,
  "fuse-off": fuse_off,
  gamepad,
  "gamepad-circle": gamepad_circle,
  "gamepad-circle-down": gamepad_circle_down,
  "gamepad-circle-left": gamepad_circle_left,
  "gamepad-circle-outline": gamepad_circle_outline,
  "gamepad-circle-right": gamepad_circle_right,
  "gamepad-circle-up": gamepad_circle_up,
  "gamepad-down": gamepad_down,
  "gamepad-left": gamepad_left,
  "gamepad-right": gamepad_right,
  "gamepad-round": gamepad_round,
  "gamepad-round-down": gamepad_round_down,
  "gamepad-round-left": gamepad_round_left,
  "gamepad-round-outline": gamepad_round_outline,
  "gamepad-round-right": gamepad_round_right,
  "gamepad-round-up": gamepad_round_up,
  "gamepad-square": gamepad_square,
  "gamepad-square-outline": gamepad_square_outline,
  "gamepad-up": gamepad_up,
  "gamepad-variant": gamepad_variant,
  "gamepad-variant-outline": gamepad_variant_outline,
  gamma,
  "gantry-crane": gantry_crane,
  garage,
  "garage-alert": garage_alert,
  "garage-alert-variant": garage_alert_variant,
  "garage-open": garage_open,
  "garage-open-variant": garage_open_variant,
  "garage-variant": garage_variant,
  "gas-cylinder": gas_cylinder,
  "gas-station": gas_station,
  "gas-station-off": gas_station_off,
  "gas-station-off-outline": gas_station_off_outline,
  "gas-station-outline": gas_station_outline,
  gate,
  "gate-and": gate_and,
  "gate-arrow-right": gate_arrow_right,
  "gate-nand": gate_nand,
  "gate-nor": gate_nor,
  "gate-not": gate_not,
  "gate-open": gate_open,
  "gate-or": gate_or,
  "gate-xnor": gate_xnor,
  "gate-xor": gate_xor,
  gatsby,
  gauge,
  "gauge-empty": gauge_empty,
  "gauge-full": gauge_full,
  "gauge-low": gauge_low,
  gavel,
  "gender-female": gender_female,
  "gender-male": gender_male,
  "gender-male-female": gender_male_female,
  "gender-male-female-variant": gender_male_female_variant,
  "gender-non-binary": gender_non_binary,
  "gender-transgender": gender_transgender,
  gentoo,
  gesture,
  "gesture-double-tap": gesture_double_tap,
  "gesture-pinch": gesture_pinch,
  "gesture-spread": gesture_spread,
  "gesture-swipe": gesture_swipe,
  "gesture-swipe-down": gesture_swipe_down,
  "gesture-swipe-horizontal": gesture_swipe_horizontal,
  "gesture-swipe-left": gesture_swipe_left,
  "gesture-swipe-right": gesture_swipe_right,
  "gesture-swipe-up": gesture_swipe_up,
  "gesture-swipe-vertical": gesture_swipe_vertical,
  "gesture-tap": gesture_tap,
  "gesture-tap-box": gesture_tap_box,
  "gesture-tap-button": gesture_tap_button,
  "gesture-tap-hold": gesture_tap_hold,
  "gesture-two-double-tap": gesture_two_double_tap,
  "gesture-two-tap": gesture_two_tap,
  ghost,
  "ghost-off": ghost_off,
  gif,
  gift,
  "gift-outline": gift_outline,
  git,
  github,
  gitlab,
  "glass-cocktail": glass_cocktail,
  "glass-flute": glass_flute,
  "glass-mug": glass_mug,
  "glass-mug-variant": glass_mug_variant,
  "glass-pint-outline": glass_pint_outline,
  "glass-stange": glass_stange,
  "glass-tulip": glass_tulip,
  "glass-wine": glass_wine,
  glasses,
  "globe-light": globe_light,
  "globe-model": globe_model,
  gmail,
  gnome,
  "go-kart": go_kart,
  "go-kart-track": go_kart_track,
  gog,
  gold,
  golf,
  "golf-cart": golf_cart,
  "golf-tee": golf_tee,
  gondola,
  goodreads,
  google,
  "google-ads": google_ads,
  "google-analytics": google_analytics,
  "google-assistant": google_assistant,
  "google-cardboard": google_cardboard,
  "google-chrome": google_chrome,
  "google-circles": google_circles,
  "google-circles-communities": google_circles_communities,
  "google-circles-extended": google_circles_extended,
  "google-circles-group": google_circles_group,
  "google-classroom": google_classroom,
  "google-cloud": google_cloud,
  "google-controller": google_controller,
  "google-controller-off": google_controller_off,
  "google-downasaur": google_downasaur,
  "google-drive": google_drive,
  "google-earth": google_earth,
  "google-fit": google_fit,
  "google-glass": google_glass,
  "google-hangouts": google_hangouts,
  "google-home": google_home,
  "google-keep": google_keep,
  "google-lens": google_lens,
  "google-maps": google_maps,
  "google-my-business": google_my_business,
  "google-nearby": google_nearby,
  "google-photos": google_photos,
  "google-play": google_play,
  "google-plus": google_plus,
  "google-podcast": google_podcast,
  "google-spreadsheet": google_spreadsheet,
  "google-street-view": google_street_view,
  "google-translate": google_translate,
  gradient: gradient2,
  grain,
  graph,
  "graph-outline": graph_outline,
  graphql,
  "grave-stone": grave_stone,
  "grease-pencil": grease_pencil,
  "greater-than": greater_than,
  "greater-than-or-equal": greater_than_or_equal,
  grid: grid2,
  "grid-large": grid_large,
  "grid-off": grid_off,
  grill,
  "grill-outline": grill_outline,
  group,
  "guitar-acoustic": guitar_acoustic,
  "guitar-electric": guitar_electric,
  "guitar-pick": guitar_pick,
  "guitar-pick-outline": guitar_pick_outline,
  "guy-fawkes-mask": guy_fawkes_mask,
  hail,
  "hair-dryer": hair_dryer,
  "hair-dryer-outline": hair_dryer_outline,
  halloween,
  hamburger,
  hammer,
  "hammer-screwdriver": hammer_screwdriver,
  "hammer-wrench": hammer_wrench,
  hand,
  "hand-heart": hand_heart,
  "hand-left": hand_left,
  "hand-okay": hand_okay,
  "hand-peace": hand_peace,
  "hand-peace-variant": hand_peace_variant,
  "hand-pointing-down": hand_pointing_down,
  "hand-pointing-left": hand_pointing_left,
  "hand-pointing-right": hand_pointing_right,
  "hand-pointing-up": hand_pointing_up,
  "hand-right": hand_right,
  "hand-saw": hand_saw,
  "hand-water": hand_water,
  handball,
  handcuffs,
  handshake,
  hanger,
  "hard-hat": hard_hat,
  harddisk,
  "harddisk-plus": harddisk_plus,
  "harddisk-remove": harddisk_remove,
  "hat-fedora": hat_fedora,
  "hazard-lights": hazard_lights,
  hdr,
  "hdr-off": hdr_off,
  head,
  "head-alert": head_alert,
  "head-alert-outline": head_alert_outline,
  "head-check": head_check,
  "head-check-outline": head_check_outline,
  "head-cog": head_cog,
  "head-cog-outline": head_cog_outline,
  "head-dots-horizontal": head_dots_horizontal,
  "head-dots-horizontal-outline": head_dots_horizontal_outline,
  "head-flash": head_flash,
  "head-flash-outline": head_flash_outline,
  "head-heart": head_heart,
  "head-heart-outline": head_heart_outline,
  "head-lightbulb": head_lightbulb,
  "head-lightbulb-outline": head_lightbulb_outline,
  "head-minus": head_minus,
  "head-minus-outline": head_minus_outline,
  "head-outline": head_outline,
  "head-plus": head_plus,
  "head-plus-outline": head_plus_outline,
  "head-question": head_question,
  "head-question-outline": head_question_outline,
  "head-remove": head_remove,
  "head-remove-outline": head_remove_outline,
  "head-snowflake": head_snowflake,
  "head-snowflake-outline": head_snowflake_outline,
  "head-sync": head_sync,
  "head-sync-outline": head_sync_outline,
  headphones,
  "headphones-bluetooth": headphones_bluetooth,
  "headphones-box": headphones_box,
  "headphones-off": headphones_off,
  "headphones-settings": headphones_settings,
  headset,
  "headset-dock": headset_dock,
  "headset-off": headset_off,
  heart,
  "heart-box": heart_box,
  "heart-box-outline": heart_box_outline,
  "heart-broken": heart_broken,
  "heart-broken-outline": heart_broken_outline,
  "heart-circle": heart_circle,
  "heart-circle-outline": heart_circle_outline,
  "heart-flash": heart_flash,
  "heart-half": heart_half,
  "heart-half-full": heart_half_full,
  "heart-half-outline": heart_half_outline,
  "heart-minus": heart_minus,
  "heart-minus-outline": heart_minus_outline,
  "heart-multiple": heart_multiple,
  "heart-multiple-outline": heart_multiple_outline,
  "heart-off": heart_off,
  "heart-off-outline": heart_off_outline,
  "heart-outline": heart_outline,
  "heart-plus": heart_plus,
  "heart-plus-outline": heart_plus_outline,
  "heart-pulse": heart_pulse,
  "heart-remove": heart_remove,
  "heart-remove-outline": heart_remove_outline,
  helicopter,
  help,
  "help-box": help_box,
  "help-circle": help_circle,
  "help-circle-outline": help_circle_outline,
  "help-network": help_network,
  "help-network-outline": help_network_outline,
  "help-rhombus": help_rhombus,
  "help-rhombus-outline": help_rhombus_outline,
  hexadecimal,
  hexagon,
  "hexagon-multiple": hexagon_multiple,
  "hexagon-multiple-outline": hexagon_multiple_outline,
  "hexagon-outline": hexagon_outline,
  "hexagon-slice-1": hexagon_slice_1,
  "hexagon-slice-2": hexagon_slice_2,
  "hexagon-slice-3": hexagon_slice_3,
  "hexagon-slice-4": hexagon_slice_4,
  "hexagon-slice-5": hexagon_slice_5,
  "hexagon-slice-6": hexagon_slice_6,
  hexagram,
  "hexagram-outline": hexagram_outline,
  "high-definition": high_definition,
  "high-definition-box": high_definition_box,
  highway,
  hiking,
  hinduism,
  history,
  "hockey-puck": hockey_puck,
  "hockey-sticks": hockey_sticks,
  hololens,
  home,
  "home-account": home_account,
  "home-alert": home_alert,
  "home-analytics": home_analytics,
  "home-assistant": home_assistant,
  "home-automation": home_automation,
  "home-circle": home_circle,
  "home-circle-outline": home_circle_outline,
  "home-city": home_city,
  "home-city-outline": home_city_outline,
  "home-currency-usd": home_currency_usd,
  "home-edit": home_edit,
  "home-edit-outline": home_edit_outline,
  "home-export-outline": home_export_outline,
  "home-flood": home_flood,
  "home-floor-0": home_floor_0,
  "home-floor-1": home_floor_1,
  "home-floor-2": home_floor_2,
  "home-floor-3": home_floor_3,
  "home-floor-a": home_floor_a,
  "home-floor-b": home_floor_b,
  "home-floor-g": home_floor_g,
  "home-floor-l": home_floor_l,
  "home-floor-negative-1": home_floor_negative_1,
  "home-group": home_group,
  "home-heart": home_heart,
  "home-import-outline": home_import_outline,
  "home-lightbulb": home_lightbulb,
  "home-lightbulb-outline": home_lightbulb_outline,
  "home-lock": home_lock,
  "home-lock-open": home_lock_open,
  "home-map-marker": home_map_marker,
  "home-minus": home_minus,
  "home-minus-outline": home_minus_outline,
  "home-modern": home_modern,
  "home-outline": home_outline,
  "home-plus": home_plus,
  "home-plus-outline": home_plus_outline,
  "home-remove": home_remove,
  "home-remove-outline": home_remove_outline,
  "home-roof": home_roof,
  "home-search": home_search,
  "home-search-outline": home_search_outline,
  "home-thermometer": home_thermometer,
  "home-thermometer-outline": home_thermometer_outline,
  "home-variant": home_variant,
  "home-variant-outline": home_variant_outline,
  hook,
  "hook-off": hook_off,
  hops,
  "horizontal-rotate-clockwise": horizontal_rotate_clockwise,
  "horizontal-rotate-counterclockwise": horizontal_rotate_counterclockwise,
  horseshoe,
  hospital,
  "hospital-box": hospital_box,
  "hospital-box-outline": hospital_box_outline,
  "hospital-building": hospital_building,
  "hospital-marker": hospital_marker,
  "hot-tub": hot_tub,
  "hours-24": hours_24,
  hubspot,
  hulu,
  human,
  "human-baby-changing-table": human_baby_changing_table,
  "human-child": human_child,
  "human-female": human_female,
  "human-female-boy": human_female_boy,
  "human-female-female": human_female_female,
  "human-female-girl": human_female_girl,
  "human-greeting": human_greeting,
  "human-handsdown": human_handsdown,
  "human-handsup": human_handsup,
  "human-male": human_male,
  "human-male-boy": human_male_boy,
  "human-male-child": human_male_child,
  "human-male-female": human_male_female,
  "human-male-girl": human_male_girl,
  "human-male-height": human_male_height,
  "human-male-height-variant": human_male_height_variant,
  "human-male-male": human_male_male,
  "human-pregnant": human_pregnant,
  "human-wheelchair": human_wheelchair,
  "humble-bundle": humble_bundle,
  hvac,
  "hydraulic-oil-level": hydraulic_oil_level,
  "hydraulic-oil-temperature": hydraulic_oil_temperature,
  "hydro-power": hydro_power,
  "ice-cream": ice_cream,
  "ice-cream-off": ice_cream_off,
  "ice-pop": ice_pop,
  "id-card": id_card,
  identifier,
  "ideogram-cjk": ideogram_cjk,
  "ideogram-cjk-variant": ideogram_cjk_variant,
  iframe,
  "iframe-array": iframe_array,
  "iframe-array-outline": iframe_array_outline,
  "iframe-braces": iframe_braces,
  "iframe-braces-outline": iframe_braces_outline,
  "iframe-outline": iframe_outline,
  "iframe-parentheses": iframe_parentheses,
  "iframe-parentheses-outline": iframe_parentheses_outline,
  "iframe-variable": iframe_variable,
  "iframe-variable-outline": iframe_variable_outline,
  image,
  "image-album": image_album,
  "image-area": image_area,
  "image-area-close": image_area_close,
  "image-auto-adjust": image_auto_adjust,
  "image-broken": image_broken,
  "image-broken-variant": image_broken_variant,
  "image-edit": image_edit,
  "image-edit-outline": image_edit_outline,
  "image-filter-black-white": image_filter_black_white,
  "image-filter-center-focus": image_filter_center_focus,
  "image-filter-center-focus-strong": image_filter_center_focus_strong,
  "image-filter-center-focus-strong-outline": image_filter_center_focus_strong_outline,
  "image-filter-center-focus-weak": image_filter_center_focus_weak,
  "image-filter-drama": image_filter_drama,
  "image-filter-frames": image_filter_frames,
  "image-filter-hdr": image_filter_hdr,
  "image-filter-none": image_filter_none,
  "image-filter-tilt-shift": image_filter_tilt_shift,
  "image-filter-vintage": image_filter_vintage,
  "image-frame": image_frame,
  "image-minus": image_minus,
  "image-move": image_move,
  "image-multiple": image_multiple,
  "image-multiple-outline": image_multiple_outline,
  "image-off": image_off,
  "image-off-outline": image_off_outline,
  "image-outline": image_outline,
  "image-plus": image_plus,
  "image-remove": image_remove,
  "image-search": image_search,
  "image-search-outline": image_search_outline,
  "image-size-select-actual": image_size_select_actual,
  "image-size-select-large": image_size_select_large,
  "image-size-select-small": image_size_select_small,
  import: import2,
  inbox,
  "inbox-arrow-down": inbox_arrow_down,
  "inbox-arrow-down-outline": inbox_arrow_down_outline,
  "inbox-arrow-up": inbox_arrow_up,
  "inbox-arrow-up-outline": inbox_arrow_up_outline,
  "inbox-full": inbox_full,
  "inbox-full-outline": inbox_full_outline,
  "inbox-multiple": inbox_multiple,
  "inbox-multiple-outline": inbox_multiple_outline,
  "inbox-outline": inbox_outline,
  incognito,
  "incognito-circle": incognito_circle,
  "incognito-circle-off": incognito_circle_off,
  "incognito-off": incognito_off,
  infinity,
  information,
  "information-outline": information_outline,
  "information-variant": information_variant,
  instagram,
  "instrument-triangle": instrument_triangle,
  "invert-colors": invert_colors,
  "invert-colors-off": invert_colors_off,
  iobroker,
  ip,
  "ip-network": ip_network,
  "ip-network-outline": ip_network_outline,
  ipod,
  islam,
  island,
  "iv-bag": iv_bag,
  jabber,
  jeepney,
  jellyfish,
  "jellyfish-outline": jellyfish_outline,
  jira,
  jquery,
  jsfiddle,
  judaism,
  "jump-rope": jump_rope,
  kabaddi,
  karate,
  keg,
  kettle,
  "kettle-alert": kettle_alert,
  "kettle-alert-outline": kettle_alert_outline,
  "kettle-off": kettle_off,
  "kettle-off-outline": kettle_off_outline,
  "kettle-outline": kettle_outline,
  "kettle-steam": kettle_steam,
  "kettle-steam-outline": kettle_steam_outline,
  kettlebell,
  key,
  "key-arrow-right": key_arrow_right,
  "key-change": key_change,
  "key-link": key_link,
  "key-minus": key_minus,
  "key-outline": key_outline,
  "key-plus": key_plus,
  "key-remove": key_remove,
  "key-star": key_star,
  "key-variant": key_variant,
  "key-wireless": key_wireless,
  keyboard,
  "keyboard-backspace": keyboard_backspace,
  "keyboard-caps": keyboard_caps,
  "keyboard-close": keyboard_close,
  "keyboard-esc": keyboard_esc,
  "keyboard-f1": keyboard_f1,
  "keyboard-f10": keyboard_f10,
  "keyboard-f11": keyboard_f11,
  "keyboard-f12": keyboard_f12,
  "keyboard-f2": keyboard_f2,
  "keyboard-f3": keyboard_f3,
  "keyboard-f4": keyboard_f4,
  "keyboard-f5": keyboard_f5,
  "keyboard-f6": keyboard_f6,
  "keyboard-f7": keyboard_f7,
  "keyboard-f8": keyboard_f8,
  "keyboard-f9": keyboard_f9,
  "keyboard-off": keyboard_off,
  "keyboard-off-outline": keyboard_off_outline,
  "keyboard-outline": keyboard_outline,
  "keyboard-return": keyboard_return,
  "keyboard-settings": keyboard_settings,
  "keyboard-settings-outline": keyboard_settings_outline,
  "keyboard-space": keyboard_space,
  "keyboard-tab": keyboard_tab,
  "keyboard-variant": keyboard_variant,
  khanda,
  kickstarter,
  klingon,
  knife,
  "knife-military": knife_military,
  kodi,
  kubernetes,
  label,
  "label-multiple": label_multiple,
  "label-multiple-outline": label_multiple_outline,
  "label-off": label_off,
  "label-off-outline": label_off_outline,
  "label-outline": label_outline,
  "label-percent": label_percent,
  "label-percent-outline": label_percent_outline,
  "label-variant": label_variant,
  "label-variant-outline": label_variant_outline,
  ladybug,
  lambda,
  lamp,
  lan,
  "lan-check": lan_check,
  "lan-connect": lan_connect,
  "lan-disconnect": lan_disconnect,
  "lan-pending": lan_pending,
  "language-c": language_c,
  "language-cpp": language_cpp,
  "language-csharp": language_csharp,
  "language-css3": language_css3,
  "language-fortran": language_fortran,
  "language-go": language_go,
  "language-haskell": language_haskell,
  "language-html5": language_html5,
  "language-java": language_java,
  "language-javascript": language_javascript,
  "language-kotlin": language_kotlin,
  "language-lua": language_lua,
  "language-markdown": language_markdown,
  "language-markdown-outline": language_markdown_outline,
  "language-php": language_php,
  "language-python": language_python,
  "language-r": language_r,
  "language-ruby": language_ruby,
  "language-ruby-on-rails": language_ruby_on_rails,
  "language-swift": language_swift,
  "language-typescript": language_typescript,
  "language-xaml": language_xaml,
  laptop,
  "laptop-chromebook": laptop_chromebook,
  "laptop-mac": laptop_mac,
  "laptop-off": laptop_off,
  "laptop-windows": laptop_windows,
  laravel,
  "laser-pointer": laser_pointer,
  lasso,
  lastpass,
  latitude,
  launch,
  "lava-lamp": lava_lamp,
  layers,
  "layers-minus": layers_minus,
  "layers-off": layers_off,
  "layers-off-outline": layers_off_outline,
  "layers-outline": layers_outline,
  "layers-plus": layers_plus,
  "layers-remove": layers_remove,
  "layers-search": layers_search,
  "layers-search-outline": layers_search_outline,
  "layers-triple": layers_triple,
  "layers-triple-outline": layers_triple_outline,
  "lead-pencil": lead_pencil,
  leaf,
  "leaf-maple": leaf_maple,
  "leaf-maple-off": leaf_maple_off,
  "leaf-off": leaf_off,
  leak,
  "leak-off": leak_off,
  "led-off": led_off,
  "led-on": led_on,
  "led-outline": led_outline,
  "led-strip": led_strip,
  "led-strip-variant": led_strip_variant,
  "led-variant-off": led_variant_off,
  "led-variant-on": led_variant_on,
  "led-variant-outline": led_variant_outline,
  leek,
  "less-than": less_than,
  "less-than-or-equal": less_than_or_equal,
  library,
  "library-shelves": library_shelves,
  license,
  lifebuoy,
  "light-switch": light_switch,
  lightbulb,
  "lightbulb-cfl": lightbulb_cfl,
  "lightbulb-cfl-off": lightbulb_cfl_off,
  "lightbulb-cfl-spiral": lightbulb_cfl_spiral,
  "lightbulb-cfl-spiral-off": lightbulb_cfl_spiral_off,
  "lightbulb-group": lightbulb_group,
  "lightbulb-group-off": lightbulb_group_off,
  "lightbulb-group-off-outline": lightbulb_group_off_outline,
  "lightbulb-group-outline": lightbulb_group_outline,
  "lightbulb-multiple": lightbulb_multiple,
  "lightbulb-multiple-off": lightbulb_multiple_off,
  "lightbulb-multiple-off-outline": lightbulb_multiple_off_outline,
  "lightbulb-multiple-outline": lightbulb_multiple_outline,
  "lightbulb-off": lightbulb_off,
  "lightbulb-off-outline": lightbulb_off_outline,
  "lightbulb-on": lightbulb_on,
  "lightbulb-on-outline": lightbulb_on_outline,
  "lightbulb-outline": lightbulb_outline,
  lighthouse,
  "lighthouse-on": lighthouse_on,
  "lightning-bolt": lightning_bolt,
  "lightning-bolt-outline": lightning_bolt_outline,
  lingerie,
  link,
  "link-box": link_box,
  "link-box-outline": link_box_outline,
  "link-box-variant": link_box_variant,
  "link-box-variant-outline": link_box_variant_outline,
  "link-lock": link_lock,
  "link-off": link_off,
  "link-plus": link_plus,
  "link-variant": link_variant,
  "link-variant-minus": link_variant_minus,
  "link-variant-off": link_variant_off,
  "link-variant-plus": link_variant_plus,
  "link-variant-remove": link_variant_remove,
  linkedin,
  linux,
  "linux-mint": linux_mint,
  lipstick,
  litecoin,
  loading,
  "location-enter": location_enter,
  "location-exit": location_exit,
  lock,
  "lock-alert": lock_alert,
  "lock-check": lock_check,
  "lock-clock": lock_clock,
  "lock-open": lock_open,
  "lock-open-alert": lock_open_alert,
  "lock-open-check": lock_open_check,
  "lock-open-outline": lock_open_outline,
  "lock-open-variant": lock_open_variant,
  "lock-open-variant-outline": lock_open_variant_outline,
  "lock-outline": lock_outline,
  "lock-pattern": lock_pattern,
  "lock-plus": lock_plus,
  "lock-question": lock_question,
  "lock-reset": lock_reset,
  "lock-smart": lock_smart,
  locker,
  "locker-multiple": locker_multiple,
  login,
  "login-variant": login_variant,
  logout,
  "logout-variant": logout_variant,
  longitude,
  looks,
  loupe,
  lumx,
  lungs,
  magnet,
  "magnet-on": magnet_on,
  magnify,
  "magnify-close": magnify_close,
  "magnify-minus": magnify_minus,
  "magnify-minus-cursor": magnify_minus_cursor,
  "magnify-minus-outline": magnify_minus_outline,
  "magnify-plus": magnify_plus,
  "magnify-plus-cursor": magnify_plus_cursor,
  "magnify-plus-outline": magnify_plus_outline,
  "magnify-remove-cursor": magnify_remove_cursor,
  "magnify-remove-outline": magnify_remove_outline,
  "magnify-scan": magnify_scan,
  mail,
  mailbox,
  "mailbox-open": mailbox_open,
  "mailbox-open-outline": mailbox_open_outline,
  "mailbox-open-up": mailbox_open_up,
  "mailbox-open-up-outline": mailbox_open_up_outline,
  "mailbox-outline": mailbox_outline,
  "mailbox-up": mailbox_up,
  "mailbox-up-outline": mailbox_up_outline,
  map,
  "map-check": map_check,
  "map-check-outline": map_check_outline,
  "map-clock": map_clock,
  "map-clock-outline": map_clock_outline,
  "map-legend": map_legend,
  "map-marker": map_marker,
  "map-marker-alert": map_marker_alert,
  "map-marker-alert-outline": map_marker_alert_outline,
  "map-marker-check": map_marker_check,
  "map-marker-check-outline": map_marker_check_outline,
  "map-marker-circle": map_marker_circle,
  "map-marker-distance": map_marker_distance,
  "map-marker-down": map_marker_down,
  "map-marker-left": map_marker_left,
  "map-marker-left-outline": map_marker_left_outline,
  "map-marker-minus": map_marker_minus,
  "map-marker-minus-outline": map_marker_minus_outline,
  "map-marker-multiple": map_marker_multiple,
  "map-marker-multiple-outline": map_marker_multiple_outline,
  "map-marker-off": map_marker_off,
  "map-marker-off-outline": map_marker_off_outline,
  "map-marker-outline": map_marker_outline,
  "map-marker-path": map_marker_path,
  "map-marker-plus": map_marker_plus,
  "map-marker-plus-outline": map_marker_plus_outline,
  "map-marker-question": map_marker_question,
  "map-marker-question-outline": map_marker_question_outline,
  "map-marker-radius": map_marker_radius,
  "map-marker-radius-outline": map_marker_radius_outline,
  "map-marker-remove": map_marker_remove,
  "map-marker-remove-outline": map_marker_remove_outline,
  "map-marker-remove-variant": map_marker_remove_variant,
  "map-marker-right": map_marker_right,
  "map-marker-right-outline": map_marker_right_outline,
  "map-marker-up": map_marker_up,
  "map-minus": map_minus,
  "map-outline": map_outline,
  "map-plus": map_plus,
  "map-search": map_search,
  "map-search-outline": map_search_outline,
  mapbox,
  margin,
  marker,
  "marker-cancel": marker_cancel,
  "marker-check": marker_check,
  mastodon,
  "material-design": material_design,
  "material-ui": material_ui,
  "math-compass": math_compass,
  "math-cos": math_cos,
  "math-integral": math_integral,
  "math-integral-box": math_integral_box,
  "math-log": math_log,
  "math-norm": math_norm,
  "math-norm-box": math_norm_box,
  "math-sin": math_sin,
  "math-tan": math_tan,
  matrix,
  medal,
  "medal-outline": medal_outline,
  "medical-bag": medical_bag,
  meditation,
  memory,
  menu,
  "menu-down": menu_down,
  "menu-down-outline": menu_down_outline,
  "menu-left": menu_left,
  "menu-left-outline": menu_left_outline,
  "menu-open": menu_open,
  "menu-right": menu_right,
  "menu-right-outline": menu_right_outline,
  "menu-swap": menu_swap,
  "menu-swap-outline": menu_swap_outline,
  "menu-up": menu_up,
  "menu-up-outline": menu_up_outline,
  merge,
  message,
  "message-alert": message_alert,
  "message-alert-outline": message_alert_outline,
  "message-arrow-left": message_arrow_left,
  "message-arrow-left-outline": message_arrow_left_outline,
  "message-arrow-right": message_arrow_right,
  "message-arrow-right-outline": message_arrow_right_outline,
  "message-bulleted": message_bulleted,
  "message-bulleted-off": message_bulleted_off,
  "message-cog": message_cog,
  "message-cog-outline": message_cog_outline,
  "message-draw": message_draw,
  "message-image": message_image,
  "message-image-outline": message_image_outline,
  "message-lock": message_lock,
  "message-lock-outline": message_lock_outline,
  "message-minus": message_minus,
  "message-minus-outline": message_minus_outline,
  "message-outline": message_outline,
  "message-plus": message_plus,
  "message-plus-outline": message_plus_outline,
  "message-processing": message_processing,
  "message-processing-outline": message_processing_outline,
  "message-reply": message_reply,
  "message-reply-text": message_reply_text,
  "message-settings": message_settings,
  "message-settings-outline": message_settings_outline,
  "message-text": message_text,
  "message-text-clock": message_text_clock,
  "message-text-clock-outline": message_text_clock_outline,
  "message-text-lock": message_text_lock,
  "message-text-lock-outline": message_text_lock_outline,
  "message-text-outline": message_text_outline,
  "message-video": message_video,
  meteor,
  metronome,
  "metronome-tick": metronome_tick,
  "micro-sd": micro_sd,
  microphone,
  "microphone-minus": microphone_minus,
  "microphone-off": microphone_off,
  "microphone-outline": microphone_outline,
  "microphone-plus": microphone_plus,
  "microphone-settings": microphone_settings,
  "microphone-variant": microphone_variant,
  "microphone-variant-off": microphone_variant_off,
  microscope,
  microsoft,
  "microsoft-access": microsoft_access,
  "microsoft-azure": microsoft_azure,
  "microsoft-azure-devops": microsoft_azure_devops,
  "microsoft-bing": microsoft_bing,
  "microsoft-dynamics-365": microsoft_dynamics_365,
  "microsoft-edge": microsoft_edge,
  "microsoft-edge-legacy": microsoft_edge_legacy,
  "microsoft-excel": microsoft_excel,
  "microsoft-internet-explorer": microsoft_internet_explorer,
  "microsoft-office": microsoft_office,
  "microsoft-onedrive": microsoft_onedrive,
  "microsoft-onenote": microsoft_onenote,
  "microsoft-outlook": microsoft_outlook,
  "microsoft-powerpoint": microsoft_powerpoint,
  "microsoft-sharepoint": microsoft_sharepoint,
  "microsoft-teams": microsoft_teams,
  "microsoft-visual-studio": microsoft_visual_studio,
  "microsoft-visual-studio-code": microsoft_visual_studio_code,
  "microsoft-windows": microsoft_windows,
  "microsoft-windows-classic": microsoft_windows_classic,
  "microsoft-word": microsoft_word,
  "microsoft-xbox": microsoft_xbox,
  "microsoft-xbox-controller": microsoft_xbox_controller,
  "microsoft-xbox-controller-battery-alert": microsoft_xbox_controller_battery_alert,
  "microsoft-xbox-controller-battery-charging": microsoft_xbox_controller_battery_charging,
  "microsoft-xbox-controller-battery-empty": microsoft_xbox_controller_battery_empty,
  "microsoft-xbox-controller-battery-full": microsoft_xbox_controller_battery_full,
  "microsoft-xbox-controller-battery-low": microsoft_xbox_controller_battery_low,
  "microsoft-xbox-controller-battery-medium": microsoft_xbox_controller_battery_medium,
  "microsoft-xbox-controller-battery-unknown": microsoft_xbox_controller_battery_unknown,
  "microsoft-xbox-controller-menu": microsoft_xbox_controller_menu,
  "microsoft-xbox-controller-off": microsoft_xbox_controller_off,
  "microsoft-xbox-controller-view": microsoft_xbox_controller_view,
  "microsoft-yammer": microsoft_yammer,
  microwave,
  "microwave-off": microwave_off,
  middleware,
  "middleware-outline": middleware_outline,
  midi,
  "midi-port": midi_port,
  mine,
  minecraft,
  "mini-sd": mini_sd,
  minidisc,
  minus,
  "minus-box": minus_box,
  "minus-box-multiple": minus_box_multiple,
  "minus-box-multiple-outline": minus_box_multiple_outline,
  "minus-box-outline": minus_box_outline,
  "minus-circle": minus_circle,
  "minus-circle-multiple": minus_circle_multiple,
  "minus-circle-multiple-outline": minus_circle_multiple_outline,
  "minus-circle-off": minus_circle_off,
  "minus-circle-off-outline": minus_circle_off_outline,
  "minus-circle-outline": minus_circle_outline,
  "minus-network": minus_network,
  "minus-network-outline": minus_network_outline,
  mirror,
  "mixed-martial-arts": mixed_martial_arts,
  "mixed-reality": mixed_reality,
  mixer,
  molecule,
  "molecule-co": molecule_co,
  "molecule-co2": molecule_co2,
  monitor,
  "monitor-cellphone": monitor_cellphone,
  "monitor-cellphone-star": monitor_cellphone_star,
  "monitor-clean": monitor_clean,
  "monitor-dashboard": monitor_dashboard,
  "monitor-edit": monitor_edit,
  "monitor-eye": monitor_eye,
  "monitor-lock": monitor_lock,
  "monitor-multiple": monitor_multiple,
  "monitor-off": monitor_off,
  "monitor-screenshot": monitor_screenshot,
  "monitor-share": monitor_share,
  "monitor-speaker": monitor_speaker,
  "monitor-speaker-off": monitor_speaker_off,
  "monitor-star": monitor_star,
  "moon-first-quarter": moon_first_quarter,
  "moon-full": moon_full,
  "moon-last-quarter": moon_last_quarter,
  "moon-new": moon_new,
  "moon-waning-crescent": moon_waning_crescent,
  "moon-waning-gibbous": moon_waning_gibbous,
  "moon-waxing-crescent": moon_waxing_crescent,
  "moon-waxing-gibbous": moon_waxing_gibbous,
  moped,
  more,
  "mother-heart": mother_heart,
  "mother-nurse": mother_nurse,
  "motion-sensor": motion_sensor,
  "motion-sensor-off": motion_sensor_off,
  motorbike,
  mouse,
  "mouse-bluetooth": mouse_bluetooth,
  "mouse-off": mouse_off,
  "mouse-variant": mouse_variant,
  "mouse-variant-off": mouse_variant_off,
  "move-resize": move_resize,
  "move-resize-variant": move_resize_variant,
  movie,
  "movie-edit": movie_edit,
  "movie-edit-outline": movie_edit_outline,
  "movie-filter": movie_filter,
  "movie-filter-outline": movie_filter_outline,
  "movie-open": movie_open,
  "movie-open-outline": movie_open_outline,
  "movie-outline": movie_outline,
  "movie-roll": movie_roll,
  "movie-search": movie_search,
  "movie-search-outline": movie_search_outline,
  muffin,
  multiplication,
  "multiplication-box": multiplication_box,
  mushroom,
  "mushroom-off": mushroom_off,
  "mushroom-off-outline": mushroom_off_outline,
  "mushroom-outline": mushroom_outline,
  music,
  "music-accidental-double-flat": music_accidental_double_flat,
  "music-accidental-double-sharp": music_accidental_double_sharp,
  "music-accidental-flat": music_accidental_flat,
  "music-accidental-natural": music_accidental_natural,
  "music-accidental-sharp": music_accidental_sharp,
  "music-box": music_box,
  "music-box-multiple": music_box_multiple,
  "music-box-multiple-outline": music_box_multiple_outline,
  "music-box-outline": music_box_outline,
  "music-circle": music_circle,
  "music-circle-outline": music_circle_outline,
  "music-clef-alto": music_clef_alto,
  "music-clef-bass": music_clef_bass,
  "music-clef-treble": music_clef_treble,
  "music-note": music_note,
  "music-note-bluetooth": music_note_bluetooth,
  "music-note-bluetooth-off": music_note_bluetooth_off,
  "music-note-eighth": music_note_eighth,
  "music-note-eighth-dotted": music_note_eighth_dotted,
  "music-note-half": music_note_half,
  "music-note-half-dotted": music_note_half_dotted,
  "music-note-off": music_note_off,
  "music-note-off-outline": music_note_off_outline,
  "music-note-outline": music_note_outline,
  "music-note-plus": music_note_plus,
  "music-note-quarter": music_note_quarter,
  "music-note-quarter-dotted": music_note_quarter_dotted,
  "music-note-sixteenth": music_note_sixteenth,
  "music-note-sixteenth-dotted": music_note_sixteenth_dotted,
  "music-note-whole": music_note_whole,
  "music-note-whole-dotted": music_note_whole_dotted,
  "music-off": music_off,
  "music-rest-eighth": music_rest_eighth,
  "music-rest-half": music_rest_half,
  "music-rest-quarter": music_rest_quarter,
  "music-rest-sixteenth": music_rest_sixteenth,
  "music-rest-whole": music_rest_whole,
  nail,
  nas,
  nativescript,
  nature,
  "nature-people": nature_people,
  navigation,
  "near-me": near_me,
  necklace,
  needle,
  netflix,
  network,
  "network-off": network_off,
  "network-off-outline": network_off_outline,
  "network-outline": network_outline,
  "network-strength-1": network_strength_1,
  "network-strength-1-alert": network_strength_1_alert,
  "network-strength-2": network_strength_2,
  "network-strength-2-alert": network_strength_2_alert,
  "network-strength-3": network_strength_3,
  "network-strength-3-alert": network_strength_3_alert,
  "network-strength-4": network_strength_4,
  "network-strength-4-alert": network_strength_4_alert,
  "network-strength-off": network_strength_off,
  "network-strength-off-outline": network_strength_off_outline,
  "network-strength-outline": network_strength_outline,
  "new-box": new_box,
  newspaper,
  "newspaper-minus": newspaper_minus,
  "newspaper-plus": newspaper_plus,
  "newspaper-variant": newspaper_variant,
  "newspaper-variant-multiple": newspaper_variant_multiple,
  "newspaper-variant-multiple-outline": newspaper_variant_multiple_outline,
  "newspaper-variant-outline": newspaper_variant_outline,
  nfc,
  "nfc-search-variant": nfc_search_variant,
  "nfc-tap": nfc_tap,
  "nfc-variant": nfc_variant,
  "nfc-variant-off": nfc_variant_off,
  ninja,
  "nintendo-game-boy": nintendo_game_boy,
  "nintendo-switch": nintendo_switch,
  "nintendo-wii": nintendo_wii,
  "nintendo-wiiu": nintendo_wiiu,
  nix,
  nodejs,
  noodles,
  "not-equal": not_equal,
  "not-equal-variant": not_equal_variant,
  note,
  "note-multiple": note_multiple,
  "note-multiple-outline": note_multiple_outline,
  "note-outline": note_outline,
  "note-plus": note_plus,
  "note-plus-outline": note_plus_outline,
  "note-text": note_text,
  "note-text-outline": note_text_outline,
  notebook,
  "notebook-multiple": notebook_multiple,
  "notebook-outline": notebook_outline,
  "notification-clear-all": notification_clear_all,
  npm,
  nuke,
  null: null2,
  numeric,
  "numeric-0": numeric_0,
  "numeric-0-box": numeric_0_box,
  "numeric-0-box-multiple": numeric_0_box_multiple,
  "numeric-0-box-multiple-outline": numeric_0_box_multiple_outline,
  "numeric-0-box-outline": numeric_0_box_outline,
  "numeric-0-circle": numeric_0_circle,
  "numeric-0-circle-outline": numeric_0_circle_outline,
  "numeric-1": numeric_1,
  "numeric-1-box": numeric_1_box,
  "numeric-1-box-multiple": numeric_1_box_multiple,
  "numeric-1-box-multiple-outline": numeric_1_box_multiple_outline,
  "numeric-1-box-outline": numeric_1_box_outline,
  "numeric-1-circle": numeric_1_circle,
  "numeric-1-circle-outline": numeric_1_circle_outline,
  "numeric-10": numeric_10,
  "numeric-10-box": numeric_10_box,
  "numeric-10-box-multiple": numeric_10_box_multiple,
  "numeric-10-box-multiple-outline": numeric_10_box_multiple_outline,
  "numeric-10-box-outline": numeric_10_box_outline,
  "numeric-10-circle": numeric_10_circle,
  "numeric-10-circle-outline": numeric_10_circle_outline,
  "numeric-2": numeric_2,
  "numeric-2-box": numeric_2_box,
  "numeric-2-box-multiple": numeric_2_box_multiple,
  "numeric-2-box-multiple-outline": numeric_2_box_multiple_outline,
  "numeric-2-box-outline": numeric_2_box_outline,
  "numeric-2-circle": numeric_2_circle,
  "numeric-2-circle-outline": numeric_2_circle_outline,
  "numeric-3": numeric_3,
  "numeric-3-box": numeric_3_box,
  "numeric-3-box-multiple": numeric_3_box_multiple,
  "numeric-3-box-multiple-outline": numeric_3_box_multiple_outline,
  "numeric-3-box-outline": numeric_3_box_outline,
  "numeric-3-circle": numeric_3_circle,
  "numeric-3-circle-outline": numeric_3_circle_outline,
  "numeric-4": numeric_4,
  "numeric-4-box": numeric_4_box,
  "numeric-4-box-multiple": numeric_4_box_multiple,
  "numeric-4-box-multiple-outline": numeric_4_box_multiple_outline,
  "numeric-4-box-outline": numeric_4_box_outline,
  "numeric-4-circle": numeric_4_circle,
  "numeric-4-circle-outline": numeric_4_circle_outline,
  "numeric-5": numeric_5,
  "numeric-5-box": numeric_5_box,
  "numeric-5-box-multiple": numeric_5_box_multiple,
  "numeric-5-box-multiple-outline": numeric_5_box_multiple_outline,
  "numeric-5-box-outline": numeric_5_box_outline,
  "numeric-5-circle": numeric_5_circle,
  "numeric-5-circle-outline": numeric_5_circle_outline,
  "numeric-6": numeric_6,
  "numeric-6-box": numeric_6_box,
  "numeric-6-box-multiple": numeric_6_box_multiple,
  "numeric-6-box-multiple-outline": numeric_6_box_multiple_outline,
  "numeric-6-box-outline": numeric_6_box_outline,
  "numeric-6-circle": numeric_6_circle,
  "numeric-6-circle-outline": numeric_6_circle_outline,
  "numeric-7": numeric_7,
  "numeric-7-box": numeric_7_box,
  "numeric-7-box-multiple": numeric_7_box_multiple,
  "numeric-7-box-multiple-outline": numeric_7_box_multiple_outline,
  "numeric-7-box-outline": numeric_7_box_outline,
  "numeric-7-circle": numeric_7_circle,
  "numeric-7-circle-outline": numeric_7_circle_outline,
  "numeric-8": numeric_8,
  "numeric-8-box": numeric_8_box,
  "numeric-8-box-multiple": numeric_8_box_multiple,
  "numeric-8-box-multiple-outline": numeric_8_box_multiple_outline,
  "numeric-8-box-outline": numeric_8_box_outline,
  "numeric-8-circle": numeric_8_circle,
  "numeric-8-circle-outline": numeric_8_circle_outline,
  "numeric-9": numeric_9,
  "numeric-9-box": numeric_9_box,
  "numeric-9-box-multiple": numeric_9_box_multiple,
  "numeric-9-box-multiple-outline": numeric_9_box_multiple_outline,
  "numeric-9-box-outline": numeric_9_box_outline,
  "numeric-9-circle": numeric_9_circle,
  "numeric-9-circle-outline": numeric_9_circle_outline,
  "numeric-9-plus": numeric_9_plus,
  "numeric-9-plus-box": numeric_9_plus_box,
  "numeric-9-plus-box-multiple": numeric_9_plus_box_multiple,
  "numeric-9-plus-box-multiple-outline": numeric_9_plus_box_multiple_outline,
  "numeric-9-plus-box-outline": numeric_9_plus_box_outline,
  "numeric-9-plus-circle": numeric_9_plus_circle,
  "numeric-9-plus-circle-outline": numeric_9_plus_circle_outline,
  "numeric-negative-1": numeric_negative_1,
  nut,
  nutrition,
  nuxt,
  oar,
  ocarina,
  oci,
  ocr,
  octagon,
  "octagon-outline": octagon_outline,
  octagram,
  "octagram-outline": octagram_outline,
  odnoklassniki,
  offer,
  "office-building": office_building,
  oil,
  "oil-lamp": oil_lamp,
  "oil-level": oil_level,
  "oil-temperature": oil_temperature,
  omega,
  "one-up": one_up,
  onepassword,
  opacity,
  "open-in-app": open_in_app,
  "open-in-new": open_in_new,
  "open-source-initiative": open_source_initiative,
  openid,
  opera,
  orbit,
  "order-alphabetical-ascending": order_alphabetical_ascending,
  "order-alphabetical-descending": order_alphabetical_descending,
  "order-bool-ascending": order_bool_ascending,
  "order-bool-ascending-variant": order_bool_ascending_variant,
  "order-bool-descending": order_bool_descending,
  "order-bool-descending-variant": order_bool_descending_variant,
  "order-numeric-ascending": order_numeric_ascending,
  "order-numeric-descending": order_numeric_descending,
  origin,
  ornament,
  "ornament-variant": ornament_variant,
  "outdoor-lamp": outdoor_lamp,
  overscan,
  owl,
  "pac-man": pac_man,
  package: package2,
  "package-down": package_down,
  "package-up": package_up,
  "package-variant": package_variant,
  "package-variant-closed": package_variant_closed,
  "page-first": page_first,
  "page-last": page_last,
  "page-layout-body": page_layout_body,
  "page-layout-footer": page_layout_footer,
  "page-layout-header": page_layout_header,
  "page-layout-header-footer": page_layout_header_footer,
  "page-layout-sidebar-left": page_layout_sidebar_left,
  "page-layout-sidebar-right": page_layout_sidebar_right,
  "page-next": page_next,
  "page-next-outline": page_next_outline,
  "page-previous": page_previous,
  "page-previous-outline": page_previous_outline,
  pail,
  "pail-minus": pail_minus,
  "pail-minus-outline": pail_minus_outline,
  "pail-off": pail_off,
  "pail-off-outline": pail_off_outline,
  "pail-outline": pail_outline,
  "pail-plus": pail_plus,
  "pail-plus-outline": pail_plus_outline,
  "pail-remove": pail_remove,
  "pail-remove-outline": pail_remove_outline,
  palette,
  "palette-advanced": palette_advanced,
  "palette-outline": palette_outline,
  "palette-swatch": palette_swatch,
  "palette-swatch-outline": palette_swatch_outline,
  "palm-tree": palm_tree,
  pan,
  "pan-bottom-left": pan_bottom_left,
  "pan-bottom-right": pan_bottom_right,
  "pan-down": pan_down,
  "pan-horizontal": pan_horizontal,
  "pan-left": pan_left,
  "pan-right": pan_right,
  "pan-top-left": pan_top_left,
  "pan-top-right": pan_top_right,
  "pan-up": pan_up,
  "pan-vertical": pan_vertical,
  panda,
  pandora,
  panorama,
  "panorama-fisheye": panorama_fisheye,
  "panorama-horizontal": panorama_horizontal,
  "panorama-vertical": panorama_vertical,
  "panorama-wide-angle": panorama_wide_angle,
  "paper-cut-vertical": paper_cut_vertical,
  "paper-roll": paper_roll,
  "paper-roll-outline": paper_roll_outline,
  paperclip,
  parachute,
  "parachute-outline": parachute_outline,
  parking,
  "party-popper": party_popper,
  passport,
  "passport-biometric": passport_biometric,
  pasta,
  "patio-heater": patio_heater,
  patreon,
  pause,
  "pause-circle": pause_circle,
  "pause-circle-outline": pause_circle_outline,
  "pause-octagon": pause_octagon,
  "pause-octagon-outline": pause_octagon_outline,
  paw,
  "paw-off": paw_off,
  "pdf-box": pdf_box,
  peace,
  peanut,
  "peanut-off": peanut_off,
  "peanut-off-outline": peanut_off_outline,
  "peanut-outline": peanut_outline,
  pen,
  "pen-lock": pen_lock,
  "pen-minus": pen_minus,
  "pen-off": pen_off,
  "pen-plus": pen_plus,
  "pen-remove": pen_remove,
  pencil,
  "pencil-box": pencil_box,
  "pencil-box-multiple": pencil_box_multiple,
  "pencil-box-multiple-outline": pencil_box_multiple_outline,
  "pencil-box-outline": pencil_box_outline,
  "pencil-circle": pencil_circle,
  "pencil-circle-outline": pencil_circle_outline,
  "pencil-lock": pencil_lock,
  "pencil-lock-outline": pencil_lock_outline,
  "pencil-minus": pencil_minus,
  "pencil-minus-outline": pencil_minus_outline,
  "pencil-off": pencil_off,
  "pencil-off-outline": pencil_off_outline,
  "pencil-outline": pencil_outline,
  "pencil-plus": pencil_plus,
  "pencil-plus-outline": pencil_plus_outline,
  "pencil-remove": pencil_remove,
  "pencil-remove-outline": pencil_remove_outline,
  "pencil-ruler": pencil_ruler,
  penguin,
  pentagon,
  "pentagon-outline": pentagon_outline,
  percent,
  "percent-outline": percent_outline,
  "periodic-table": periodic_table,
  "perspective-less": perspective_less,
  "perspective-more": perspective_more,
  pharmacy,
  phone,
  "phone-alert": phone_alert,
  "phone-alert-outline": phone_alert_outline,
  "phone-bluetooth": phone_bluetooth,
  "phone-bluetooth-outline": phone_bluetooth_outline,
  "phone-cancel": phone_cancel,
  "phone-cancel-outline": phone_cancel_outline,
  "phone-check": phone_check,
  "phone-check-outline": phone_check_outline,
  "phone-classic": phone_classic,
  "phone-classic-off": phone_classic_off,
  "phone-forward": phone_forward,
  "phone-forward-outline": phone_forward_outline,
  "phone-hangup": phone_hangup,
  "phone-hangup-outline": phone_hangup_outline,
  "phone-in-talk": phone_in_talk,
  "phone-in-talk-outline": phone_in_talk_outline,
  "phone-incoming": phone_incoming,
  "phone-incoming-outline": phone_incoming_outline,
  "phone-lock": phone_lock,
  "phone-lock-outline": phone_lock_outline,
  "phone-log": phone_log,
  "phone-log-outline": phone_log_outline,
  "phone-message": phone_message,
  "phone-message-outline": phone_message_outline,
  "phone-minus": phone_minus,
  "phone-minus-outline": phone_minus_outline,
  "phone-missed": phone_missed,
  "phone-missed-outline": phone_missed_outline,
  "phone-off": phone_off,
  "phone-off-outline": phone_off_outline,
  "phone-outgoing": phone_outgoing,
  "phone-outgoing-outline": phone_outgoing_outline,
  "phone-outline": phone_outline,
  "phone-paused": phone_paused,
  "phone-paused-outline": phone_paused_outline,
  "phone-plus": phone_plus,
  "phone-plus-outline": phone_plus_outline,
  "phone-return": phone_return,
  "phone-return-outline": phone_return_outline,
  "phone-ring": phone_ring,
  "phone-ring-outline": phone_ring_outline,
  "phone-rotate-landscape": phone_rotate_landscape,
  "phone-rotate-portrait": phone_rotate_portrait,
  "phone-settings": phone_settings,
  "phone-settings-outline": phone_settings_outline,
  "phone-voip": phone_voip,
  pi,
  "pi-box": pi_box,
  "pi-hole": pi_hole,
  piano,
  pickaxe,
  "picture-in-picture-bottom-right": picture_in_picture_bottom_right,
  "picture-in-picture-bottom-right-outline": picture_in_picture_bottom_right_outline,
  "picture-in-picture-top-right": picture_in_picture_top_right,
  "picture-in-picture-top-right-outline": picture_in_picture_top_right_outline,
  pier,
  "pier-crane": pier_crane,
  pig,
  "pig-variant": pig_variant,
  "piggy-bank": piggy_bank,
  pill,
  pillar,
  pin,
  "pin-off": pin_off,
  "pin-off-outline": pin_off_outline,
  "pin-outline": pin_outline,
  "pine-tree": pine_tree,
  "pine-tree-box": pine_tree_box,
  "pine-tree-fire": pine_tree_fire,
  pinterest,
  pinwheel,
  "pinwheel-outline": pinwheel_outline,
  pipe,
  "pipe-disconnected": pipe_disconnected,
  "pipe-leak": pipe_leak,
  "pipe-wrench": pipe_wrench,
  pirate,
  pistol,
  piston,
  pizza,
  play,
  "play-box": play_box,
  "play-box-multiple": play_box_multiple,
  "play-box-multiple-outline": play_box_multiple_outline,
  "play-box-outline": play_box_outline,
  "play-circle": play_circle,
  "play-circle-outline": play_circle_outline,
  "play-network": play_network,
  "play-network-outline": play_network_outline,
  "play-outline": play_outline,
  "play-pause": play_pause,
  "play-protected-content": play_protected_content,
  "play-speed": play_speed,
  "playlist-check": playlist_check,
  "playlist-edit": playlist_edit,
  "playlist-minus": playlist_minus,
  "playlist-music": playlist_music,
  "playlist-music-outline": playlist_music_outline,
  "playlist-play": playlist_play,
  "playlist-plus": playlist_plus,
  "playlist-remove": playlist_remove,
  "playlist-star": playlist_star,
  plex,
  plus,
  "plus-box": plus_box,
  "plus-box-multiple": plus_box_multiple,
  "plus-box-multiple-outline": plus_box_multiple_outline,
  "plus-box-outline": plus_box_outline,
  "plus-circle": plus_circle,
  "plus-circle-multiple": plus_circle_multiple,
  "plus-circle-multiple-outline": plus_circle_multiple_outline,
  "plus-circle-outline": plus_circle_outline,
  "plus-minus": plus_minus,
  "plus-minus-box": plus_minus_box,
  "plus-minus-variant": plus_minus_variant,
  "plus-network": plus_network,
  "plus-network-outline": plus_network_outline,
  "plus-one": plus_one,
  "plus-outline": plus_outline,
  "plus-thick": plus_thick,
  podcast,
  podium,
  "podium-bronze": podium_bronze,
  "podium-gold": podium_gold,
  "podium-silver": podium_silver,
  "point-of-sale": point_of_sale,
  pokeball,
  "pokemon-go": pokemon_go,
  "poker-chip": poker_chip,
  polaroid,
  "police-badge": police_badge,
  "police-badge-outline": police_badge_outline,
  poll,
  "poll-box": poll_box,
  "poll-box-outline": poll_box_outline,
  polo,
  polymer,
  pool,
  popcorn,
  post,
  "post-outline": post_outline,
  "postage-stamp": postage_stamp,
  pot,
  "pot-mix": pot_mix,
  "pot-mix-outline": pot_mix_outline,
  "pot-outline": pot_outline,
  "pot-steam": pot_steam,
  "pot-steam-outline": pot_steam_outline,
  pound,
  "pound-box": pound_box,
  "pound-box-outline": pound_box_outline,
  power,
  "power-cycle": power_cycle,
  "power-off": power_off,
  "power-on": power_on,
  "power-plug": power_plug,
  "power-plug-off": power_plug_off,
  "power-plug-off-outline": power_plug_off_outline,
  "power-plug-outline": power_plug_outline,
  "power-settings": power_settings,
  "power-sleep": power_sleep,
  "power-socket": power_socket,
  "power-socket-au": power_socket_au,
  "power-socket-de": power_socket_de,
  "power-socket-eu": power_socket_eu,
  "power-socket-fr": power_socket_fr,
  "power-socket-jp": power_socket_jp,
  "power-socket-uk": power_socket_uk,
  "power-socket-us": power_socket_us,
  "power-standby": power_standby,
  powershell,
  prescription,
  presentation,
  "presentation-play": presentation_play,
  printer,
  "printer-3d": printer_3d,
  "printer-3d-nozzle": printer_3d_nozzle,
  "printer-3d-nozzle-alert": printer_3d_nozzle_alert,
  "printer-3d-nozzle-alert-outline": printer_3d_nozzle_alert_outline,
  "printer-3d-nozzle-outline": printer_3d_nozzle_outline,
  "printer-alert": printer_alert,
  "printer-check": printer_check,
  "printer-eye": printer_eye,
  "printer-off": printer_off,
  "printer-pos": printer_pos,
  "printer-search": printer_search,
  "printer-settings": printer_settings,
  "printer-wireless": printer_wireless,
  "priority-high": priority_high,
  "priority-low": priority_low,
  "professional-hexagon": professional_hexagon,
  "progress-alert": progress_alert,
  "progress-check": progress_check,
  "progress-clock": progress_clock,
  "progress-close": progress_close,
  "progress-download": progress_download,
  "progress-upload": progress_upload,
  "progress-wrench": progress_wrench,
  projector,
  "projector-screen": projector_screen,
  "propane-tank": propane_tank,
  "propane-tank-outline": propane_tank_outline,
  protocol,
  publish,
  pulse,
  pump,
  pumpkin,
  purse,
  "purse-outline": purse_outline,
  puzzle,
  "puzzle-check": puzzle_check,
  "puzzle-check-outline": puzzle_check_outline,
  "puzzle-edit": puzzle_edit,
  "puzzle-edit-outline": puzzle_edit_outline,
  "puzzle-heart": puzzle_heart,
  "puzzle-heart-outline": puzzle_heart_outline,
  "puzzle-minus": puzzle_minus,
  "puzzle-minus-outline": puzzle_minus_outline,
  "puzzle-outline": puzzle_outline,
  "puzzle-plus": puzzle_plus,
  "puzzle-plus-outline": puzzle_plus_outline,
  "puzzle-remove": puzzle_remove,
  "puzzle-remove-outline": puzzle_remove_outline,
  "puzzle-star": puzzle_star,
  "puzzle-star-outline": puzzle_star_outline,
  qi,
  qqchat,
  qrcode,
  "qrcode-edit": qrcode_edit,
  "qrcode-minus": qrcode_minus,
  "qrcode-plus": qrcode_plus,
  "qrcode-remove": qrcode_remove,
  "qrcode-scan": qrcode_scan,
  quadcopter,
  "quality-high": quality_high,
  "quality-low": quality_low,
  "quality-medium": quality_medium,
  quora,
  rabbit,
  "racing-helmet": racing_helmet,
  racquetball,
  radar,
  radiator,
  "radiator-disabled": radiator_disabled,
  "radiator-off": radiator_off,
  radio,
  "radio-am": radio_am,
  "radio-fm": radio_fm,
  "radio-handheld": radio_handheld,
  "radio-off": radio_off,
  "radio-tower": radio_tower,
  radioactive,
  "radioactive-off": radioactive_off,
  "radiobox-blank": radiobox_blank,
  "radiobox-marked": radiobox_marked,
  "radiology-box": radiology_box,
  "radiology-box-outline": radiology_box_outline,
  radius,
  "radius-outline": radius_outline,
  "railroad-light": railroad_light,
  "raspberry-pi": raspberry_pi,
  "ray-end": ray_end,
  "ray-end-arrow": ray_end_arrow,
  "ray-start": ray_start,
  "ray-start-arrow": ray_start_arrow,
  "ray-start-end": ray_start_end,
  "ray-vertex": ray_vertex,
  react,
  read,
  receipt,
  record,
  "record-circle": record_circle,
  "record-circle-outline": record_circle_outline,
  "record-player": record_player,
  "record-rec": record_rec,
  rectangle,
  "rectangle-outline": rectangle_outline,
  recycle,
  "recycle-variant": recycle_variant,
  reddit,
  redhat,
  redo,
  "redo-variant": redo_variant,
  "reflect-horizontal": reflect_horizontal,
  "reflect-vertical": reflect_vertical,
  refresh,
  "refresh-circle": refresh_circle,
  regex,
  "registered-trademark": registered_trademark,
  "relation-many-to-many": relation_many_to_many,
  "relation-many-to-one": relation_many_to_one,
  "relation-many-to-one-or-many": relation_many_to_one_or_many,
  "relation-many-to-only-one": relation_many_to_only_one,
  "relation-many-to-zero-or-many": relation_many_to_zero_or_many,
  "relation-many-to-zero-or-one": relation_many_to_zero_or_one,
  "relation-one-or-many-to-many": relation_one_or_many_to_many,
  "relation-one-or-many-to-one": relation_one_or_many_to_one,
  "relation-one-or-many-to-one-or-many": relation_one_or_many_to_one_or_many,
  "relation-one-or-many-to-only-one": relation_one_or_many_to_only_one,
  "relation-one-or-many-to-zero-or-many": relation_one_or_many_to_zero_or_many,
  "relation-one-or-many-to-zero-or-one": relation_one_or_many_to_zero_or_one,
  "relation-one-to-many": relation_one_to_many,
  "relation-one-to-one": relation_one_to_one,
  "relation-one-to-one-or-many": relation_one_to_one_or_many,
  "relation-one-to-only-one": relation_one_to_only_one,
  "relation-one-to-zero-or-many": relation_one_to_zero_or_many,
  "relation-one-to-zero-or-one": relation_one_to_zero_or_one,
  "relation-only-one-to-many": relation_only_one_to_many,
  "relation-only-one-to-one": relation_only_one_to_one,
  "relation-only-one-to-one-or-many": relation_only_one_to_one_or_many,
  "relation-only-one-to-only-one": relation_only_one_to_only_one,
  "relation-only-one-to-zero-or-many": relation_only_one_to_zero_or_many,
  "relation-only-one-to-zero-or-one": relation_only_one_to_zero_or_one,
  "relation-zero-or-many-to-many": relation_zero_or_many_to_many,
  "relation-zero-or-many-to-one": relation_zero_or_many_to_one,
  "relation-zero-or-many-to-one-or-many": relation_zero_or_many_to_one_or_many,
  "relation-zero-or-many-to-only-one": relation_zero_or_many_to_only_one,
  "relation-zero-or-many-to-zero-or-many": relation_zero_or_many_to_zero_or_many,
  "relation-zero-or-many-to-zero-or-one": relation_zero_or_many_to_zero_or_one,
  "relation-zero-or-one-to-many": relation_zero_or_one_to_many,
  "relation-zero-or-one-to-one": relation_zero_or_one_to_one,
  "relation-zero-or-one-to-one-or-many": relation_zero_or_one_to_one_or_many,
  "relation-zero-or-one-to-only-one": relation_zero_or_one_to_only_one,
  "relation-zero-or-one-to-zero-or-many": relation_zero_or_one_to_zero_or_many,
  "relation-zero-or-one-to-zero-or-one": relation_zero_or_one_to_zero_or_one,
  "relative-scale": relative_scale,
  reload,
  "reload-alert": reload_alert,
  reminder,
  remote,
  "remote-desktop": remote_desktop,
  "remote-off": remote_off,
  "remote-tv": remote_tv,
  "remote-tv-off": remote_tv_off,
  "rename-box": rename_box,
  "reorder-horizontal": reorder_horizontal,
  "reorder-vertical": reorder_vertical,
  repeat,
  "repeat-off": repeat_off,
  "repeat-once": repeat_once,
  replay,
  reply,
  "reply-all": reply_all,
  "reply-all-outline": reply_all_outline,
  "reply-circle": reply_circle,
  "reply-outline": reply_outline,
  reproduction,
  resistor,
  "resistor-nodes": resistor_nodes,
  resize,
  "resize-bottom-right": resize_bottom_right,
  responsive,
  restart,
  "restart-alert": restart_alert,
  "restart-off": restart_off,
  restore,
  "restore-alert": restore_alert,
  rewind,
  "rewind-10": rewind_10,
  "rewind-30": rewind_30,
  "rewind-5": rewind_5,
  "rewind-outline": rewind_outline,
  rhombus,
  "rhombus-medium": rhombus_medium,
  "rhombus-medium-outline": rhombus_medium_outline,
  "rhombus-outline": rhombus_outline,
  "rhombus-split": rhombus_split,
  "rhombus-split-outline": rhombus_split_outline,
  ribbon,
  rice,
  ring,
  rivet,
  road,
  "road-variant": road_variant,
  robber,
  robot,
  "robot-industrial": robot_industrial,
  "robot-mower": robot_mower,
  "robot-mower-outline": robot_mower_outline,
  "robot-vacuum": robot_vacuum,
  "robot-vacuum-variant": robot_vacuum_variant,
  rocket,
  "rocket-launch": rocket_launch,
  "rocket-launch-outline": rocket_launch_outline,
  "rocket-outline": rocket_outline,
  rodent,
  "roller-skate": roller_skate,
  "roller-skate-off": roller_skate_off,
  rollerblade,
  "rollerblade-off": rollerblade_off,
  rollupjs,
  "roman-numeral-1": roman_numeral_1,
  "roman-numeral-10": roman_numeral_10,
  "roman-numeral-2": roman_numeral_2,
  "roman-numeral-3": roman_numeral_3,
  "roman-numeral-4": roman_numeral_4,
  "roman-numeral-5": roman_numeral_5,
  "roman-numeral-6": roman_numeral_6,
  "roman-numeral-7": roman_numeral_7,
  "roman-numeral-8": roman_numeral_8,
  "roman-numeral-9": roman_numeral_9,
  "room-service": room_service,
  "room-service-outline": room_service_outline,
  "rotate-3d": rotate_3d,
  "rotate-3d-variant": rotate_3d_variant,
  "rotate-left": rotate_left,
  "rotate-left-variant": rotate_left_variant,
  "rotate-orbit": rotate_orbit,
  "rotate-right": rotate_right,
  "rotate-right-variant": rotate_right_variant,
  "rounded-corner": rounded_corner,
  router,
  "router-network": router_network,
  "router-wireless": router_wireless,
  "router-wireless-settings": router_wireless_settings,
  routes,
  "routes-clock": routes_clock,
  rowing,
  rss,
  "rss-box": rss_box,
  "rss-off": rss_off,
  rug,
  rugby,
  ruler,
  "ruler-square": ruler_square,
  "ruler-square-compass": ruler_square_compass,
  run,
  "run-fast": run_fast,
  "rv-truck": rv_truck,
  sack,
  "sack-percent": sack_percent,
  safe,
  "safe-square": safe_square,
  "safe-square-outline": safe_square_outline,
  "safety-goggles": safety_goggles,
  "sail-boat": sail_boat,
  sale,
  salesforce,
  sass,
  satellite,
  "satellite-uplink": satellite_uplink,
  "satellite-variant": satellite_variant,
  sausage,
  "saw-blade": saw_blade,
  "sawtooth-wave": sawtooth_wave,
  saxophone,
  scale,
  "scale-balance": scale_balance,
  "scale-bathroom": scale_bathroom,
  "scale-off": scale_off,
  "scan-helper": scan_helper,
  scanner,
  "scanner-off": scanner_off,
  "scatter-plot": scatter_plot,
  "scatter-plot-outline": scatter_plot_outline,
  school,
  "school-outline": school_outline,
  "scissors-cutting": scissors_cutting,
  scooter,
  scoreboard,
  "scoreboard-outline": scoreboard_outline,
  "screen-rotation": screen_rotation,
  "screen-rotation-lock": screen_rotation_lock,
  "screw-flat-top": screw_flat_top,
  "screw-lag": screw_lag,
  "screw-machine-flat-top": screw_machine_flat_top,
  "screw-machine-round-top": screw_machine_round_top,
  "screw-round-top": screw_round_top,
  screwdriver,
  script,
  "script-outline": script_outline,
  "script-text": script_text,
  "script-text-outline": script_text_outline,
  sd,
  seal,
  "seal-variant": seal_variant,
  "search-web": search_web,
  seat,
  "seat-flat": seat_flat,
  "seat-flat-angled": seat_flat_angled,
  "seat-individual-suite": seat_individual_suite,
  "seat-legroom-extra": seat_legroom_extra,
  "seat-legroom-normal": seat_legroom_normal,
  "seat-legroom-reduced": seat_legroom_reduced,
  "seat-outline": seat_outline,
  "seat-passenger": seat_passenger,
  "seat-recline-extra": seat_recline_extra,
  "seat-recline-normal": seat_recline_normal,
  seatbelt,
  security,
  "security-network": security_network,
  seed,
  "seed-off": seed_off,
  "seed-off-outline": seed_off_outline,
  "seed-outline": seed_outline,
  segment,
  select: select2,
  "select-all": select_all,
  "select-color": select_color,
  "select-compare": select_compare,
  "select-drag": select_drag,
  "select-group": select_group,
  "select-inverse": select_inverse,
  "select-marker": select_marker,
  "select-multiple": select_multiple,
  "select-multiple-marker": select_multiple_marker,
  "select-off": select_off,
  "select-place": select_place,
  "select-search": select_search,
  selection,
  "selection-drag": selection_drag,
  "selection-ellipse": selection_ellipse,
  "selection-ellipse-arrow-inside": selection_ellipse_arrow_inside,
  "selection-marker": selection_marker,
  "selection-multiple": selection_multiple,
  "selection-multiple-marker": selection_multiple_marker,
  "selection-off": selection_off,
  "selection-search": selection_search,
  "semantic-web": semantic_web,
  send,
  "send-check": send_check,
  "send-check-outline": send_check_outline,
  "send-circle": send_circle,
  "send-circle-outline": send_circle_outline,
  "send-clock": send_clock,
  "send-clock-outline": send_clock_outline,
  "send-lock": send_lock,
  "send-lock-outline": send_lock_outline,
  "send-outline": send_outline,
  "serial-port": serial_port,
  server,
  "server-minus": server_minus,
  "server-network": server_network,
  "server-network-off": server_network_off,
  "server-off": server_off,
  "server-plus": server_plus,
  "server-remove": server_remove,
  "server-security": server_security,
  "set-all": set_all,
  "set-center": set_center,
  "set-center-right": set_center_right,
  "set-left": set_left,
  "set-left-center": set_left_center,
  "set-left-right": set_left_right,
  "set-merge": set_merge,
  "set-none": set_none,
  "set-right": set_right,
  "set-split": set_split,
  "set-square": set_square,
  "set-top-box": set_top_box,
  "settings-helper": settings_helper,
  shaker,
  "shaker-outline": shaker_outline,
  shape,
  "shape-circle-plus": shape_circle_plus,
  "shape-outline": shape_outline,
  "shape-oval-plus": shape_oval_plus,
  "shape-plus": shape_plus,
  "shape-polygon-plus": shape_polygon_plus,
  "shape-rectangle-plus": shape_rectangle_plus,
  "shape-square-plus": shape_square_plus,
  share,
  "share-all": share_all,
  "share-all-outline": share_all_outline,
  "share-circle": share_circle,
  "share-off": share_off,
  "share-off-outline": share_off_outline,
  "share-outline": share_outline,
  "share-variant": share_variant,
  sheep,
  shield,
  "shield-account": shield_account,
  "shield-account-outline": shield_account_outline,
  "shield-airplane": shield_airplane,
  "shield-airplane-outline": shield_airplane_outline,
  "shield-alert": shield_alert,
  "shield-alert-outline": shield_alert_outline,
  "shield-bug": shield_bug,
  "shield-bug-outline": shield_bug_outline,
  "shield-car": shield_car,
  "shield-check": shield_check,
  "shield-check-outline": shield_check_outline,
  "shield-cross": shield_cross,
  "shield-cross-outline": shield_cross_outline,
  "shield-edit": shield_edit,
  "shield-edit-outline": shield_edit_outline,
  "shield-half": shield_half,
  "shield-half-full": shield_half_full,
  "shield-home": shield_home,
  "shield-home-outline": shield_home_outline,
  "shield-key": shield_key,
  "shield-key-outline": shield_key_outline,
  "shield-link-variant": shield_link_variant,
  "shield-link-variant-outline": shield_link_variant_outline,
  "shield-lock": shield_lock,
  "shield-lock-outline": shield_lock_outline,
  "shield-off": shield_off,
  "shield-off-outline": shield_off_outline,
  "shield-outline": shield_outline,
  "shield-plus": shield_plus,
  "shield-plus-outline": shield_plus_outline,
  "shield-refresh": shield_refresh,
  "shield-refresh-outline": shield_refresh_outline,
  "shield-remove": shield_remove,
  "shield-remove-outline": shield_remove_outline,
  "shield-search": shield_search,
  "shield-star": shield_star,
  "shield-star-outline": shield_star_outline,
  "shield-sun": shield_sun,
  "shield-sun-outline": shield_sun_outline,
  "shield-sync": shield_sync,
  "shield-sync-outline": shield_sync_outline,
  "ship-wheel": ship_wheel,
  "shoe-formal": shoe_formal,
  "shoe-heel": shoe_heel,
  "shoe-print": shoe_print,
  shopping,
  "shopping-music": shopping_music,
  "shopping-outline": shopping_outline,
  "shopping-search": shopping_search,
  shovel,
  "shovel-off": shovel_off,
  shower,
  "shower-head": shower_head,
  shredder,
  shuffle,
  "shuffle-disabled": shuffle_disabled,
  "shuffle-variant": shuffle_variant,
  shuriken,
  sigma,
  "sigma-lower": sigma_lower,
  "sign-caution": sign_caution,
  "sign-direction": sign_direction,
  "sign-direction-minus": sign_direction_minus,
  "sign-direction-plus": sign_direction_plus,
  "sign-direction-remove": sign_direction_remove,
  "sign-real-estate": sign_real_estate,
  "sign-text": sign_text,
  signal,
  "signal-2g": signal_2g,
  "signal-3g": signal_3g,
  "signal-4g": signal_4g,
  "signal-5g": signal_5g,
  "signal-cellular-1": signal_cellular_1,
  "signal-cellular-2": signal_cellular_2,
  "signal-cellular-3": signal_cellular_3,
  "signal-cellular-outline": signal_cellular_outline,
  "signal-distance-variant": signal_distance_variant,
  "signal-hspa": signal_hspa,
  "signal-hspa-plus": signal_hspa_plus,
  "signal-off": signal_off,
  "signal-variant": signal_variant,
  signature,
  "signature-freehand": signature_freehand,
  "signature-image": signature_image,
  "signature-text": signature_text,
  silo,
  silverware,
  "silverware-clean": silverware_clean,
  "silverware-fork": silverware_fork,
  "silverware-fork-knife": silverware_fork_knife,
  "silverware-spoon": silverware_spoon,
  "silverware-variant": silverware_variant,
  sim,
  "sim-alert": sim_alert,
  "sim-off": sim_off,
  "simple-icons": simple_icons,
  "sina-weibo": sina_weibo,
  "sine-wave": sine_wave,
  sitemap,
  "size-l": size_l,
  "size-m": size_m,
  "size-s": size_s,
  "size-xl": size_xl,
  "size-xs": size_xs,
  "size-xxl": size_xxl,
  "size-xxs": size_xxs,
  "size-xxxl": size_xxxl,
  skate,
  skateboard,
  "skew-less": skew_less,
  "skew-more": skew_more,
  ski,
  "ski-cross-country": ski_cross_country,
  "ski-water": ski_water,
  "skip-backward": skip_backward,
  "skip-backward-outline": skip_backward_outline,
  "skip-forward": skip_forward,
  "skip-forward-outline": skip_forward_outline,
  "skip-next": skip_next,
  "skip-next-circle": skip_next_circle,
  "skip-next-circle-outline": skip_next_circle_outline,
  "skip-next-outline": skip_next_outline,
  "skip-previous": skip_previous,
  "skip-previous-circle": skip_previous_circle,
  "skip-previous-circle-outline": skip_previous_circle_outline,
  "skip-previous-outline": skip_previous_outline,
  skull,
  "skull-crossbones": skull_crossbones,
  "skull-crossbones-outline": skull_crossbones_outline,
  "skull-outline": skull_outline,
  "skull-scan": skull_scan,
  "skull-scan-outline": skull_scan_outline,
  skype,
  "skype-business": skype_business,
  slack,
  "slash-forward": slash_forward,
  "slash-forward-box": slash_forward_box,
  sleep,
  "sleep-off": sleep_off,
  "slope-downhill": slope_downhill,
  "slope-uphill": slope_uphill,
  "slot-machine": slot_machine,
  "slot-machine-outline": slot_machine_outline,
  "smart-card": smart_card,
  "smart-card-outline": smart_card_outline,
  "smart-card-reader": smart_card_reader,
  "smart-card-reader-outline": smart_card_reader_outline,
  smog,
  "smoke-detector": smoke_detector,
  smoking,
  "smoking-off": smoking_off,
  "smoking-pipe": smoking_pipe,
  "smoking-pipe-off": smoking_pipe_off,
  snapchat,
  snowboard,
  snowflake,
  "snowflake-alert": snowflake_alert,
  "snowflake-melt": snowflake_melt,
  "snowflake-variant": snowflake_variant,
  snowman,
  soccer,
  "soccer-field": soccer_field,
  sofa,
  "solar-panel": solar_panel,
  "solar-panel-large": solar_panel_large,
  "solar-power": solar_power,
  "soldering-iron": soldering_iron,
  solid,
  "sony-playstation": sony_playstation,
  sort,
  "sort-alphabetical-ascending": sort_alphabetical_ascending,
  "sort-alphabetical-ascending-variant": sort_alphabetical_ascending_variant,
  "sort-alphabetical-descending": sort_alphabetical_descending,
  "sort-alphabetical-descending-variant": sort_alphabetical_descending_variant,
  "sort-alphabetical-variant": sort_alphabetical_variant,
  "sort-ascending": sort_ascending,
  "sort-bool-ascending": sort_bool_ascending,
  "sort-bool-ascending-variant": sort_bool_ascending_variant,
  "sort-bool-descending": sort_bool_descending,
  "sort-bool-descending-variant": sort_bool_descending_variant,
  "sort-descending": sort_descending,
  "sort-numeric-ascending": sort_numeric_ascending,
  "sort-numeric-ascending-variant": sort_numeric_ascending_variant,
  "sort-numeric-descending": sort_numeric_descending,
  "sort-numeric-descending-variant": sort_numeric_descending_variant,
  "sort-numeric-variant": sort_numeric_variant,
  "sort-reverse-variant": sort_reverse_variant,
  "sort-variant": sort_variant,
  "sort-variant-lock": sort_variant_lock,
  "sort-variant-lock-open": sort_variant_lock_open,
  "sort-variant-remove": sort_variant_remove,
  soundcloud,
  "source-branch": source_branch,
  "source-branch-check": source_branch_check,
  "source-branch-minus": source_branch_minus,
  "source-branch-plus": source_branch_plus,
  "source-branch-refresh": source_branch_refresh,
  "source-branch-remove": source_branch_remove,
  "source-branch-sync": source_branch_sync,
  "source-commit": source_commit,
  "source-commit-end": source_commit_end,
  "source-commit-end-local": source_commit_end_local,
  "source-commit-local": source_commit_local,
  "source-commit-next-local": source_commit_next_local,
  "source-commit-start": source_commit_start,
  "source-commit-start-next-local": source_commit_start_next_local,
  "source-fork": source_fork,
  "source-merge": source_merge,
  "source-pull": source_pull,
  "source-repository": source_repository,
  "source-repository-multiple": source_repository_multiple,
  "soy-sauce": soy_sauce,
  "soy-sauce-off": soy_sauce_off,
  spa,
  "spa-outline": spa_outline,
  "space-invaders": space_invaders,
  "space-station": space_station,
  spade,
  speaker,
  "speaker-bluetooth": speaker_bluetooth,
  "speaker-multiple": speaker_multiple,
  "speaker-off": speaker_off,
  "speaker-wireless": speaker_wireless,
  speedometer,
  "speedometer-medium": speedometer_medium,
  "speedometer-slow": speedometer_slow,
  spellcheck,
  spider,
  "spider-thread": spider_thread,
  "spider-web": spider_web,
  "spoon-sugar": spoon_sugar,
  spotify,
  spotlight,
  "spotlight-beam": spotlight_beam,
  spray,
  "spray-bottle": spray_bottle,
  sprinkler,
  "sprinkler-variant": sprinkler_variant,
  sprout,
  "sprout-outline": sprout_outline,
  square,
  "square-edit-outline": square_edit_outline,
  "square-medium": square_medium,
  "square-medium-outline": square_medium_outline,
  "square-off": square_off,
  "square-off-outline": square_off_outline,
  "square-outline": square_outline,
  "square-root": square_root,
  "square-root-box": square_root_box,
  "square-small": square_small,
  "square-wave": square_wave,
  squeegee,
  ssh,
  "stack-exchange": stack_exchange,
  "stack-overflow": stack_overflow,
  stackpath,
  stadium,
  "stadium-variant": stadium_variant,
  stairs,
  "stairs-box": stairs_box,
  "stairs-down": stairs_down,
  "stairs-up": stairs_up,
  stamper,
  "standard-definition": standard_definition,
  star,
  "star-box": star_box,
  "star-box-multiple": star_box_multiple,
  "star-box-multiple-outline": star_box_multiple_outline,
  "star-box-outline": star_box_outline,
  "star-circle": star_circle,
  "star-circle-outline": star_circle_outline,
  "star-face": star_face,
  "star-four-points": star_four_points,
  "star-four-points-outline": star_four_points_outline,
  "star-half": star_half,
  "star-half-full": star_half_full,
  "star-off": star_off,
  "star-outline": star_outline,
  "star-three-points": star_three_points,
  "star-three-points-outline": star_three_points_outline,
  "state-machine": state_machine,
  steam,
  steering,
  "steering-off": steering_off,
  "step-backward": step_backward,
  "step-backward-2": step_backward_2,
  "step-forward": step_forward,
  "step-forward-2": step_forward_2,
  stethoscope,
  sticker,
  "sticker-alert": sticker_alert,
  "sticker-alert-outline": sticker_alert_outline,
  "sticker-check": sticker_check,
  "sticker-check-outline": sticker_check_outline,
  "sticker-circle-outline": sticker_circle_outline,
  "sticker-emoji": sticker_emoji,
  "sticker-minus": sticker_minus,
  "sticker-minus-outline": sticker_minus_outline,
  "sticker-outline": sticker_outline,
  "sticker-plus": sticker_plus,
  "sticker-plus-outline": sticker_plus_outline,
  "sticker-remove": sticker_remove,
  "sticker-remove-outline": sticker_remove_outline,
  stocking,
  stomach,
  stop,
  "stop-circle": stop_circle,
  "stop-circle-outline": stop_circle_outline,
  store,
  "store-24-hour": store_24_hour,
  "store-outline": store_outline,
  storefront,
  "storefront-outline": storefront_outline,
  stove,
  strategy,
  "stretch-to-page": stretch_to_page,
  "stretch-to-page-outline": stretch_to_page_outline,
  "string-lights": string_lights,
  "string-lights-off": string_lights_off,
  "subdirectory-arrow-left": subdirectory_arrow_left,
  "subdirectory-arrow-right": subdirectory_arrow_right,
  subtitles,
  "subtitles-outline": subtitles_outline,
  subway,
  "subway-alert-variant": subway_alert_variant,
  "subway-variant": subway_variant,
  summit,
  sunglasses,
  "surround-sound": surround_sound,
  "surround-sound-2-0": surround_sound_2_0,
  "surround-sound-3-1": surround_sound_3_1,
  "surround-sound-5-1": surround_sound_5_1,
  "surround-sound-7-1": surround_sound_7_1,
  svg,
  "swap-horizontal": swap_horizontal,
  "swap-horizontal-bold": swap_horizontal_bold,
  "swap-horizontal-circle": swap_horizontal_circle,
  "swap-horizontal-circle-outline": swap_horizontal_circle_outline,
  "swap-horizontal-variant": swap_horizontal_variant,
  "swap-vertical": swap_vertical,
  "swap-vertical-bold": swap_vertical_bold,
  "swap-vertical-circle": swap_vertical_circle,
  "swap-vertical-circle-outline": swap_vertical_circle_outline,
  "swap-vertical-variant": swap_vertical_variant,
  swim,
  switch: switch2,
  sword,
  "sword-cross": sword_cross,
  "syllabary-hangul": syllabary_hangul,
  "syllabary-hiragana": syllabary_hiragana,
  "syllabary-katakana": syllabary_katakana,
  "syllabary-katakana-halfwidth": syllabary_katakana_halfwidth,
  symfony,
  sync,
  "sync-alert": sync_alert,
  "sync-circle": sync_circle,
  "sync-off": sync_off,
  tab,
  "tab-minus": tab_minus,
  "tab-plus": tab_plus,
  "tab-remove": tab_remove,
  "tab-unselected": tab_unselected,
  table,
  "table-account": table_account,
  "table-alert": table_alert,
  "table-arrow-down": table_arrow_down,
  "table-arrow-left": table_arrow_left,
  "table-arrow-right": table_arrow_right,
  "table-arrow-up": table_arrow_up,
  "table-border": table_border,
  "table-cancel": table_cancel,
  "table-chair": table_chair,
  "table-check": table_check,
  "table-clock": table_clock,
  "table-cog": table_cog,
  "table-column": table_column,
  "table-column-plus-after": table_column_plus_after,
  "table-column-plus-before": table_column_plus_before,
  "table-column-remove": table_column_remove,
  "table-column-width": table_column_width,
  "table-edit": table_edit,
  "table-eye": table_eye,
  "table-eye-off": table_eye_off,
  "table-furniture": table_furniture,
  "table-headers-eye": table_headers_eye,
  "table-headers-eye-off": table_headers_eye_off,
  "table-heart": table_heart,
  "table-key": table_key,
  "table-large": table_large,
  "table-large-plus": table_large_plus,
  "table-large-remove": table_large_remove,
  "table-lock": table_lock,
  "table-merge-cells": table_merge_cells,
  "table-minus": table_minus,
  "table-multiple": table_multiple,
  "table-network": table_network,
  "table-of-contents": table_of_contents,
  "table-off": table_off,
  "table-plus": table_plus,
  "table-refresh": table_refresh,
  "table-remove": table_remove,
  "table-row": table_row,
  "table-row-height": table_row_height,
  "table-row-plus-after": table_row_plus_after,
  "table-row-plus-before": table_row_plus_before,
  "table-row-remove": table_row_remove,
  "table-search": table_search,
  "table-settings": table_settings,
  "table-split-cell": table_split_cell,
  "table-star": table_star,
  "table-sync": table_sync,
  "table-tennis": table_tennis,
  tablet,
  "tablet-android": tablet_android,
  "tablet-cellphone": tablet_cellphone,
  "tablet-dashboard": tablet_dashboard,
  "tablet-ipad": tablet_ipad,
  taco,
  tag,
  "tag-faces": tag_faces,
  "tag-heart": tag_heart,
  "tag-heart-outline": tag_heart_outline,
  "tag-minus": tag_minus,
  "tag-minus-outline": tag_minus_outline,
  "tag-multiple": tag_multiple,
  "tag-multiple-outline": tag_multiple_outline,
  "tag-off": tag_off,
  "tag-off-outline": tag_off_outline,
  "tag-outline": tag_outline,
  "tag-plus": tag_plus,
  "tag-plus-outline": tag_plus_outline,
  "tag-remove": tag_remove,
  "tag-remove-outline": tag_remove_outline,
  "tag-text": tag_text,
  "tag-text-outline": tag_text_outline,
  tailwind,
  tank,
  "tanker-truck": tanker_truck,
  "tape-measure": tape_measure,
  target,
  "target-account": target_account,
  "target-variant": target_variant,
  taxi,
  tea,
  "tea-outline": tea_outline,
  teach,
  teamviewer,
  telegram,
  telescope,
  television,
  "television-ambient-light": television_ambient_light,
  "television-box": television_box,
  "television-classic": television_classic,
  "television-classic-off": television_classic_off,
  "television-clean": television_clean,
  "television-guide": television_guide,
  "television-off": television_off,
  "television-pause": television_pause,
  "television-play": television_play,
  "television-stop": television_stop,
  "temperature-celsius": temperature_celsius,
  "temperature-fahrenheit": temperature_fahrenheit,
  "temperature-kelvin": temperature_kelvin,
  tennis,
  "tennis-ball": tennis_ball,
  tent,
  terraform,
  terrain,
  "test-tube": test_tube,
  "test-tube-empty": test_tube_empty,
  "test-tube-off": test_tube_off,
  text,
  "text-box": text_box,
  "text-box-check": text_box_check,
  "text-box-check-outline": text_box_check_outline,
  "text-box-minus": text_box_minus,
  "text-box-minus-outline": text_box_minus_outline,
  "text-box-multiple": text_box_multiple,
  "text-box-multiple-outline": text_box_multiple_outline,
  "text-box-outline": text_box_outline,
  "text-box-plus": text_box_plus,
  "text-box-plus-outline": text_box_plus_outline,
  "text-box-remove": text_box_remove,
  "text-box-remove-outline": text_box_remove_outline,
  "text-box-search": text_box_search,
  "text-box-search-outline": text_box_search_outline,
  "text-recognition": text_recognition,
  "text-search": text_search,
  "text-shadow": text_shadow,
  "text-short": text_short,
  "text-subject": text_subject,
  "text-to-speech": text_to_speech,
  "text-to-speech-off": text_to_speech_off,
  texture,
  "texture-box": texture_box,
  theater,
  "theme-light-dark": theme_light_dark,
  thermometer,
  "thermometer-alert": thermometer_alert,
  "thermometer-chevron-down": thermometer_chevron_down,
  "thermometer-chevron-up": thermometer_chevron_up,
  "thermometer-high": thermometer_high,
  "thermometer-lines": thermometer_lines,
  "thermometer-low": thermometer_low,
  "thermometer-minus": thermometer_minus,
  "thermometer-plus": thermometer_plus,
  thermostat,
  "thermostat-box": thermostat_box,
  "thought-bubble": thought_bubble,
  "thought-bubble-outline": thought_bubble_outline,
  "thumb-down": thumb_down,
  "thumb-down-outline": thumb_down_outline,
  "thumb-up": thumb_up,
  "thumb-up-outline": thumb_up_outline,
  "thumbs-up-down": thumbs_up_down,
  ticket,
  "ticket-account": ticket_account,
  "ticket-confirmation": ticket_confirmation,
  "ticket-confirmation-outline": ticket_confirmation_outline,
  "ticket-outline": ticket_outline,
  "ticket-percent": ticket_percent,
  "ticket-percent-outline": ticket_percent_outline,
  tie,
  tilde,
  timelapse,
  timeline,
  "timeline-alert": timeline_alert,
  "timeline-alert-outline": timeline_alert_outline,
  "timeline-clock": timeline_clock,
  "timeline-clock-outline": timeline_clock_outline,
  "timeline-help": timeline_help,
  "timeline-help-outline": timeline_help_outline,
  "timeline-outline": timeline_outline,
  "timeline-plus": timeline_plus,
  "timeline-plus-outline": timeline_plus_outline,
  "timeline-text": timeline_text,
  "timeline-text-outline": timeline_text_outline,
  timer,
  "timer-10": timer_10,
  "timer-3": timer_3,
  "timer-off": timer_off,
  "timer-off-outline": timer_off_outline,
  "timer-outline": timer_outline,
  "timer-sand": timer_sand,
  "timer-sand-empty": timer_sand_empty,
  "timer-sand-full": timer_sand_full,
  timetable,
  toaster,
  "toaster-off": toaster_off,
  "toaster-oven": toaster_oven,
  "toggle-switch": toggle_switch,
  "toggle-switch-off": toggle_switch_off,
  "toggle-switch-off-outline": toggle_switch_off_outline,
  "toggle-switch-outline": toggle_switch_outline,
  toilet,
  toolbox,
  "toolbox-outline": toolbox_outline,
  tools,
  tooltip,
  "tooltip-account": tooltip_account,
  "tooltip-edit": tooltip_edit,
  "tooltip-edit-outline": tooltip_edit_outline,
  "tooltip-image": tooltip_image,
  "tooltip-image-outline": tooltip_image_outline,
  "tooltip-outline": tooltip_outline,
  "tooltip-plus": tooltip_plus,
  "tooltip-plus-outline": tooltip_plus_outline,
  "tooltip-text": tooltip_text,
  "tooltip-text-outline": tooltip_text_outline,
  tooth,
  "tooth-outline": tooth_outline,
  toothbrush,
  "toothbrush-electric": toothbrush_electric,
  "toothbrush-paste": toothbrush_paste,
  tortoise,
  toslink,
  tournament,
  "tow-truck": tow_truck,
  "tower-beach": tower_beach,
  "tower-fire": tower_fire,
  "toy-brick": toy_brick,
  "toy-brick-marker": toy_brick_marker,
  "toy-brick-marker-outline": toy_brick_marker_outline,
  "toy-brick-minus": toy_brick_minus,
  "toy-brick-minus-outline": toy_brick_minus_outline,
  "toy-brick-outline": toy_brick_outline,
  "toy-brick-plus": toy_brick_plus,
  "toy-brick-plus-outline": toy_brick_plus_outline,
  "toy-brick-remove": toy_brick_remove,
  "toy-brick-remove-outline": toy_brick_remove_outline,
  "toy-brick-search": toy_brick_search,
  "toy-brick-search-outline": toy_brick_search_outline,
  "track-light": track_light,
  trackpad,
  "trackpad-lock": trackpad_lock,
  tractor,
  "tractor-variant": tractor_variant,
  trademark,
  "traffic-cone": traffic_cone,
  "traffic-light": traffic_light,
  train,
  "train-car": train_car,
  "train-variant": train_variant,
  tram,
  "tram-side": tram_side,
  transcribe,
  "transcribe-close": transcribe_close,
  transfer,
  "transfer-down": transfer_down,
  "transfer-left": transfer_left,
  "transfer-right": transfer_right,
  "transfer-up": transfer_up,
  "transit-connection": transit_connection,
  "transit-connection-variant": transit_connection_variant,
  "transit-detour": transit_detour,
  "transit-transfer": transit_transfer,
  transition: transition2,
  "transition-masked": transition_masked,
  translate,
  "translate-off": translate_off,
  "transmission-tower": transmission_tower,
  "trash-can": trash_can,
  "trash-can-outline": trash_can_outline,
  tray,
  "tray-alert": tray_alert,
  "tray-full": tray_full,
  "tray-minus": tray_minus,
  "tray-plus": tray_plus,
  "tray-remove": tray_remove,
  "treasure-chest": treasure_chest,
  tree,
  "tree-outline": tree_outline,
  trello,
  "trending-down": trending_down,
  "trending-neutral": trending_neutral,
  "trending-up": trending_up,
  triangle,
  "triangle-outline": triangle_outline,
  "triangle-wave": triangle_wave,
  triforce,
  trophy,
  "trophy-award": trophy_award,
  "trophy-broken": trophy_broken,
  "trophy-outline": trophy_outline,
  "trophy-variant": trophy_variant,
  "trophy-variant-outline": trophy_variant_outline,
  truck,
  "truck-check": truck_check,
  "truck-check-outline": truck_check_outline,
  "truck-delivery": truck_delivery,
  "truck-delivery-outline": truck_delivery_outline,
  "truck-fast": truck_fast,
  "truck-fast-outline": truck_fast_outline,
  "truck-outline": truck_outline,
  "truck-trailer": truck_trailer,
  trumpet,
  "tshirt-crew": tshirt_crew,
  "tshirt-crew-outline": tshirt_crew_outline,
  "tshirt-v": tshirt_v,
  "tshirt-v-outline": tshirt_v_outline,
  "tumble-dryer": tumble_dryer,
  "tumble-dryer-alert": tumble_dryer_alert,
  "tumble-dryer-off": tumble_dryer_off,
  tune,
  "tune-vertical": tune_vertical,
  turnstile,
  "turnstile-outline": turnstile_outline,
  turtle,
  twitch,
  twitter,
  "twitter-retweet": twitter_retweet,
  "two-factor-authentication": two_factor_authentication,
  typewriter,
  ubisoft,
  ubuntu,
  ufo,
  "ufo-outline": ufo_outline,
  "ultra-high-definition": ultra_high_definition,
  umbraco,
  umbrella,
  "umbrella-closed": umbrella_closed,
  "umbrella-closed-outline": umbrella_closed_outline,
  "umbrella-closed-variant": umbrella_closed_variant,
  "umbrella-outline": umbrella_outline,
  undo,
  "undo-variant": undo_variant,
  "unfold-less-horizontal": unfold_less_horizontal,
  "unfold-less-vertical": unfold_less_vertical,
  "unfold-more-horizontal": unfold_more_horizontal,
  "unfold-more-vertical": unfold_more_vertical,
  ungroup,
  unicode,
  unity,
  unreal,
  untappd,
  update,
  upload,
  "upload-lock": upload_lock,
  "upload-lock-outline": upload_lock_outline,
  "upload-multiple": upload_multiple,
  "upload-network": upload_network,
  "upload-network-outline": upload_network_outline,
  "upload-off": upload_off,
  "upload-off-outline": upload_off_outline,
  "upload-outline": upload_outline,
  usb,
  "usb-flash-drive": usb_flash_drive,
  "usb-flash-drive-outline": usb_flash_drive_outline,
  "usb-port": usb_port,
  valve,
  "valve-closed": valve_closed,
  "valve-open": valve_open,
  "van-passenger": van_passenger,
  "van-utility": van_utility,
  vanish,
  "vanity-light": vanity_light,
  variable,
  "variable-box": variable_box,
  "vector-arrange-above": vector_arrange_above,
  "vector-arrange-below": vector_arrange_below,
  "vector-bezier": vector_bezier,
  "vector-circle": vector_circle,
  "vector-circle-variant": vector_circle_variant,
  "vector-combine": vector_combine,
  "vector-curve": vector_curve,
  "vector-difference": vector_difference,
  "vector-difference-ab": vector_difference_ab,
  "vector-difference-ba": vector_difference_ba,
  "vector-ellipse": vector_ellipse,
  "vector-intersection": vector_intersection,
  "vector-line": vector_line,
  "vector-link": vector_link,
  "vector-point": vector_point,
  "vector-polygon": vector_polygon,
  "vector-polyline": vector_polyline,
  "vector-polyline-edit": vector_polyline_edit,
  "vector-polyline-minus": vector_polyline_minus,
  "vector-polyline-plus": vector_polyline_plus,
  "vector-polyline-remove": vector_polyline_remove,
  "vector-radius": vector_radius,
  "vector-rectangle": vector_rectangle,
  "vector-selection": vector_selection,
  "vector-square": vector_square,
  "vector-triangle": vector_triangle,
  "vector-union": vector_union,
  vhs,
  vibrate,
  "vibrate-off": vibrate_off,
  video,
  "video-3d": video_3d,
  "video-3d-off": video_3d_off,
  "video-3d-variant": video_3d_variant,
  "video-4k-box": video_4k_box,
  "video-account": video_account,
  "video-box": video_box,
  "video-box-off": video_box_off,
  "video-check": video_check,
  "video-check-outline": video_check_outline,
  "video-image": video_image,
  "video-input-antenna": video_input_antenna,
  "video-input-component": video_input_component,
  "video-input-hdmi": video_input_hdmi,
  "video-input-scart": video_input_scart,
  "video-input-svideo": video_input_svideo,
  "video-minus": video_minus,
  "video-minus-outline": video_minus_outline,
  "video-off": video_off,
  "video-off-outline": video_off_outline,
  "video-outline": video_outline,
  "video-plus": video_plus,
  "video-plus-outline": video_plus_outline,
  "video-stabilization": video_stabilization,
  "video-switch": video_switch,
  "video-switch-outline": video_switch_outline,
  "video-vintage": video_vintage,
  "video-wireless": video_wireless,
  "video-wireless-outline": video_wireless_outline,
  "view-agenda": view_agenda,
  "view-agenda-outline": view_agenda_outline,
  "view-array": view_array,
  "view-array-outline": view_array_outline,
  "view-carousel": view_carousel,
  "view-carousel-outline": view_carousel_outline,
  "view-column": view_column,
  "view-column-outline": view_column_outline,
  "view-comfy": view_comfy,
  "view-comfy-outline": view_comfy_outline,
  "view-compact": view_compact,
  "view-compact-outline": view_compact_outline,
  "view-dashboard": view_dashboard,
  "view-dashboard-outline": view_dashboard_outline,
  "view-dashboard-variant": view_dashboard_variant,
  "view-dashboard-variant-outline": view_dashboard_variant_outline,
  "view-day": view_day,
  "view-day-outline": view_day_outline,
  "view-grid": view_grid,
  "view-grid-outline": view_grid_outline,
  "view-grid-plus": view_grid_plus,
  "view-grid-plus-outline": view_grid_plus_outline,
  "view-headline": view_headline,
  "view-list": view_list,
  "view-list-outline": view_list_outline,
  "view-module": view_module,
  "view-module-outline": view_module_outline,
  "view-parallel": view_parallel,
  "view-parallel-outline": view_parallel_outline,
  "view-quilt": view_quilt,
  "view-quilt-outline": view_quilt_outline,
  "view-sequential": view_sequential,
  "view-sequential-outline": view_sequential_outline,
  "view-split-horizontal": view_split_horizontal,
  "view-split-vertical": view_split_vertical,
  "view-stream": view_stream,
  "view-stream-outline": view_stream_outline,
  "view-week": view_week,
  "view-week-outline": view_week_outline,
  vimeo,
  violin,
  "virtual-reality": virtual_reality,
  virus,
  "virus-outline": virus_outline,
  vk,
  vlc,
  "voice-off": voice_off,
  voicemail,
  volleyball,
  "volume-high": volume_high,
  "volume-low": volume_low,
  "volume-medium": volume_medium,
  "volume-minus": volume_minus,
  "volume-mute": volume_mute,
  "volume-off": volume_off,
  "volume-plus": volume_plus,
  "volume-source": volume_source,
  "volume-variant-off": volume_variant_off,
  "volume-vibrate": volume_vibrate,
  vote,
  "vote-outline": vote_outline,
  vpn,
  vuejs,
  vuetify,
  walk,
  wall,
  "wall-sconce": wall_sconce,
  "wall-sconce-flat": wall_sconce_flat,
  "wall-sconce-flat-variant": wall_sconce_flat_variant,
  "wall-sconce-round": wall_sconce_round,
  "wall-sconce-round-variant": wall_sconce_round_variant,
  wallet,
  "wallet-giftcard": wallet_giftcard,
  "wallet-membership": wallet_membership,
  "wallet-outline": wallet_outline,
  "wallet-plus": wallet_plus,
  "wallet-plus-outline": wallet_plus_outline,
  "wallet-travel": wallet_travel,
  wallpaper,
  wan,
  wardrobe,
  "wardrobe-outline": wardrobe_outline,
  warehouse,
  "washing-machine": washing_machine,
  "washing-machine-alert": washing_machine_alert,
  "washing-machine-off": washing_machine_off,
  watch,
  "watch-export": watch_export,
  "watch-export-variant": watch_export_variant,
  "watch-import": watch_import,
  "watch-import-variant": watch_import_variant,
  "watch-variant": watch_variant,
  "watch-vibrate": watch_vibrate,
  "watch-vibrate-off": watch_vibrate_off,
  water,
  "water-boiler": water_boiler,
  "water-boiler-alert": water_boiler_alert,
  "water-boiler-off": water_boiler_off,
  "water-off": water_off,
  "water-outline": water_outline,
  "water-percent": water_percent,
  "water-polo": water_polo,
  "water-pump": water_pump,
  "water-pump-off": water_pump_off,
  "water-well": water_well,
  "water-well-outline": water_well_outline,
  "watering-can": watering_can,
  "watering-can-outline": watering_can_outline,
  watermark,
  wave,
  waveform,
  waves,
  waze,
  "weather-cloudy": weather_cloudy,
  "weather-cloudy-alert": weather_cloudy_alert,
  "weather-cloudy-arrow-right": weather_cloudy_arrow_right,
  "weather-fog": weather_fog,
  "weather-hail": weather_hail,
  "weather-hazy": weather_hazy,
  "weather-hurricane": weather_hurricane,
  "weather-lightning": weather_lightning,
  "weather-lightning-rainy": weather_lightning_rainy,
  "weather-night": weather_night,
  "weather-night-partly-cloudy": weather_night_partly_cloudy,
  "weather-partly-cloudy": weather_partly_cloudy,
  "weather-partly-lightning": weather_partly_lightning,
  "weather-partly-rainy": weather_partly_rainy,
  "weather-partly-snowy": weather_partly_snowy,
  "weather-partly-snowy-rainy": weather_partly_snowy_rainy,
  "weather-pouring": weather_pouring,
  "weather-rainy": weather_rainy,
  "weather-snowy": weather_snowy,
  "weather-snowy-heavy": weather_snowy_heavy,
  "weather-snowy-rainy": weather_snowy_rainy,
  "weather-sunny": weather_sunny,
  "weather-sunny-alert": weather_sunny_alert,
  "weather-sunset": weather_sunset,
  "weather-sunset-down": weather_sunset_down,
  "weather-sunset-up": weather_sunset_up,
  "weather-tornado": weather_tornado,
  "weather-windy": weather_windy,
  "weather-windy-variant": weather_windy_variant,
  web,
  "web-box": web_box,
  "web-clock": web_clock,
  webcam,
  webhook,
  webpack,
  webrtc,
  wechat,
  weight,
  "weight-gram": weight_gram,
  "weight-kilogram": weight_kilogram,
  "weight-lifter": weight_lifter,
  "weight-pound": weight_pound,
  whatsapp,
  "wheelchair-accessibility": wheelchair_accessibility,
  whistle,
  "whistle-outline": whistle_outline,
  "white-balance-auto": white_balance_auto,
  "white-balance-incandescent": white_balance_incandescent,
  "white-balance-iridescent": white_balance_iridescent,
  "white-balance-sunny": white_balance_sunny,
  widgets,
  "widgets-outline": widgets_outline,
  wifi,
  "wifi-off": wifi_off,
  "wifi-star": wifi_star,
  "wifi-strength-1": wifi_strength_1,
  "wifi-strength-1-alert": wifi_strength_1_alert,
  "wifi-strength-1-lock": wifi_strength_1_lock,
  "wifi-strength-2": wifi_strength_2,
  "wifi-strength-2-alert": wifi_strength_2_alert,
  "wifi-strength-2-lock": wifi_strength_2_lock,
  "wifi-strength-3": wifi_strength_3,
  "wifi-strength-3-alert": wifi_strength_3_alert,
  "wifi-strength-3-lock": wifi_strength_3_lock,
  "wifi-strength-4": wifi_strength_4,
  "wifi-strength-4-alert": wifi_strength_4_alert,
  "wifi-strength-4-lock": wifi_strength_4_lock,
  "wifi-strength-alert-outline": wifi_strength_alert_outline,
  "wifi-strength-lock-outline": wifi_strength_lock_outline,
  "wifi-strength-off": wifi_strength_off,
  "wifi-strength-off-outline": wifi_strength_off_outline,
  "wifi-strength-outline": wifi_strength_outline,
  wikipedia,
  "wind-turbine": wind_turbine,
  "window-close": window_close,
  "window-closed": window_closed,
  "window-closed-variant": window_closed_variant,
  "window-maximize": window_maximize,
  "window-minimize": window_minimize,
  "window-open": window_open,
  "window-open-variant": window_open_variant,
  "window-restore": window_restore,
  "window-shutter": window_shutter,
  "window-shutter-alert": window_shutter_alert,
  "window-shutter-open": window_shutter_open,
  wiper,
  "wiper-wash": wiper_wash,
  "wizard-hat": wizard_hat,
  wordpress,
  wrap,
  "wrap-disabled": wrap_disabled,
  wrench,
  "wrench-outline": wrench_outline,
  xamarin,
  "xamarin-outline": xamarin_outline,
  xing,
  xml,
  xmpp,
  "y-combinator": y_combinator,
  yahoo,
  yeast,
  "yin-yang": yin_yang,
  yoga,
  youtube,
  "youtube-gaming": youtube_gaming,
  "youtube-studio": youtube_studio,
  "youtube-subscription": youtube_subscription,
  "youtube-tv": youtube_tv,
  "z-wave": z_wave,
  zend,
  zigbee,
  "zip-box": zip_box,
  "zip-box-outline": zip_box_outline,
  "zip-disk": zip_disk,
  "zodiac-aquarius": zodiac_aquarius,
  "zodiac-aries": zodiac_aries,
  "zodiac-cancer": zodiac_cancer,
  "zodiac-capricorn": zodiac_capricorn,
  "zodiac-gemini": zodiac_gemini,
  "zodiac-leo": zodiac_leo,
  "zodiac-libra": zodiac_libra,
  "zodiac-pisces": zodiac_pisces,
  "zodiac-sagittarius": zodiac_sagittarius,
  "zodiac-scorpio": zodiac_scorpio,
  "zodiac-taurus": zodiac_taurus,
  "zodiac-virgo": zodiac_virgo,
  blank
};

// node_modules/@expo/vector-icons/build/MaterialCommunityIcons.js
var MaterialCommunityIcons_default3 = createIconSet_default(MaterialCommunityIcons_default2, "material-community", MaterialCommunityIcons_default);

// node_modules/react-native-paper/lib/module/components/MaterialCommunityIcon.js
try {
  MaterialCommunityIcons = require_MaterialCommunityIcons().default;
} catch (e) {
  let isErrorLogged = false;
  MaterialCommunityIcons = ({
    name,
    color: color39,
    size,
    ...rest
  }) => {
    if (!isErrorLogged) {
      if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {
        console.error(e);
      }
      console.warn("Tried to use the icon '".concat(name, "' in a component from 'react-native-paper', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded."), "To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.");
      isErrorLogged = true;
    }
    return /* @__PURE__ */ React34.createElement(Text_default, _extends18({}, rest, {
      style: [styles16.icon, {
        color: color39,
        fontSize: size
      }],
      pointerEvents: "none",
      selectable: false
    }), "\u25A1");
  };
}
var accessibilityProps2 = Platform_default.OS === "web" ? {
  role: "img",
  focusable: false
} : {
  accessibilityElementsHidden: true,
  importantForAccessibility: "no-hide-descendants"
};
var defaultIcon = ({
  name,
  color: color39,
  size,
  direction,
  allowFontScaling
}) => /* @__PURE__ */ React34.createElement(MaterialCommunityIcons, _extends18({
  allowFontScaling,
  name,
  color: color39,
  size,
  style: [{
    transform: [{
      scaleX: direction === "rtl" ? -1 : 1
    }],
    lineHeight: size
  }, styles16.icon],
  pointerEvents: "none",
  selectable: false
}, accessibilityProps2));
var styles16 = StyleSheet_default2.create({
  icon: {
    backgroundColor: "transparent"
  }
});
var MaterialCommunityIcon_default = defaultIcon;

// node_modules/react-native-paper/lib/module/core/settings.js
var {
  Provider,
  Consumer
} = /* @__PURE__ */ React35.createContext({
  icon: MaterialCommunityIcon_default
});

// node_modules/react-native-paper/lib/module/components/Portal/PortalHost.js
var React37 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Portal/PortalManager.js
var React36 = __toModule(require_react());
function _defineProperty22(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var PortalManager = class extends React36.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty22(this, "state", {
      portals: []
    });
    _defineProperty22(this, "mount", (key3, children) => {
      this.setState((state) => ({
        portals: [...state.portals, {
          key: key3,
          children
        }]
      }));
    });
    _defineProperty22(this, "update", (key3, children) => this.setState((state) => ({
      portals: state.portals.map((item) => {
        if (item.key === key3) {
          return {
            ...item,
            children
          };
        }
        return item;
      })
    })));
    _defineProperty22(this, "unmount", (key3) => this.setState((state) => ({
      portals: state.portals.filter((item) => item.key !== key3)
    })));
  }
  render() {
    return this.state.portals.map(({
      key: key3,
      children
    }) => /* @__PURE__ */ React36.createElement(View_default, {
      key: key3,
      collapsable: false,
      pointerEvents: "box-none",
      style: StyleSheet_default2.absoluteFill
    }, children));
  }
};
var PortalManager_default = PortalManager;

// node_modules/react-native-paper/lib/module/components/Portal/PortalHost.js
function _defineProperty23(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var PortalContext = /* @__PURE__ */ React37.createContext(null);
var PortalHost = class extends React37.Component {
  constructor(...args) {
    super(...args);
    _defineProperty23(this, "setManager", (manager) => {
      this.manager = manager;
    });
    _defineProperty23(this, "mount", (children) => {
      const key3 = this.nextKey++;
      if (this.manager) {
        this.manager.mount(key3, children);
      } else {
        this.queue.push({
          type: "mount",
          key: key3,
          children
        });
      }
      return key3;
    });
    _defineProperty23(this, "update", (key3, children) => {
      if (this.manager) {
        this.manager.update(key3, children);
      } else {
        const op = {
          type: "mount",
          key: key3,
          children
        };
        const index = this.queue.findIndex((o) => o.type === "mount" || o.type === "update" && o.key === key3);
        if (index > -1) {
          this.queue[index] = op;
        } else {
          this.queue.push(op);
        }
      }
    });
    _defineProperty23(this, "unmount", (key3) => {
      if (this.manager) {
        this.manager.unmount(key3);
      } else {
        this.queue.push({
          type: "unmount",
          key: key3
        });
      }
    });
    _defineProperty23(this, "nextKey", 0);
    _defineProperty23(this, "queue", []);
    _defineProperty23(this, "manager", void 0);
  }
  componentDidMount() {
    const manager = this.manager;
    const queue2 = this.queue;
    while (queue2.length && manager) {
      const action = queue2.pop();
      if (action) {
        switch (action.type) {
          case "mount":
            manager.mount(action.key, action.children);
            break;
          case "update":
            manager.update(action.key, action.children);
            break;
          case "unmount":
            manager.unmount(action.key);
            break;
        }
      }
    }
  }
  render() {
    return /* @__PURE__ */ React37.createElement(PortalContext.Provider, {
      value: {
        mount: this.mount,
        update: this.update,
        unmount: this.unmount
      }
    }, /* @__PURE__ */ React37.createElement(View_default, {
      style: styles17.container,
      collapsable: false,
      pointerEvents: "box-none"
    }, this.props.children), /* @__PURE__ */ React37.createElement(PortalManager_default, {
      ref: this.setManager
    }));
  }
};
var PortalHost_default = PortalHost;
_defineProperty23(PortalHost, "displayName", "Portal.Host");
var styles17 = StyleSheet_default2.create({
  container: {
    flex: 1
  }
});

// node_modules/react-native-paper/lib/module/styles/DarkTheme.js
var import_color2 = __toModule(require_color());
var DarkTheme = {
  ...DefaultTheme_default,
  dark: true,
  mode: "adaptive",
  colors: {
    ...DefaultTheme_default.colors,
    primary: "#BB86FC",
    accent: "#03dac6",
    background: "#121212",
    surface: "#121212",
    error: "#CF6679",
    onBackground: "#FFFFFF",
    onSurface: "#FFFFFF",
    text: white,
    disabled: (0, import_color2.default)(white).alpha(0.38).rgb().string(),
    placeholder: (0, import_color2.default)(white).alpha(0.54).rgb().string(),
    backdrop: (0, import_color2.default)(black).alpha(0.5).rgb().string(),
    notification: pinkA100
  }
};
var DarkTheme_default = DarkTheme;

// node_modules/react-native-paper/lib/module/core/Provider.js
var Provider2 = ({
  ...props
}) => {
  const colorSchemeName = !props.theme && (Appearance_default === null || Appearance_default === void 0 ? void 0 : Appearance_default.getColorScheme()) || "light";
  const [reduceMotionEnabled, setReduceMotionEnabled] = React38.useState(false);
  const [colorScheme, setColorScheme] = React38.useState(colorSchemeName);
  const handleAppearanceChange = (preferences) => {
    const {
      colorScheme: colorScheme2
    } = preferences;
    setColorScheme(colorScheme2);
  };
  React38.useEffect(() => {
    if (!props.theme) {
      AccessibilityInfo_default.addEventListener("reduceMotionChanged", setReduceMotionEnabled);
    }
    return () => {
      if (!props.theme) {
        AccessibilityInfo_default.removeEventListener("reduceMotionChanged", setReduceMotionEnabled);
      }
    };
  }, [props.theme]);
  React38.useEffect(() => {
    if (!props.theme)
      Appearance_default === null || Appearance_default === void 0 ? void 0 : Appearance_default.addChangeListener(handleAppearanceChange);
    return () => {
      if (!props.theme)
        Appearance_default === null || Appearance_default === void 0 ? void 0 : Appearance_default.removeChangeListener(handleAppearanceChange);
    };
  }, [props.theme]);
  const getTheme = () => {
    const {
      theme: providedTheme
    } = props;
    if (providedTheme) {
      return providedTheme;
    } else {
      const theme2 = colorScheme === "dark" ? DarkTheme_default : DefaultTheme_default;
      return {
        ...theme2,
        animation: {
          ...theme2.animation,
          scale: reduceMotionEnabled ? 0 : 1
        }
      };
    }
  };
  const {
    children,
    settings
  } = props;
  return /* @__PURE__ */ React38.createElement(PortalHost_default, null, /* @__PURE__ */ React38.createElement(Provider, {
    value: settings || {
      icon: MaterialCommunityIcon_default
    }
  }, /* @__PURE__ */ React38.createElement(ThemeProvider, {
    theme: getTheme()
  }, children)));
};
var Provider_default = Provider2;

// node_modules/react-native-paper/lib/module/styles/shadow.js
var SHADOW_COLOR = black;
var SHADOW_OPACITY = 0.24;
function shadow(elevation = 0) {
  if (elevation instanceof Animated_default.Value) {
    const inputRange = [0, 1, 2, 3, 8, 24];
    return {
      shadowColor: SHADOW_COLOR,
      shadowOffset: {
        width: new Animated_default.Value(0),
        height: elevation.interpolate({
          inputRange,
          outputRange: [0, 0.5, 0.75, 2, 7, 23]
        })
      },
      shadowOpacity: new Animated_default.Value(SHADOW_OPACITY),
      shadowRadius: elevation.interpolate({
        inputRange,
        outputRange: [0, 0.75, 1.5, 3, 8, 24]
      })
    };
  } else {
    if (elevation === 0) {
      return {};
    }
    let height, radius2;
    switch (elevation) {
      case 1:
        height = 0.5;
        radius2 = 0.75;
        break;
      case 2:
        height = 0.75;
        radius2 = 1.5;
        break;
      default:
        height = elevation - 1;
        radius2 = elevation;
    }
    return {
      shadowColor: SHADOW_COLOR,
      shadowOffset: {
        width: 0,
        height
      },
      shadowOpacity: SHADOW_OPACITY,
      shadowRadius: radius2
    };
  }
}

// node_modules/react-native-paper/lib/module/styles/overlay.js
var import_color3 = __toModule(require_color());
var isAnimatedValue = (it) => it instanceof Animated_default.Value;
function overlay(elevation, surfaceColor = DarkTheme_default.colors.surface) {
  if (isAnimatedValue(elevation)) {
    const inputRange = [0, 1, 2, 3, 8, 24];
    return elevation.interpolate({
      inputRange,
      outputRange: inputRange.map((elevation2) => {
        return calculateColor(surfaceColor, elevation2);
      })
    });
  }
  return calculateColor(surfaceColor, elevation);
}
function calculateColor(surfaceColor, elevation = 1) {
  let overlayTransparency;
  if (elevation >= 1 && elevation <= 24) {
    overlayTransparency = elevationOverlayTransparency[elevation];
  } else if (elevation > 24) {
    overlayTransparency = elevationOverlayTransparency[24];
  } else {
    overlayTransparency = elevationOverlayTransparency[1];
  }
  return (0, import_color3.default)(surfaceColor).mix((0, import_color3.default)("white"), overlayTransparency * 0.01).hex();
}
var elevationOverlayTransparency = {
  1: 5,
  2: 7,
  3: 8,
  4: 9,
  5: 10,
  6: 11,
  7: 11.5,
  8: 12,
  9: 12.5,
  10: 13,
  11: 13.5,
  12: 14,
  13: 14.25,
  14: 14.5,
  15: 14.75,
  16: 15,
  17: 15.12,
  18: 15.24,
  19: 15.36,
  20: 15.48,
  21: 15.6,
  22: 15.72,
  23: 15.84,
  24: 16
};

// node_modules/react-native-paper/lib/module/components/Avatar/Avatar.js
var Avatar_exports = {};
__export(Avatar_exports, {
  Icon: () => AvatarIcon_default,
  Image: () => AvatarImage_default,
  Text: () => AvatarText_default
});

// node_modules/react-native-paper/lib/module/components/Avatar/AvatarIcon.js
var React40 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Icon.js
var React39 = __toModule(require_react());
function _extends19() {
  _extends19 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends19.apply(this, arguments);
}
var isImageSource = (source) => typeof source === "object" && source !== null && Object.prototype.hasOwnProperty.call(source, "uri") && typeof source.uri === "string" || typeof source === "number" || Platform_default.OS === "web" && typeof source === "string" && (source.startsWith("data:image") || /\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source));
var getIconId = (source) => {
  if (typeof source === "object" && source !== null && Object.prototype.hasOwnProperty.call(source, "uri") && typeof source.uri === "string") {
    return source.uri;
  }
  return source;
};
var isValidIcon = (source) => typeof source === "string" || typeof source === "function" || isImageSource(source);
var isEqualIcon = (a, b) => a === b || getIconId(a) === getIconId(b);
var Icon = ({
  source,
  color: color39,
  size,
  theme: theme2,
  ...rest
}) => {
  const direction = typeof source === "object" && source.direction && source.source ? source.direction === "auto" ? I18nManager_default.isRTL ? "rtl" : "ltr" : source.direction : null;
  const s = typeof source === "object" && source.direction && source.source ? source.source : source;
  const iconColor = color39 || theme2.colors.text;
  if (isImageSource(s)) {
    return /* @__PURE__ */ React39.createElement(Image_default, _extends19({}, rest, {
      source: s,
      style: [
        {
          transform: [{
            scaleX: direction === "rtl" ? -1 : 1
          }]
        },
        {
          width: size,
          height: size,
          tintColor: color39,
          resizeMode: "contain"
        }
      ]
    }, accessibilityProps2));
  } else if (typeof s === "string") {
    return /* @__PURE__ */ React39.createElement(Consumer, null, ({
      icon
    }) => {
      return icon({
        name: s,
        color: iconColor,
        size,
        direction
      });
    });
  } else if (typeof s === "function") {
    return s({
      color: iconColor,
      size,
      direction
    });
  }
  return null;
};
var Icon_default = withTheme(Icon);

// node_modules/react-native-paper/lib/module/utils/getContrastingColor.js
var import_color4 = __toModule(require_color());
function getContrastingColor(input, light, dark) {
  if (typeof input === "string") {
    return (0, import_color4.default)(input).isLight() ? dark : light;
  }
  return light;
}

// node_modules/react-native-paper/lib/module/components/Avatar/AvatarIcon.js
function _extends20() {
  _extends20 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends20.apply(this, arguments);
}
var defaultSize = 64;
var Avatar = ({
  icon,
  size = defaultSize,
  style,
  theme: theme2,
  ...rest
}) => {
  var _rest$color;
  const {
    backgroundColor = theme2.colors.primary,
    ...restStyle
  } = StyleSheet_default2.flatten(style) || {};
  const textColor = (_rest$color = rest.color) !== null && _rest$color !== void 0 ? _rest$color : getContrastingColor(backgroundColor, white, "rgba(0, 0, 0, .54)");
  return /* @__PURE__ */ React40.createElement(View_default, _extends20({
    style: [{
      width: size,
      height: size,
      borderRadius: size / 2,
      backgroundColor
    }, styles18.container, restStyle]
  }, rest), /* @__PURE__ */ React40.createElement(Icon_default, {
    source: icon,
    color: textColor,
    size: size * 0.6
  }));
};
Avatar.displayName = "Avatar.Icon";
var styles18 = StyleSheet_default2.create({
  container: {
    justifyContent: "center",
    alignItems: "center"
  }
});
var AvatarIcon_default = withTheme(Avatar);

// node_modules/react-native-paper/lib/module/components/Avatar/AvatarImage.js
var React41 = __toModule(require_react());
function _extends21() {
  _extends21 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends21.apply(this, arguments);
}
var defaultSize2 = 64;
var AvatarImage = ({
  size = defaultSize2,
  source,
  style,
  theme: theme2,
  ...rest
}) => {
  const {
    colors
  } = theme2;
  const {
    backgroundColor = colors.primary
  } = StyleSheet_default2.flatten(style) || {};
  return /* @__PURE__ */ React41.createElement(View_default, _extends21({
    style: [{
      width: size,
      height: size,
      borderRadius: size / 2,
      backgroundColor
    }, style]
  }, rest), typeof source === "function" && source({
    size
  }), typeof source !== "function" && /* @__PURE__ */ React41.createElement(Image_default, {
    source,
    style: {
      width: size,
      height: size,
      borderRadius: size / 2
    }
  }));
};
AvatarImage.displayName = "Avatar.Image";
var AvatarImage_default = withTheme(AvatarImage);

// node_modules/react-native-paper/lib/module/components/Avatar/AvatarText.js
var React43 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Typography/Text.js
var React42 = __toModule(require_react());
function _extends22() {
  _extends22 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends22.apply(this, arguments);
}
var Text2 = ({
  style,
  theme: theme2,
  ...rest
}, ref) => {
  const root = React42.useRef(null);
  React42.useImperativeHandle(ref, () => ({
    setNativeProps: (args) => {
      var _root$current;
      return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.setNativeProps(args);
    }
  }));
  return /* @__PURE__ */ React42.createElement(Text_default, _extends22({}, rest, {
    ref: root,
    style: [{
      ...theme2.fonts.regular,
      color: theme2.colors.text
    }, styles19.text, style]
  }));
};
var styles19 = StyleSheet_default2.create({
  text: {
    textAlign: "left"
  }
});
var Text_default2 = withTheme(/* @__PURE__ */ React42.forwardRef(Text2));

// node_modules/react-native-paper/lib/module/components/Avatar/AvatarText.js
function _extends23() {
  _extends23 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends23.apply(this, arguments);
}
var defaultSize3 = 64;
var AvatarText = ({
  label: label2,
  size = defaultSize3,
  style,
  theme: theme2,
  labelStyle,
  color: customColor,
  ...rest
}) => {
  const {
    backgroundColor = theme2.colors.primary,
    ...restStyle
  } = StyleSheet_default2.flatten(style) || {};
  const textColor = customColor !== null && customColor !== void 0 ? customColor : getContrastingColor(backgroundColor, white, "rgba(0, 0, 0, .54)");
  return /* @__PURE__ */ React43.createElement(View_default, _extends23({
    style: [{
      width: size,
      height: size,
      borderRadius: size / 2,
      backgroundColor
    }, styles20.container, restStyle]
  }, rest), /* @__PURE__ */ React43.createElement(Text_default2, {
    style: [styles20.text, {
      color: textColor,
      fontSize: size / 2,
      lineHeight: size
    }, labelStyle],
    numberOfLines: 1
  }, label2));
};
AvatarText.displayName = "Avatar.Text";
var styles20 = StyleSheet_default2.create({
  container: {
    justifyContent: "center",
    alignItems: "center"
  },
  text: {
    textAlign: "center",
    textAlignVertical: "center"
  }
});
var AvatarText_default = withTheme(AvatarText);

// node_modules/react-native-paper/lib/module/components/List/List.js
var List_exports = {};
__export(List_exports, {
  Accordion: () => ListAccordion_default,
  AccordionGroup: () => ListAccordionGroup_default,
  Icon: () => ListIcon_default,
  Item: () => ListItem_default,
  Section: () => ListSection_default,
  Subheader: () => ListSubheader_default
});

// node_modules/react-native-paper/lib/module/components/List/ListAccordion.js
var import_color6 = __toModule(require_color());
var React46 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js
var React44 = __toModule(require_react());
var import_color5 = __toModule(require_color());
function _extends24() {
  _extends24 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends24.apply(this, arguments);
}
var TouchableRipple = ({
  style,
  background: _background,
  borderless = false,
  disabled: disabledProp,
  rippleColor,
  underlayColor: _underlayColor,
  children,
  theme: theme2,
  ...rest
}) => {
  const handlePressIn = (e) => {
    var _touches$;
    const {
      centered,
      onPressIn
    } = rest;
    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);
    const {
      dark,
      colors
    } = theme2;
    const calculatedRippleColor = rippleColor || (0, import_color5.default)(colors.text).alpha(dark ? 0.32 : 0.2).rgb().string();
    const button = e.currentTarget;
    const style2 = window.getComputedStyle(button);
    const dimensions2 = button.getBoundingClientRect();
    let touchX;
    let touchY;
    const {
      changedTouches,
      touches
    } = e.nativeEvent;
    const touch = (_touches$ = touches === null || touches === void 0 ? void 0 : touches[0]) !== null && _touches$ !== void 0 ? _touches$ : changedTouches === null || changedTouches === void 0 ? void 0 : changedTouches[0];
    if (centered || !touch) {
      touchX = dimensions2.width / 2;
      touchY = dimensions2.height / 2;
    } else {
      var _touch$locationX, _touch$locationY;
      touchX = (_touch$locationX = touch.locationX) !== null && _touch$locationX !== void 0 ? _touch$locationX : e.pageX;
      touchY = (_touch$locationY = touch.locationY) !== null && _touch$locationY !== void 0 ? _touch$locationY : e.pageY;
    }
    const size = centered ? Math.min(dimensions2.width, dimensions2.height) * 1.25 : Math.max(dimensions2.width, dimensions2.height) * 2;
    const container = document.createElement("span");
    container.setAttribute("data-paper-ripple", "");
    Object.assign(container.style, {
      position: "absolute",
      pointerEvents: "none",
      top: "0",
      left: "0",
      right: "0",
      bottom: "0",
      borderTopLeftRadius: style2.borderTopLeftRadius,
      borderTopRightRadius: style2.borderTopRightRadius,
      borderBottomRightRadius: style2.borderBottomRightRadius,
      borderBottomLeftRadius: style2.borderBottomLeftRadius,
      overflow: centered ? "visible" : "hidden"
    });
    const ripple = document.createElement("span");
    Object.assign(ripple.style, {
      position: "absolute",
      pointerEvents: "none",
      backgroundColor: calculatedRippleColor,
      borderRadius: "50%",
      transitionProperty: "transform opacity",
      transitionDuration: "".concat(Math.min(size * 1.5, 350), "ms"),
      transitionTimingFunction: "linear",
      transformOrigin: "center",
      transform: "translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)",
      opacity: "0.5",
      left: "".concat(touchX, "px"),
      top: "".concat(touchY, "px"),
      width: "".concat(size, "px"),
      height: "".concat(size, "px")
    });
    container.appendChild(ripple);
    button.appendChild(container);
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        Object.assign(ripple.style, {
          transform: "translate3d(-50%, -50%, 0) scale3d(1, 1, 1)",
          opacity: "1"
        });
      });
    });
  };
  const handlePressOut = (e) => {
    var _rest$onPressOut;
    (_rest$onPressOut = rest.onPressOut) === null || _rest$onPressOut === void 0 ? void 0 : _rest$onPressOut.call(rest, e);
    const containers = e.currentTarget.querySelectorAll("[data-paper-ripple]");
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        containers.forEach((container) => {
          const ripple = container.firstChild;
          Object.assign(ripple.style, {
            transitionDuration: "250ms",
            opacity: 0
          });
          setTimeout(() => {
            const {
              parentNode
            } = container;
            if (parentNode) {
              parentNode.removeChild(container);
            }
          }, 500);
        });
      });
    });
  };
  const disabled = disabledProp || !rest.onPress;
  return /* @__PURE__ */ React44.createElement(TouchableWithoutFeedback_default, _extends24({}, rest, {
    onPressIn: handlePressIn,
    onPressOut: handlePressOut,
    disabled
  }), /* @__PURE__ */ React44.createElement(View_default, {
    style: [styles21.touchable, borderless && styles21.borderless, style]
  }, React44.Children.only(children)));
};
TouchableRipple.supported = true;
var styles21 = StyleSheet_default2.create({
  touchable: {
    position: "relative",
    ...Platform_default.OS === "web" && {
      cursor: "pointer"
    }
  },
  borderless: {
    overflow: "hidden"
  }
});
var TouchableRipple_default = withTheme(TouchableRipple);

// node_modules/react-native-paper/lib/module/components/List/ListAccordionGroup.js
var React45 = __toModule(require_react());
var ListAccordionGroupContext = /* @__PURE__ */ React45.createContext(null);
var ListAccordionGroup = ({
  expandedId: expandedIdProp,
  onAccordionPress,
  children
}) => {
  const [expandedId, setExpandedId] = React45.useState(void 0);
  const onAccordionPressDefault = (newExpandedId) => {
    setExpandedId((currentExpandedId) => currentExpandedId === newExpandedId ? void 0 : newExpandedId);
  };
  return /* @__PURE__ */ React45.createElement(ListAccordionGroupContext.Provider, {
    value: {
      expandedId: expandedIdProp || expandedId,
      onAccordionPress: onAccordionPress || onAccordionPressDefault
    }
  }, children);
};
ListAccordionGroup.displayName = "List.AccordionGroup";
var ListAccordionGroup_default = ListAccordionGroup;

// node_modules/react-native-paper/lib/module/components/List/ListAccordion.js
var ListAccordion = ({
  left: left2,
  title,
  description,
  children,
  theme: theme2,
  titleStyle,
  descriptionStyle,
  titleNumberOfLines = 1,
  descriptionNumberOfLines = 2,
  style,
  id: id2,
  testID,
  onPress,
  onLongPress,
  expanded: expandedProp
}) => {
  const [expanded, setExpanded] = React46.useState(expandedProp || false);
  const handlePressAction = () => {
    onPress === null || onPress === void 0 ? void 0 : onPress();
    if (expandedProp === void 0) {
      setExpanded((expanded2) => !expanded2);
    }
  };
  const titleColor = (0, import_color6.default)(theme2.colors.text).alpha(0.87).rgb().string();
  const descriptionColor = (0, import_color6.default)(theme2.colors.text).alpha(0.54).rgb().string();
  const expandedInternal = expandedProp !== void 0 ? expandedProp : expanded;
  const groupContext = React46.useContext(ListAccordionGroupContext);
  if (groupContext !== null && !id2) {
    throw new Error("List.Accordion is used inside a List.AccordionGroup without specifying an id prop.");
  }
  const isExpanded = groupContext ? groupContext.expandedId === id2 : expandedInternal;
  const handlePress2 = groupContext && id2 !== void 0 ? () => groupContext.onAccordionPress(id2) : handlePressAction;
  return /* @__PURE__ */ React46.createElement(View_default, null, /* @__PURE__ */ React46.createElement(TouchableRipple_default, {
    style: [styles22.container, style],
    onPress: handlePress2,
    onLongPress,
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    testID
  }, /* @__PURE__ */ React46.createElement(View_default, {
    style: styles22.row,
    pointerEvents: "none"
  }, left2 ? left2({
    color: isExpanded ? theme2.colors.primary : descriptionColor
  }) : null, /* @__PURE__ */ React46.createElement(View_default, {
    style: [styles22.item, styles22.content]
  }, /* @__PURE__ */ React46.createElement(Text_default2, {
    selectable: false,
    numberOfLines: titleNumberOfLines,
    style: [styles22.title, {
      color: isExpanded ? theme2.colors.primary : titleColor
    }, titleStyle]
  }, title), description && /* @__PURE__ */ React46.createElement(Text_default2, {
    selectable: false,
    numberOfLines: descriptionNumberOfLines,
    style: [styles22.description, {
      color: descriptionColor
    }, descriptionStyle]
  }, description)), /* @__PURE__ */ React46.createElement(View_default, {
    style: [styles22.item, description ? styles22.multiline : void 0]
  }, /* @__PURE__ */ React46.createElement(MaterialCommunityIcon_default, {
    name: isExpanded ? "chevron-up" : "chevron-down",
    color: titleColor,
    size: 24,
    direction: I18nManager_default.isRTL ? "rtl" : "ltr"
  })))), isExpanded ? React46.Children.map(children, (child2) => {
    if (left2 && /* @__PURE__ */ React46.isValidElement(child2) && !child2.props.left && !child2.props.right) {
      return /* @__PURE__ */ React46.cloneElement(child2, {
        style: [styles22.child, child2.props.style]
      });
    }
    return child2;
  }) : null);
};
ListAccordion.displayName = "List.Accordion";
var styles22 = StyleSheet_default2.create({
  container: {
    padding: 8
  },
  row: {
    flexDirection: "row",
    alignItems: "center"
  },
  multiline: {
    height: 40,
    alignItems: "center",
    justifyContent: "center"
  },
  title: {
    fontSize: 16
  },
  description: {
    fontSize: 14
  },
  item: {
    margin: 8
  },
  child: {
    paddingLeft: 64
  },
  content: {
    flex: 1,
    justifyContent: "center"
  }
});
var ListAccordion_default = withTheme(ListAccordion);

// node_modules/react-native-paper/lib/module/components/List/ListIcon.js
var React47 = __toModule(require_react());
var ICON_SIZE = 24;
var ListIcon = ({
  icon,
  color: iconColor,
  style
}) => /* @__PURE__ */ React47.createElement(View_default, {
  style: [styles23.item, style],
  pointerEvents: "box-none"
}, /* @__PURE__ */ React47.createElement(Icon_default, {
  source: icon,
  size: ICON_SIZE,
  color: iconColor
}));
var styles23 = StyleSheet_default2.create({
  item: {
    margin: 8,
    height: 40,
    width: 40,
    alignItems: "center",
    justifyContent: "center"
  }
});
ListIcon.displayName = "List.Icon";
var ListIcon_default = ListIcon;

// node_modules/react-native-paper/lib/module/components/List/ListItem.js
var import_color7 = __toModule(require_color());
var React48 = __toModule(require_react());
function _extends25() {
  _extends25 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends25.apply(this, arguments);
}
var ListItem = ({
  left: left2,
  right: right2,
  title,
  description,
  onPress,
  theme: theme2,
  style,
  titleStyle,
  titleNumberOfLines = 1,
  descriptionNumberOfLines = 2,
  titleEllipsizeMode,
  descriptionEllipsizeMode,
  descriptionStyle,
  ...rest
}) => {
  const renderDescription = (descriptionColor2, description2) => {
    return typeof description2 === "function" ? description2({
      selectable: false,
      ellipsizeMode: descriptionEllipsizeMode,
      color: descriptionColor2,
      fontSize: styles24.description.fontSize
    }) : /* @__PURE__ */ React48.createElement(Text_default2, {
      selectable: false,
      numberOfLines: descriptionNumberOfLines,
      ellipsizeMode: descriptionEllipsizeMode,
      style: [styles24.description, {
        color: descriptionColor2
      }, descriptionStyle]
    }, description2);
  };
  const titleColor = (0, import_color7.default)(theme2.colors.text).alpha(0.87).rgb().string();
  const descriptionColor = (0, import_color7.default)(theme2.colors.text).alpha(0.54).rgb().string();
  return /* @__PURE__ */ React48.createElement(TouchableRipple_default, _extends25({}, rest, {
    style: [styles24.container, style],
    onPress
  }), /* @__PURE__ */ React48.createElement(View_default, {
    style: styles24.row
  }, left2 ? left2({
    color: descriptionColor,
    style: description ? styles24.iconMarginLeft : {
      ...styles24.iconMarginLeft,
      ...styles24.marginVerticalNone
    }
  }) : null, /* @__PURE__ */ React48.createElement(View_default, {
    style: [styles24.item, styles24.content]
  }, /* @__PURE__ */ React48.createElement(Text_default2, {
    selectable: false,
    ellipsizeMode: titleEllipsizeMode,
    numberOfLines: titleNumberOfLines,
    style: [styles24.title, {
      color: titleColor
    }, titleStyle]
  }, title), description ? renderDescription(descriptionColor, description) : null), right2 ? right2({
    color: descriptionColor,
    style: description ? styles24.iconMarginRight : {
      ...styles24.iconMarginRight,
      ...styles24.marginVerticalNone
    }
  }) : null));
};
ListItem.displayName = "List.Item";
var styles24 = StyleSheet_default2.create({
  container: {
    padding: 8
  },
  row: {
    flexDirection: "row"
  },
  title: {
    fontSize: 16
  },
  description: {
    fontSize: 14
  },
  marginVerticalNone: {
    marginVertical: 0
  },
  iconMarginLeft: {
    marginLeft: 0,
    marginRight: 16
  },
  iconMarginRight: {
    marginRight: 0
  },
  item: {
    marginVertical: 6,
    paddingLeft: 8
  },
  content: {
    flex: 1,
    justifyContent: "center"
  }
});
var ListItem_default = withTheme(ListItem);

// node_modules/react-native-paper/lib/module/components/List/ListSection.js
var React50 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/List/ListSubheader.js
var React49 = __toModule(require_react());
var import_color8 = __toModule(require_color());
function _extends26() {
  _extends26 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends26.apply(this, arguments);
}
var ListSubheader = ({
  style,
  theme: theme2,
  ...rest
}) => {
  const {
    colors,
    fonts
  } = theme2;
  const font2 = fonts.medium;
  const textColor = (0, import_color8.default)(colors.text).alpha(0.54).rgb().string();
  return /* @__PURE__ */ React49.createElement(Text_default2, _extends26({
    numberOfLines: 1
  }, rest, {
    style: [styles25.container, {
      color: textColor,
      ...font2
    }, style]
  }));
};
ListSubheader.displayName = "List.Subheader";
var styles25 = StyleSheet_default2.create({
  container: {
    paddingHorizontal: 16,
    paddingVertical: 13
  }
});
var ListSubheader_default = withTheme(ListSubheader);

// node_modules/react-native-paper/lib/module/components/List/ListSection.js
function _extends27() {
  _extends27 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends27.apply(this, arguments);
}
var ListSection = ({
  children,
  title,
  titleStyle,
  style,
  ...rest
}) => /* @__PURE__ */ React50.createElement(View_default, _extends27({}, rest, {
  style: [styles26.container, style]
}), title && /* @__PURE__ */ React50.createElement(ListSubheader_default, {
  style: titleStyle
}, title), children);
ListSection.displayName = "List.Section";
var styles26 = StyleSheet_default2.create({
  container: {
    marginVertical: 8
  }
});
var ListSection_default = withTheme(ListSection);

// node_modules/react-native-paper/lib/module/components/Drawer/Drawer.js
var Drawer_exports = {};
__export(Drawer_exports, {
  Item: () => DrawerItem_default,
  Section: () => DrawerSection_default
});

// node_modules/react-native-paper/lib/module/components/Drawer/DrawerItem.js
var import_color9 = __toModule(require_color());
var React51 = __toModule(require_react());
function _extends28() {
  _extends28 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends28.apply(this, arguments);
}
var DrawerItem = ({
  icon,
  label: label2,
  active,
  theme: theme2,
  style,
  onPress,
  accessibilityLabel,
  ...rest
}) => {
  const {
    colors,
    roundness
  } = theme2;
  const backgroundColor = active ? (0, import_color9.default)(colors.primary).alpha(0.12).rgb().string() : "transparent";
  const contentColor = active ? colors.primary : (0, import_color9.default)(colors.text).alpha(0.68).rgb().string();
  const font2 = theme2.fonts.medium;
  const labelMargin = icon ? 32 : 0;
  return /* @__PURE__ */ React51.createElement(View_default, _extends28({}, rest, {
    style: [styles27.container, {
      backgroundColor,
      borderRadius: roundness
    }, style]
  }), /* @__PURE__ */ React51.createElement(TouchableRipple_default, {
    borderless: true,
    delayPressIn: 0,
    onPress,
    style: {
      borderRadius: roundness
    },
    accessibilityTraits: active ? ["button", "selected"] : "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      selected: active
    },
    accessibilityLabel
  }, /* @__PURE__ */ React51.createElement(View_default, {
    style: styles27.wrapper
  }, icon ? /* @__PURE__ */ React51.createElement(Icon_default, {
    source: icon,
    size: 24,
    color: contentColor
  }) : null, /* @__PURE__ */ React51.createElement(Text_default2, {
    selectable: false,
    numberOfLines: 1,
    style: [styles27.label, {
      color: contentColor,
      ...font2,
      marginLeft: labelMargin
    }]
  }, label2))));
};
DrawerItem.displayName = "Drawer.Item";
var styles27 = StyleSheet_default2.create({
  container: {
    marginHorizontal: 10,
    marginVertical: 4
  },
  wrapper: {
    flexDirection: "row",
    alignItems: "center",
    padding: 8
  },
  label: {
    marginRight: 32
  }
});
var DrawerItem_default = withTheme(DrawerItem);

// node_modules/react-native-paper/lib/module/components/Drawer/DrawerSection.js
var import_color11 = __toModule(require_color());
var React53 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Divider.js
var React52 = __toModule(require_react());
var import_color10 = __toModule(require_color());
function _extends29() {
  _extends29 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends29.apply(this, arguments);
}
var Divider = ({
  inset,
  style,
  theme: theme2,
  ...rest
}) => {
  const {
    dark: isDarkTheme
  } = theme2;
  return /* @__PURE__ */ React52.createElement(View_default, _extends29({}, rest, {
    style: [isDarkTheme ? styles28.dark : styles28.light, inset && styles28.inset, style]
  }));
};
var styles28 = StyleSheet_default2.create({
  light: {
    backgroundColor: (0, import_color10.default)(black).alpha(0.12).rgb().string(),
    height: StyleSheet_default2.hairlineWidth
  },
  dark: {
    backgroundColor: (0, import_color10.default)(white).alpha(0.12).rgb().string(),
    height: StyleSheet_default2.hairlineWidth
  },
  inset: {
    marginLeft: 72
  }
});
var Divider_default = withTheme(Divider);

// node_modules/react-native-paper/lib/module/components/Drawer/DrawerSection.js
function _extends30() {
  _extends30 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends30.apply(this, arguments);
}
var DrawerSection = ({
  children,
  title,
  theme: theme2,
  style,
  ...rest
}) => {
  const {
    colors,
    fonts
  } = theme2;
  const titleColor = (0, import_color11.default)(colors.text).alpha(0.54).rgb().string();
  const font2 = fonts.medium;
  return /* @__PURE__ */ React53.createElement(View_default, _extends30({
    style: [styles29.container, style]
  }, rest), title && /* @__PURE__ */ React53.createElement(View_default, {
    style: styles29.titleContainer
  }, /* @__PURE__ */ React53.createElement(Text_default2, {
    numberOfLines: 1,
    style: [{
      color: titleColor,
      ...font2
    }, styles29.title]
  }, title)), children, /* @__PURE__ */ React53.createElement(Divider_default, {
    style: styles29.divider
  }));
};
DrawerSection.displayName = "Drawer.Section";
var styles29 = StyleSheet_default2.create({
  container: {
    marginBottom: 4
  },
  titleContainer: {
    height: 40,
    justifyContent: "center"
  },
  title: {
    marginLeft: 16
  },
  divider: {
    marginTop: 4
  }
});
var DrawerSection_default = withTheme(DrawerSection);

// node_modules/react-native-paper/lib/module/components/Badge.js
var React54 = __toModule(require_react());
function _extends31() {
  _extends31 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends31.apply(this, arguments);
}
var defaultSize4 = 20;
var Badge = ({
  children,
  size = defaultSize4,
  style,
  theme: theme2,
  visible = true,
  ...rest
}) => {
  const {
    current: opacity3
  } = React54.useRef(new Animated_default.Value(visible ? 1 : 0));
  const isFirstRendering = React54.useRef(true);
  const {
    animation: {
      scale: scale2
    }
  } = theme2;
  React54.useEffect(() => {
    if (isFirstRendering.current) {
      isFirstRendering.current = false;
      return;
    }
    Animated_default.timing(opacity3, {
      toValue: visible ? 1 : 0,
      duration: 150 * scale2,
      useNativeDriver: true
    }).start();
  }, [visible, opacity3, scale2]);
  const {
    backgroundColor = theme2.colors.notification,
    ...restStyle
  } = StyleSheet_default2.flatten(style) || {};
  const textColor = getContrastingColor(backgroundColor, white, black);
  const borderRadius = size / 2;
  return /* @__PURE__ */ React54.createElement(Animated_default.Text, _extends31({
    numberOfLines: 1,
    style: [{
      opacity: opacity3,
      backgroundColor,
      color: textColor,
      fontSize: size * 0.5,
      ...theme2.fonts.regular,
      lineHeight: size,
      height: size,
      minWidth: size,
      borderRadius
    }, styles30.container, restStyle]
  }, rest), children);
};
var Badge_default = withTheme(Badge);
var styles30 = StyleSheet_default2.create({
  container: {
    alignSelf: "flex-end",
    textAlign: "center",
    textAlignVertical: "center",
    paddingHorizontal: 4,
    overflow: "hidden"
  }
});

// node_modules/react-native-paper/lib/module/components/ActivityIndicator.js
var React55 = __toModule(require_react());
function _extends32() {
  _extends32 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends32.apply(this, arguments);
}
var DURATION = 2400;
var ActivityIndicator2 = ({
  animating = true,
  color: indicatorColor,
  hidesWhenStopped = true,
  size: indicatorSize = "small",
  style,
  theme: theme2,
  ...rest
}) => {
  const {
    current: timer2
  } = React55.useRef(new Animated_default.Value(0));
  const {
    current: fade
  } = React55.useRef(new Animated_default.Value(!animating && hidesWhenStopped ? 0 : 1));
  const rotation = React55.useRef(void 0);
  const {
    animation: {
      scale: scale2
    }
  } = theme2;
  const startRotation = React55.useCallback(() => {
    Animated_default.timing(fade, {
      duration: 200 * scale2,
      toValue: 1,
      isInteraction: false,
      useNativeDriver: true
    }).start();
    if (rotation.current) {
      timer2.setValue(0);
      Animated_default.loop(rotation.current).start();
    }
  }, [scale2, fade, timer2]);
  const stopRotation = () => {
    if (rotation.current) {
      rotation.current.stop();
    }
  };
  React55.useEffect(() => {
    if (rotation.current === void 0) {
      rotation.current = Animated_default.timing(timer2, {
        duration: DURATION,
        easing: Easing_default2.linear,
        useNativeDriver: Platform_default.OS !== "web",
        toValue: 1,
        isInteraction: false
      });
    }
    if (animating) {
      startRotation();
    } else if (hidesWhenStopped) {
      Animated_default.timing(fade, {
        duration: 200 * scale2,
        toValue: 0,
        useNativeDriver: true,
        isInteraction: false
      }).start(stopRotation);
    } else {
      stopRotation();
    }
  }, [animating, fade, hidesWhenStopped, startRotation, scale2, timer2]);
  const color39 = indicatorColor || theme2.colors.primary;
  const size = typeof indicatorSize === "string" ? indicatorSize === "small" ? 24 : 48 : indicatorSize ? indicatorSize : 24;
  const frames = 60 * DURATION / 1e3;
  const easing = Easing_default2.bezier(0.4, 0, 0.7, 1);
  const containerStyle = {
    width: size,
    height: size / 2,
    overflow: "hidden"
  };
  return /* @__PURE__ */ React55.createElement(View_default, _extends32({
    style: [styles31.container, style]
  }, rest, {
    accessible: true,
    accessibilityRole: "progressbar"
  }), /* @__PURE__ */ React55.createElement(Animated_default.View, {
    style: [{
      width: size,
      height: size,
      opacity: fade
    }],
    collapsable: false
  }, [0, 1].map((index) => {
    const inputRange = Array.from(new Array(frames), (_, frameIndex) => frameIndex / (frames - 1));
    const outputRange = Array.from(new Array(frames), (_, frameIndex) => {
      let progress = 2 * frameIndex / (frames - 1);
      const rotation2 = index ? +(360 - 15) : -(180 - 15);
      if (progress > 1) {
        progress = 2 - progress;
      }
      const direction = index ? -1 : 1;
      return "".concat(direction * (180 - 30) * easing(progress) + rotation2, "deg");
    });
    const layerStyle = {
      width: size,
      height: size,
      transform: [{
        rotate: timer2.interpolate({
          inputRange: [0, 1],
          outputRange: ["".concat(0 + 30 + 15, "deg"), "".concat(2 * 360 + 30 + 15, "deg")]
        })
      }]
    };
    const viewportStyle = {
      width: size,
      height: size,
      transform: [{
        translateY: index ? -size / 2 : 0
      }, {
        rotate: timer2.interpolate({
          inputRange,
          outputRange
        })
      }]
    };
    const offsetStyle = index ? {
      top: size / 2
    } : null;
    const lineStyle = {
      width: size,
      height: size,
      borderColor: color39,
      borderWidth: size / 10,
      borderRadius: size / 2
    };
    return /* @__PURE__ */ React55.createElement(Animated_default.View, {
      key: index,
      style: [styles31.layer]
    }, /* @__PURE__ */ React55.createElement(Animated_default.View, {
      style: layerStyle
    }, /* @__PURE__ */ React55.createElement(Animated_default.View, {
      style: [containerStyle, offsetStyle],
      collapsable: false
    }, /* @__PURE__ */ React55.createElement(Animated_default.View, {
      style: viewportStyle
    }, /* @__PURE__ */ React55.createElement(Animated_default.View, {
      style: containerStyle,
      collapsable: false
    }, /* @__PURE__ */ React55.createElement(Animated_default.View, {
      style: lineStyle
    }))))));
  })));
};
var styles31 = StyleSheet_default2.create({
  container: {
    justifyContent: "center",
    alignItems: "center"
  },
  layer: {
    ...StyleSheet_default2.absoluteFillObject,
    justifyContent: "center",
    alignItems: "center"
  }
});
var ActivityIndicator_default2 = withTheme(ActivityIndicator2);

// node_modules/react-native-paper/lib/module/components/Banner.js
var React58 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Surface.js
var React56 = __toModule(require_react());
function _extends33() {
  _extends33 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends33.apply(this, arguments);
}
var Surface = ({
  style,
  theme: theme2,
  ...rest
}) => {
  const {
    elevation = 4
  } = StyleSheet_default2.flatten(style) || {};
  const {
    dark: isDarkTheme,
    mode,
    colors
  } = theme2;
  return /* @__PURE__ */ React56.createElement(Animated_default.View, _extends33({}, rest, {
    style: [{
      backgroundColor: isDarkTheme && mode === "adaptive" ? overlay(elevation, colors.surface) : colors.surface
    }, elevation ? shadow(elevation) : null, style]
  }));
};
var Surface_default = withTheme(Surface);

// node_modules/react-native-paper/lib/module/components/Button.js
var React57 = __toModule(require_react());
var import_color12 = __toModule(require_color());
function _extends34() {
  _extends34 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends34.apply(this, arguments);
}
var Button = ({
  disabled,
  compact,
  mode = "text",
  dark,
  loading: loading2,
  icon,
  color: buttonColor,
  children,
  uppercase = true,
  accessibilityLabel,
  onPress,
  onLongPress,
  style,
  theme: theme2,
  contentStyle,
  labelStyle,
  testID,
  accessible,
  ...rest
}) => {
  var _StyleSheet$flatten;
  const {
    current: elevation
  } = React57.useRef(new Animated_default.Value(mode === "contained" ? 2 : 0));
  const handlePressIn = () => {
    if (mode === "contained") {
      const {
        scale: scale2
      } = theme2.animation;
      Animated_default.timing(elevation, {
        toValue: 8,
        duration: 200 * scale2,
        useNativeDriver: true
      }).start();
    }
  };
  const handlePressOut = () => {
    if (mode === "contained") {
      const {
        scale: scale2
      } = theme2.animation;
      Animated_default.timing(elevation, {
        toValue: 2,
        duration: 150 * scale2,
        useNativeDriver: true
      }).start();
    }
  };
  const {
    colors,
    roundness
  } = theme2;
  const font2 = theme2.fonts.medium;
  let backgroundColor, borderColor, textColor, borderWidth;
  if (mode === "contained") {
    if (disabled) {
      backgroundColor = (0, import_color12.default)(theme2.dark ? white : black).alpha(0.12).rgb().string();
    } else if (buttonColor) {
      backgroundColor = buttonColor;
    } else {
      backgroundColor = colors.primary;
    }
  } else {
    backgroundColor = "transparent";
  }
  if (mode === "outlined") {
    borderColor = (0, import_color12.default)(theme2.dark ? white : black).alpha(0.29).rgb().string();
    borderWidth = StyleSheet_default2.hairlineWidth;
  } else {
    borderColor = "transparent";
    borderWidth = 0;
  }
  if (disabled) {
    textColor = (0, import_color12.default)(theme2.dark ? white : black).alpha(0.32).rgb().string();
  } else if (mode === "contained") {
    let isDark;
    if (typeof dark === "boolean") {
      isDark = dark;
    } else {
      isDark = backgroundColor === "transparent" ? false : !(0, import_color12.default)(backgroundColor).isLight();
    }
    textColor = isDark ? white : black;
  } else if (buttonColor) {
    textColor = buttonColor;
  } else {
    textColor = colors.primary;
  }
  const rippleColor = (0, import_color12.default)(textColor).alpha(0.32).rgb().string();
  const buttonStyle = {
    backgroundColor,
    borderColor,
    borderWidth,
    borderRadius: roundness
  };
  const touchableStyle = {
    borderRadius: style ? (StyleSheet_default2.flatten(style) || {}).borderRadius || roundness : roundness
  };
  const {
    color: customLabelColor,
    fontSize: customLabelSize
  } = StyleSheet_default2.flatten(labelStyle) || {};
  const textStyle = {
    color: textColor,
    ...font2
  };
  const elevationRes = disabled || mode !== "contained" ? 0 : elevation;
  const iconStyle = ((_StyleSheet$flatten = StyleSheet_default2.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === "row-reverse" ? styles32.iconReverse : styles32.icon;
  return /* @__PURE__ */ React57.createElement(Surface_default, _extends34({}, rest, {
    style: [styles32.button, compact && styles32.compact, {
      elevation: elevationRes
    }, buttonStyle, style]
  }), /* @__PURE__ */ React57.createElement(TouchableRipple_default, {
    borderless: true,
    delayPressIn: 0,
    onPress,
    onLongPress,
    onPressIn: handlePressIn,
    onPressOut: handlePressOut,
    accessibilityLabel,
    accessibilityRole: "button",
    accessibilityState: {
      disabled
    },
    accessible,
    disabled,
    rippleColor,
    style: touchableStyle,
    testID
  }, /* @__PURE__ */ React57.createElement(View_default, {
    style: [styles32.content, contentStyle]
  }, icon && loading2 !== true ? /* @__PURE__ */ React57.createElement(View_default, {
    style: iconStyle
  }, /* @__PURE__ */ React57.createElement(Icon_default, {
    source: icon,
    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,
    color: typeof customLabelColor === "string" ? customLabelColor : textColor
  })) : null, loading2 ? /* @__PURE__ */ React57.createElement(ActivityIndicator_default2, {
    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,
    color: typeof customLabelColor === "string" ? customLabelColor : textColor,
    style: iconStyle
  }) : null, /* @__PURE__ */ React57.createElement(Text_default2, {
    selectable: false,
    numberOfLines: 1,
    style: [styles32.label, compact && styles32.compactLabel, uppercase && styles32.uppercaseLabel, textStyle, font2, labelStyle]
  }, children))));
};
var styles32 = StyleSheet_default2.create({
  button: {
    minWidth: 64,
    borderStyle: "solid"
  },
  compact: {
    minWidth: "auto"
  },
  content: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center"
  },
  icon: {
    marginLeft: 12,
    marginRight: -4
  },
  iconReverse: {
    marginRight: 12,
    marginLeft: -4
  },
  label: {
    textAlign: "center",
    letterSpacing: 1,
    marginVertical: 9,
    marginHorizontal: 16
  },
  compactLabel: {
    marginHorizontal: 8
  },
  uppercaseLabel: {
    textTransform: "uppercase"
  }
});
var Button_default = withTheme(Button);

// node_modules/react-native-paper/lib/module/components/Banner.js
function _extends35() {
  _extends35 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends35.apply(this, arguments);
}
var ELEVATION = 1;
var DEFAULT_MAX_WIDTH = 960;
var Banner = ({
  visible,
  icon,
  children,
  actions,
  contentStyle,
  style,
  theme: theme2,
  ...rest
}) => {
  const {
    current: position2
  } = React58.useRef(new Animated_default.Value(visible ? 1 : 0));
  const [layout, setLayout] = React58.useState({
    height: 0,
    measured: false
  });
  const {
    scale: scale2
  } = theme2.animation;
  React58.useEffect(() => {
    if (visible) {
      Animated_default.timing(position2, {
        duration: 250 * scale2,
        toValue: 1,
        useNativeDriver: false
      }).start();
    } else {
      Animated_default.timing(position2, {
        duration: 200 * scale2,
        toValue: 0,
        useNativeDriver: false
      }).start();
    }
  }, [visible, position2, scale2]);
  const handleLayout = ({
    nativeEvent
  }) => {
    const {
      height: height2
    } = nativeEvent.layout;
    setLayout({
      height: height2,
      measured: true
    });
  };
  const height = Animated_default.multiply(position2, layout.height);
  const translateY = Animated_default.multiply(Animated_default.add(position2, -1), layout.height);
  return /* @__PURE__ */ React58.createElement(Surface_default, _extends35({}, rest, {
    style: [styles33.container, shadow(ELEVATION), style]
  }), /* @__PURE__ */ React58.createElement(View_default, {
    style: [styles33.wrapper, contentStyle]
  }, /* @__PURE__ */ React58.createElement(Animated_default.View, {
    style: {
      height
    }
  }), /* @__PURE__ */ React58.createElement(Animated_default.View, {
    onLayout: handleLayout,
    style: [layout.measured || !visible ? [styles33.absolute, {
      transform: [{
        translateY
      }]
    }] : null, !layout.measured && !visible ? {
      opacity: 0
    } : null]
  }, /* @__PURE__ */ React58.createElement(View_default, {
    style: styles33.content
  }, icon ? /* @__PURE__ */ React58.createElement(View_default, {
    style: styles33.icon
  }, /* @__PURE__ */ React58.createElement(Icon_default, {
    source: icon,
    size: 40
  })) : null, /* @__PURE__ */ React58.createElement(Text_default2, {
    style: styles33.message
  }, children)), /* @__PURE__ */ React58.createElement(View_default, {
    style: styles33.actions
  }, actions.map(({
    label: label2,
    ...others
  }, i) => /* @__PURE__ */ React58.createElement(Button_default, _extends35({
    key: i,
    compact: true,
    mode: "text",
    style: styles33.button
  }, others), label2))))));
};
var styles33 = StyleSheet_default2.create({
  container: {
    elevation: ELEVATION
  },
  wrapper: {
    overflow: "hidden",
    alignSelf: "center",
    width: "100%",
    maxWidth: DEFAULT_MAX_WIDTH
  },
  absolute: {
    position: "absolute",
    top: 0,
    width: "100%"
  },
  content: {
    flexDirection: "row",
    justifyContent: "flex-start",
    marginHorizontal: 8,
    marginTop: 16,
    marginBottom: 0
  },
  icon: {
    margin: 8
  },
  message: {
    flex: 1,
    margin: 8
  },
  actions: {
    flexDirection: "row",
    justifyContent: "flex-end",
    margin: 4
  },
  button: {
    margin: 4
  }
});
var Banner_default = withTheme(Banner);

// node_modules/react-native-paper/lib/module/components/BottomNavigation.js
var React62 = __toModule(require_react());

// node_modules/react-native-iphone-x-helper/index.js
function isIphoneX() {
  const dimen = Dimensions.get("window");
  return Platform_default.OS === "ios" && !Platform_default.isPad && !Platform_default.isTVOS && (dimen.height === 780 || dimen.width === 780 || (dimen.height === 812 || dimen.width === 812) || (dimen.height === 844 || dimen.width === 844) || (dimen.height === 896 || dimen.width === 896) || (dimen.height === 926 || dimen.width === 926));
}
function ifIphoneX(iphoneXStyle, regularStyle) {
  if (isIphoneX()) {
    return iphoneXStyle;
  }
  return regularStyle;
}
function getStatusBarHeight(safe2) {
  return Platform_default.select({
    ios: ifIphoneX(safe2 ? 44 : 30, 20),
    android: StatusBar_default.currentHeight,
    default: 0
  });
}
function getBottomSpace() {
  return isIphoneX() ? 34 : 0;
}

// node_modules/react-native-paper/lib/module/components/BottomNavigation.js
var import_color13 = __toModule(require_color());

// node_modules/react-native-paper/lib/module/utils/useLazyRef.js
var React59 = __toModule(require_react());
function useLazyRef(callback) {
  const lazyRef = React59.useRef();
  if (lazyRef.current === void 0) {
    lazyRef.current = callback();
  }
  return lazyRef;
}

// node_modules/react-native-paper/lib/module/utils/useAnimatedValue.js
function useAnimatedValue(initialValue) {
  const {
    current
  } = useLazyRef(() => new Animated_default.Value(initialValue));
  return current;
}

// node_modules/react-native-paper/lib/module/utils/useAnimatedValueArray.js
var React60 = __toModule(require_react());
function useAnimatedValueArray(initialValues) {
  const refs = React60.useRef([]);
  refs.current.length = initialValues.length;
  initialValues.forEach((initialValue, i) => {
    var _refs$current$i;
    refs.current[i] = (_refs$current$i = refs.current[i]) !== null && _refs$current$i !== void 0 ? _refs$current$i : new Animated_default.Value(initialValue);
  });
  return refs.current;
}

// node_modules/react-native-paper/lib/module/utils/useLayout.js
var React61 = __toModule(require_react());
function useLayout() {
  const [layout, setLayout] = React61.useState({
    height: 0,
    width: 0,
    measured: false
  });
  const onLayout = React61.useCallback((e) => {
    const {
      height,
      width
    } = e.nativeEvent.layout;
    if (height === layout.height && width === layout.width) {
      return;
    }
    setLayout({
      height,
      width,
      measured: true
    });
  }, [layout.height, layout.width]);
  return [layout, onLayout];
}

// node_modules/react-native-paper/lib/module/components/BottomNavigation.js
function _extends36() {
  _extends36 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends36.apply(this, arguments);
}
var MIN_RIPPLE_SCALE = 1e-3;
var MIN_TAB_WIDTH = 96;
var MAX_TAB_WIDTH = 168;
var BAR_HEIGHT = 56;
var BOTTOM_INSET = getBottomSpace();
var FAR_FAR_AWAY = Platform_default.OS === "web" ? 0 : 9999;
var Touchable = ({
  route: _0,
  style,
  children,
  borderless,
  centered,
  rippleColor,
  ...rest
}) => TouchableRipple_default.supported ? /* @__PURE__ */ React62.createElement(TouchableRipple_default, _extends36({}, rest, {
  disabled: rest.disabled || void 0,
  borderless,
  centered,
  rippleColor,
  style
}), children) : /* @__PURE__ */ React62.createElement(TouchableWithoutFeedback_default, rest, /* @__PURE__ */ React62.createElement(View_default, {
  style
}, children));
var SceneComponent = /* @__PURE__ */ React62.memo(({
  component,
  ...rest
}) => /* @__PURE__ */ React62.createElement(component, rest));
var BottomNavigation = ({
  navigationState,
  renderScene,
  renderIcon,
  renderLabel,
  renderTouchable = (props) => /* @__PURE__ */ React62.createElement(Touchable, props),
  getLabelText = ({
    route
  }) => route.title,
  getBadge = ({
    route
  }) => route.badge,
  getColor = ({
    route
  }) => route.color,
  getAccessibilityLabel = ({
    route
  }) => route.accessibilityLabel,
  getTestID = ({
    route
  }) => route.testID,
  activeColor,
  inactiveColor,
  keyboardHidesNavigationBar = true,
  barStyle,
  labeled = true,
  style,
  theme: theme2,
  sceneAnimationEnabled = false,
  onTabPress,
  onIndexChange,
  shifting = navigationState.routes.length > 3
}) => {
  const {
    scale: scale2
  } = theme2.animation;
  const focusedKey = navigationState.routes[navigationState.index].key;
  const visibleAnim = useAnimatedValue(1);
  const tabsAnims = useAnimatedValueArray(navigationState.routes.map((_, i) => i === navigationState.index ? 1 : 0));
  const offsetsAnims = useAnimatedValueArray(navigationState.routes.map((_, i) => i === navigationState.index ? 0 : 1));
  const indexAnim = useAnimatedValue(navigationState.index);
  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);
  const [layout, onLayout] = useLayout();
  const [loaded2, setLoaded] = React62.useState([focusedKey]);
  if (!loaded2.includes(focusedKey)) {
    setLoaded((loaded3) => [...loaded3, focusedKey]);
  }
  const [keyboardVisible, setKeyboardVisible] = React62.useState(false);
  const handleKeyboardShow = React62.useCallback(() => {
    setKeyboardVisible(true);
    Animated_default.timing(visibleAnim, {
      toValue: 0,
      duration: 150 * scale2,
      useNativeDriver: true
    }).start();
  }, [scale2, visibleAnim]);
  const handleKeyboardHide = React62.useCallback(() => {
    Animated_default.timing(visibleAnim, {
      toValue: 1,
      duration: 100 * scale2,
      useNativeDriver: true
    }).start(() => {
      setKeyboardVisible(false);
    });
  }, [scale2, visibleAnim]);
  const animateToIndex = React62.useCallback((index) => {
    rippleAnim.setValue(MIN_RIPPLE_SCALE);
    Animated_default.parallel([Animated_default.timing(rippleAnim, {
      toValue: 1,
      duration: shifting ? 400 * scale2 : 0,
      useNativeDriver: true
    }), ...navigationState.routes.map((_, i) => Animated_default.timing(tabsAnims[i], {
      toValue: i === index ? 1 : 0,
      duration: shifting ? 150 * scale2 : 0,
      useNativeDriver: true
    }))]).start(({
      finished
    }) => {
      tabsAnims.map((tab2, i) => tab2.setValue(i === index ? 1 : 0));
      indexAnim.setValue(index);
      rippleAnim.setValue(MIN_RIPPLE_SCALE);
      if (finished) {
        offsetsAnims.forEach((offset, i) => {
          if (i === index) {
            offset.setValue(0);
          } else {
            offset.setValue(1);
          }
        });
      }
    });
  }, [indexAnim, shifting, navigationState.routes, offsetsAnims, rippleAnim, scale2, tabsAnims]);
  React62.useEffect(() => {
    animateToIndex(navigationState.index);
  }, []);
  React62.useEffect(() => {
    if (Platform_default.OS === "ios") {
      Keyboard_default.addListener("keyboardWillShow", handleKeyboardShow);
      Keyboard_default.addListener("keyboardWillHide", handleKeyboardHide);
    } else {
      Keyboard_default.addListener("keyboardDidShow", handleKeyboardShow);
      Keyboard_default.addListener("keyboardDidHide", handleKeyboardHide);
    }
    return () => {
      if (Platform_default.OS === "ios") {
        Keyboard_default.removeListener("keyboardWillShow", handleKeyboardShow);
        Keyboard_default.removeListener("keyboardWillHide", handleKeyboardHide);
      } else {
        Keyboard_default.removeListener("keyboardDidShow", handleKeyboardShow);
        Keyboard_default.removeListener("keyboardDidHide", handleKeyboardHide);
      }
    };
  }, [handleKeyboardHide, handleKeyboardShow]);
  const prevNavigationState = React62.useRef();
  React62.useEffect(() => {
    offsetsAnims.forEach((offset, i) => {
      var _prevNavigationState$;
      if (i === navigationState.index || i === ((_prevNavigationState$ = prevNavigationState.current) === null || _prevNavigationState$ === void 0 ? void 0 : _prevNavigationState$.index)) {
        offset.setValue(0);
      }
    });
    animateToIndex(navigationState.index);
  }, [navigationState.index, animateToIndex, offsetsAnims]);
  const handleTabPress = (index) => {
    const event4 = {
      route: navigationState.routes[index],
      defaultPrevented: false,
      preventDefault: () => {
        event4.defaultPrevented = true;
      }
    };
    onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event4);
    if (event4.defaultPrevented) {
      return;
    }
    if (index !== navigationState.index) {
      onIndexChange(index);
    }
  };
  const jumpTo = React62.useCallback((key3) => {
    const index = navigationState.routes.findIndex((route) => route.key === key3);
    onIndexChange(index);
  }, [navigationState.routes, onIndexChange]);
  const {
    routes: routes2
  } = navigationState;
  const {
    colors,
    dark: isDarkTheme,
    mode
  } = theme2;
  const {
    backgroundColor: customBackground,
    elevation = 4
  } = StyleSheet_default2.flatten(barStyle) || {};
  const approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === "adaptive" ? overlay(elevation, colors.surface) : colors.primary;
  const backgroundColor = shifting ? indexAnim.interpolate({
    inputRange: routes2.map((_, i) => i),
    outputRange: routes2.map((route) => getColor({
      route
    }) || approxBackgroundColor)
  }) : approxBackgroundColor;
  const isDark = typeof approxBackgroundColor === "string" ? !(0, import_color13.default)(approxBackgroundColor).isLight() : true;
  const textColor = isDark ? white : black;
  const activeTintColor = typeof activeColor !== "undefined" ? activeColor : textColor;
  const inactiveTintColor = typeof inactiveColor !== "undefined" ? inactiveColor : (0, import_color13.default)(textColor).alpha(0.5).rgb().string();
  const touchColor = (0, import_color13.default)(activeColor || activeTintColor).alpha(0.12).rgb().string();
  const maxTabWidth = routes2.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;
  const maxTabBarWidth = maxTabWidth * routes2.length;
  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);
  const tabWidth = tabBarWidth / routes2.length;
  const rippleSize = layout.width / 4;
  return /* @__PURE__ */ React62.createElement(View_default, {
    style: [styles34.container, style]
  }, /* @__PURE__ */ React62.createElement(View_default, {
    style: [styles34.content, {
      backgroundColor: colors.background
    }]
  }, routes2.map((route, index) => {
    if (!loaded2.includes(route.key)) {
      return null;
    }
    const focused = navigationState.index === index;
    const opacity3 = sceneAnimationEnabled ? tabsAnims[index] : focused ? 1 : 0;
    const top = offsetsAnims[index].interpolate({
      inputRange: [0, 1],
      outputRange: [0, FAR_FAR_AWAY]
    });
    return /* @__PURE__ */ React62.createElement(Animated_default.View, {
      key: route.key,
      pointerEvents: focused ? "auto" : "none",
      accessibilityElementsHidden: !focused,
      importantForAccessibility: focused ? "auto" : "no-hide-descendants",
      style: [StyleSheet_default2.absoluteFill, {
        opacity: opacity3
      }],
      collapsable: false,
      removeClippedSubviews: Platform_default.OS === "ios" ? navigationState.index !== index : true
    }, /* @__PURE__ */ React62.createElement(Animated_default.View, {
      style: [styles34.content, {
        top
      }]
    }, renderScene({
      route,
      jumpTo
    })));
  })), /* @__PURE__ */ React62.createElement(Surface_default, {
    style: [styles34.bar, keyboardHidesNavigationBar ? {
      transform: [{
        translateY: visibleAnim.interpolate({
          inputRange: [0, 1],
          outputRange: [layout.height, 0]
        })
      }],
      position: keyboardVisible ? "absolute" : null
    } : null, barStyle],
    pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboardVisible ? "none" : "auto" : "none",
    onLayout
  }, /* @__PURE__ */ React62.createElement(Animated_default.View, {
    style: [styles34.barContent, {
      backgroundColor
    }]
  }, /* @__PURE__ */ React62.createElement(View_default, {
    style: [styles34.items, {
      marginBottom: BOTTOM_INSET,
      maxWidth: maxTabBarWidth
    }]
  }, shifting ? /* @__PURE__ */ React62.createElement(Animated_default.View, {
    pointerEvents: "none",
    style: [styles34.ripple, {
      top: (BAR_HEIGHT - rippleSize) / 2,
      left: tabWidth * (navigationState.index + 0.5) - rippleSize / 2,
      height: rippleSize,
      width: rippleSize,
      borderRadius: rippleSize / 2,
      backgroundColor: getColor({
        route: routes2[navigationState.index]
      }),
      transform: [{
        scale: rippleAnim.interpolate({
          inputRange: [0, 1],
          outputRange: [0, 8]
        })
      }],
      opacity: rippleAnim.interpolate({
        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],
        outputRange: [0, 0, 1, 1]
      })
    }]
  }) : null, routes2.map((route, index) => {
    const focused = navigationState.index === index;
    const active = tabsAnims[index];
    const scale3 = labeled && shifting ? active.interpolate({
      inputRange: [0, 1],
      outputRange: [0.5, 1]
    }) : 1;
    const translateY = labeled ? shifting ? active.interpolate({
      inputRange: [0, 1],
      outputRange: [7, 0]
    }) : 0 : 7;
    const activeOpacity = active;
    const inactiveOpacity = active.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 0]
    });
    const badge = getBadge({
      route
    });
    return renderTouchable({
      key: route.key,
      route,
      borderless: true,
      centered: true,
      rippleColor: touchColor,
      onPress: () => handleTabPress(index),
      testID: getTestID({
        route
      }),
      accessibilityLabel: getAccessibilityLabel({
        route
      }),
      accessibilityTraits: focused ? ["button", "selected"] : "button",
      accessibilityComponentType: "button",
      accessibilityRole: "button",
      accessibilityState: {
        selected: true
      },
      style: styles34.item,
      children: /* @__PURE__ */ React62.createElement(View_default, {
        pointerEvents: "none"
      }, /* @__PURE__ */ React62.createElement(Animated_default.View, {
        style: [styles34.iconContainer, {
          transform: [{
            translateY
          }]
        }]
      }, /* @__PURE__ */ React62.createElement(Animated_default.View, {
        style: [styles34.iconWrapper, {
          opacity: activeOpacity
        }]
      }, renderIcon ? renderIcon({
        route,
        focused: true,
        color: activeTintColor
      }) : /* @__PURE__ */ React62.createElement(Icon_default, {
        source: route.icon,
        color: activeTintColor,
        size: 24
      })), /* @__PURE__ */ React62.createElement(Animated_default.View, {
        style: [styles34.iconWrapper, {
          opacity: inactiveOpacity
        }]
      }, renderIcon ? renderIcon({
        route,
        focused: false,
        color: inactiveTintColor
      }) : /* @__PURE__ */ React62.createElement(Icon_default, {
        source: route.icon,
        color: inactiveTintColor,
        size: 24
      })), /* @__PURE__ */ React62.createElement(View_default, {
        style: [styles34.badgeContainer, {
          right: (badge != null && typeof badge !== "boolean" ? String(badge).length * -2 : 0) - 2
        }]
      }, typeof badge === "boolean" ? /* @__PURE__ */ React62.createElement(Badge_default, {
        visible: badge,
        size: 8
      }) : /* @__PURE__ */ React62.createElement(Badge_default, {
        visible: badge != null,
        size: 16
      }, badge))), labeled ? /* @__PURE__ */ React62.createElement(Animated_default.View, {
        style: [styles34.labelContainer, {
          transform: [{
            scale: scale3
          }]
        }]
      }, /* @__PURE__ */ React62.createElement(Animated_default.View, {
        style: [styles34.labelWrapper, {
          opacity: activeOpacity
        }]
      }, renderLabel ? renderLabel({
        route,
        focused: true,
        color: activeTintColor
      }) : /* @__PURE__ */ React62.createElement(Text_default2, {
        style: [styles34.label, {
          color: activeTintColor
        }]
      }, getLabelText({
        route
      }))), shifting ? null : /* @__PURE__ */ React62.createElement(Animated_default.View, {
        style: [styles34.labelWrapper, {
          opacity: inactiveOpacity
        }]
      }, renderLabel ? renderLabel({
        route,
        focused: false,
        color: inactiveTintColor
      }) : /* @__PURE__ */ React62.createElement(Text_default2, {
        selectable: false,
        style: [styles34.label, {
          color: inactiveTintColor
        }]
      }, getLabelText({
        route
      })))) : /* @__PURE__ */ React62.createElement(View_default, {
        style: styles34.labelContainer
      }))
    });
  })))));
};
BottomNavigation.SceneMap = (scenes) => {
  return ({
    route,
    jumpTo
  }) => /* @__PURE__ */ React62.createElement(SceneComponent, {
    key: route.key,
    component: scenes[route.key ? route.key : ""],
    route,
    jumpTo
  });
};
var BottomNavigation_default = withTheme(BottomNavigation);
var styles34 = StyleSheet_default2.create({
  container: {
    flex: 1,
    overflow: "hidden"
  },
  content: {
    flex: 1
  },
  bar: {
    left: 0,
    right: 0,
    bottom: 0,
    elevation: 4
  },
  barContent: {
    alignItems: "center",
    overflow: "hidden"
  },
  items: {
    flexDirection: "row",
    width: "100%"
  },
  item: {
    flex: 1,
    paddingVertical: 6
  },
  ripple: {
    position: "absolute"
  },
  iconContainer: {
    height: 24,
    width: 24,
    marginTop: 2,
    marginHorizontal: 12,
    alignSelf: "center"
  },
  iconWrapper: {
    ...StyleSheet_default2.absoluteFillObject,
    alignItems: "center"
  },
  labelContainer: {
    height: 16,
    paddingBottom: 2
  },
  labelWrapper: {
    ...StyleSheet_default2.absoluteFillObject
  },
  label: {
    fontSize: 12,
    textAlign: "center",
    backgroundColor: "transparent",
    ...Platform_default.OS === "web" ? {
      whiteSpace: "nowrap",
      alignSelf: "center"
    } : null
  },
  badgeContainer: {
    position: "absolute",
    left: 0,
    top: -2
  }
});

// node_modules/react-native-paper/lib/module/components/Card/Card.js
var React70 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Card/CardContent.js
var React63 = __toModule(require_react());
function _extends37() {
  _extends37 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends37.apply(this, arguments);
}
var CardContent = ({
  index,
  total,
  siblings,
  style,
  ...rest
}) => {
  const cover = "withTheme(CardCover)";
  const title = "withTheme(CardTitle)";
  let contentStyle, prev, next;
  if (typeof index === "number" && siblings) {
    prev = siblings[index - 1];
    next = siblings[index + 1];
  }
  if (prev === cover && next === cover || prev === title && next === title || total === 1) {
    contentStyle = styles35.only;
  } else if (index === 0) {
    if (next === cover || next === title) {
      contentStyle = styles35.only;
    } else {
      contentStyle = styles35.first;
    }
  } else if (typeof total === "number" && index === total - 1) {
    if (prev === cover || prev === title) {
      contentStyle = styles35.only;
    } else {
      contentStyle = styles35.last;
    }
  } else if (prev === cover || prev === title) {
    contentStyle = styles35.first;
  } else if (next === cover || next === title) {
    contentStyle = styles35.last;
  }
  return /* @__PURE__ */ React63.createElement(View_default, _extends37({}, rest, {
    style: [styles35.container, contentStyle, style]
  }));
};
CardContent.displayName = "Card.Content";
var styles35 = StyleSheet_default2.create({
  container: {
    paddingHorizontal: 16
  },
  first: {
    paddingTop: 16
  },
  last: {
    paddingBottom: 16
  },
  only: {
    paddingVertical: 16
  }
});
var CardContent_default = CardContent;

// node_modules/react-native-paper/lib/module/components/Card/CardActions.js
var React64 = __toModule(require_react());
function _extends38() {
  _extends38 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends38.apply(this, arguments);
}
var CardActions = (props) => /* @__PURE__ */ React64.createElement(View_default, _extends38({}, props, {
  style: [styles36.container, props.style]
}), React64.Children.map(props.children, (child2) => /* @__PURE__ */ React64.isValidElement(child2) ? /* @__PURE__ */ React64.cloneElement(child2, {
  compact: child2.props.compact !== false
}) : child2));
CardActions.displayName = "Card.Actions";
var styles36 = StyleSheet_default2.create({
  container: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "flex-start",
    padding: 8
  }
});
var CardActions_default = CardActions;

// node_modules/react-native-paper/lib/module/components/Card/CardCover.js
var React65 = __toModule(require_react());
function _extends39() {
  _extends39 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends39.apply(this, arguments);
}
var CardCover = ({
  index,
  total,
  style,
  theme: theme2,
  ...rest
}) => {
  const {
    roundness
  } = theme2;
  let coverStyle;
  if (index === 0) {
    if (total === 1) {
      coverStyle = {
        borderRadius: roundness
      };
    } else {
      coverStyle = {
        borderTopLeftRadius: roundness,
        borderTopRightRadius: roundness
      };
    }
  } else if (typeof total === "number" && index === total - 1) {
    coverStyle = {
      borderBottomLeftRadius: roundness
    };
  }
  return /* @__PURE__ */ React65.createElement(View_default, {
    style: [styles37.container, coverStyle, style]
  }, /* @__PURE__ */ React65.createElement(Image_default, _extends39({}, rest, {
    style: [styles37.image, coverStyle]
  })));
};
CardCover.displayName = "Card.Cover";
var styles37 = StyleSheet_default2.create({
  container: {
    height: 195,
    backgroundColor: grey200,
    overflow: "hidden"
  },
  image: {
    flex: 1,
    height: void 0,
    width: void 0,
    padding: 16,
    justifyContent: "flex-end",
    resizeMode: "cover"
  }
});
var CardCover_default = withTheme(CardCover);

// node_modules/react-native-paper/lib/module/components/Card/CardTitle.js
var React69 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Typography/Caption.js
var React67 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Typography/StyledText.js
var import_color14 = __toModule(require_color());
var React66 = __toModule(require_react());
function _extends40() {
  _extends40 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends40.apply(this, arguments);
}
var StyledText = ({
  theme: theme2,
  alpha: alpha2,
  family,
  style,
  ...rest
}) => {
  const textColor = (0, import_color14.default)(theme2.colors.text).alpha(alpha2).rgb().string();
  const font2 = theme2.fonts[family];
  const writingDirection = I18nManager_default.isRTL ? "rtl" : "ltr";
  return /* @__PURE__ */ React66.createElement(Text_default2, _extends40({}, rest, {
    style: [styles38.text, {
      color: textColor,
      ...font2,
      writingDirection
    }, style]
  }));
};
var styles38 = StyleSheet_default2.create({
  text: {
    textAlign: "left"
  }
});
var StyledText_default = withTheme(StyledText);

// node_modules/react-native-paper/lib/module/components/Typography/Caption.js
function _extends41() {
  _extends41 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends41.apply(this, arguments);
}
var Caption = (props) => /* @__PURE__ */ React67.createElement(StyledText_default, _extends41({}, props, {
  alpha: 0.54,
  family: "regular",
  style: [styles39.text, props.style]
}));
var Caption_default = Caption;
var styles39 = StyleSheet_default2.create({
  text: {
    fontSize: 12,
    lineHeight: 20,
    marginVertical: 2,
    letterSpacing: 0.4
  }
});

// node_modules/react-native-paper/lib/module/components/Typography/Title.js
var React68 = __toModule(require_react());
function _extends42() {
  _extends42 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends42.apply(this, arguments);
}
var Title = (props) => /* @__PURE__ */ React68.createElement(StyledText_default, _extends42({}, props, {
  alpha: 0.87,
  family: "medium",
  style: [styles40.text, props.style]
}));
var Title_default = Title;
var styles40 = StyleSheet_default2.create({
  text: {
    fontSize: 20,
    lineHeight: 30,
    marginVertical: 2,
    letterSpacing: 0.15
  }
});

// node_modules/react-native-paper/lib/module/components/Card/CardTitle.js
var LEFT_SIZE = 40;
var CardTitle = ({
  title,
  titleStyle,
  titleNumberOfLines = 1,
  subtitle,
  subtitleStyle,
  subtitleNumberOfLines = 1,
  left: left2,
  leftStyle,
  right: right2,
  rightStyle,
  style
}) => {
  return /* @__PURE__ */ React69.createElement(View_default, {
    style: [styles41.container, {
      minHeight: subtitle || left2 || right2 ? 72 : 50
    }, style]
  }, left2 ? /* @__PURE__ */ React69.createElement(View_default, {
    style: [styles41.left, leftStyle]
  }, left2({
    size: LEFT_SIZE
  })) : null, /* @__PURE__ */ React69.createElement(View_default, {
    style: [styles41.titles]
  }, title ? /* @__PURE__ */ React69.createElement(Title_default, {
    style: [styles41.title, {
      marginBottom: subtitle ? 0 : 2
    }, titleStyle],
    numberOfLines: titleNumberOfLines
  }, title) : null, subtitle ? /* @__PURE__ */ React69.createElement(Caption_default, {
    style: [styles41.subtitle, subtitleStyle],
    numberOfLines: subtitleNumberOfLines
  }, subtitle) : null), /* @__PURE__ */ React69.createElement(View_default, {
    style: rightStyle
  }, right2 ? right2({
    size: 24
  }) : null));
};
CardTitle.displayName = "Card.Title";
var styles41 = StyleSheet_default2.create({
  container: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingLeft: 16
  },
  left: {
    justifyContent: "center",
    marginRight: 16,
    height: LEFT_SIZE,
    width: LEFT_SIZE
  },
  titles: {
    flex: 1,
    flexDirection: "column",
    justifyContent: "center"
  },
  title: {
    minHeight: 30
  },
  subtitle: {
    minHeight: 20,
    marginVertical: 0
  }
});
var CardTitle_default = withTheme(CardTitle);

// node_modules/react-native-paper/lib/module/components/Card/Card.js
function _extends43() {
  _extends43 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends43.apply(this, arguments);
}
var Card = ({
  elevation: cardElevation = 1,
  onLongPress,
  onPress,
  children,
  style,
  theme: theme2,
  testID,
  accessible,
  ...rest
}) => {
  const {
    current: elevation
  } = React70.useRef(new Animated_default.Value(cardElevation));
  const handlePressIn = () => {
    const {
      dark,
      mode,
      animation: {
        scale: scale2
      }
    } = theme2;
    Animated_default.timing(elevation, {
      toValue: 8,
      duration: 150 * scale2,
      useNativeDriver: !dark || mode === "exact"
    }).start();
  };
  const handlePressOut = () => {
    const {
      dark,
      mode,
      animation: {
        scale: scale2
      }
    } = theme2;
    Animated_default.timing(elevation, {
      toValue: cardElevation,
      duration: 150 * scale2,
      useNativeDriver: !dark || mode === "exact"
    }).start();
  };
  const {
    roundness
  } = theme2;
  const total = React70.Children.count(children);
  const siblings = React70.Children.map(children, (child2) => /* @__PURE__ */ React70.isValidElement(child2) && child2.type ? child2.type.displayName : null);
  return /* @__PURE__ */ React70.createElement(Surface_default, _extends43({
    style: [{
      borderRadius: roundness,
      elevation
    }, style]
  }, rest), /* @__PURE__ */ React70.createElement(TouchableWithoutFeedback_default, {
    delayPressIn: 0,
    disabled: !(onPress || onLongPress),
    onLongPress,
    onPress,
    onPressIn: onPress ? handlePressIn : void 0,
    onPressOut: onPress ? handlePressOut : void 0,
    testID,
    accessible
  }, /* @__PURE__ */ React70.createElement(View_default, {
    style: styles42.innerContainer
  }, React70.Children.map(children, (child2, index) => /* @__PURE__ */ React70.isValidElement(child2) ? /* @__PURE__ */ React70.cloneElement(child2, {
    index,
    total,
    siblings
  }) : child2))));
};
Card.Content = CardContent_default;
Card.Actions = CardActions_default;
Card.Cover = CardCover_default;
Card.Title = CardTitle_default;
var styles42 = StyleSheet_default2.create({
  innerContainer: {
    flexGrow: 1,
    flexShrink: 1
  }
});
var Card_default = withTheme(Card);

// node_modules/react-native-paper/lib/module/components/Checkbox/Checkbox.js
var React73 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Checkbox/CheckboxIOS.js
var React71 = __toModule(require_react());
var import_color15 = __toModule(require_color());
function _extends44() {
  _extends44 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends44.apply(this, arguments);
}
var CheckboxIOS = ({
  status,
  disabled,
  onPress,
  theme: theme2,
  testID,
  ...rest
}) => {
  const checked = status === "checked";
  const indeterminate = status === "indeterminate";
  const checkedColor = disabled ? theme2.colors.disabled : rest.color || theme2.colors.accent;
  let rippleColor;
  if (disabled) {
    rippleColor = (0, import_color15.default)(theme2.colors.text).alpha(0.16).rgb().string();
  } else {
    rippleColor = (0, import_color15.default)(checkedColor).fade(0.32).rgb().string();
  }
  const icon = indeterminate ? "minus" : "check";
  return /* @__PURE__ */ React71.createElement(TouchableRipple_default, _extends44({}, rest, {
    borderless: true,
    rippleColor,
    onPress,
    disabled,
    accessibilityTraits: disabled ? ["button", "disabled"] : "button",
    accessibilityComponentType: "button",
    accessibilityRole: "checkbox",
    accessibilityState: {
      disabled,
      checked
    },
    accessibilityLiveRegion: "polite",
    style: styles43.container,
    testID
  }), /* @__PURE__ */ React71.createElement(View_default, {
    style: {
      opacity: indeterminate || checked ? 1 : 0
    }
  }, /* @__PURE__ */ React71.createElement(MaterialCommunityIcon_default, {
    allowFontScaling: false,
    name: icon,
    size: 24,
    color: checkedColor,
    direction: "ltr"
  })));
};
CheckboxIOS.displayName = "Checkbox.IOS";
var styles43 = StyleSheet_default2.create({
  container: {
    borderRadius: 18,
    padding: 6
  }
});
var CheckboxIOS_default = withTheme(CheckboxIOS);
var CheckboxIOSWithTheme = withTheme(CheckboxIOS);

// node_modules/react-native-paper/lib/module/components/Checkbox/CheckboxAndroid.js
var React72 = __toModule(require_react());
var import_color16 = __toModule(require_color());
function _extends45() {
  _extends45 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends45.apply(this, arguments);
}
var ANIMATION_DURATION = 100;
var CheckboxAndroid = ({
  status,
  theme: theme2,
  disabled,
  onPress,
  testID,
  ...rest
}) => {
  const {
    current: scaleAnim
  } = React72.useRef(new Animated_default.Value(1));
  const isFirstRendering = React72.useRef(true);
  const {
    animation: {
      scale: scale2
    }
  } = theme2;
  React72.useEffect(() => {
    if (isFirstRendering.current) {
      isFirstRendering.current = false;
      return;
    }
    const checked2 = status === "checked";
    Animated_default.sequence([Animated_default.timing(scaleAnim, {
      toValue: 0.85,
      duration: checked2 ? ANIMATION_DURATION * scale2 : 0,
      useNativeDriver: false
    }), Animated_default.timing(scaleAnim, {
      toValue: 1,
      duration: checked2 ? ANIMATION_DURATION * scale2 : ANIMATION_DURATION * scale2 * 1.75,
      useNativeDriver: false
    })]).start();
  }, [status, scaleAnim, scale2]);
  const checked = status === "checked";
  const indeterminate = status === "indeterminate";
  const checkedColor = rest.color || theme2.colors.accent;
  const uncheckedColor = rest.uncheckedColor || (0, import_color16.default)(theme2.colors.text).alpha(theme2.dark ? 0.7 : 0.54).rgb().string();
  let rippleColor, checkboxColor;
  if (disabled) {
    rippleColor = (0, import_color16.default)(theme2.colors.text).alpha(0.16).rgb().string();
    checkboxColor = theme2.colors.disabled;
  } else {
    rippleColor = (0, import_color16.default)(checkedColor).fade(0.32).rgb().string();
    checkboxColor = checked ? checkedColor : uncheckedColor;
  }
  const borderWidth = scaleAnim.interpolate({
    inputRange: [0.8, 1],
    outputRange: [7, 0]
  });
  const icon = indeterminate ? "minus-box" : checked ? "checkbox-marked" : "checkbox-blank-outline";
  return /* @__PURE__ */ React72.createElement(TouchableRipple_default, _extends45({}, rest, {
    borderless: true,
    rippleColor,
    onPress,
    disabled,
    accessibilityTraits: disabled ? ["button", "disabled"] : "button",
    accessibilityComponentType: "button",
    accessibilityRole: "checkbox",
    accessibilityState: {
      disabled,
      checked
    },
    accessibilityLiveRegion: "polite",
    style: styles44.container,
    testID
  }), /* @__PURE__ */ React72.createElement(Animated_default.View, {
    style: {
      transform: [{
        scale: scaleAnim
      }]
    }
  }, /* @__PURE__ */ React72.createElement(MaterialCommunityIcon_default, {
    allowFontScaling: false,
    name: icon,
    size: 24,
    color: checkboxColor,
    direction: "ltr"
  }), /* @__PURE__ */ React72.createElement(View_default, {
    style: [StyleSheet_default2.absoluteFill, styles44.fillContainer]
  }, /* @__PURE__ */ React72.createElement(Animated_default.View, {
    style: [styles44.fill, {
      borderColor: checkboxColor
    }, {
      borderWidth
    }]
  }))));
};
CheckboxAndroid.displayName = "Checkbox.Android";
var styles44 = StyleSheet_default2.create({
  container: {
    borderRadius: 18,
    width: 36,
    height: 36,
    padding: 6
  },
  fillContainer: {
    alignItems: "center",
    justifyContent: "center"
  },
  fill: {
    height: 14,
    width: 14
  }
});
var CheckboxAndroid_default = withTheme(CheckboxAndroid);
var CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);

// node_modules/react-native-paper/lib/module/components/Checkbox/Checkbox.js
var Checkbox = (props) => Platform_default.OS === "ios" ? /* @__PURE__ */ React73.createElement(CheckboxIOS_default, props) : /* @__PURE__ */ React73.createElement(CheckboxAndroid_default, props);
var Checkbox_default = withTheme(Checkbox);
var CheckboxWithTheme = withTheme(Checkbox);

// node_modules/react-native-paper/lib/module/components/Checkbox/CheckboxItem.js
var React74 = __toModule(require_react());
var CheckboxItem = ({
  style,
  status,
  label: label2,
  onPress,
  labelStyle,
  theme: theme2,
  testID,
  mode,
  ...props
}) => {
  const checkboxProps = {
    ...props,
    status,
    theme: theme2
  };
  let checkbox;
  if (mode === "android") {
    checkbox = /* @__PURE__ */ React74.createElement(CheckboxAndroid_default, checkboxProps);
  } else if (mode === "ios") {
    checkbox = /* @__PURE__ */ React74.createElement(CheckboxIOS_default, checkboxProps);
  } else {
    checkbox = /* @__PURE__ */ React74.createElement(Checkbox_default, checkboxProps);
  }
  return /* @__PURE__ */ React74.createElement(TouchableRipple_default, {
    onPress,
    testID
  }, /* @__PURE__ */ React74.createElement(View_default, {
    style: [styles45.container, style],
    pointerEvents: "none"
  }, /* @__PURE__ */ React74.createElement(Text_default2, {
    style: [styles45.label, {
      color: theme2.colors.text
    }, labelStyle]
  }, label2), checkbox));
};
CheckboxItem.displayName = "Checkbox.Item";
var CheckboxItem_default = withTheme(CheckboxItem);
var CheckboxItemWithTheme = withTheme(CheckboxItem);
var styles45 = StyleSheet_default2.create({
  container: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingVertical: 8,
    paddingHorizontal: 16
  },
  label: {
    fontSize: 16,
    flex: 1
  }
});

// node_modules/react-native-paper/lib/module/components/Checkbox/index.js
var Checkbox2 = Object.assign(Checkbox_default, {
  Item: CheckboxItem_default,
  Android: CheckboxAndroid_default,
  IOS: CheckboxIOS_default
});
var Checkbox_default2 = Checkbox2;

// node_modules/react-native-paper/lib/module/components/Chip.js
var React75 = __toModule(require_react());
var import_color17 = __toModule(require_color());
function _extends46() {
  _extends46 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends46.apply(this, arguments);
}
var Chip = ({
  mode = "flat",
  children,
  icon,
  avatar,
  selected = false,
  disabled = false,
  accessibilityLabel,
  closeIconAccessibilityLabel = "Close",
  onPress,
  onLongPress,
  onClose,
  textStyle,
  style,
  theme: theme2,
  testID,
  selectedColor,
  ellipsizeMode,
  ...rest
}) => {
  const {
    current: elevation
  } = React75.useRef(new Animated_default.Value(0));
  const handlePressIn = () => {
    const {
      scale: scale2
    } = theme2.animation;
    Animated_default.timing(elevation, {
      toValue: 4,
      duration: 200 * scale2,
      useNativeDriver: true
    }).start();
  };
  const handlePressOut = () => {
    const {
      scale: scale2
    } = theme2.animation;
    Animated_default.timing(elevation, {
      toValue: 0,
      duration: 150 * scale2,
      useNativeDriver: true
    }).start();
  };
  const {
    dark,
    colors
  } = theme2;
  const defaultBackgroundColor = mode === "outlined" ? colors.surface : dark ? "#383838" : "#ebebeb";
  const {
    backgroundColor = defaultBackgroundColor,
    borderRadius = 16
  } = StyleSheet_default2.flatten(style) || {};
  const borderColor = mode === "outlined" ? (0, import_color17.default)(selectedColor !== void 0 ? selectedColor : (0, import_color17.default)(dark ? white : black)).alpha(0.29).rgb().string() : backgroundColor;
  const textColor = disabled ? colors.disabled : (0, import_color17.default)(selectedColor !== void 0 ? selectedColor : colors.text).alpha(0.87).rgb().string();
  const iconColor = disabled ? colors.disabled : (0, import_color17.default)(selectedColor !== void 0 ? selectedColor : colors.text).alpha(0.54).rgb().string();
  const backgroundColorString = typeof backgroundColor === "string" ? backgroundColor : defaultBackgroundColor;
  const selectedBackgroundColor = (dark ? (0, import_color17.default)(backgroundColorString).lighten(mode === "outlined" ? 0.2 : 0.4) : (0, import_color17.default)(backgroundColorString).darken(mode === "outlined" ? 0.08 : 0.2)).rgb().string();
  const underlayColor = selectedColor ? (0, import_color17.default)(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;
  const accessibilityTraits = ["button"];
  const accessibilityState = {
    selected,
    disabled
  };
  if (selected) {
    accessibilityTraits.push("selected");
  }
  if (disabled) {
    accessibilityTraits.push("disabled");
  }
  return /* @__PURE__ */ React75.createElement(Surface_default, _extends46({
    style: [styles46.container, {
      elevation: Platform_default.OS === "android" ? elevation : 0,
      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,
      borderColor,
      borderRadius
    }, style]
  }, rest), /* @__PURE__ */ React75.createElement(TouchableRipple_default, {
    borderless: true,
    delayPressIn: 0,
    style: {
      borderRadius
    },
    onPress,
    onLongPress,
    onPressIn: handlePressIn,
    onPressOut: handlePressOut,
    underlayColor,
    disabled,
    accessibilityLabel,
    accessibilityTraits,
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState,
    testID
  }, /* @__PURE__ */ React75.createElement(View_default, {
    style: [styles46.content, {
      paddingRight: onClose ? 32 : 4
    }]
  }, avatar && !icon ? /* @__PURE__ */ React75.createElement(View_default, {
    style: [styles46.avatarWrapper, disabled && {
      opacity: 0.26
    }]
  }, /* @__PURE__ */ React75.isValidElement(avatar) ? /* @__PURE__ */ React75.cloneElement(avatar, {
    style: [styles46.avatar, avatar.props.style]
  }) : avatar) : null, icon || selected ? /* @__PURE__ */ React75.createElement(View_default, {
    style: [styles46.icon, avatar ? [styles46.avatar, styles46.avatarSelected] : null]
  }, icon ? /* @__PURE__ */ React75.createElement(Icon_default, {
    source: icon,
    color: avatar ? white : iconColor,
    size: 18
  }) : /* @__PURE__ */ React75.createElement(MaterialCommunityIcon_default, {
    name: "check",
    color: avatar ? white : iconColor,
    size: 18,
    direction: "ltr"
  })) : null, /* @__PURE__ */ React75.createElement(Text_default2, {
    selectable: false,
    numberOfLines: 1,
    style: [styles46.text, {
      ...theme2.fonts.regular,
      color: textColor,
      marginRight: onClose ? 0 : 8,
      marginLeft: avatar || icon || selected ? 4 : 8
    }, textStyle],
    ellipsizeMode
  }, children))), onClose ? /* @__PURE__ */ React75.createElement(View_default, {
    style: styles46.closeButtonStyle
  }, /* @__PURE__ */ React75.createElement(TouchableWithoutFeedback_default, {
    onPress: onClose,
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityLabel: closeIconAccessibilityLabel
  }, /* @__PURE__ */ React75.createElement(View_default, {
    style: [styles46.icon, styles46.closeIcon]
  }, /* @__PURE__ */ React75.createElement(MaterialCommunityIcon_default, {
    name: "close-circle",
    size: 16,
    color: iconColor,
    direction: "ltr"
  })))) : null);
};
var styles46 = StyleSheet_default2.create({
  container: {
    borderWidth: StyleSheet_default2.hairlineWidth,
    borderStyle: "solid",
    flexDirection: "row"
  },
  content: {
    flexDirection: "row",
    alignItems: "center",
    paddingLeft: 4,
    position: "relative"
  },
  icon: {
    padding: 4,
    alignSelf: "center"
  },
  closeIcon: {
    marginRight: 4
  },
  text: {
    minHeight: 24,
    lineHeight: 24,
    textAlignVertical: "center",
    marginVertical: 4
  },
  avatar: {
    width: 24,
    height: 24,
    borderRadius: 12
  },
  avatarWrapper: {
    marginRight: 4
  },
  avatarSelected: {
    position: "absolute",
    top: 4,
    left: 4,
    backgroundColor: "rgba(0, 0, 0, .29)"
  },
  closeButtonStyle: {
    position: "absolute",
    right: 0,
    height: "100%",
    justifyContent: "center",
    alignItems: "center"
  }
});
var Chip_default = withTheme(Chip);

// node_modules/react-native-paper/lib/module/components/DataTable/DataTable.js
var React83 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/DataTable/DataTableCell.js
var React76 = __toModule(require_react());
function _extends47() {
  _extends47 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends47.apply(this, arguments);
}
var DataTableCell = ({
  children,
  style,
  numeric: numeric2,
  ...rest
}) => /* @__PURE__ */ React76.createElement(TouchableRipple_default, _extends47({}, rest, {
  style: [styles47.container, numeric2 && styles47.right, style]
}), /* @__PURE__ */ React76.createElement(Text_default2, {
  numberOfLines: 1
}, children));
DataTableCell.displayName = "DataTable.Cell";
var styles47 = StyleSheet_default2.create({
  container: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center"
  },
  right: {
    justifyContent: "flex-end"
  }
});
var DataTableCell_default = DataTableCell;

// node_modules/react-native-paper/lib/module/components/DataTable/DataTableHeader.js
var React77 = __toModule(require_react());
var import_color18 = __toModule(require_color());
function _extends48() {
  _extends48 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends48.apply(this, arguments);
}
var DataTableHeader = ({
  children,
  style,
  theme: theme2,
  ...rest
}) => {
  const borderBottomColor = (0, import_color18.default)(theme2.dark ? white : black).alpha(0.12).rgb().string();
  return /* @__PURE__ */ React77.createElement(View_default, _extends48({}, rest, {
    style: [styles48.header, {
      borderBottomColor
    }, style]
  }), children);
};
DataTableHeader.displayName = "DataTable.Header";
var styles48 = StyleSheet_default2.create({
  header: {
    flexDirection: "row",
    height: 48,
    paddingHorizontal: 16,
    borderBottomWidth: StyleSheet_default2.hairlineWidth * 2
  }
});
var DataTableHeader_default = withTheme(DataTableHeader);

// node_modules/react-native-paper/lib/module/components/DataTable/DataTableTitle.js
var React78 = __toModule(require_react());
var import_color19 = __toModule(require_color());
function _extends49() {
  _extends49 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends49.apply(this, arguments);
}
var DataTableTitle = ({
  numeric: numeric2,
  children,
  onPress,
  sortDirection,
  theme: theme2,
  style,
  numberOfLines = 1,
  ...rest
}) => {
  const {
    current: spinAnim
  } = React78.useRef(new Animated_default.Value(sortDirection === "ascending" ? 0 : 1));
  React78.useEffect(() => {
    Animated_default.timing(spinAnim, {
      toValue: sortDirection === "ascending" ? 0 : 1,
      duration: 150,
      useNativeDriver: true
    }).start();
  }, [sortDirection, spinAnim]);
  const textColor = (0, import_color19.default)(theme2.colors.text).alpha(0.6).rgb().string();
  const spin = spinAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ["0deg", "180deg"]
  });
  const icon = sortDirection ? /* @__PURE__ */ React78.createElement(Animated_default.View, {
    style: [styles49.icon, {
      transform: [{
        rotate: spin
      }]
    }]
  }, /* @__PURE__ */ React78.createElement(MaterialCommunityIcon_default, {
    name: "arrow-up",
    size: 16,
    color: theme2.colors.text,
    direction: I18nManager_default.isRTL ? "rtl" : "ltr"
  })) : null;
  return /* @__PURE__ */ React78.createElement(TouchableWithoutFeedback_default, _extends49({
    disabled: !onPress,
    onPress
  }, rest), /* @__PURE__ */ React78.createElement(View_default, {
    style: [styles49.container, numeric2 && styles49.right, style]
  }, icon, /* @__PURE__ */ React78.createElement(Text_default2, {
    style: [styles49.cell, sortDirection ? styles49.sorted : {
      color: textColor
    }],
    numberOfLines
  }, children)));
};
DataTableTitle.displayName = "DataTable.Title";
var styles49 = StyleSheet_default2.create({
  container: {
    flex: 1,
    flexDirection: "row",
    alignContent: "center",
    paddingVertical: 12
  },
  right: {
    justifyContent: "flex-end"
  },
  cell: {
    height: 24,
    lineHeight: 24,
    fontSize: 12,
    fontWeight: "500",
    alignItems: "center"
  },
  sorted: {
    marginLeft: 8
  },
  icon: {
    height: 24,
    justifyContent: "center"
  }
});
var DataTableTitle_default = withTheme(DataTableTitle);

// node_modules/react-native-paper/lib/module/components/DataTable/DataTablePagination.js
var React81 = __toModule(require_react());
var import_color21 = __toModule(require_color());

// node_modules/react-native-paper/lib/module/components/IconButton.js
var React80 = __toModule(require_react());
var import_color20 = __toModule(require_color());

// node_modules/react-native-paper/lib/module/components/CrossFadeIcon.js
var React79 = __toModule(require_react());
var CrossFadeIcon = ({
  color: color39,
  size,
  source,
  theme: theme2
}) => {
  const [currentIcon, setCurrentIcon] = React79.useState(() => source);
  const [previousIcon, setPreviousIcon] = React79.useState(null);
  const {
    current: fade
  } = React79.useRef(new Animated_default.Value(1));
  const {
    scale: scale2
  } = theme2.animation;
  if (currentIcon !== source) {
    setPreviousIcon(() => currentIcon);
    setCurrentIcon(() => source);
  }
  React79.useEffect(() => {
    if (isValidIcon(previousIcon) && !isEqualIcon(previousIcon, currentIcon)) {
      fade.setValue(1);
      Animated_default.timing(fade, {
        duration: scale2 * 200,
        toValue: 0,
        useNativeDriver: true
      }).start();
    }
  }, [currentIcon, previousIcon, fade, scale2]);
  const opacityPrev = fade;
  const opacityNext = previousIcon ? fade.interpolate({
    inputRange: [0, 1],
    outputRange: [1, 0]
  }) : 1;
  const rotatePrev = fade.interpolate({
    inputRange: [0, 1],
    outputRange: ["-90deg", "0deg"]
  });
  const rotateNext = previousIcon ? fade.interpolate({
    inputRange: [0, 1],
    outputRange: ["0deg", "-180deg"]
  }) : "0deg";
  return /* @__PURE__ */ React79.createElement(View_default, {
    style: [styles50.content, {
      height: size,
      width: size
    }]
  }, previousIcon ? /* @__PURE__ */ React79.createElement(Animated_default.View, {
    style: [styles50.icon, {
      opacity: opacityPrev,
      transform: [{
        rotate: rotatePrev
      }]
    }]
  }, /* @__PURE__ */ React79.createElement(Icon_default, {
    source: previousIcon,
    size,
    color: color39
  })) : null, /* @__PURE__ */ React79.createElement(Animated_default.View, {
    style: [styles50.icon, {
      opacity: opacityNext,
      transform: [{
        rotate: rotateNext
      }]
    }]
  }, /* @__PURE__ */ React79.createElement(Icon_default, {
    source: currentIcon,
    size,
    color: color39
  })));
};
var CrossFadeIcon_default = withTheme(CrossFadeIcon);
var styles50 = StyleSheet_default2.create({
  content: {
    alignItems: "center",
    justifyContent: "center"
  },
  icon: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  }
});

// node_modules/react-native-paper/lib/module/components/IconButton.js
function _extends50() {
  _extends50 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends50.apply(this, arguments);
}
var IconButton = ({
  icon,
  color: customColor,
  size = 24,
  accessibilityLabel,
  disabled,
  onPress,
  animated = false,
  theme: theme2,
  style,
  ...rest
}) => {
  const iconColor = typeof customColor !== "undefined" ? customColor : theme2.colors.text;
  const rippleColor = (0, import_color20.default)(iconColor).alpha(0.32).rgb().string();
  const IconComponent = animated ? CrossFadeIcon_default : Icon_default;
  const buttonSize = size * 1.5;
  return /* @__PURE__ */ React80.createElement(TouchableRipple_default, _extends50({
    borderless: true,
    centered: true,
    onPress,
    rippleColor,
    style: [styles51.container, {
      width: buttonSize,
      height: buttonSize,
      borderRadius: buttonSize / 2
    }, disabled && styles51.disabled, style],
    accessibilityLabel,
    accessibilityTraits: disabled ? ["button", "disabled"] : "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      disabled
    },
    disabled,
    hitSlop: TouchableRipple_default.supported ? {
      top: 10,
      left: 10,
      bottom: 10,
      right: 10
    } : {
      top: 6,
      left: 6,
      bottom: 6,
      right: 6
    }
  }, rest), /* @__PURE__ */ React80.createElement(View_default, null, /* @__PURE__ */ React80.createElement(IconComponent, {
    color: iconColor,
    source: icon,
    size
  })));
};
var styles51 = StyleSheet_default2.create({
  container: {
    alignItems: "center",
    justifyContent: "center",
    overflow: "hidden",
    margin: 6
  },
  disabled: {
    opacity: 0.32
  }
});
var IconButton_default = withTheme(IconButton);

// node_modules/react-native-paper/lib/module/components/DataTable/DataTablePagination.js
function _extends51() {
  _extends51 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends51.apply(this, arguments);
}
var DataTablePagination = ({
  label: label2,
  page,
  numberOfPages,
  onPageChange,
  style,
  theme: theme2,
  ...rest
}) => {
  const labelColor = (0, import_color21.default)(theme2.colors.text).alpha(0.6).rgb().string();
  return /* @__PURE__ */ React81.createElement(View_default, _extends51({}, rest, {
    style: [styles52.container, style]
  }), /* @__PURE__ */ React81.createElement(Text_default2, {
    style: [styles52.label, {
      color: labelColor
    }],
    numberOfLines: 1
  }, label2), /* @__PURE__ */ React81.createElement(IconButton_default, {
    icon: ({
      size,
      color: color39
    }) => /* @__PURE__ */ React81.createElement(MaterialCommunityIcon_default, {
      name: "chevron-left",
      color: color39,
      size,
      direction: I18nManager_default.isRTL ? "rtl" : "ltr"
    }),
    color: theme2.colors.text,
    disabled: page === 0,
    onPress: () => onPageChange(page - 1)
  }), /* @__PURE__ */ React81.createElement(IconButton_default, {
    icon: ({
      size,
      color: color39
    }) => /* @__PURE__ */ React81.createElement(MaterialCommunityIcon_default, {
      name: "chevron-right",
      color: color39,
      size,
      direction: I18nManager_default.isRTL ? "rtl" : "ltr"
    }),
    color: theme2.colors.text,
    disabled: numberOfPages === 0 || page === numberOfPages - 1,
    onPress: () => onPageChange(page + 1)
  }));
};
DataTablePagination.displayName = "DataTable.Pagination";
var styles52 = StyleSheet_default2.create({
  container: {
    justifyContent: "flex-end",
    flexDirection: "row",
    alignItems: "center",
    paddingLeft: 16
  },
  label: {
    fontSize: 12,
    marginRight: 44
  }
});
var DataTablePagination_default = withTheme(DataTablePagination);

// node_modules/react-native-paper/lib/module/components/DataTable/DataTableRow.js
var React82 = __toModule(require_react());
var import_color22 = __toModule(require_color());
function _extends52() {
  _extends52 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends52.apply(this, arguments);
}
var DataTableRow = ({
  onPress,
  style,
  theme: theme2,
  children,
  ...rest
}) => {
  const borderBottomColor = (0, import_color22.default)(theme2.dark ? white : black).alpha(0.12).rgb().string();
  return /* @__PURE__ */ React82.createElement(TouchableRipple_default, _extends52({}, rest, {
    onPress,
    style: [styles53.container, {
      borderBottomColor
    }, style]
  }), /* @__PURE__ */ React82.createElement(View_default, {
    style: styles53.content
  }, children));
};
var styles53 = StyleSheet_default2.create({
  container: {
    borderStyle: "solid",
    borderBottomWidth: StyleSheet_default2.hairlineWidth,
    minHeight: 48,
    paddingHorizontal: 16
  },
  content: {
    flex: 1,
    flexDirection: "row"
  }
});
var DataTableRow_default = withTheme(DataTableRow);

// node_modules/react-native-paper/lib/module/components/DataTable/DataTable.js
function _extends53() {
  _extends53 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends53.apply(this, arguments);
}
var DataTable = ({
  children,
  style,
  ...rest
}) => /* @__PURE__ */ React83.createElement(View_default, _extends53({}, rest, {
  style: [styles54.container, style]
}), children);
DataTable.Header = DataTableHeader_default;
DataTable.Title = DataTableTitle_default;
DataTable.Row = DataTableRow_default;
DataTable.Cell = DataTableCell_default;
DataTable.Pagination = DataTablePagination_default;
var styles54 = StyleSheet_default2.create({
  container: {
    width: "100%"
  }
});
var DataTable_default = DataTable;

// node_modules/react-native-paper/lib/module/components/Dialog/Dialog.js
var React89 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Modal.js
var React84 = __toModule(require_react());
function _defineProperty24(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var DEFAULT_DURATION = 220;
var TOP_INSET = getStatusBarHeight(true);
var BOTTOM_INSET2 = getBottomSpace();
var Modal = class extends React84.Component {
  constructor(...args) {
    super(...args);
    _defineProperty24(this, "state", {
      opacity: new Animated_default.Value(this.props.visible ? 1 : 0),
      rendered: this.props.visible
    });
    _defineProperty24(this, "handleBack", () => {
      if (this.props.dismissable) {
        this.hideModal();
      }
      return true;
    });
    _defineProperty24(this, "showModal", () => {
      BackHandler_default.removeEventListener("hardwareBackPress", this.handleBack);
      BackHandler_default.addEventListener("hardwareBackPress", this.handleBack);
      const {
        opacity: opacity3
      } = this.state;
      const {
        scale: scale2
      } = this.props.theme.animation;
      Animated_default.timing(opacity3, {
        toValue: 1,
        duration: scale2 * DEFAULT_DURATION,
        easing: Easing_default2.out(Easing_default2.cubic),
        useNativeDriver: true
      }).start();
    });
    _defineProperty24(this, "hideModal", () => {
      BackHandler_default.removeEventListener("hardwareBackPress", this.handleBack);
      const {
        opacity: opacity3
      } = this.state;
      const {
        scale: scale2
      } = this.props.theme.animation;
      Animated_default.timing(opacity3, {
        toValue: 0,
        duration: scale2 * DEFAULT_DURATION,
        easing: Easing_default2.out(Easing_default2.cubic),
        useNativeDriver: true
      }).start(({
        finished
      }) => {
        if (!finished) {
          return;
        }
        if (this.props.visible && this.props.onDismiss) {
          this.props.onDismiss();
        }
        if (this.props.visible) {
          this.showModal();
        } else {
          this.setState({
            rendered: false
          });
        }
      });
    });
  }
  static getDerivedStateFromProps(nextProps, prevState) {
    if (nextProps.visible && !prevState.rendered) {
      return {
        rendered: true
      };
    }
    return null;
  }
  componentDidUpdate(prevProps) {
    if (prevProps.visible !== this.props.visible) {
      if (this.props.visible) {
        this.showModal();
      } else {
        this.hideModal();
      }
    }
  }
  componentWillUnmount() {
    BackHandler_default.removeEventListener("hardwareBackPress", this.handleBack);
  }
  render() {
    const {
      rendered,
      opacity: opacity3
    } = this.state;
    if (!rendered)
      return null;
    const {
      children,
      dismissable,
      style,
      theme: theme2,
      contentContainerStyle,
      overlayAccessibilityLabel
    } = this.props;
    const {
      colors
    } = theme2;
    return /* @__PURE__ */ React84.createElement(Animated_default.View, {
      pointerEvents: this.props.visible ? "auto" : "none",
      accessibilityViewIsModal: true,
      accessibilityLiveRegion: "polite",
      style: StyleSheet_default2.absoluteFill,
      onAccessibilityEscape: this.hideModal
    }, /* @__PURE__ */ React84.createElement(TouchableWithoutFeedback_default, {
      accessibilityLabel: overlayAccessibilityLabel,
      accessibilityRole: "button",
      disabled: !dismissable,
      onPress: dismissable ? this.hideModal : void 0
    }, /* @__PURE__ */ React84.createElement(Animated_default.View, {
      style: [styles55.backdrop, {
        backgroundColor: colors.backdrop,
        opacity: opacity3
      }]
    })), /* @__PURE__ */ React84.createElement(View_default, {
      style: [styles55.wrapper, {
        marginTop: TOP_INSET,
        marginBottom: BOTTOM_INSET2
      }, style],
      pointerEvents: "box-none"
    }, /* @__PURE__ */ React84.createElement(Surface_default, {
      style: [{
        opacity: opacity3
      }, styles55.content, contentContainerStyle]
    }, children)));
  }
};
_defineProperty24(Modal, "defaultProps", {
  dismissable: true,
  visible: false,
  overlayAccessibilityLabel: "Close modal"
});
var Modal_default = withTheme(Modal);
var styles55 = StyleSheet_default2.create({
  backdrop: {
    flex: 1
  },
  wrapper: {
    ...StyleSheet_default2.absoluteFillObject,
    justifyContent: "center"
  },
  content: {
    backgroundColor: "transparent",
    justifyContent: "center"
  }
});

// node_modules/react-native-paper/lib/module/components/Dialog/DialogContent.js
var React85 = __toModule(require_react());
function _extends54() {
  _extends54 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends54.apply(this, arguments);
}
var DialogContent = (props) => /* @__PURE__ */ React85.createElement(View_default, _extends54({}, props, {
  style: [styles56.container, props.style]
}), props.children);
DialogContent.displayName = "Dialog.Content";
var styles56 = StyleSheet_default2.create({
  container: {
    paddingBottom: 24,
    paddingHorizontal: 24
  }
});
var DialogContent_default = DialogContent;

// node_modules/react-native-paper/lib/module/components/Dialog/DialogActions.js
var React86 = __toModule(require_react());
function _extends55() {
  _extends55 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends55.apply(this, arguments);
}
var DialogActions = (props) => /* @__PURE__ */ React86.createElement(View_default, _extends55({}, props, {
  style: [styles57.container, props.style]
}), React86.Children.map(props.children, (child2) => /* @__PURE__ */ React86.isValidElement(child2) ? /* @__PURE__ */ React86.cloneElement(child2, {
  compact: true
}) : child2));
DialogActions.displayName = "Dialog.Actions";
var styles57 = StyleSheet_default2.create({
  container: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "flex-end",
    padding: 8
  }
});
var DialogActions_default = DialogActions;

// node_modules/react-native-paper/lib/module/components/Dialog/DialogTitle.js
var React87 = __toModule(require_react());
function _extends56() {
  _extends56 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends56.apply(this, arguments);
}
var DialogTitle = ({
  children,
  theme: theme2,
  style,
  ...rest
}) => /* @__PURE__ */ React87.createElement(Title_default, _extends56({
  accessibilityTraits: "header",
  accessibilityRole: "header",
  style: [styles58.text, {
    color: theme2.colors.text
  }, style]
}, rest), children);
DialogTitle.displayName = "Dialog.Title";
var styles58 = StyleSheet_default2.create({
  text: {
    marginTop: 22,
    marginBottom: 18,
    marginHorizontal: 24
  }
});
var DialogTitle_default = withTheme(DialogTitle);

// node_modules/react-native-paper/lib/module/components/Dialog/DialogScrollArea.js
var React88 = __toModule(require_react());
function _extends57() {
  _extends57 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends57.apply(this, arguments);
}
var DialogScrollArea = (props) => /* @__PURE__ */ React88.createElement(View_default, _extends57({}, props, {
  style: [styles59.container, props.style]
}), props.children);
DialogScrollArea.displayName = "Dialog.ScrollArea";
var styles59 = StyleSheet_default2.create({
  container: {
    borderColor: "rgba(0, 0, 0, .12)",
    borderTopWidth: StyleSheet_default2.hairlineWidth,
    borderBottomWidth: StyleSheet_default2.hairlineWidth,
    paddingHorizontal: 24,
    flexGrow: 1,
    flexShrink: 1
  }
});
var DialogScrollArea_default = DialogScrollArea;

// node_modules/react-native-paper/lib/module/components/Dialog/Dialog.js
var DIALOG_ELEVATION = 24;
var Dialog = ({
  children,
  dismissable = true,
  onDismiss,
  visible = false,
  style,
  theme: theme2
}) => /* @__PURE__ */ React89.createElement(Modal_default, {
  dismissable,
  onDismiss,
  visible,
  contentContainerStyle: [{
    borderRadius: theme2.roundness,
    backgroundColor: theme2.dark && theme2.mode === "adaptive" ? overlay(DIALOG_ELEVATION, theme2.colors.surface) : theme2.colors.surface
  }, styles60.container, style]
}, React89.Children.toArray(children).filter((child2) => child2 != null && typeof child2 !== "boolean").map((child2, i) => {
  if (i === 0 && /* @__PURE__ */ React89.isValidElement(child2) && child2.type === DialogContent_default) {
    return /* @__PURE__ */ React89.cloneElement(child2, {
      style: [{
        paddingTop: 24
      }, child2.props.style]
    });
  }
  return child2;
}));
Dialog.Content = DialogContent_default;
Dialog.Actions = DialogActions_default;
Dialog.Title = DialogTitle_default;
Dialog.ScrollArea = DialogScrollArea_default;
var styles60 = StyleSheet_default2.create({
  container: {
    marginVertical: Platform_default.OS === "android" ? 44 : 0,
    marginHorizontal: 26,
    elevation: DIALOG_ELEVATION,
    justifyContent: "flex-start"
  }
});
var Dialog_default = withTheme(Dialog);

// node_modules/react-native-paper/lib/module/components/FAB/FAB.js
var import_color23 = __toModule(require_color());
var React90 = __toModule(require_react());
function _extends58() {
  _extends58 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends58.apply(this, arguments);
}
var FAB = ({
  small,
  icon,
  label: label2,
  accessibilityLabel = label2,
  accessibilityState,
  animated = true,
  color: customColor,
  disabled,
  onPress,
  onLongPress,
  theme: theme2,
  style,
  visible = true,
  uppercase = true,
  loading: loading2,
  testID,
  ...rest
}) => {
  const {
    current: visibility
  } = React90.useRef(new Animated_default.Value(visible ? 1 : 0));
  const {
    scale: scale2
  } = theme2.animation;
  React90.useEffect(() => {
    if (visible) {
      Animated_default.timing(visibility, {
        toValue: 1,
        duration: 200 * scale2,
        useNativeDriver: true
      }).start();
    } else {
      Animated_default.timing(visibility, {
        toValue: 0,
        duration: 150 * scale2,
        useNativeDriver: true
      }).start();
    }
  }, [visible, scale2, visibility]);
  const IconComponent = animated ? CrossFadeIcon_default : Icon_default;
  const disabledColor = (0, import_color23.default)(theme2.dark ? white : black).alpha(0.12).rgb().string();
  const {
    backgroundColor = disabled ? disabledColor : theme2.colors.accent
  } = StyleSheet_default2.flatten(style) || {};
  let foregroundColor;
  if (typeof customColor !== "undefined") {
    foregroundColor = customColor;
  } else if (disabled) {
    foregroundColor = (0, import_color23.default)(theme2.dark ? white : black).alpha(0.32).rgb().string();
  } else {
    foregroundColor = getContrastingColor(backgroundColor, white, "rgba(0, 0, 0, .54)");
  }
  const rippleColor = (0, import_color23.default)(foregroundColor).alpha(0.32).rgb().string();
  return /* @__PURE__ */ React90.createElement(Surface_default, _extends58({}, rest, {
    style: [{
      backgroundColor,
      opacity: visibility,
      transform: [{
        scale: visibility
      }]
    }, styles61.container, disabled && styles61.disabled, style],
    pointerEvents: visible ? "auto" : "none"
  }), /* @__PURE__ */ React90.createElement(TouchableRipple_default, {
    borderless: true,
    onPress,
    onLongPress,
    rippleColor,
    disabled,
    accessibilityLabel,
    accessibilityTraits: disabled ? ["button", "disabled"] : "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      ...accessibilityState,
      disabled
    },
    style: styles61.touchable,
    testID
  }, /* @__PURE__ */ React90.createElement(View_default, {
    style: [styles61.content, label2 ? styles61.extended : small ? styles61.small : styles61.standard],
    pointerEvents: "none"
  }, icon && loading2 !== true ? /* @__PURE__ */ React90.createElement(IconComponent, {
    source: icon,
    size: 24,
    color: foregroundColor
  }) : null, loading2 ? /* @__PURE__ */ React90.createElement(ActivityIndicator_default2, {
    size: 18,
    color: foregroundColor
  }) : null, label2 ? /* @__PURE__ */ React90.createElement(Text_default2, {
    selectable: false,
    style: [styles61.label, uppercase && styles61.uppercaseLabel, {
      color: foregroundColor,
      ...theme2.fonts.medium
    }]
  }, label2) : null)));
};
var styles61 = StyleSheet_default2.create({
  container: {
    borderRadius: 28,
    elevation: 6
  },
  touchable: {
    borderRadius: 28
  },
  standard: {
    height: 56,
    width: 56
  },
  small: {
    height: 40,
    width: 40
  },
  extended: {
    height: 48,
    paddingHorizontal: 16
  },
  content: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center"
  },
  label: {
    marginHorizontal: 8
  },
  uppercaseLabel: {
    textTransform: "uppercase"
  },
  disabled: {
    elevation: 0
  }
});
var FAB_default = withTheme(FAB);
var FABWithTheme = withTheme(FAB);

// node_modules/react-native-paper/lib/module/components/FAB/FABGroup.js
var React91 = __toModule(require_react());
var import_color24 = __toModule(require_color());
var FABGroup = ({
  actions,
  icon,
  open: open3,
  onPress,
  accessibilityLabel,
  theme: theme2,
  style,
  fabStyle,
  visible,
  testID,
  onStateChange,
  color: colorProp
}) => {
  const {
    current: backdrop
  } = React91.useRef(new Animated_default.Value(0));
  const animations = React91.useRef(actions.map(() => new Animated_default.Value(open3 ? 1 : 0)));
  const [prevActions, setPrevActions] = React91.useState(null);
  const {
    scale: scale2
  } = theme2.animation;
  React91.useEffect(() => {
    if (open3) {
      Animated_default.parallel([Animated_default.timing(backdrop, {
        toValue: 1,
        duration: 250 * scale2,
        useNativeDriver: true
      }), Animated_default.stagger(50 * scale2, animations.current.map((animation2) => Animated_default.timing(animation2, {
        toValue: 1,
        duration: 150 * scale2,
        useNativeDriver: true
      })).reverse())]).start();
    } else {
      Animated_default.parallel([Animated_default.timing(backdrop, {
        toValue: 0,
        duration: 200 * scale2,
        useNativeDriver: true
      }), ...animations.current.map((animation2) => Animated_default.timing(animation2, {
        toValue: 0,
        duration: 150 * scale2,
        useNativeDriver: true
      }))]).start();
    }
  }, [open3, actions, backdrop, scale2]);
  const close3 = () => onStateChange({
    open: false
  });
  const toggle = () => onStateChange({
    open: !open3
  });
  const {
    colors
  } = theme2;
  const labelColor = theme2.dark ? colors.text : (0, import_color24.default)(colors.text).fade(0.54).rgb().string();
  const backdropOpacity = open3 ? backdrop.interpolate({
    inputRange: [0, 0.5, 1],
    outputRange: [0, 1, 1]
  }) : backdrop;
  const opacities = animations.current;
  const scales = opacities.map((opacity3) => open3 ? opacity3.interpolate({
    inputRange: [0, 1],
    outputRange: [0.8, 1]
  }) : 1);
  if (actions.length !== (prevActions === null || prevActions === void 0 ? void 0 : prevActions.length)) {
    animations.current = actions.map((_, i) => animations.current[i] || new Animated_default.Value(open3 ? 1 : 0));
    setPrevActions(actions);
  }
  return /* @__PURE__ */ React91.createElement(View_default, {
    pointerEvents: "box-none",
    style: [styles62.container, style]
  }, /* @__PURE__ */ React91.createElement(TouchableWithoutFeedback_default, {
    onPress: close3
  }, /* @__PURE__ */ React91.createElement(Animated_default.View, {
    pointerEvents: open3 ? "auto" : "none",
    style: [styles62.backdrop, {
      opacity: backdropOpacity,
      backgroundColor: colors.backdrop
    }]
  })), /* @__PURE__ */ React91.createElement(SafeAreaView_default, {
    pointerEvents: "box-none",
    style: styles62.safeArea
  }, /* @__PURE__ */ React91.createElement(View_default, {
    pointerEvents: open3 ? "box-none" : "none"
  }, actions.map((it, i) => /* @__PURE__ */ React91.createElement(View_default, {
    key: i,
    style: [styles62.item, {
      marginHorizontal: typeof it.small === "undefined" || it.small ? 24 : 16
    }],
    pointerEvents: open3 ? "box-none" : "none"
  }, it.label && /* @__PURE__ */ React91.createElement(View_default, null, /* @__PURE__ */ React91.createElement(Card_default, {
    style: [styles62.label, {
      transform: [{
        scale: scales[i]
      }],
      opacity: opacities[i]
    }],
    onPress: () => {
      it.onPress();
      close3();
    },
    accessibilityLabel: it.accessibilityLabel !== "undefined" ? it.accessibilityLabel : it.label,
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button"
  }, /* @__PURE__ */ React91.createElement(Text_default2, {
    style: {
      color: labelColor
    }
  }, it.label))), /* @__PURE__ */ React91.createElement(FAB_default, {
    small: typeof it.small !== "undefined" ? it.small : true,
    icon: it.icon,
    color: it.color,
    style: [{
      transform: [{
        scale: scales[i]
      }],
      opacity: opacities[i],
      backgroundColor: theme2.colors.surface
    }, it.style],
    onPress: () => {
      it.onPress();
      close3();
    },
    accessibilityLabel: typeof it.accessibilityLabel !== "undefined" ? it.accessibilityLabel : it.label,
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    testID: it.testID,
    visible: open3
  })))), /* @__PURE__ */ React91.createElement(FAB_default, {
    onPress: () => {
      onPress === null || onPress === void 0 ? void 0 : onPress();
      toggle();
    },
    icon,
    color: colorProp,
    accessibilityLabel,
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      expanded: open3
    },
    style: [styles62.fab, fabStyle],
    visible,
    testID
  })));
};
FABGroup.displayName = "FAB.Group";
var FABGroup_default = withTheme(FABGroup);
var FABGroupWithTheme = withTheme(FABGroup);
var styles62 = StyleSheet_default2.create({
  safeArea: {
    alignItems: "flex-end"
  },
  container: {
    ...StyleSheet_default2.absoluteFillObject,
    justifyContent: "flex-end"
  },
  fab: {
    marginHorizontal: 16,
    marginBottom: 16,
    marginTop: 0
  },
  backdrop: {
    ...StyleSheet_default2.absoluteFillObject
  },
  label: {
    borderRadius: 5,
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginVertical: 8,
    marginHorizontal: 16,
    elevation: 2
  },
  item: {
    marginBottom: 16,
    flexDirection: "row",
    justifyContent: "flex-end",
    alignItems: "center"
  }
});

// node_modules/react-native-paper/lib/module/components/FAB/index.js
var FAB2 = Object.assign(FAB_default, {
  Group: FABGroup_default
});
var FAB_default2 = FAB2;

// node_modules/react-native-paper/lib/module/components/HelperText.js
var React93 = __toModule(require_react());
var import_color25 = __toModule(require_color());

// node_modules/react-native-paper/lib/module/components/Typography/AnimatedText.js
var React92 = __toModule(require_react());
function _extends59() {
  _extends59 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends59.apply(this, arguments);
}
function AnimatedText({
  style,
  theme: theme2,
  ...rest
}) {
  const writingDirection = I18nManager_default.isRTL ? "rtl" : "ltr";
  return /* @__PURE__ */ React92.createElement(Animated_default.Text, _extends59({}, rest, {
    style: [styles63.text, {
      ...theme2.fonts.regular,
      color: theme2.colors.text,
      writingDirection
    }, style]
  }));
}
var styles63 = StyleSheet_default2.create({
  text: {
    textAlign: "left"
  }
});
var AnimatedText_default = withTheme(AnimatedText);

// node_modules/react-native-paper/lib/module/components/HelperText.js
function _extends60() {
  _extends60 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends60.apply(this, arguments);
}
var HelperText = ({
  style,
  type = "info",
  visible = true,
  theme: theme2,
  onLayout,
  padding = "normal",
  ...rest
}) => {
  const {
    current: shown
  } = React93.useRef(new Animated_default.Value(visible ? 1 : 0));
  let {
    current: textHeight
  } = React93.useRef(0);
  const {
    scale: scale2
  } = theme2.animation;
  React93.useEffect(() => {
    if (visible) {
      Animated_default.timing(shown, {
        toValue: 1,
        duration: 150 * scale2,
        useNativeDriver: true
      }).start();
    } else {
      Animated_default.timing(shown, {
        toValue: 0,
        duration: 180 * scale2,
        useNativeDriver: true
      }).start();
    }
  }, [visible, scale2, shown]);
  const handleTextLayout = (e) => {
    onLayout === null || onLayout === void 0 ? void 0 : onLayout(e);
    textHeight = e.nativeEvent.layout.height;
  };
  const {
    colors,
    dark
  } = theme2;
  const textColor = type === "error" ? colors.error : (0, import_color25.default)(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();
  return /* @__PURE__ */ React93.createElement(AnimatedText_default, _extends60({
    onLayout: handleTextLayout,
    style: [styles64.text, padding !== "none" ? styles64.padding : {}, {
      color: textColor,
      opacity: shown,
      transform: visible && type === "error" ? [{
        translateY: shown.interpolate({
          inputRange: [0, 1],
          outputRange: [-textHeight / 2, 0]
        })
      }] : []
    }, style]
  }, rest), rest.children);
};
var styles64 = StyleSheet_default2.create({
  text: {
    fontSize: 12,
    paddingVertical: 4
  },
  padding: {
    paddingHorizontal: 12
  }
});
var HelperText_default = withTheme(HelperText);

// node_modules/react-native-paper/lib/module/components/Menu/Menu.js
var React97 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Portal/Portal.js
var React95 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Portal/PortalConsumer.js
var React94 = __toModule(require_react());
function _defineProperty25(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var PortalConsumer = class extends React94.Component {
  constructor(...args) {
    super(...args);
    _defineProperty25(this, "key", void 0);
  }
  async componentDidMount() {
    this.checkManager();
    await Promise.resolve();
    this.key = this.props.manager.mount(this.props.children);
  }
  componentDidUpdate() {
    this.checkManager();
    this.props.manager.update(this.key, this.props.children);
  }
  componentWillUnmount() {
    this.checkManager();
    this.props.manager.unmount(this.key);
  }
  checkManager() {
    if (!this.props.manager) {
      throw new Error("Looks like you forgot to wrap your root component with `Provider` component from `react-native-paper`.\n\nPlease read our getting-started guide and make sure you've followed all the required steps.\n\nhttps://callstack.github.io/react-native-paper/getting-started.html");
    }
  }
  render() {
    return null;
  }
};
var PortalConsumer_default = PortalConsumer;

// node_modules/react-native-paper/lib/module/components/Portal/Portal.js
function _defineProperty26(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var Portal = class extends React95.Component {
  render() {
    const {
      children,
      theme: theme2
    } = this.props;
    return /* @__PURE__ */ React95.createElement(Consumer, null, (settings) => /* @__PURE__ */ React95.createElement(PortalContext.Consumer, null, (manager) => /* @__PURE__ */ React95.createElement(PortalConsumer_default, {
      manager
    }, /* @__PURE__ */ React95.createElement(Provider, {
      value: settings
    }, /* @__PURE__ */ React95.createElement(ThemeProvider, {
      theme: theme2
    }, children)))));
  }
};
_defineProperty26(Portal, "Host", PortalHost_default);
var Portal_default = withTheme(Portal);

// node_modules/react-native-paper/lib/module/components/Menu/MenuItem.js
var import_color26 = __toModule(require_color());
var React96 = __toModule(require_react());
function _defineProperty27(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var MenuItem = class extends React96.Component {
  render() {
    const {
      icon,
      title,
      disabled,
      onPress,
      theme: theme2,
      style,
      contentStyle,
      testID,
      titleStyle
    } = this.props;
    const disabledColor = (0, import_color26.default)(theme2.dark ? white : black).alpha(0.32).rgb().string();
    const titleColor = disabled ? disabledColor : (0, import_color26.default)(theme2.colors.text).alpha(0.87).rgb().string();
    const iconColor = disabled ? disabledColor : (0, import_color26.default)(theme2.colors.text).alpha(0.54).rgb().string();
    return /* @__PURE__ */ React96.createElement(TouchableRipple_default, {
      style: [styles65.container, style],
      onPress,
      disabled,
      testID,
      accessibilityRole: "menuitem",
      accessibilityState: {
        disabled
      }
    }, /* @__PURE__ */ React96.createElement(View_default, {
      style: styles65.row
    }, icon ? /* @__PURE__ */ React96.createElement(View_default, {
      style: [styles65.item, styles65.icon],
      pointerEvents: "box-none"
    }, /* @__PURE__ */ React96.createElement(Icon_default, {
      source: icon,
      size: 24,
      color: iconColor
    })) : null, /* @__PURE__ */ React96.createElement(View_default, {
      style: [styles65.item, styles65.content, icon ? styles65.widthWithIcon : null, contentStyle],
      pointerEvents: "none"
    }, /* @__PURE__ */ React96.createElement(Text_default2, {
      selectable: false,
      numberOfLines: 1,
      style: [styles65.title, {
        color: titleColor
      }, titleStyle]
    }, title))));
  }
};
_defineProperty27(MenuItem, "displayName", "Menu.Item");
var minWidth = 112;
var maxWidth = 280;
var iconWidth = 40;
var styles65 = StyleSheet_default2.create({
  container: {
    paddingHorizontal: 8,
    minWidth,
    maxWidth,
    height: 48,
    justifyContent: "center"
  },
  row: {
    flexDirection: "row"
  },
  icon: {
    width: iconWidth
  },
  title: {
    fontSize: 16
  },
  item: {
    marginHorizontal: 8
  },
  content: {
    justifyContent: "center",
    minWidth: minWidth - 16,
    maxWidth: maxWidth - 16
  },
  widthWithIcon: {
    maxWidth: maxWidth - (iconWidth + 48)
  }
});
var MenuItem_default = withTheme(MenuItem);

// node_modules/react-native-paper/lib/module/constants.js
var APPROX_STATUSBAR_HEIGHT = 0;

// node_modules/react-native-paper/lib/module/components/Menu/Menu.js
function _defineProperty28(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var SCREEN_INDENT = 8;
var ANIMATION_DURATION2 = 250;
var EASING = Easing_default2.bezier(0.4, 0, 0.2, 1);
var Menu = class extends React97.Component {
  constructor(...args) {
    super(...args);
    _defineProperty28(this, "state", {
      rendered: this.props.visible,
      top: 0,
      left: 0,
      menuLayout: {
        width: 0,
        height: 0
      },
      anchorLayout: {
        width: 0,
        height: 0
      },
      opacityAnimation: new Animated_default.Value(0),
      scaleAnimation: new Animated_default.ValueXY({
        x: 0,
        y: 0
      })
    });
    _defineProperty28(this, "anchor", null);
    _defineProperty28(this, "menu", null);
    _defineProperty28(this, "isCoordinate", (anchor3) => !/* @__PURE__ */ React97.isValidElement(anchor3) && typeof (anchor3 === null || anchor3 === void 0 ? void 0 : anchor3.x) === "number" && typeof (anchor3 === null || anchor3 === void 0 ? void 0 : anchor3.y) === "number");
    _defineProperty28(this, "measureMenuLayout", () => new Promise((resolve) => {
      if (this.menu) {
        this.menu.measureInWindow((x, y, width, height) => {
          resolve({
            x,
            y,
            width,
            height
          });
        });
      }
    }));
    _defineProperty28(this, "measureAnchorLayout", () => new Promise((resolve) => {
      const {
        anchor: anchor3
      } = this.props;
      if (this.isCoordinate(anchor3)) {
        resolve({
          x: anchor3.x,
          y: anchor3.y,
          width: 0,
          height: 0
        });
        return;
      }
      if (this.anchor) {
        this.anchor.measureInWindow((x, y, width, height) => {
          resolve({
            x,
            y,
            width,
            height
          });
        });
      }
    }));
    _defineProperty28(this, "updateVisibility", async () => {
      await Promise.resolve();
      if (this.props.visible) {
        this.show();
      } else {
        this.hide();
      }
    });
    _defineProperty28(this, "isBrowser", () => Platform_default.OS === "web" && "document" in window);
    _defineProperty28(this, "focusFirstDOMNode", (el) => {
      if (el && this.isBrowser()) {
        const node = findNodeHandle_default(el);
        const focusableNode = node.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        focusableNode === null || focusableNode === void 0 ? void 0 : focusableNode.focus();
      }
    });
    _defineProperty28(this, "handleDismiss", () => {
      if (this.props.visible) {
        this.props.onDismiss();
      }
      return true;
    });
    _defineProperty28(this, "handleKeypress", (e) => {
      if (e.key === "Escape") {
        this.props.onDismiss();
      }
    });
    _defineProperty28(this, "attachListeners", () => {
      BackHandler_default.addEventListener("hardwareBackPress", this.handleDismiss);
      Dimensions.addEventListener("change", this.handleDismiss);
      this.isBrowser() && document.addEventListener("keyup", this.handleKeypress);
    });
    _defineProperty28(this, "removeListeners", () => {
      BackHandler_default.removeEventListener("hardwareBackPress", this.handleDismiss);
      Dimensions.removeEventListener("change", this.handleDismiss);
      this.isBrowser() && document.removeEventListener("keyup", this.handleKeypress);
    });
    _defineProperty28(this, "show", async () => {
      const windowLayout = Dimensions.get("window");
      const [menuLayout, anchorLayout] = await Promise.all([this.measureMenuLayout(), this.measureAnchorLayout()]);
      if (!windowLayout.width || !windowLayout.height || !menuLayout.width || !menuLayout.height || !anchorLayout.width && !this.isCoordinate(this.props.anchor) || !anchorLayout.height && !this.isCoordinate(this.props.anchor)) {
        requestAnimationFrame(this.show);
        return;
      }
      this.setState(() => ({
        left: anchorLayout.x,
        top: anchorLayout.y,
        anchorLayout: {
          height: anchorLayout.height,
          width: anchorLayout.width
        },
        menuLayout: {
          width: menuLayout.width,
          height: menuLayout.height
        }
      }), () => {
        this.attachListeners();
        const {
          animation: animation2
        } = this.props.theme;
        Animated_default.parallel([Animated_default.timing(this.state.scaleAnimation, {
          toValue: {
            x: menuLayout.width,
            y: menuLayout.height
          },
          duration: ANIMATION_DURATION2 * animation2.scale,
          easing: EASING,
          useNativeDriver: true
        }), Animated_default.timing(this.state.opacityAnimation, {
          toValue: 1,
          duration: ANIMATION_DURATION2 * animation2.scale,
          easing: EASING,
          useNativeDriver: true
        })]).start(({
          finished
        }) => {
          if (finished) {
            this.focusFirstDOMNode(this.menu);
          }
        });
      });
    });
    _defineProperty28(this, "hide", () => {
      this.removeListeners();
      const {
        animation: animation2
      } = this.props.theme;
      Animated_default.timing(this.state.opacityAnimation, {
        toValue: 0,
        duration: ANIMATION_DURATION2 * animation2.scale,
        easing: EASING,
        useNativeDriver: true
      }).start(({
        finished
      }) => {
        if (finished) {
          this.setState({
            menuLayout: {
              width: 0,
              height: 0
            },
            rendered: false
          });
          this.state.scaleAnimation.setValue({
            x: 0,
            y: 0
          });
          this.focusFirstDOMNode(this.anchor);
        }
      });
    });
  }
  static getDerivedStateFromProps(nextProps, prevState) {
    if (nextProps.visible && !prevState.rendered) {
      return {
        rendered: true
      };
    }
    return null;
  }
  componentDidUpdate(prevProps) {
    if (prevProps.visible !== this.props.visible) {
      this.updateVisibility();
    }
  }
  componentWillUnmount() {
    this.removeListeners();
  }
  render() {
    const {
      visible,
      anchor: anchor3,
      contentStyle,
      style,
      children,
      theme: theme2,
      statusBarHeight: statusBarHeight2,
      onDismiss,
      overlayAccessibilityLabel
    } = this.props;
    const {
      rendered,
      menuLayout,
      anchorLayout,
      opacityAnimation,
      scaleAnimation
    } = this.state;
    let {
      left: left2,
      top
    } = this.state;
    const additionalVerticalValue = Platform_default.select({
      android: statusBarHeight2,
      default: 0
    });
    const scaleTransforms = [{
      scaleX: scaleAnimation.x.interpolate({
        inputRange: [0, menuLayout.width],
        outputRange: [0, 1]
      })
    }, {
      scaleY: scaleAnimation.y.interpolate({
        inputRange: [0, menuLayout.height],
        outputRange: [0, 1]
      })
    }];
    const windowLayout = Dimensions.get("window");
    const positionTransforms = [];
    if (left2 <= windowLayout.width - menuLayout.width - SCREEN_INDENT) {
      positionTransforms.push({
        translateX: scaleAnimation.x.interpolate({
          inputRange: [0, menuLayout.width],
          outputRange: [-(menuLayout.width / 2), 0]
        })
      });
      if (left2 < SCREEN_INDENT) {
        left2 = SCREEN_INDENT;
      }
    } else {
      positionTransforms.push({
        translateX: scaleAnimation.x.interpolate({
          inputRange: [0, menuLayout.width],
          outputRange: [menuLayout.width / 2, 0]
        })
      });
      left2 += anchorLayout.width - menuLayout.width;
      const right2 = left2 + menuLayout.width;
      if (right2 > windowLayout.width - SCREEN_INDENT) {
        left2 = windowLayout.width - SCREEN_INDENT - menuLayout.width;
      }
    }
    let scrollableMenuHeight = 0;
    if (top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && top <= windowLayout.height - top) {
      scrollableMenuHeight = windowLayout.height - top - SCREEN_INDENT - additionalVerticalValue;
    } else if (top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && top >= windowLayout.height - top && top <= menuLayout.height - anchorLayout.height + SCREEN_INDENT - additionalVerticalValue) {
      scrollableMenuHeight = top + anchorLayout.height - SCREEN_INDENT + additionalVerticalValue;
    }
    scrollableMenuHeight = scrollableMenuHeight > windowLayout.height - 2 * SCREEN_INDENT ? windowLayout.height - 2 * SCREEN_INDENT : scrollableMenuHeight;
    if (top <= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue || top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && top <= windowLayout.height - top) {
      positionTransforms.push({
        translateY: scaleAnimation.y.interpolate({
          inputRange: [0, menuLayout.height],
          outputRange: [-((scrollableMenuHeight || menuLayout.height) / 2), 0]
        })
      });
      if (top < SCREEN_INDENT) {
        top = SCREEN_INDENT;
      }
    } else {
      positionTransforms.push({
        translateY: scaleAnimation.y.interpolate({
          inputRange: [0, menuLayout.height],
          outputRange: [(scrollableMenuHeight || menuLayout.height) / 2, 0]
        })
      });
      top += anchorLayout.height - (scrollableMenuHeight || menuLayout.height);
      const bottom = top + (scrollableMenuHeight || menuLayout.height) + additionalVerticalValue;
      if (bottom > windowLayout.height - SCREEN_INDENT) {
        top = scrollableMenuHeight === windowLayout.height - 2 * SCREEN_INDENT ? -SCREEN_INDENT * 2 : windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue;
      }
    }
    const shadowMenuContainerStyle = {
      opacity: opacityAnimation,
      transform: scaleTransforms,
      borderRadius: theme2.roundness,
      ...scrollableMenuHeight ? {
        height: scrollableMenuHeight
      } : {}
    };
    const positionStyle = {
      top: this.isCoordinate(anchor3) ? top : top + additionalVerticalValue,
      ...I18nManager_default.isRTL ? {
        right: left2
      } : {
        left: left2
      }
    };
    return /* @__PURE__ */ React97.createElement(View_default, {
      ref: (ref) => {
        this.anchor = ref;
      },
      collapsable: false
    }, this.isCoordinate(anchor3) ? null : anchor3, rendered ? /* @__PURE__ */ React97.createElement(Portal_default, null, /* @__PURE__ */ React97.createElement(TouchableWithoutFeedback_default, {
      accessibilityLabel: overlayAccessibilityLabel,
      accessibilityRole: "button",
      onPress: onDismiss
    }, /* @__PURE__ */ React97.createElement(View_default, {
      style: StyleSheet_default2.absoluteFill
    })), /* @__PURE__ */ React97.createElement(View_default, {
      ref: (ref) => {
        this.menu = ref;
      },
      collapsable: false,
      accessibilityViewIsModal: visible,
      style: [styles66.wrapper, positionStyle, style],
      pointerEvents: visible ? "box-none" : "none",
      onAccessibilityEscape: onDismiss
    }, /* @__PURE__ */ React97.createElement(Animated_default.View, {
      style: {
        transform: positionTransforms
      }
    }, /* @__PURE__ */ React97.createElement(Surface_default, {
      style: [styles66.shadowMenuContainer, shadowMenuContainerStyle, contentStyle]
    }, scrollableMenuHeight && /* @__PURE__ */ React97.createElement(ScrollView_default, null, children) || /* @__PURE__ */ React97.createElement(React97.Fragment, null, children))))) : null);
  }
};
_defineProperty28(Menu, "Item", MenuItem_default);
_defineProperty28(Menu, "defaultProps", {
  statusBarHeight: APPROX_STATUSBAR_HEIGHT,
  overlayAccessibilityLabel: "Close menu"
});
var styles66 = StyleSheet_default2.create({
  wrapper: {
    position: "absolute"
  },
  shadowMenuContainer: {
    opacity: 0,
    paddingVertical: 8,
    elevation: 8
  }
});
var Menu_default = withTheme(Menu);

// node_modules/react-native-paper/lib/module/components/ProgressBar.js
var React98 = __toModule(require_react());
var import_color27 = __toModule(require_color());
function _extends61() {
  _extends61 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends61.apply(this, arguments);
}
var INDETERMINATE_DURATION = 2e3;
var INDETERMINATE_MAX_WIDTH = 0.6;
var {
  isRTL: isRTL3
} = I18nManager_default;
var ProgressBar = ({
  color: color39,
  indeterminate,
  style,
  progress = 0,
  visible = true,
  theme: theme2,
  ...rest
}) => {
  const {
    current: timer2
  } = React98.useRef(new Animated_default.Value(0));
  const {
    current: fade
  } = React98.useRef(new Animated_default.Value(0));
  const [width, setWidth] = React98.useState(0);
  const [prevWidth, setPrevWidth] = React98.useState(0);
  const indeterminateAnimation = React98.useRef(null);
  const {
    scale: scale2
  } = theme2.animation;
  const startAnimation = React98.useCallback(() => {
    Animated_default.timing(fade, {
      duration: 200 * scale2,
      toValue: 1,
      useNativeDriver: true,
      isInteraction: false
    }).start();
    if (indeterminate) {
      if (!indeterminateAnimation.current) {
        indeterminateAnimation.current = Animated_default.timing(timer2, {
          duration: INDETERMINATE_DURATION,
          toValue: 1,
          useNativeDriver: Platform_default.OS !== "web",
          isInteraction: false
        });
      }
      timer2.setValue(0);
      Animated_default.loop(indeterminateAnimation.current).start();
    } else {
      Animated_default.timing(timer2, {
        duration: 200 * scale2,
        toValue: progress ? progress : 0,
        useNativeDriver: true,
        isInteraction: false
      }).start();
    }
  }, [scale2, timer2, progress, indeterminate, fade]);
  const stopAnimation2 = React98.useCallback(() => {
    if (indeterminateAnimation.current) {
      indeterminateAnimation.current.stop();
    }
    Animated_default.timing(fade, {
      duration: 200 * scale2,
      toValue: 0,
      useNativeDriver: true,
      isInteraction: false
    }).start();
  }, [fade, scale2]);
  React98.useEffect(() => {
    if (visible)
      startAnimation();
    else
      stopAnimation2();
  }, [visible, startAnimation, stopAnimation2]);
  React98.useEffect(() => {
    if (visible && prevWidth === 0) {
      startAnimation();
    }
  }, [prevWidth, startAnimation, visible]);
  const onLayout = (event4) => {
    setPrevWidth(width);
    setWidth(event4.nativeEvent.layout.width);
  };
  const tintColor = color39 || theme2.colors.primary;
  const trackTintColor = (0, import_color27.default)(tintColor).alpha(0.38).rgb().string();
  return /* @__PURE__ */ React98.createElement(View_default, _extends61({
    onLayout
  }, rest, {
    accessible: true,
    accessibilityRole: "progressbar"
  }), /* @__PURE__ */ React98.createElement(Animated_default.View, {
    style: [styles67.container, {
      backgroundColor: trackTintColor,
      opacity: fade
    }, style]
  }, /* @__PURE__ */ React98.createElement(Animated_default.View, {
    style: [styles67.progressBar, {
      backgroundColor: tintColor,
      width,
      transform: [{
        translateX: timer2.interpolate(indeterminate ? {
          inputRange: [0, 0.5, 1],
          outputRange: [(isRTL3 ? 1 : -1) * 0.5 * width, (isRTL3 ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width, (isRTL3 ? -1 : 1) * 0.7 * width]
        } : {
          inputRange: [0, 1],
          outputRange: [(isRTL3 ? 1 : -1) * 0.5 * width, 0]
        })
      }, {
        scaleX: timer2.interpolate(indeterminate ? {
          inputRange: [0, 0.5, 1],
          outputRange: [1e-4, INDETERMINATE_MAX_WIDTH, 1e-4]
        } : {
          inputRange: [0, 1],
          outputRange: [1e-4, 1]
        })
      }]
    }]
  })));
};
var styles67 = StyleSheet_default2.create({
  container: {
    height: 4,
    overflow: "hidden"
  },
  progressBar: {
    flex: 1
  }
});
var ProgressBar_default = withTheme(ProgressBar);

// node_modules/react-native-paper/lib/module/components/RadioButton/RadioButton.js
var React102 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/RadioButton/RadioButtonAndroid.js
var React100 = __toModule(require_react());
var import_color28 = __toModule(require_color());

// node_modules/react-native-paper/lib/module/components/RadioButton/RadioButtonGroup.js
var React99 = __toModule(require_react());
var RadioButtonContext = /* @__PURE__ */ React99.createContext(null);
var RadioButtonGroup = ({
  value,
  onValueChange,
  children
}) => /* @__PURE__ */ React99.createElement(RadioButtonContext.Provider, {
  value: {
    value,
    onValueChange
  }
}, /* @__PURE__ */ React99.createElement(View_default, {
  accessible: true,
  accessibilityRole: "radiogroup"
}, children));
RadioButtonGroup.displayName = "RadioButton.Group";
var RadioButtonGroup_default = RadioButtonGroup;

// node_modules/react-native-paper/lib/module/components/RadioButton/utils.js
var handlePress = ({
  onPress,
  value,
  onValueChange
}) => {
  onValueChange ? onValueChange(value) : onPress === null || onPress === void 0 ? void 0 : onPress();
};
var isChecked = ({
  value,
  status,
  contextValue
}) => {
  if (contextValue !== void 0 && contextValue !== null) {
    return contextValue === value ? "checked" : "unchecked";
  } else {
    return status;
  }
};

// node_modules/react-native-paper/lib/module/components/RadioButton/RadioButtonAndroid.js
function _extends62() {
  _extends62 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends62.apply(this, arguments);
}
var BORDER_WIDTH = 2;
var RadioButtonAndroid = ({
  disabled,
  onPress,
  theme: theme2,
  value,
  status,
  testID,
  ...rest
}) => {
  const {
    current: borderAnim
  } = React100.useRef(new Animated_default.Value(BORDER_WIDTH));
  const {
    current: radioAnim
  } = React100.useRef(new Animated_default.Value(1));
  const isFirstRendering = React100.useRef(true);
  const {
    scale: scale2
  } = theme2.animation;
  React100.useEffect(() => {
    if (isFirstRendering.current) {
      isFirstRendering.current = false;
      return;
    }
    if (status === "checked") {
      radioAnim.setValue(1.2);
      Animated_default.timing(radioAnim, {
        toValue: 1,
        duration: 150 * scale2,
        useNativeDriver: true
      }).start();
    } else {
      borderAnim.setValue(10);
      Animated_default.timing(borderAnim, {
        toValue: BORDER_WIDTH,
        duration: 150 * scale2,
        useNativeDriver: false
      }).start();
    }
  }, [status, borderAnim, radioAnim, scale2]);
  const checkedColor = rest.color || theme2.colors.accent;
  const uncheckedColor = rest.uncheckedColor || (0, import_color28.default)(theme2.colors.text).alpha(theme2.dark ? 0.7 : 0.54).rgb().string();
  let rippleColor, radioColor;
  return /* @__PURE__ */ React100.createElement(RadioButtonContext.Consumer, null, (context) => {
    const checked = isChecked({
      contextValue: context === null || context === void 0 ? void 0 : context.value,
      status,
      value
    }) === "checked";
    if (disabled) {
      rippleColor = (0, import_color28.default)(theme2.colors.text).alpha(0.16).rgb().string();
      radioColor = theme2.colors.disabled;
    } else {
      rippleColor = (0, import_color28.default)(checkedColor).fade(0.32).rgb().string();
      radioColor = checked ? checkedColor : uncheckedColor;
    }
    return /* @__PURE__ */ React100.createElement(TouchableRipple_default, _extends62({}, rest, {
      borderless: true,
      rippleColor,
      onPress: disabled ? void 0 : () => {
        handlePress({
          onPress,
          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,
          value
        });
      },
      accessibilityTraits: disabled ? ["button", "disabled"] : "button",
      accessibilityComponentType: checked ? "radiobutton_checked" : "radiobutton_unchecked",
      accessibilityRole: "radio",
      accessibilityState: {
        disabled,
        checked
      },
      accessibilityLiveRegion: "polite",
      style: styles68.container,
      testID
    }), /* @__PURE__ */ React100.createElement(Animated_default.View, {
      style: [styles68.radio, {
        borderColor: radioColor,
        borderWidth: borderAnim
      }]
    }, checked ? /* @__PURE__ */ React100.createElement(View_default, {
      style: [StyleSheet_default2.absoluteFill, styles68.radioContainer]
    }, /* @__PURE__ */ React100.createElement(Animated_default.View, {
      style: [styles68.dot, {
        backgroundColor: radioColor,
        transform: [{
          scale: radioAnim
        }]
      }]
    })) : null));
  });
};
RadioButtonAndroid.displayName = "RadioButton.Android";
var styles68 = StyleSheet_default2.create({
  container: {
    borderRadius: 18
  },
  radioContainer: {
    alignItems: "center",
    justifyContent: "center"
  },
  radio: {
    height: 20,
    width: 20,
    borderRadius: 10,
    margin: 8
  },
  dot: {
    height: 10,
    width: 10,
    borderRadius: 5
  }
});
var RadioButtonAndroid_default = withTheme(RadioButtonAndroid);
var RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);

// node_modules/react-native-paper/lib/module/components/RadioButton/RadioButtonIOS.js
var React101 = __toModule(require_react());
var import_color29 = __toModule(require_color());
function _extends63() {
  _extends63 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends63.apply(this, arguments);
}
var RadioButtonIOS = ({
  disabled,
  onPress,
  theme: theme2,
  status,
  value,
  testID,
  ...rest
}) => {
  const checkedColor = disabled ? theme2.colors.disabled : rest.color || theme2.colors.accent;
  let rippleColor;
  if (disabled) {
    rippleColor = (0, import_color29.default)(theme2.colors.text).alpha(0.16).rgb().string();
  } else {
    rippleColor = (0, import_color29.default)(checkedColor).fade(0.32).rgb().string();
  }
  return /* @__PURE__ */ React101.createElement(RadioButtonContext.Consumer, null, (context) => {
    const checked = isChecked({
      contextValue: context === null || context === void 0 ? void 0 : context.value,
      status,
      value
    }) === "checked";
    return /* @__PURE__ */ React101.createElement(TouchableRipple_default, _extends63({}, rest, {
      borderless: true,
      rippleColor,
      onPress: disabled ? void 0 : () => {
        handlePress({
          onPress,
          value,
          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange
        });
      },
      accessibilityTraits: disabled ? ["button", "disabled"] : "button",
      accessibilityComponentType: checked ? "radiobutton_checked" : "radiobutton_unchecked",
      accessibilityRole: "radio",
      accessibilityState: {
        disabled,
        checked
      },
      accessibilityLiveRegion: "polite",
      style: styles69.container,
      testID
    }), /* @__PURE__ */ React101.createElement(View_default, {
      style: {
        opacity: checked ? 1 : 0
      }
    }, /* @__PURE__ */ React101.createElement(MaterialCommunityIcon_default, {
      allowFontScaling: false,
      name: "check",
      size: 24,
      color: checkedColor,
      direction: "ltr"
    })));
  });
};
RadioButtonIOS.displayName = "RadioButton.IOS";
var styles69 = StyleSheet_default2.create({
  container: {
    borderRadius: 18,
    padding: 6
  }
});
var RadioButtonIOS_default = withTheme(RadioButtonIOS);
var RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);

// node_modules/react-native-paper/lib/module/components/RadioButton/RadioButton.js
var RadioButton = (props) => {
  const Button3 = Platform_default.select({
    default: RadioButtonAndroid_default,
    ios: RadioButtonIOS_default
  });
  return /* @__PURE__ */ React102.createElement(Button3, props);
};
var RadioButton_default = withTheme(RadioButton);
var RadioButtonWithTheme = withTheme(RadioButton);

// node_modules/react-native-paper/lib/module/components/RadioButton/RadioButtonItem.js
var React103 = __toModule(require_react());
var RadioButtonItem = ({
  value,
  label: label2,
  style,
  labelStyle,
  onPress,
  disabled,
  color: color39,
  uncheckedColor,
  status,
  theme: {
    colors
  },
  accessibilityLabel,
  testID,
  mode
}) => {
  const radioButtonProps = {
    value,
    disabled,
    status,
    color: color39,
    uncheckedColor
  };
  let radioButton;
  if (mode === "android") {
    radioButton = /* @__PURE__ */ React103.createElement(RadioButtonAndroid_default, radioButtonProps);
  } else if (mode === "ios") {
    radioButton = /* @__PURE__ */ React103.createElement(RadioButtonIOS_default, radioButtonProps);
  } else {
    radioButton = /* @__PURE__ */ React103.createElement(RadioButton_default, radioButtonProps);
  }
  return /* @__PURE__ */ React103.createElement(RadioButtonContext.Consumer, null, (context) => {
    return /* @__PURE__ */ React103.createElement(TouchableRipple_default, {
      onPress: disabled ? void 0 : () => handlePress({
        onPress,
        onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,
        value
      }),
      accessibilityLabel,
      testID
    }, /* @__PURE__ */ React103.createElement(View_default, {
      style: [styles70.container, style],
      pointerEvents: "none"
    }, /* @__PURE__ */ React103.createElement(Text_default2, {
      style: [styles70.label, {
        color: colors.text
      }, labelStyle]
    }, label2), radioButton));
  });
};
RadioButtonItem.displayName = "RadioButton.Item";
var RadioButtonItem_default = withTheme(RadioButtonItem);
var RadioButtonItemWithTheme = withTheme(RadioButtonItem);
var styles70 = StyleSheet_default2.create({
  container: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingVertical: 8,
    paddingHorizontal: 16
  },
  label: {
    fontSize: 16,
    flex: 1
  }
});

// node_modules/react-native-paper/lib/module/components/RadioButton/index.js
var RadioButton2 = Object.assign(RadioButton_default, {
  Group: RadioButtonGroup_default,
  Android: RadioButtonAndroid_default,
  IOS: RadioButtonIOS_default,
  Item: RadioButtonItem_default
});
var RadioButton_default2 = RadioButton2;

// node_modules/react-native-paper/lib/module/components/Searchbar.js
var React104 = __toModule(require_react());
var import_color30 = __toModule(require_color());
function _extends64() {
  _extends64 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends64.apply(this, arguments);
}
var Searchbar = /* @__PURE__ */ React104.forwardRef(({
  clearAccessibilityLabel = "clear",
  clearIcon,
  icon,
  iconColor: customIconColor,
  inputStyle,
  onIconPress,
  placeholder,
  searchAccessibilityLabel = "search",
  style,
  theme: theme2,
  value,
  ...rest
}, ref) => {
  const root = React104.useRef(null);
  React104.useImperativeHandle(ref, () => {
    const input = root.current;
    if (input) {
      return {
        focus: input.focus,
        clear: input.clear,
        setNativeProps: (args) => input.setNativeProps(args),
        isFocused: input.isFocused,
        blur: input.blur
      };
    }
    const noop = () => {
      throw new Error("TextInput is not available");
    };
    return {
      focus: noop,
      clear: noop,
      setNativeProps: noop,
      isFocused: noop,
      blur: noop
    };
  });
  const handleClearPress = () => {
    var _root$current, _rest$onChangeText;
    (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.clear();
    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, "");
  };
  const {
    colors,
    roundness,
    dark,
    fonts
  } = theme2;
  const textColor = colors.text;
  const font2 = fonts.regular;
  const iconColor = customIconColor || (dark ? textColor : (0, import_color30.default)(textColor).alpha(0.54).rgb().string());
  const rippleColor = (0, import_color30.default)(textColor).alpha(0.32).rgb().string();
  return /* @__PURE__ */ React104.createElement(Surface_default, {
    style: [{
      borderRadius: roundness,
      elevation: 4
    }, styles71.container, style]
  }, /* @__PURE__ */ React104.createElement(IconButton_default, {
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    borderless: true,
    rippleColor,
    onPress: onIconPress,
    color: iconColor,
    icon: icon || (({
      size,
      color: color39
    }) => /* @__PURE__ */ React104.createElement(MaterialCommunityIcon_default, {
      name: "magnify",
      color: color39,
      size,
      direction: I18nManager_default.isRTL ? "rtl" : "ltr"
    })),
    accessibilityLabel: searchAccessibilityLabel
  }), /* @__PURE__ */ React104.createElement(TextInput_default, _extends64({
    style: [styles71.input, {
      color: textColor,
      ...font2
    }, inputStyle],
    placeholder: placeholder || "",
    placeholderTextColor: colors.placeholder,
    selectionColor: colors.primary,
    underlineColorAndroid: "transparent",
    returnKeyType: "search",
    keyboardAppearance: dark ? "dark" : "light",
    accessibilityTraits: "search",
    accessibilityRole: "search",
    ref: root,
    value
  }, rest)), /* @__PURE__ */ React104.createElement(IconButton_default, {
    borderless: true,
    disabled: !value,
    accessibilityLabel: clearAccessibilityLabel,
    color: value ? iconColor : "rgba(255, 255, 255, 0)",
    rippleColor,
    onPress: handleClearPress,
    icon: clearIcon || (({
      size,
      color: color39
    }) => /* @__PURE__ */ React104.createElement(MaterialCommunityIcon_default, {
      name: "close",
      color: color39,
      size,
      direction: I18nManager_default.isRTL ? "rtl" : "ltr"
    })),
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button"
  }));
});
var styles71 = StyleSheet_default2.create({
  container: {
    flexDirection: "row",
    alignItems: "center"
  },
  input: {
    flex: 1,
    fontSize: 18,
    paddingLeft: 8,
    alignSelf: "stretch",
    textAlign: I18nManager_default.isRTL ? "right" : "left",
    minWidth: 0
  }
});
var Searchbar_default = withTheme(Searchbar);

// node_modules/react-native-paper/lib/module/components/Snackbar.js
var React105 = __toModule(require_react());
function _extends65() {
  _extends65 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends65.apply(this, arguments);
}
var DURATION_SHORT = 4e3;
var DURATION_MEDIUM = 7e3;
var DURATION_LONG = 1e4;
var Snackbar = ({
  visible,
  action,
  duration = DURATION_MEDIUM,
  onDismiss,
  children,
  wrapperStyle,
  style,
  theme: theme2,
  ...rest
}) => {
  const {
    current: opacity3
  } = React105.useRef(new Animated_default.Value(0));
  const [hidden, setHidden] = React105.useState(!visible);
  const hideTimeout = React105.useRef(void 0);
  const {
    scale: scale2
  } = theme2.animation;
  React105.useEffect(() => {
    return () => {
      if (hideTimeout.current)
        clearTimeout(hideTimeout.current);
    };
  }, []);
  React105.useLayoutEffect(() => {
    if (visible) {
      if (hideTimeout.current)
        clearTimeout(hideTimeout.current);
      setHidden(false);
      Animated_default.timing(opacity3, {
        toValue: 1,
        duration: 200 * scale2,
        useNativeDriver: true
      }).start(({
        finished
      }) => {
        if (finished) {
          const isInfinity = duration === Number.POSITIVE_INFINITY || duration === Number.NEGATIVE_INFINITY;
          if (finished && !isInfinity) {
            hideTimeout.current = setTimeout(onDismiss, duration);
          }
        }
      });
    } else {
      if (hideTimeout.current)
        clearTimeout(hideTimeout.current);
      Animated_default.timing(opacity3, {
        toValue: 0,
        duration: 100 * scale2,
        useNativeDriver: true
      }).start(({
        finished
      }) => {
        if (finished)
          setHidden(true);
      });
    }
  }, [visible, duration, opacity3, scale2, onDismiss]);
  const {
    colors,
    roundness
  } = theme2;
  if (hidden)
    return null;
  return /* @__PURE__ */ React105.createElement(SafeAreaView_default, {
    pointerEvents: "box-none",
    style: [styles72.wrapper, wrapperStyle]
  }, /* @__PURE__ */ React105.createElement(Surface_default, _extends65({
    pointerEvents: "box-none",
    accessibilityLiveRegion: "polite",
    style: [styles72.container, {
      borderRadius: roundness,
      opacity: opacity3,
      transform: [{
        scale: visible ? opacity3.interpolate({
          inputRange: [0, 1],
          outputRange: [0.9, 1]
        }) : 1
      }]
    }, {
      backgroundColor: colors.onSurface
    }, style]
  }, rest), /* @__PURE__ */ React105.createElement(Text_default2, {
    style: [styles72.content, {
      marginRight: action ? 0 : 16,
      color: colors.surface
    }]
  }, children), action ? /* @__PURE__ */ React105.createElement(Button_default, {
    accessibilityLabel: action.accessibilityLabel,
    onPress: () => {
      action.onPress();
      onDismiss();
    },
    style: styles72.button,
    color: colors.accent,
    compact: true,
    mode: "text"
  }, action.label) : null));
};
Snackbar.DURATION_SHORT = DURATION_SHORT;
Snackbar.DURATION_MEDIUM = DURATION_MEDIUM;
Snackbar.DURATION_LONG = DURATION_LONG;
var styles72 = StyleSheet_default2.create({
  wrapper: {
    position: "absolute",
    bottom: 0,
    width: "100%"
  },
  container: {
    elevation: 6,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    margin: 8,
    borderRadius: 4
  },
  content: {
    marginLeft: 16,
    marginVertical: 14,
    flexWrap: "wrap",
    flex: 1
  },
  button: {
    marginHorizontal: 8,
    marginVertical: 6
  }
});
var Snackbar_default = withTheme(Snackbar);

// node_modules/react-native-paper/lib/module/components/Switch.js
var React106 = __toModule(require_react());
var import_color31 = __toModule(require_color());
function _extends66() {
  _extends66 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends66.apply(this, arguments);
}
var version = NativeModules_default.PlatformConstants ? NativeModules_default.PlatformConstants.reactNativeVersion : void 0;
var Switch2 = ({
  value,
  disabled,
  onValueChange,
  color: color39,
  theme: theme2,
  ...rest
}) => {
  const checkedColor = color39 || theme2.colors.accent;
  const onTintColor = Platform_default.OS === "ios" ? checkedColor : disabled ? theme2.dark ? (0, import_color31.default)(white).alpha(0.1).rgb().string() : (0, import_color31.default)(black).alpha(0.12).rgb().string() : (0, import_color31.default)(checkedColor).alpha(0.5).rgb().string();
  const thumbTintColor = Platform_default.OS === "ios" ? void 0 : disabled ? theme2.dark ? grey800 : grey400 : value ? checkedColor : theme2.dark ? grey400 : grey50;
  const props = version && version.major === 0 && version.minor <= 56 ? {
    onTintColor,
    thumbTintColor
  } : Platform_default.OS === "web" ? {
    activeTrackColor: onTintColor,
    thumbColor: thumbTintColor,
    activeThumbColor: checkedColor
  } : {
    thumbColor: thumbTintColor,
    trackColor: {
      true: onTintColor,
      false: ""
    }
  };
  return /* @__PURE__ */ React106.createElement(Switch_default, _extends66({
    value,
    disabled,
    onValueChange: disabled ? void 0 : onValueChange
  }, props, rest));
};
var Switch_default2 = withTheme(Switch2);

// node_modules/react-native-paper/lib/module/components/Appbar/Appbar.js
var React111 = __toModule(require_react());
var import_color34 = __toModule(require_color());

// node_modules/react-native-paper/lib/module/components/Appbar/AppbarContent.js
var React107 = __toModule(require_react());
var import_color32 = __toModule(require_color());
function _extends67() {
  _extends67 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends67.apply(this, arguments);
}
var AppbarContent = ({
  color: titleColor = white,
  subtitle,
  subtitleStyle,
  onPress,
  style,
  titleRef,
  titleStyle,
  theme: theme2,
  title,
  ...rest
}) => {
  const {
    fonts
  } = theme2;
  const subtitleColor = (0, import_color32.default)(titleColor).alpha(0.7).rgb().string();
  return /* @__PURE__ */ React107.createElement(TouchableWithoutFeedback_default, {
    onPress,
    disabled: !onPress
  }, /* @__PURE__ */ React107.createElement(View_default, _extends67({
    style: [styles73.container, style]
  }, rest), /* @__PURE__ */ React107.createElement(Text_default2, {
    ref: titleRef,
    style: [{
      color: titleColor,
      ...Platform_default.OS === "ios" ? fonts.regular : fonts.medium
    }, styles73.title, titleStyle],
    numberOfLines: 1,
    accessible: true,
    accessibilityRole: Platform_default.OS === "web" ? "heading" : "header"
  }, title), subtitle ? /* @__PURE__ */ React107.createElement(Text_default2, {
    style: [styles73.subtitle, {
      color: subtitleColor
    }, subtitleStyle],
    numberOfLines: 1
  }, subtitle) : null));
};
AppbarContent.displayName = "Appbar.Content";
var styles73 = StyleSheet_default2.create({
  container: {
    flex: 1,
    paddingHorizontal: 12
  },
  title: {
    fontSize: Platform_default.OS === "ios" ? 17 : 20
  },
  subtitle: {
    fontSize: Platform_default.OS === "ios" ? 11 : 14
  }
});
var AppbarContent_default = withTheme(AppbarContent);
var AppbarContentWithTheme = withTheme(AppbarContent);

// node_modules/react-native-paper/lib/module/components/Appbar/AppbarAction.js
var React108 = __toModule(require_react());
var import_color33 = __toModule(require_color());
function _extends68() {
  _extends68 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends68.apply(this, arguments);
}
var AppbarAction = ({
  size = 24,
  color: iconColor = (0, import_color33.default)(black).alpha(0.54).rgb().string(),
  icon,
  disabled,
  onPress,
  accessibilityLabel,
  ...rest
}) => /* @__PURE__ */ React108.createElement(IconButton_default, _extends68({
  size,
  onPress,
  color: iconColor,
  icon,
  disabled,
  accessibilityLabel,
  animated: true
}, rest));
AppbarAction.displayName = "Appbar.Action";
var AppbarAction_default = AppbarAction;

// node_modules/react-native-paper/lib/module/components/Appbar/AppbarBackAction.js
var React110 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/Appbar/AppbarBackIcon.js
var React109 = __toModule(require_react());
var AppbarBackIcon = ({
  size,
  color: color39
}) => {
  const iosIconSize = size - 3;
  return Platform_default.OS === "ios" ? /* @__PURE__ */ React109.createElement(View_default, {
    style: [styles74.wrapper, {
      width: size,
      height: size,
      transform: [{
        scaleX: I18nManager_default.isRTL ? -1 : 1
      }]
    }]
  }, /* @__PURE__ */ React109.createElement(Image_default, {
    source: require_back_chevron(),
    style: [styles74.icon, {
      tintColor: color39,
      width: iosIconSize,
      height: iosIconSize
    }]
  })) : /* @__PURE__ */ React109.createElement(MaterialCommunityIcon_default, {
    name: "arrow-left",
    color: color39,
    size,
    direction: I18nManager_default.isRTL ? "rtl" : "ltr"
  });
};
var styles74 = StyleSheet_default2.create({
  wrapper: {
    alignItems: "center",
    justifyContent: "center"
  },
  icon: {
    resizeMode: "contain"
  }
});
var AppbarBackIcon_default = AppbarBackIcon;

// node_modules/react-native-paper/lib/module/components/Appbar/AppbarBackAction.js
function _extends69() {
  _extends69 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends69.apply(this, arguments);
}
var AppbarBackAction = ({
  accessibilityLabel = "Back",
  ...rest
}) => /* @__PURE__ */ React110.createElement(AppbarAction_default, _extends69({
  accessibilityLabel
}, rest, {
  icon: AppbarBackIcon_default
}));
AppbarBackAction.displayName = "Appbar.BackAction";
var AppbarBackAction_default = AppbarBackAction;

// node_modules/react-native-paper/lib/module/components/Appbar/Appbar.js
function _extends70() {
  _extends70 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends70.apply(this, arguments);
}
var DEFAULT_APPBAR_HEIGHT = 56;
var Appbar = ({
  children,
  dark,
  style,
  theme: theme2,
  ...rest
}) => {
  const {
    colors,
    dark: isDarkTheme,
    mode
  } = theme2;
  const {
    backgroundColor: customBackground,
    elevation = 4,
    ...restStyle
  } = StyleSheet_default2.flatten(style) || {};
  let isDark;
  const backgroundColor = customBackground ? customBackground : isDarkTheme && mode === "adaptive" ? overlay(elevation, colors.surface) : colors.primary;
  if (typeof dark === "boolean") {
    isDark = dark;
  } else {
    isDark = backgroundColor === "transparent" ? false : typeof backgroundColor === "string" ? !(0, import_color34.default)(backgroundColor).isLight() : true;
  }
  let shouldCenterContent = false;
  let shouldAddLeftSpacing = false;
  let shouldAddRightSpacing = false;
  if (Platform_default.OS === "ios") {
    let hasAppbarContent = false;
    let leftItemsCount = 0;
    let rightItemsCount = 0;
    React111.Children.forEach(children, (child2) => {
      if (/* @__PURE__ */ React111.isValidElement(child2)) {
        if (child2.type === AppbarContent_default) {
          hasAppbarContent = true;
        } else if (hasAppbarContent) {
          rightItemsCount++;
        } else {
          leftItemsCount++;
        }
      }
    });
    shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;
    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;
    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;
  }
  return /* @__PURE__ */ React111.createElement(Surface_default, _extends70({
    style: [{
      backgroundColor
    }, styles75.appbar, {
      elevation
    }, restStyle]
  }, rest), shouldAddLeftSpacing ? /* @__PURE__ */ React111.createElement(View_default, {
    style: styles75.spacing
  }) : null, React111.Children.toArray(children).filter((child2) => child2 != null && typeof child2 !== "boolean").map((child2, i) => {
    if (!/* @__PURE__ */ React111.isValidElement(child2) || ![AppbarContent_default, AppbarAction_default, AppbarBackAction_default].includes(child2.type)) {
      return child2;
    }
    const props = {
      color: typeof child2.props.color !== "undefined" ? child2.props.color : isDark ? white : black
    };
    if (child2.type === AppbarContent_default) {
      props.style = [
        i !== 0 && {
          marginLeft: 8
        },
        shouldCenterContent && {
          alignItems: "center"
        },
        child2.props.style
      ];
    }
    return /* @__PURE__ */ React111.cloneElement(child2, props);
  }), shouldAddRightSpacing ? /* @__PURE__ */ React111.createElement(View_default, {
    style: styles75.spacing
  }) : null);
};
var styles75 = StyleSheet_default2.create({
  appbar: {
    height: DEFAULT_APPBAR_HEIGHT,
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 4,
    elevation: 4
  },
  spacing: {
    width: 48
  }
});
var Appbar_default = withTheme(Appbar);
var AppbarWithTheme = withTheme(Appbar);

// node_modules/react-native-paper/lib/module/components/Appbar/AppbarHeader.js
var React112 = __toModule(require_react());
function _extends71() {
  _extends71 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends71.apply(this, arguments);
}
var AppbarHeader = (props) => {
  const {
    statusBarHeight: statusBarHeight2 = APPROX_STATUSBAR_HEIGHT,
    style,
    dark,
    ...rest
  } = props;
  const {
    dark: isDarkTheme,
    colors,
    mode
  } = rest.theme;
  const {
    height = DEFAULT_APPBAR_HEIGHT,
    elevation = 4,
    backgroundColor: customBackground,
    zIndex = 0,
    ...restStyle
  } = StyleSheet_default2.flatten(style) || {};
  const backgroundColor = customBackground ? customBackground : isDarkTheme && mode === "adaptive" ? overlay(elevation, colors.surface) : colors.primary;
  const Wrapper = typeof props.statusBarHeight === "number" ? View_default : SafeAreaView_default;
  return /* @__PURE__ */ React112.createElement(Wrapper, {
    style: [{
      backgroundColor,
      zIndex,
      elevation
    }, shadow(elevation)]
  }, /* @__PURE__ */ React112.createElement(AppbarWithTheme, _extends71({
    style: [{
      height,
      backgroundColor,
      marginTop: statusBarHeight2
    }, styles76.appbar, restStyle],
    dark
  }, rest)));
};
AppbarHeader.displayName = "Appbar.Header";
var styles76 = StyleSheet_default2.create({
  appbar: {
    elevation: 0
  }
});
var AppbarHeader_default = withTheme(AppbarHeader);
var AppbarHeaderWithTheme = withTheme(AppbarHeader);

// node_modules/react-native-paper/lib/module/components/Appbar/index.js
var Appbar2 = Object.assign(Appbar_default, {
  Content: AppbarContent_default,
  Action: AppbarAction_default,
  BackAction: AppbarBackAction_default,
  Header: AppbarHeader_default
});
var Appbar_default2 = Appbar2;

// node_modules/react-native-paper/lib/module/components/TextInput/TextInput.js
var React120 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/TextInput/TextInputOutlined.js
var React118 = __toModule(require_react());
var import_color36 = __toModule(require_color());

// node_modules/react-native-paper/lib/module/components/TextInput/Adornment/TextInputAdornment.js
var import_react31 = __toModule(require_react());

// node_modules/react-native-paper/lib/module/components/TextInput/Adornment/TextInputIcon.js
var import_react29 = __toModule(require_react());
function _extends72() {
  _extends72 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends72.apply(this, arguments);
}
var ICON_SIZE2 = 24;
var ICON_OFFSET = 12;
var StyleContext = /* @__PURE__ */ import_react29.default.createContext({
  style: {},
  isTextInputFocused: false,
  forceFocus: () => {
  }
});
var IconAdornment = ({
  icon,
  topPosition,
  side,
  isTextInputFocused,
  forceFocus
}) => {
  const style = {
    top: topPosition,
    [side]: ICON_OFFSET
  };
  const contextState = {
    style,
    isTextInputFocused,
    forceFocus
  };
  return /* @__PURE__ */ import_react29.default.createElement(StyleContext.Provider, {
    value: contextState
  }, icon);
};
var TextInputIcon = ({
  name,
  onPress,
  forceTextInputFocus,
  ...rest
}) => {
  const {
    style,
    isTextInputFocused,
    forceFocus
  } = import_react29.default.useContext(StyleContext);
  const onPressWithFocusControl = import_react29.default.useCallback(() => {
    if (forceTextInputFocus && !isTextInputFocused) {
      forceFocus();
    }
    onPress === null || onPress === void 0 ? void 0 : onPress();
  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);
  return /* @__PURE__ */ import_react29.default.createElement(View_default, {
    style: [styles77.container, style]
  }, /* @__PURE__ */ import_react29.default.createElement(IconButton_default, _extends72({
    icon: name,
    style: styles77.iconButton,
    size: ICON_SIZE2,
    onPress: onPressWithFocusControl
  }, rest)));
};
TextInputIcon.displayName = "TextInput.Icon";
TextInputIcon.defaultProps = {
  forceTextInputFocus: true
};
var styles77 = StyleSheet_default2.create({
  container: {
    position: "absolute",
    width: ICON_SIZE2,
    height: ICON_SIZE2,
    justifyContent: "center",
    alignItems: "center"
  },
  iconButton: {
    margin: 0
  }
});
var TextInputIcon_default = TextInputIcon;

// node_modules/react-native-paper/lib/module/components/TextInput/Adornment/TextInputAffix.js
var import_react30 = __toModule(require_react());
var import_color35 = __toModule(require_color());

// node_modules/react-native-paper/lib/module/components/TextInput/Adornment/enums.js
var AdornmentType;
(function(AdornmentType2) {
  AdornmentType2["Icon"] = "icon";
  AdornmentType2["Affix"] = "affix";
})(AdornmentType || (AdornmentType = {}));
var AdornmentSide;
(function(AdornmentSide2) {
  AdornmentSide2["Right"] = "right";
  AdornmentSide2["Left"] = "left";
})(AdornmentSide || (AdornmentSide = {}));
var InputMode;
(function(InputMode2) {
  InputMode2["Outlined"] = "outlined";
  InputMode2["Flat"] = "flat";
})(InputMode || (InputMode = {}));

// node_modules/react-native-paper/lib/module/components/TextInput/Adornment/TextInputAffix.js
var AFFIX_OFFSET = 12;
var AffixContext = /* @__PURE__ */ import_react30.default.createContext({
  textStyle: {
    fontFamily: "",
    color: ""
  },
  topPosition: null,
  side: AdornmentSide.Left
});
var AffixAdornment = ({
  affix,
  side,
  textStyle,
  topPosition,
  onLayout,
  visible,
  paddingHorizontal
}) => {
  return /* @__PURE__ */ import_react30.default.createElement(AffixContext.Provider, {
    value: {
      side,
      textStyle,
      topPosition,
      onLayout,
      visible,
      paddingHorizontal
    }
  }, affix);
};
var TextInputAffix = ({
  text: text2,
  textStyle: labelStyle,
  theme: theme2
}) => {
  const {
    textStyle,
    onLayout,
    topPosition,
    side,
    visible,
    paddingHorizontal
  } = import_react30.default.useContext(AffixContext);
  const textColor = (0, import_color35.default)(theme2.colors.text).alpha(theme2.dark ? 0.7 : 0.54).rgb().string();
  const offset = typeof paddingHorizontal === "number" ? paddingHorizontal : AFFIX_OFFSET;
  const style = {
    top: topPosition,
    [side]: offset
  };
  return /* @__PURE__ */ import_react30.default.createElement(Animated_default.View, {
    style: [styles78.container, style, {
      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({
        inputRange: [0, 1],
        outputRange: [1, 0]
      })) || 1
    }],
    onLayout
  }, /* @__PURE__ */ import_react30.default.createElement(Text_default, {
    style: [{
      color: textColor
    }, textStyle, labelStyle]
  }, text2));
};
TextInputAffix.displayName = "TextInput.Affix";
var styles78 = StyleSheet_default2.create({
  container: {
    position: "absolute",
    justifyContent: "center",
    alignItems: "center"
  }
});
var TextInputAffix_default = withTheme(TextInputAffix);

// node_modules/react-native-paper/lib/module/components/TextInput/constants.js
var MAXIMIZED_LABEL_FONT_SIZE = 16;
var MINIMIZED_LABEL_FONT_SIZE = 12;
var LABEL_WIGGLE_X_OFFSET = 4;
var LABEL_PADDING_HORIZONTAL = 12;
var ADORNMENT_SIZE = 24;
var ADORNMENT_OFFSET = 12;
var FLAT_INPUT_OFFSET = 8;
var OUTLINED_INPUT_OFFSET = 8;

// node_modules/react-native-paper/lib/module/components/TextInput/Adornment/TextInputAdornment.js
function _extends73() {
  _extends73 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends73.apply(this, arguments);
}
function getAdornmentConfig({
  left: left2,
  right: right2
}) {
  let adornmentConfig = [];
  if (left2 || right2) {
    [{
      side: AdornmentSide.Left,
      adornment: left2
    }, {
      side: AdornmentSide.Right,
      adornment: right2
    }].forEach(({
      side,
      adornment
    }) => {
      if (adornment && /* @__PURE__ */ import_react31.default.isValidElement(adornment)) {
        let type;
        if (adornment.type === TextInputAffix_default) {
          type = AdornmentType.Affix;
        } else if (adornment.type === TextInputIcon_default) {
          type = AdornmentType.Icon;
        }
        adornmentConfig.push({
          side,
          type
        });
      }
    });
  }
  return adornmentConfig;
}
function getAdornmentStyleAdjustmentForNativeInput({
  adornmentConfig,
  leftAffixWidth,
  rightAffixWidth,
  paddingHorizontal,
  inputOffset = 0,
  mode
}) {
  if (adornmentConfig.length) {
    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(({
      type,
      side
    }) => {
      const isLeftSide = side === AdornmentSide.Left;
      const inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;
      const paddingKey = "padding".concat(captalize(side));
      const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;
      const padding = typeof paddingHorizontal === "number" ? paddingHorizontal : inputModeAdornemntOffset;
      const offset = affixWidth + padding;
      const isAffix = type === AdornmentType.Affix;
      const marginKey = "margin".concat(captalize(side));
      return {
        [marginKey]: isAffix ? 0 : offset,
        [paddingKey]: isAffix ? offset : inputOffset
      };
    });
    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce((mergedStyles, currentStyle) => {
      return {
        ...mergedStyles,
        ...currentStyle
      };
    }, {});
    return allStyleAdjustmentsMerged;
  } else {
    return [{}];
  }
}
var captalize = (text2) => text2.charAt(0).toUpperCase() + text2.slice(1);
var TextInputAdornment = ({
  adornmentConfig,
  left: left2,
  right: right2,
  onAffixChange,
  textStyle,
  visible,
  topPosition,
  isTextInputFocused,
  forceFocus,
  paddingHorizontal
}) => {
  if (adornmentConfig.length) {
    return /* @__PURE__ */ import_react31.default.createElement(import_react31.default.Fragment, null, adornmentConfig.map(({
      type,
      side
    }) => {
      let inputAdornmentComponent;
      if (side === AdornmentSide.Left) {
        inputAdornmentComponent = left2;
      } else if (side === AdornmentSide.Right) {
        inputAdornmentComponent = right2;
      }
      const commonProps = {
        key: side,
        side,
        testID: "".concat(side, "-").concat(type, "-adornment"),
        isTextInputFocused,
        paddingHorizontal
      };
      if (type === AdornmentType.Icon) {
        return /* @__PURE__ */ import_react31.default.createElement(IconAdornment, _extends73({}, commonProps, {
          icon: inputAdornmentComponent,
          topPosition: topPosition[AdornmentType.Icon],
          forceFocus
        }));
      } else if (type === AdornmentType.Affix) {
        return /* @__PURE__ */ import_react31.default.createElement(AffixAdornment, _extends73({}, commonProps, {
          topPosition: topPosition[AdornmentType.Affix][side],
          affix: inputAdornmentComponent,
          textStyle,
          onLayout: onAffixChange[side],
          visible
        }));
      } else {
        return null;
      }
    }));
  } else {
    return null;
  }
};
var TextInputAdornment_default = TextInputAdornment;

// node_modules/react-native-paper/lib/module/components/TextInput/Label/InputLabel.js
var import_react32 = __toModule(require_react());
var InputLabel = (props) => {
  const {
    parentState,
    labelBackground
  } = props;
  const {
    label: label2,
    error: error2,
    onLayoutAnimatedText,
    hasActiveOutline,
    activeColor,
    placeholderStyle,
    baseLabelTranslateX,
    baseLabelTranslateY,
    font: font2,
    fontSize,
    fontWeight,
    placeholderOpacity,
    wiggleOffsetX,
    labelScale,
    topPosition,
    paddingOffset,
    placeholderColor,
    errorColor,
    labelTranslationXOffset
  } = props.labelProps;
  const labelTranslationX = {
    transform: [{
      translateX: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]
      })
    }]
  };
  const labelStyle = {
    ...font2,
    fontSize,
    fontWeight,
    transform: [{
      translateX: parentState.error.interpolate({
        inputRange: [0, 0.5, 1],
        outputRange: [0, parentState.value && error2 ? wiggleOffsetX : 0, 0]
      })
    }, {
      translateY: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [baseLabelTranslateY, 0]
      })
    }, {
      scale: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [labelScale, 1]
      })
    }]
  };
  return label2 ? /* @__PURE__ */ import_react32.default.createElement(Animated_default.View, {
    pointerEvents: "none",
    style: [StyleSheet_default2.absoluteFill, {
      opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1
    }, labelTranslationX]
  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({
    parentState,
    labelStyle,
    labelProps: props.labelProps
  }), /* @__PURE__ */ import_react32.default.createElement(AnimatedText_default, {
    onLayout: onLayoutAnimatedText,
    style: [placeholderStyle, {
      top: topPosition
    }, labelStyle, paddingOffset || {}, {
      color: activeColor,
      opacity: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [hasActiveOutline ? 1 : 0, 0]
      })
    }],
    numberOfLines: 1
  }, label2), /* @__PURE__ */ import_react32.default.createElement(AnimatedText_default, {
    style: [placeholderStyle, {
      top: topPosition
    }, labelStyle, paddingOffset, {
      color: error2 && errorColor ? errorColor : placeholderColor,
      opacity: placeholderOpacity
    }],
    numberOfLines: 1
  }, label2)) : null;
};
var InputLabel_default = InputLabel;

// node_modules/react-native-paper/lib/module/components/TextInput/Label/LabelBackground.js
var React117 = __toModule(require_react());
var LabelBackground = ({
  parentState,
  labelProps: {
    placeholderStyle,
    baseLabelTranslateX,
    topPosition,
    hasActiveOutline,
    label: label2,
    backgroundColor
  },
  labelStyle
}) => {
  const hasFocus = hasActiveOutline || parentState.value;
  const opacity3 = parentState.labeled.interpolate({
    inputRange: [0, 1],
    outputRange: [hasFocus ? 1 : 0, 0]
  });
  const labelTranslationX = {
    transform: [{
      translateX: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [-baseLabelTranslateX, 0]
      })
    }]
  };
  return label2 ? [/* @__PURE__ */ React117.createElement(Animated_default.View, {
    key: "labelBackground-view",
    pointerEvents: "none",
    style: [StyleSheet_default2.absoluteFill, styles79.view, {
      backgroundColor,
      opacity: opacity3
    }, labelTranslationX]
  }), /* @__PURE__ */ React117.createElement(AnimatedText_default, {
    key: "labelBackground-text",
    style: [placeholderStyle, labelStyle, styles79.outlinedLabel, {
      top: topPosition + 1,
      backgroundColor,
      opacity: opacity3,
      transform: [...labelStyle.transform, {
        scaleY: parentState.labeled.interpolate({
          inputRange: [0, 1],
          outputRange: [0.2, 1]
        })
      }]
    }],
    numberOfLines: 1
  }, label2)] : null;
};
var LabelBackground_default = LabelBackground;
var styles79 = StyleSheet_default2.create({
  view: {
    position: "absolute",
    top: 6,
    left: 10,
    width: 8,
    height: 2
  },
  outlinedLabel: {
    position: "absolute",
    left: 18,
    paddingHorizontal: 0,
    color: "transparent"
  }
});

// node_modules/react-native-paper/lib/module/components/TextInput/helpers.js
var calculateLabelTopPosition = (labelHeight, height = 0, optionalPadding = 0) => {
  const customHeight = height > 0 ? height : 0;
  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);
};
var calculateInputHeight = (labelHeight, height = 0, minHeight) => {
  const finalHeight = height > 0 ? height : labelHeight;
  if (height > 0)
    return height;
  return finalHeight < minHeight ? minHeight : finalHeight;
};
var calculatePadding = (props) => {
  const {
    height,
    multiline = false
  } = props;
  let result = 0;
  if (multiline) {
    if (height && multiline) {
      result = calculateTextAreaPadding(props);
    } else {
      result = calculateInputPadding(props);
    }
  }
  return Math.max(0, result);
};
var calculateTextAreaPadding = (props) => {
  const {
    dense
  } = props;
  return dense ? 10 : 20;
};
var calculateInputPadding = ({
  topPosition,
  fontSize,
  multiline,
  scale: scale2,
  dense,
  offset,
  isAndroid
}) => {
  const refFontSize = scale2 * fontSize;
  let result = Math.floor(topPosition / 2);
  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale2 < 1 ? offset / 2 : 0);
  if (multiline && isAndroid)
    result = Math.min(dense ? offset / 2 : offset, result);
  return result;
};
var adjustPaddingOut = ({
  pad,
  multiline,
  label: label2,
  scale: scale2,
  height,
  fontSize,
  dense,
  offset,
  isAndroid
}) => {
  const refFontSize = scale2 * fontSize;
  let result = pad;
  if (height) {
    return {
      paddingTop: Math.max(0, (height - fontSize) / 2),
      paddingBottom: Math.max(0, (height - fontSize) / 2)
    };
  }
  if (!isAndroid && multiline) {
    if (dense) {
      if (label2) {
        result += scale2 < 1 ? Math.min(offset, refFontSize / 2 * scale2) : 0;
      } else {
        result += 0;
      }
    }
    if (!dense) {
      if (label2) {
        result += scale2 < 1 ? Math.min(offset, refFontSize * scale2) : Math.min(offset / 2, refFontSize * scale2);
      } else {
        result += scale2 < 1 ? Math.min(offset / 2, refFontSize * scale2) : 0;
      }
    }
    result = Math.floor(result);
  }
  return {
    paddingTop: result,
    paddingBottom: result
  };
};
var adjustPaddingFlat = ({
  pad,
  scale: scale2,
  multiline,
  label: label2,
  height,
  offset,
  dense,
  fontSize,
  isAndroid,
  styles: styles152
}) => {
  let result = pad;
  let topResult = result;
  let bottomResult = result;
  const {
    paddingTop,
    paddingBottom
  } = styles152;
  const refFontSize = scale2 * fontSize;
  if (!multiline) {
    if (label2) {
      return {
        paddingTop,
        paddingBottom
      };
    }
    return {
      paddingTop: result,
      paddingBottom: result
    };
  }
  if (label2) {
    topResult = paddingTop;
    bottomResult = paddingBottom;
    if (!isAndroid) {
      if (dense) {
        topResult += scale2 < 1 ? Math.min(result, refFontSize * scale2) - result / 2 : Math.min(result, refFontSize * scale2) - result / 2;
      }
      if (!dense) {
        topResult += scale2 < 1 ? Math.min(offset / 2, refFontSize * scale2) : Math.min(result, refFontSize * scale2) - offset / 2;
      }
    }
    topResult = Math.floor(topResult);
  } else {
    if (height) {
      return {
        paddingTop: Math.max(0, (height - fontSize) / 2),
        paddingBottom: Math.max(0, (height - fontSize) / 2)
      };
    }
    if (!isAndroid) {
      if (dense) {
        result += scale2 < 1 ? Math.min(offset / 2, fontSize / 2 * scale2) : Math.min(offset / 2, scale2);
      }
      if (!dense) {
        result += scale2 < 1 ? Math.min(offset, fontSize * scale2) : Math.min(fontSize, offset / 2 * scale2);
      }
      result = Math.floor(result);
      topResult = result;
      bottomResult = result;
    }
  }
  return {
    paddingTop: Math.max(0, topResult),
    paddingBottom: Math.max(0, bottomResult)
  };
};
var interpolatePlaceholder = (labeled, hasActiveOutline) => labeled.interpolate({
  inputRange: [0, 1],
  outputRange: [hasActiveOutline ? 0 : 1, 1]
});
function calculateFlatAffixTopPosition({
  height,
  paddingTop,
  paddingBottom,
  affixHeight
}) {
  const inputHeightWithoutPadding = height - paddingTop - paddingBottom;
  const halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;
  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;
}
function calculateOutlinedIconAndAffixTopPosition({
  height,
  affixHeight,
  labelYOffset
}) {
  return (height - affixHeight + labelYOffset) / 2;
}
var calculateFlatInputHorizontalPadding = ({
  adornmentConfig
}) => {
  let paddingLeft2 = LABEL_PADDING_HORIZONTAL;
  let paddingRight2 = LABEL_PADDING_HORIZONTAL;
  adornmentConfig.forEach(({
    type,
    side
  }) => {
    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {
      paddingLeft2 = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
    } else if (side === AdornmentSide.Right) {
      if (type === AdornmentType.Affix) {
        paddingRight2 = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
      } else if (type === AdornmentType.Icon) {
        paddingRight2 = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
      }
    }
  });
  return {
    paddingLeft: paddingLeft2,
    paddingRight: paddingRight2
  };
};

// node_modules/react-native-paper/lib/module/components/TextInput/TextInputOutlined.js
function _defineProperty29(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;
var LABEL_PADDING_TOP = 8;
var MIN_HEIGHT = 64;
var MIN_DENSE_HEIGHT = 48;
var INPUT_PADDING_HORIZONTAL = 14;
var TextInputOutlined = class extends React118.Component {
  render() {
    const {
      disabled,
      editable,
      label: label2,
      error: error2,
      selectionColor,
      underlineColor,
      dense,
      style,
      theme: theme2,
      render: render3,
      multiline,
      parentState,
      innerRef,
      onFocus,
      forceFocus,
      onBlur,
      onChangeText,
      onLayoutAnimatedText,
      onLeftAffixLayoutChange,
      onRightAffixLayoutChange,
      left: left2,
      right: right2,
      placeholderTextColor,
      ...rest
    } = this.props;
    const adornmentConfig = getAdornmentConfig({
      left: left2,
      right: right2
    });
    const {
      colors,
      fonts
    } = theme2;
    const font2 = fonts.regular;
    const hasActiveOutline = parentState.focused || error2;
    const {
      fontSize: fontSizeStyle,
      fontWeight,
      height,
      backgroundColor = colors.background,
      textAlign,
      ...viewStyle
    } = StyleSheet_default2.flatten(style) || {};
    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;
    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;
    if (disabled) {
      inputTextColor = activeColor = (0, import_color36.default)(colors.text).alpha(0.54).rgb().string();
      placeholderColor = outlineColor = colors.disabled;
    } else {
      inputTextColor = colors.text;
      activeColor = error2 ? colors.error : colors.primary;
      placeholderColor = outlineColor = colors.placeholder;
      errorColor = colors.error;
    }
    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;
    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;
    const labelWidth = parentState.labelLayout.width;
    const labelHeight = parentState.labelLayout.height;
    const labelHalfWidth = labelWidth / 2;
    const labelHalfHeight = labelHeight / 2;
    const baseLabelTranslateX = (I18nManager_default.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);
    let labelTranslationXOffset = 0;
    const isAdornmentLeftIcon = adornmentConfig.some(({
      side,
      type
    }) => side === AdornmentSide.Left && type === AdornmentType.Icon);
    if (isAdornmentLeftIcon) {
      labelTranslationXOffset = (I18nManager_default.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);
    }
    const minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;
    const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);
    const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);
    if (height && typeof height !== "number") {
      console.warn("Currently we support only numbers in height prop");
    }
    const paddingSettings = {
      height: height ? +height : null,
      labelHalfHeight,
      offset: LABEL_PADDING_TOP,
      multiline: multiline ? multiline : null,
      dense: dense ? dense : null,
      topPosition,
      fontSize,
      label: label2,
      scale: fontScale,
      isAndroid: Platform_default.OS === "android",
      styles: StyleSheet_default2.flatten(dense ? styles80.inputOutlinedDense : styles80.inputOutlined)
    };
    const pad = calculatePadding(paddingSettings);
    const paddingOut = adjustPaddingOut({
      ...paddingSettings,
      pad
    });
    const baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);
    const placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;
    const labelProps = {
      label: label2,
      onLayoutAnimatedText,
      placeholderOpacity,
      error: error2,
      placeholderStyle: styles80.placeholder,
      baseLabelTranslateY,
      baseLabelTranslateX,
      font: font2,
      fontSize,
      fontWeight,
      labelScale,
      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,
      topPosition,
      hasActiveOutline,
      activeColor,
      placeholderColor,
      backgroundColor,
      errorColor,
      labelTranslationXOffset
    };
    const minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);
    const {
      leftLayout,
      rightLayout
    } = parentState;
    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({
      height: minHeight,
      affixHeight: leftLayout.height || 0,
      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET
    });
    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({
      height: minHeight,
      affixHeight: rightLayout.height || 0,
      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET
    });
    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({
      height: minHeight,
      affixHeight: ADORNMENT_SIZE,
      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET
    });
    const rightAffixWidth = right2 ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;
    const leftAffixWidth = left2 ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;
    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({
      adornmentConfig,
      rightAffixWidth,
      leftAffixWidth,
      mode: "outlined"
    });
    const affixTopPosition = {
      [AdornmentSide.Left]: leftAffixTopPosition,
      [AdornmentSide.Right]: rightAffixTopPosition
    };
    const onAffixChange = {
      [AdornmentSide.Left]: onLeftAffixLayoutChange,
      [AdornmentSide.Right]: onRightAffixLayoutChange
    };
    let adornmentProps = {
      adornmentConfig,
      forceFocus,
      topPosition: {
        [AdornmentType.Icon]: iconTopPosition,
        [AdornmentType.Affix]: affixTopPosition
      },
      onAffixChange,
      isTextInputFocused: parentState.focused
    };
    if (adornmentConfig.length) {
      adornmentProps = {
        ...adornmentProps,
        left: left2,
        right: right2,
        textStyle: {
          ...font2,
          fontSize,
          fontWeight
        },
        visible: this.props.parentState.labeled
      };
    }
    return /* @__PURE__ */ React118.createElement(View_default, {
      style: viewStyle
    }, /* @__PURE__ */ React118.createElement(View_default, null, /* @__PURE__ */ React118.createElement(Outline, {
      theme: theme2,
      hasActiveOutline,
      activeColor,
      outlineColor,
      backgroundColor
    }), /* @__PURE__ */ React118.createElement(View_default, {
      style: [styles80.labelContainer, {
        paddingTop: LABEL_PADDING_TOP,
        minHeight
      }]
    }, /* @__PURE__ */ React118.createElement(InputLabel_default, {
      parentState,
      labelProps,
      labelBackground: LabelBackground_default
    }), render3 === null || render3 === void 0 ? void 0 : render3({
      ...rest,
      ref: innerRef,
      onChangeText,
      placeholder: label2 ? parentState.placeholder : this.props.placeholder,
      placeholderTextColor: placeholderTextColor || placeholderColor,
      editable: !disabled && editable,
      selectionColor: typeof selectionColor === "undefined" ? activeColor : selectionColor,
      onFocus,
      onBlur,
      underlineColorAndroid: "transparent",
      multiline,
      style: [styles80.input, !multiline || multiline && height ? {
        height: inputHeight
      } : {}, paddingOut, {
        ...font2,
        fontSize,
        fontWeight,
        color: inputTextColor,
        textAlignVertical: multiline ? "top" : "center",
        textAlign: textAlign ? textAlign : I18nManager_default.isRTL ? "right" : "left"
      }, adornmentStyleAdjustmentForNativeInput]
    })), /* @__PURE__ */ React118.createElement(TextInputAdornment_default, adornmentProps)));
  }
};
_defineProperty29(TextInputOutlined, "defaultProps", {
  disabled: false,
  error: false,
  multiline: false,
  editable: true,
  render: (props) => /* @__PURE__ */ React118.createElement(TextInput_default, props)
});
var TextInputOutlined_default = TextInputOutlined;
var Outline = ({
  theme: theme2,
  hasActiveOutline,
  activeColor,
  outlineColor,
  backgroundColor
}) => /* @__PURE__ */ React118.createElement(View_default, {
  pointerEvents: "none",
  style: [
    styles80.outline,
    {
      backgroundColor,
      borderRadius: theme2.roundness,
      borderWidth: hasActiveOutline ? 2 : 1,
      borderColor: hasActiveOutline ? activeColor : outlineColor
    }
  ]
});
var styles80 = StyleSheet_default2.create({
  placeholder: {
    position: "absolute",
    left: 0,
    paddingHorizontal: INPUT_PADDING_HORIZONTAL
  },
  outline: {
    position: "absolute",
    left: 0,
    right: 0,
    top: 6,
    bottom: 0
  },
  labelContainer: {
    paddingBottom: 0
  },
  input: {
    flexGrow: 1,
    paddingHorizontal: INPUT_PADDING_HORIZONTAL,
    margin: 0,
    zIndex: 1
  },
  inputOutlined: {
    paddingTop: 8,
    paddingBottom: 8
  },
  inputOutlinedDense: {
    paddingTop: 4,
    paddingBottom: 4
  }
});

// node_modules/react-native-paper/lib/module/components/TextInput/TextInputFlat.js
var React119 = __toModule(require_react());
var import_color37 = __toModule(require_color());
function _defineProperty30(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var MINIMIZED_LABEL_Y_OFFSET = -18;
var LABEL_PADDING_TOP2 = 30;
var LABEL_PADDING_TOP_DENSE = 24;
var MIN_HEIGHT2 = 64;
var MIN_DENSE_HEIGHT_WL = 52;
var MIN_DENSE_HEIGHT2 = 40;
var TextInputFlat = class extends React119.Component {
  render() {
    const {
      disabled,
      editable,
      label: label2,
      error: error2,
      selectionColor,
      underlineColor,
      dense,
      style,
      theme: theme2,
      render: render3,
      multiline,
      parentState,
      innerRef,
      onFocus,
      forceFocus,
      onBlur,
      onChangeText,
      onLayoutAnimatedText,
      onLeftAffixLayoutChange,
      onRightAffixLayoutChange,
      left: left2,
      right: right2,
      placeholderTextColor,
      ...rest
    } = this.props;
    const {
      colors,
      fonts
    } = theme2;
    const font2 = fonts.regular;
    const hasActiveOutline = parentState.focused || error2;
    const {
      fontSize: fontSizeStyle,
      fontWeight,
      height,
      paddingHorizontal,
      textAlign,
      ...viewStyle
    } = StyleSheet_default2.flatten(style) || {};
    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;
    const isPaddingHorizontalPassed = paddingHorizontal !== void 0 && typeof paddingHorizontal === "number";
    const adornmentConfig = getAdornmentConfig({
      left: left2,
      right: right2
    });
    let {
      paddingLeft: paddingLeft2,
      paddingRight: paddingRight2
    } = calculateFlatInputHorizontalPadding({
      adornmentConfig
    });
    if (isPaddingHorizontalPassed) {
      paddingLeft2 = paddingHorizontal;
      paddingRight2 = paddingHorizontal;
    }
    const {
      leftLayout,
      rightLayout
    } = parentState;
    const rightAffixWidth = right2 ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;
    const leftAffixWidth = left2 ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;
    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({
      adornmentConfig,
      rightAffixWidth,
      leftAffixWidth,
      paddingHorizontal,
      inputOffset: FLAT_INPUT_OFFSET,
      mode: InputMode.Flat
    });
    let inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;
    if (disabled) {
      inputTextColor = activeColor = (0, import_color37.default)(colors.text).alpha(0.54).rgb().string();
      placeholderColor = colors.disabled;
      underlineColorCustom = "transparent";
    } else {
      inputTextColor = colors.text;
      activeColor = error2 ? colors.error : colors.primary;
      placeholderColor = colors.placeholder;
      errorColor = colors.error;
      underlineColorCustom = underlineColor || colors.disabled;
    }
    const containerStyle = {
      backgroundColor: theme2.dark ? (0, import_color37.default)(colors.background).lighten(0.24).rgb().string() : (0, import_color37.default)(colors.background).darken(0.06).rgb().string(),
      borderTopLeftRadius: theme2.roundness,
      borderTopRightRadius: theme2.roundness
    };
    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;
    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;
    const labelWidth = parentState.labelLayout.width;
    const labelHeight = parentState.labelLayout.height;
    const labelHalfWidth = labelWidth / 2;
    const labelHalfHeight = labelHeight / 2;
    const baseLabelTranslateX = (I18nManager_default.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager_default.isRTL ? -1 : 1) * paddingLeft2;
    const minInputHeight = dense ? (label2 ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT2) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT2 - LABEL_PADDING_TOP2;
    const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);
    const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);
    if (height && typeof height !== "number") {
      console.warn("Currently we support only numbers in height prop");
    }
    const paddingSettings = {
      height: height ? +height : null,
      labelHalfHeight,
      offset: FLAT_INPUT_OFFSET,
      multiline: multiline ? multiline : null,
      dense: dense ? dense : null,
      topPosition,
      fontSize,
      label: label2,
      scale: fontScale,
      isAndroid: Platform_default.OS === "android",
      styles: StyleSheet_default2.flatten(dense ? styles81.inputFlatDense : styles81.inputFlat)
    };
    const pad = calculatePadding(paddingSettings);
    const paddingFlat = adjustPaddingFlat({
      ...paddingSettings,
      pad
    });
    const baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);
    const placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;
    const minHeight = height || (dense ? label2 ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT2 : MIN_HEIGHT2);
    const flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP2 : 0);
    const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;
    const leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition({
      height: flatHeight,
      ...paddingFlat,
      affixHeight: leftLayout.height
    }) : null;
    const rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition({
      height: flatHeight,
      ...paddingFlat,
      affixHeight: rightLayout.height
    }) : null;
    const labelProps = {
      label: label2,
      onLayoutAnimatedText,
      placeholderOpacity,
      error: error2,
      placeholderStyle: styles81.placeholder,
      baseLabelTranslateY,
      baseLabelTranslateX,
      font: font2,
      fontSize,
      fontWeight,
      labelScale,
      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,
      topPosition,
      paddingOffset: {
        paddingLeft: paddingLeft2,
        paddingRight: paddingRight2
      },
      hasActiveOutline,
      activeColor,
      placeholderColor,
      errorColor
    };
    const affixTopPosition = {
      [AdornmentSide.Left]: leftAffixTopPosition,
      [AdornmentSide.Right]: rightAffixTopPosition
    };
    const onAffixChange = {
      [AdornmentSide.Left]: onLeftAffixLayoutChange,
      [AdornmentSide.Right]: onRightAffixLayoutChange
    };
    let adornmentProps = {
      paddingHorizontal,
      adornmentConfig,
      forceFocus,
      topPosition: {
        [AdornmentType.Affix]: affixTopPosition,
        [AdornmentType.Icon]: iconTopPosition
      },
      onAffixChange,
      isTextInputFocused: this.props.parentState.focused
    };
    if (adornmentConfig.length) {
      adornmentProps = {
        ...adornmentProps,
        left: left2,
        right: right2,
        textStyle: {
          ...font2,
          fontSize,
          fontWeight
        },
        visible: this.props.parentState.labeled
      };
    }
    return /* @__PURE__ */ React119.createElement(View_default, {
      style: [containerStyle, viewStyle]
    }, /* @__PURE__ */ React119.createElement(Underline, {
      parentState,
      underlineColorCustom,
      error: error2,
      colors,
      activeColor
    }), /* @__PURE__ */ React119.createElement(View_default, {
      style: [styles81.labelContainer, {
        minHeight
      }]
    }, /* @__PURE__ */ React119.createElement(InputLabel_default, {
      parentState,
      labelProps
    }), render3 === null || render3 === void 0 ? void 0 : render3({
      ...rest,
      ref: innerRef,
      onChangeText,
      placeholder: label2 ? parentState.placeholder : this.props.placeholder,
      placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,
      editable: !disabled && editable,
      selectionColor: typeof selectionColor === "undefined" ? activeColor : selectionColor,
      onFocus,
      onBlur,
      underlineColorAndroid: "transparent",
      multiline,
      style: [styles81.input, {
        paddingLeft: paddingLeft2,
        paddingRight: paddingRight2
      }, !multiline || multiline && height ? {
        height: flatHeight
      } : {}, paddingFlat, {
        ...font2,
        fontSize,
        fontWeight,
        color: inputTextColor,
        textAlignVertical: multiline ? "top" : "center",
        textAlign: textAlign ? textAlign : I18nManager_default.isRTL ? "right" : "left"
      }, adornmentStyleAdjustmentForNativeInput]
    })), /* @__PURE__ */ React119.createElement(TextInputAdornment_default, adornmentProps));
  }
};
_defineProperty30(TextInputFlat, "defaultProps", {
  disabled: false,
  error: false,
  multiline: false,
  editable: true,
  render: (props) => /* @__PURE__ */ React119.createElement(TextInput_default, props)
});
var TextInputFlat_default = TextInputFlat;
var Underline = ({
  parentState,
  error: error2,
  colors,
  activeColor,
  underlineColorCustom
}) => {
  let backgroundColor = parentState.focused ? activeColor : underlineColorCustom;
  if (error2)
    backgroundColor = colors.error;
  return /* @__PURE__ */ React119.createElement(Animated_default.View, {
    style: [styles81.underline, {
      backgroundColor,
      transform: [{
        scaleY: parentState.focused ? 1 : 0.5
      }]
    }]
  });
};
var styles81 = StyleSheet_default2.create({
  placeholder: {
    position: "absolute",
    left: 0
  },
  underline: {
    position: "absolute",
    left: 0,
    right: 0,
    bottom: 0,
    height: 2
  },
  labelContainer: {
    paddingTop: 0,
    paddingBottom: 0
  },
  input: {
    flexGrow: 1,
    margin: 0,
    zIndex: 1
  },
  inputFlat: {
    paddingTop: 24,
    paddingBottom: 4
  },
  inputFlatDense: {
    paddingTop: 22,
    paddingBottom: 2
  }
});

// node_modules/react-native-paper/lib/module/components/TextInput/TextInput.js
function _extends74() {
  _extends74 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends74.apply(this, arguments);
}
function _defineProperty31(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var BLUR_ANIMATION_DURATION = 180;
var FOCUS_ANIMATION_DURATION = 150;
var TextInput2 = class extends React120.Component {
  constructor(..._args) {
    super(..._args);
    _defineProperty31(this, "validInputValue", this.props.value !== void 0 ? this.props.value : this.props.defaultValue);
    _defineProperty31(this, "state", {
      labeled: new Animated_default.Value(this.validInputValue ? 0 : 1),
      error: new Animated_default.Value(this.props.error ? 1 : 0),
      focused: false,
      placeholder: "",
      value: this.validInputValue,
      labelLayout: {
        measured: false,
        width: 0,
        height: 0
      },
      leftLayout: {
        width: null,
        height: null
      },
      rightLayout: {
        width: null,
        height: null
      }
    });
    _defineProperty31(this, "ref", void 0);
    _defineProperty31(this, "showPlaceholder", () => {
      if (this.timer) {
        clearTimeout(this.timer);
      }
      this.timer = setTimeout(() => this.setState({
        placeholder: this.props.placeholder
      }), 50);
    });
    _defineProperty31(this, "hidePlaceholder", () => this.setState({
      placeholder: ""
    }));
    _defineProperty31(this, "timer", void 0);
    _defineProperty31(this, "root", void 0);
    _defineProperty31(this, "showError", () => {
      const {
        scale: scale2
      } = this.props.theme.animation;
      Animated_default.timing(this.state.error, {
        toValue: 1,
        duration: FOCUS_ANIMATION_DURATION * scale2,
        useNativeDriver: Platform_default.select({
          ios: false,
          default: true
        })
      }).start();
    });
    _defineProperty31(this, "hideError", () => {
      const {
        scale: scale2
      } = this.props.theme.animation;
      Animated_default.timing(this.state.error, {
        toValue: 0,
        duration: BLUR_ANIMATION_DURATION * scale2,
        useNativeDriver: Platform_default.select({
          ios: false,
          default: true
        })
      }).start();
    });
    _defineProperty31(this, "restoreLabel", () => {
      const {
        scale: scale2
      } = this.props.theme.animation;
      Animated_default.timing(this.state.labeled, {
        toValue: 1,
        duration: FOCUS_ANIMATION_DURATION * scale2,
        useNativeDriver: Platform_default.select({
          ios: false,
          default: true
        })
      }).start();
    });
    _defineProperty31(this, "minimizeLabel", () => {
      const {
        scale: scale2
      } = this.props.theme.animation;
      Animated_default.timing(this.state.labeled, {
        toValue: 0,
        duration: BLUR_ANIMATION_DURATION * scale2,
        useNativeDriver: Platform_default.select({
          ios: false,
          default: true
        })
      }).start();
    });
    _defineProperty31(this, "onLeftAffixLayoutChange", (event4) => {
      this.setState({
        leftLayout: {
          height: event4.nativeEvent.layout.height,
          width: event4.nativeEvent.layout.width
        }
      });
    });
    _defineProperty31(this, "onRightAffixLayoutChange", (event4) => {
      this.setState({
        rightLayout: {
          width: event4.nativeEvent.layout.width,
          height: event4.nativeEvent.layout.height
        }
      });
    });
    _defineProperty31(this, "handleFocus", (args) => {
      if (this.props.disabled || !this.props.editable) {
        return;
      }
      this.setState({
        focused: true
      });
      if (this.props.onFocus) {
        this.props.onFocus(args);
      }
    });
    _defineProperty31(this, "handleBlur", (args) => {
      if (!this.props.editable) {
        return;
      }
      this.setState({
        focused: false
      });
      if (this.props.onBlur) {
        this.props.onBlur(args);
      }
    });
    _defineProperty31(this, "handleChangeText", (value) => {
      if (!this.props.editable) {
        return;
      }
      this.setState({
        value
      });
      this.props.onChangeText && this.props.onChangeText(value);
    });
    _defineProperty31(this, "handleLayoutAnimatedText", (e) => {
      this.setState({
        labelLayout: {
          width: e.nativeEvent.layout.width,
          height: e.nativeEvent.layout.height,
          measured: true
        }
      });
    });
    _defineProperty31(this, "forceFocus", () => {
      var _this$root;
      return (_this$root = this.root) === null || _this$root === void 0 ? void 0 : _this$root.focus();
    });
  }
  static getDerivedStateFromProps(nextProps, prevState) {
    return {
      value: typeof nextProps.value !== "undefined" ? nextProps.value : prevState.value
    };
  }
  componentDidUpdate(prevProps, prevState) {
    const isFocusChanged = prevState.focused !== this.state.focused;
    const isValueChanged = prevState.value !== this.state.value;
    const isLabelLayoutChanged = prevState.labelLayout !== this.state.labelLayout;
    const isLabelChanged = prevProps.label !== this.props.label;
    const isErrorChanged = prevProps.error !== this.props.error;
    if (isFocusChanged || isValueChanged || isLabelLayoutChanged) {
      if (this.state.value || this.state.focused) {
        this.minimizeLabel();
      } else {
        this.restoreLabel();
      }
    }
    if (isFocusChanged || isLabelChanged) {
      if (this.state.focused || !this.props.label) {
        this.showPlaceholder();
      } else {
        this.hidePlaceholder();
      }
    }
    if (isErrorChanged) {
      if (this.props.error) {
        this.showError();
      } else {
        this.hideError();
      }
    }
  }
  componentWillUnmount() {
    if (this.timer) {
      clearTimeout(this.timer);
    }
  }
  setNativeProps(args) {
    return this.root && this.root.setNativeProps(args);
  }
  isFocused() {
    return this.root && this.root.isFocused();
  }
  clear() {
    return this.root && this.root.clear();
  }
  focus() {
    return this.root && this.root.focus();
  }
  blur() {
    return this.root && this.root.blur();
  }
  render() {
    const {
      mode,
      ...rest
    } = this.props;
    return mode === "outlined" ? /* @__PURE__ */ React120.createElement(TextInputOutlined_default, _extends74({}, rest, {
      value: this.state.value,
      parentState: this.state,
      innerRef: (ref) => {
        this.root = ref;
      },
      onFocus: this.handleFocus,
      forceFocus: this.forceFocus,
      onBlur: this.handleBlur,
      onChangeText: this.handleChangeText,
      onLayoutAnimatedText: this.handleLayoutAnimatedText,
      onLeftAffixLayoutChange: this.onLeftAffixLayoutChange,
      onRightAffixLayoutChange: this.onRightAffixLayoutChange
    })) : /* @__PURE__ */ React120.createElement(TextInputFlat_default, _extends74({}, rest, {
      value: this.state.value,
      parentState: this.state,
      innerRef: (ref) => {
        this.root = ref;
      },
      onFocus: this.handleFocus,
      forceFocus: this.forceFocus,
      onBlur: this.handleBlur,
      onChangeText: this.handleChangeText,
      onLayoutAnimatedText: this.handleLayoutAnimatedText,
      onLeftAffixLayoutChange: this.onLeftAffixLayoutChange,
      onRightAffixLayoutChange: this.onRightAffixLayoutChange
    }));
  }
};
_defineProperty31(TextInput2, "Icon", TextInputIcon_default);
_defineProperty31(TextInput2, "Affix", TextInputAffix_default);
_defineProperty31(TextInput2, "defaultProps", {
  mode: "flat",
  dense: false,
  disabled: false,
  error: false,
  multiline: false,
  editable: true,
  render: (props) => /* @__PURE__ */ React120.createElement(TextInput_default, props)
});
var TextInput_default2 = withTheme(TextInput2);

// node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButton.js
var React122 = __toModule(require_react());
var import_color38 = __toModule(require_color());

// node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButtonGroup.js
var React121 = __toModule(require_react());
var ToggleButtonGroupContext = /* @__PURE__ */ React121.createContext(null);
var ToggleButtonGroup = ({
  value,
  onValueChange,
  children
}) => /* @__PURE__ */ React121.createElement(ToggleButtonGroupContext.Provider, {
  value: {
    value,
    onValueChange
  }
}, children);
ToggleButtonGroup.displayName = "ToggleButton.Group";
var ToggleButtonGroup_default = ToggleButtonGroup;

// node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButton.js
function _extends75() {
  _extends75 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends75.apply(this, arguments);
}
var ToggleButton = ({
  icon,
  size,
  theme: theme2,
  accessibilityLabel,
  disabled,
  style,
  value,
  status,
  onPress,
  ...rest
}) => {
  const borderRadius = theme2.roundness;
  return /* @__PURE__ */ React122.createElement(ToggleButtonGroupContext.Consumer, null, (context) => {
    let backgroundColor;
    const checked = context && context.value === value || status === "checked";
    if (checked) {
      backgroundColor = theme2.dark ? "rgba(255, 255, 255, .12)" : "rgba(0, 0, 0, .08)";
    } else {
      backgroundColor = "transparent";
    }
    return /* @__PURE__ */ React122.createElement(IconButton_default, _extends75({
      borderless: false,
      icon,
      onPress: (e) => {
        if (onPress) {
          onPress(e);
        }
        if (context) {
          context.onValueChange(!checked ? value : null);
        }
      },
      size,
      accessibilityLabel,
      accessibilityState: {
        disabled,
        selected: checked
      },
      disabled,
      style: [styles82.content, {
        backgroundColor,
        borderRadius,
        borderColor: (0, import_color38.default)(theme2.dark ? white : black).alpha(0.29).rgb().string()
      }, style]
    }, rest));
  });
};
var styles82 = StyleSheet_default2.create({
  content: {
    width: 42,
    height: 42,
    margin: 0
  }
});
var ToggleButton_default = withTheme(ToggleButton);
var ToggleButtonWithTheme = withTheme(ToggleButton);

// node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButtonRow.js
var React123 = __toModule(require_react());
var ToggleButtonRow = ({
  value,
  onValueChange,
  children,
  style
}) => {
  const count = React123.Children.count(children);
  return /* @__PURE__ */ React123.createElement(ToggleButtonGroup_default, {
    value,
    onValueChange
  }, /* @__PURE__ */ React123.createElement(View_default, {
    style: [styles83.row, style]
  }, React123.Children.map(children, (child2, i) => {
    if (child2 && child2.type === ToggleButton_default) {
      return /* @__PURE__ */ React123.cloneElement(child2, {
        style: [
          styles83.button,
          i === 0 ? styles83.first : i === count - 1 ? styles83.last : styles83.middle,
          child2.props.style
        ]
      });
    }
    return child2;
  })));
};
ToggleButtonRow.displayName = "ToggleButton.Row";
var styles83 = StyleSheet_default2.create({
  row: {
    flexDirection: "row"
  },
  button: {
    borderWidth: StyleSheet_default2.hairlineWidth
  },
  first: {
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0
  },
  middle: {
    borderRadius: 0,
    borderLeftWidth: 0
  },
  last: {
    borderLeftWidth: 0,
    borderTopLeftRadius: 0,
    borderBottomLeftRadius: 0
  }
});
var ToggleButtonRow_default = ToggleButtonRow;

// node_modules/react-native-paper/lib/module/components/ToggleButton/index.js
var ToggleButton2 = Object.assign(ToggleButton_default, {
  Group: ToggleButtonGroup_default,
  Row: ToggleButtonRow_default
});
var ToggleButton_default2 = ToggleButton2;

// node_modules/react-native-paper/lib/module/components/Typography/Headline.js
var React124 = __toModule(require_react());
function _extends76() {
  _extends76 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends76.apply(this, arguments);
}
var Headline = (props) => /* @__PURE__ */ React124.createElement(StyledText_default, _extends76({}, props, {
  alpha: 0.87,
  family: "regular",
  style: [styles84.text, props.style]
}));
var Headline_default = Headline;
var styles84 = StyleSheet_default2.create({
  text: {
    fontSize: 24,
    lineHeight: 32,
    marginVertical: 2,
    letterSpacing: 0
  }
});

// node_modules/react-native-paper/lib/module/components/Typography/Paragraph.js
var React125 = __toModule(require_react());
function _extends77() {
  _extends77 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends77.apply(this, arguments);
}
var Paragraph = (props) => /* @__PURE__ */ React125.createElement(StyledText_default, _extends77({}, props, {
  alpha: 0.87,
  family: "regular",
  style: [styles85.text, props.style]
}));
var Paragraph_default = Paragraph;
var styles85 = StyleSheet_default2.create({
  text: {
    fontSize: 14,
    lineHeight: 20,
    marginVertical: 2,
    letterSpacing: 0.25
  }
});

// node_modules/react-native-paper/lib/module/components/Typography/Subheading.js
var React126 = __toModule(require_react());
function _extends78() {
  _extends78 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends78.apply(this, arguments);
}
var Subheading = (props) => /* @__PURE__ */ React126.createElement(StyledText_default, _extends78({}, props, {
  alpha: 0.87,
  family: "regular",
  style: [styles86.text, props.style]
}));
var Subheading_default = Subheading;
var styles86 = StyleSheet_default2.create({
  text: {
    fontSize: 16,
    lineHeight: 24,
    marginVertical: 2,
    letterSpacing: 0.5
  }
});

// node_modules/@react-navigation/routers/lib/module/CommonActions.js
var CommonActions_exports = {};
__export(CommonActions_exports, {
  goBack: () => goBack,
  navigate: () => navigate,
  reset: () => reset,
  setParams: () => setParams
});
function goBack() {
  return {
    type: "GO_BACK"
  };
}
function navigate(...args) {
  if (typeof args[0] === "string") {
    return {
      type: "NAVIGATE",
      payload: {
        name: args[0],
        params: args[1]
      }
    };
  } else {
    const payload = args[0] || {};
    if (!payload.hasOwnProperty("key") && !payload.hasOwnProperty("name")) {
      throw new Error("You need to specify name or key when calling navigate with an object as the argument. See https://reactnavigation.org/docs/navigation-actions#navigate for usage.");
    }
    return {
      type: "NAVIGATE",
      payload
    };
  }
}
function reset(state) {
  return {
    type: "RESET",
    payload: state
  };
}
function setParams(params) {
  return {
    type: "SET_PARAMS",
    payload: {
      params
    }
  };
}

// node_modules/nanoid/non-secure/index.js
var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
var nanoid = (size = 21) => {
  let id2 = "";
  let i = size;
  while (i--) {
    id2 += urlAlphabet[Math.random() * 64 | 0];
  }
  return id2;
};

// node_modules/@react-navigation/routers/lib/module/BaseRouter.js
var BaseRouter = {
  getStateForAction(state, action) {
    switch (action.type) {
      case "SET_PARAMS": {
        const index = action.source ? state.routes.findIndex((r) => r.key === action.source) : state.index;
        if (index === -1) {
          return null;
        }
        return {
          ...state,
          routes: state.routes.map((r, i) => i === index ? {
            ...r,
            params: {
              ...r.params,
              ...action.payload.params
            }
          } : r)
        };
      }
      case "RESET": {
        const nextState = action.payload;
        if (nextState.routes.length === 0 || nextState.routes.some((route) => !state.routeNames.includes(route.name))) {
          return null;
        }
        if (nextState.stale === false) {
          if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some((name) => !state.routeNames.includes(name))) {
            return null;
          }
          return {
            ...nextState,
            routes: nextState.routes.map((route) => route.key ? route : {
              ...route,
              key: "".concat(route.name, "-").concat(nanoid())
            })
          };
        }
        return nextState;
      }
      default:
        return null;
    }
  },
  shouldActionChangeFocus(action) {
    return action.type === "NAVIGATE";
  }
};
var BaseRouter_default = BaseRouter;

// node_modules/@react-navigation/routers/lib/module/StackRouter.js
var StackActions = {
  replace(name, params) {
    return {
      type: "REPLACE",
      payload: {
        name,
        params
      }
    };
  },
  push(name, params) {
    return {
      type: "PUSH",
      payload: {
        name,
        params
      }
    };
  },
  pop(count = 1) {
    return {
      type: "POP",
      payload: {
        count
      }
    };
  },
  popToTop() {
    return {
      type: "POP_TO_TOP"
    };
  }
};
function StackRouter(options) {
  const router2 = {
    ...BaseRouter_default,
    type: "stack",
    getInitialState({
      routeNames,
      routeParamList
    }) {
      const initialRouteName = options.initialRouteName !== void 0 && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
      return {
        stale: false,
        type: "stack",
        key: "stack-".concat(nanoid()),
        index: 0,
        routeNames,
        routes: [{
          key: "".concat(initialRouteName, "-").concat(nanoid()),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        }]
      };
    },
    getRehydratedState(partialState, {
      routeNames,
      routeParamList
    }) {
      let state = partialState;
      if (state.stale === false) {
        return state;
      }
      const routes2 = state.routes.filter((route) => routeNames.includes(route.name)).map((route) => ({
        ...route,
        key: route.key || "".concat(route.name, "-").concat(nanoid()),
        params: routeParamList[route.name] !== void 0 ? {
          ...routeParamList[route.name],
          ...route.params
        } : route.params
      }));
      if (routes2.length === 0) {
        const initialRouteName = options.initialRouteName !== void 0 ? options.initialRouteName : routeNames[0];
        routes2.push({
          key: "".concat(initialRouteName, "-").concat(nanoid()),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }
      return {
        stale: false,
        type: "stack",
        key: "stack-".concat(nanoid()),
        index: routes2.length - 1,
        routeNames,
        routes: routes2
      };
    },
    getStateForRouteNamesChange(state, {
      routeNames,
      routeParamList
    }) {
      const routes2 = state.routes.filter((route) => routeNames.includes(route.name));
      if (routes2.length === 0) {
        const initialRouteName = options.initialRouteName !== void 0 && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
        routes2.push({
          key: "".concat(initialRouteName, "-").concat(nanoid()),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }
      return {
        ...state,
        routeNames,
        routes: routes2,
        index: Math.min(state.index, routes2.length - 1)
      };
    },
    getStateForRouteFocus(state, key3) {
      const index = state.routes.findIndex((r) => r.key === key3);
      if (index === -1 || index === state.index) {
        return state;
      }
      return {
        ...state,
        index,
        routes: state.routes.slice(0, index + 1)
      };
    },
    getStateForAction(state, action, options2) {
      const {
        routeParamList
      } = options2;
      switch (action.type) {
        case "REPLACE": {
          const index = action.target === state.key && action.source ? state.routes.findIndex((r) => r.key === action.source) : state.index;
          if (index === -1) {
            return null;
          }
          const {
            name,
            key: key3,
            params
          } = action.payload;
          if (!state.routeNames.includes(name)) {
            return null;
          }
          return {
            ...state,
            routes: state.routes.map((route, i) => i === index ? {
              key: key3 !== void 0 ? key3 : "".concat(name, "-").concat(nanoid()),
              name,
              params: routeParamList[name] !== void 0 ? {
                ...routeParamList[name],
                ...params
              } : params
            } : route)
          };
        }
        case "PUSH":
          if (state.routeNames.includes(action.payload.name)) {
            const getId = options2.routeGetIdList[action.payload.name];
            const id2 = getId === null || getId === void 0 ? void 0 : getId({
              params: action.payload.params
            });
            const route = action.payload.name && action.payload.key ? state.routes.find((route2) => route2.name === action.payload.name && route2.key === action.payload.key) : id2 ? state.routes.find((route2) => route2.name === action.payload.name && id2 === (getId === null || getId === void 0 ? void 0 : getId({
              params: route2.params
            }))) : void 0;
            let routes2;
            if (route) {
              routes2 = state.routes.filter((r) => r.key !== route.key);
              routes2.push({
                ...route,
                params: action.payload.params !== void 0 ? {
                  ...route.params,
                  ...action.payload.params
                } : route.params
              });
            } else {
              var _action$payload$key;
              routes2 = [...state.routes, {
                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : "".concat(action.payload.name, "-").concat(nanoid()),
                name: action.payload.name,
                params: routeParamList[action.payload.name] !== void 0 ? {
                  ...routeParamList[action.payload.name],
                  ...action.payload.params
                } : action.payload.params
              }];
            }
            return {
              ...state,
              index: routes2.length - 1,
              routes: routes2
            };
          }
          return null;
        case "POP": {
          const index = action.target === state.key && action.source ? state.routes.findIndex((r) => r.key === action.source) : state.index;
          if (index > 0) {
            const count = Math.max(index - action.payload.count + 1, 1);
            const routes2 = state.routes.slice(0, count).concat(state.routes.slice(index + 1));
            return {
              ...state,
              index: routes2.length - 1,
              routes: routes2
            };
          }
          return null;
        }
        case "POP_TO_TOP":
          return router2.getStateForAction(state, {
            type: "POP",
            payload: {
              count: state.routes.length - 1
            }
          }, options2);
        case "NAVIGATE":
          if (action.payload.name !== void 0 && !state.routeNames.includes(action.payload.name)) {
            return null;
          }
          if (action.payload.key || action.payload.name) {
            let index = -1;
            const getId = action.payload.key === void 0 && action.payload.name !== void 0 ? options2.routeGetIdList[action.payload.name] : void 0;
            const id2 = getId === null || getId === void 0 ? void 0 : getId({
              params: action.payload.params
            });
            if (id2) {
              index = state.routes.findIndex((route2) => route2.name === action.payload.name && id2 === (getId === null || getId === void 0 ? void 0 : getId({
                params: route2.params
              })));
            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === void 0 || state.routes[state.index].key === action.payload.key) {
              index = state.index;
            } else {
              for (let i = state.routes.length - 1; i >= 0; i--) {
                if (state.routes[i].name === action.payload.name && action.payload.key === void 0 || state.routes[i].key === action.payload.key) {
                  index = i;
                  break;
                }
              }
            }
            if (index === -1 && action.payload.key && action.payload.name === void 0) {
              return null;
            }
            if (index === -1 && action.payload.name !== void 0) {
              var _action$payload$key2;
              const routes2 = [...state.routes, {
                key: (_action$payload$key2 = action.payload.key) !== null && _action$payload$key2 !== void 0 ? _action$payload$key2 : "".concat(action.payload.name, "-").concat(nanoid()),
                name: action.payload.name,
                params: routeParamList[action.payload.name] !== void 0 ? {
                  ...routeParamList[action.payload.name],
                  ...action.payload.params
                } : action.payload.params
              }];
              return {
                ...state,
                routes: routes2,
                index: routes2.length - 1
              };
            }
            const route = state.routes[index];
            let params;
            if (action.payload.merge === false) {
              params = routeParamList[route.name] !== void 0 ? {
                ...routeParamList[route.name],
                ...action.payload.params
              } : action.payload.params;
            } else {
              params = action.payload.params ? {
                ...route.params,
                ...action.payload.params
              } : route.params;
            }
            return {
              ...state,
              index,
              routes: [...state.routes.slice(0, index), params !== route.params ? {
                ...route,
                params
              } : state.routes[index]]
            };
          }
          return null;
        case "GO_BACK":
          if (state.index > 0) {
            return router2.getStateForAction(state, {
              type: "POP",
              payload: {
                count: 1
              },
              target: action.target,
              source: action.source
            }, options2);
          }
          return null;
        default:
          return BaseRouter_default.getStateForAction(state, action);
      }
    },
    actionCreators: StackActions
  };
  return router2;
}

// node_modules/@react-navigation/routers/lib/module/TabRouter.js
var TYPE_ROUTE = "route";
var TabActions = {
  jumpTo(name, params) {
    return {
      type: "JUMP_TO",
      payload: {
        name,
        params
      }
    };
  }
};
var getRouteHistory = (routes2, index, backBehavior, initialRouteName) => {
  const history3 = [{
    type: TYPE_ROUTE,
    key: routes2[index].key
  }];
  let initialRouteIndex;
  switch (backBehavior) {
    case "order":
      for (let i = index; i > 0; i--) {
        history3.unshift({
          type: TYPE_ROUTE,
          key: routes2[i - 1].key
        });
      }
      break;
    case "firstRoute":
      if (index !== 0) {
        history3.unshift({
          type: TYPE_ROUTE,
          key: routes2[0].key
        });
      }
      break;
    case "initialRoute":
      initialRouteIndex = routes2.findIndex((route) => route.name === initialRouteName);
      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;
      if (index !== initialRouteIndex) {
        history3.unshift({
          type: TYPE_ROUTE,
          key: routes2[initialRouteIndex].key
        });
      }
      break;
    case "history":
      break;
  }
  return history3;
};
var changeIndex = (state, index, backBehavior, initialRouteName) => {
  let history3;
  if (backBehavior === "history") {
    const currentKey = state.routes[index].key;
    history3 = state.history.filter((it) => it.type === "route" ? it.key !== currentKey : false).concat({
      type: TYPE_ROUTE,
      key: currentKey
    });
  } else {
    history3 = getRouteHistory(state.routes, index, backBehavior, initialRouteName);
  }
  return {
    ...state,
    index,
    history: history3
  };
};
function TabRouter({
  initialRouteName,
  backBehavior = "history"
}) {
  const router2 = {
    ...BaseRouter_default,
    type: "tab",
    getInitialState({
      routeNames,
      routeParamList
    }) {
      const index = initialRouteName !== void 0 && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;
      const routes2 = routeNames.map((name) => ({
        name,
        key: "".concat(name, "-").concat(nanoid()),
        params: routeParamList[name]
      }));
      const history3 = getRouteHistory(routes2, index, backBehavior, initialRouteName);
      return {
        stale: false,
        type: "tab",
        key: "tab-".concat(nanoid()),
        index,
        routeNames,
        history: history3,
        routes: routes2
      };
    },
    getRehydratedState(partialState, {
      routeNames,
      routeParamList
    }) {
      var _state$routes, _state$index, _state$history$filter, _state$history;
      let state = partialState;
      if (state.stale === false) {
        return state;
      }
      const routes2 = routeNames.map((name) => {
        const route = state.routes.find((r) => r.name === name);
        return {
          ...route,
          name,
          key: route && route.name === name && route.key ? route.key : "".concat(name, "-").concat(nanoid()),
          params: routeParamList[name] !== void 0 ? {
            ...routeParamList[name],
            ...route ? route.params : void 0
          } : route ? route.params : void 0
        };
      });
      const index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes2.length - 1);
      const history3 = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter((it) => routes2.find((r) => r.key === it.key))) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];
      return changeIndex({
        stale: false,
        type: "tab",
        key: "tab-".concat(nanoid()),
        index,
        routeNames,
        history: history3,
        routes: routes2
      }, index, backBehavior, initialRouteName);
    },
    getStateForRouteNamesChange(state, {
      routeNames,
      routeParamList
    }) {
      const routes2 = routeNames.map((name) => state.routes.find((r) => r.name === name) || {
        name,
        key: "".concat(name, "-").concat(nanoid()),
        params: routeParamList[name]
      });
      const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));
      let history3 = state.history.filter((it) => it.type !== "route" || routes2.find((r) => r.key === it.key));
      if (!history3.length) {
        history3 = getRouteHistory(routes2, index, backBehavior, initialRouteName);
      }
      return {
        ...state,
        history: history3,
        routeNames,
        routes: routes2,
        index
      };
    },
    getStateForRouteFocus(state, key3) {
      const index = state.routes.findIndex((r) => r.key === key3);
      if (index === -1 || index === state.index) {
        return state;
      }
      return changeIndex(state, index, backBehavior, initialRouteName);
    },
    getStateForAction(state, action, {
      routeParamList
    }) {
      switch (action.type) {
        case "JUMP_TO":
        case "NAVIGATE": {
          let index = -1;
          if (action.type === "NAVIGATE" && action.payload.key) {
            index = state.routes.findIndex((route) => route.key === action.payload.key);
          } else {
            index = state.routes.findIndex((route) => route.name === action.payload.name);
          }
          if (index === -1) {
            return null;
          }
          return changeIndex({
            ...state,
            routes: action.payload.params !== void 0 ? state.routes.map((route, i) => {
              if (i !== index) {
                return route;
              }
              let params;
              if (action.type === "NAVIGATE" && action.payload.merge === false) {
                params = routeParamList[route.name] !== void 0 ? {
                  ...routeParamList[route.name],
                  ...action.payload.params
                } : action.payload.params;
              } else {
                params = action.payload.params ? {
                  ...route.params,
                  ...action.payload.params
                } : route.params;
              }
              return params !== route.params ? {
                ...route,
                params
              } : route;
            }) : state.routes
          }, index, backBehavior, initialRouteName);
        }
        case "GO_BACK": {
          if (state.history.length === 1) {
            return null;
          }
          const previousKey = state.history[state.history.length - 2].key;
          const index = state.routes.findIndex((route) => route.key === previousKey);
          if (index === -1) {
            return null;
          }
          return {
            ...state,
            history: state.history.slice(0, -1),
            index
          };
        }
        default:
          return BaseRouter_default.getStateForAction(state, action);
      }
    },
    shouldActionChangeFocus(action) {
      return action.type === "NAVIGATE";
    },
    actionCreators: TabActions
  };
  return router2;
}

// node_modules/@react-navigation/routers/lib/module/DrawerRouter.js
var DrawerActions = {
  ...TabActions,
  openDrawer() {
    return {
      type: "OPEN_DRAWER"
    };
  },
  closeDrawer() {
    return {
      type: "CLOSE_DRAWER"
    };
  },
  toggleDrawer() {
    return {
      type: "TOGGLE_DRAWER"
    };
  }
};
var isDrawerOpen = (state) => {
  var _state$history;
  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some((it) => it.type === "drawer"));
};
var openDrawer = (state) => {
  if (isDrawerOpen(state)) {
    return state;
  }
  return {
    ...state,
    history: [...state.history, {
      type: "drawer"
    }]
  };
};
var closeDrawer = (state) => {
  if (!isDrawerOpen(state)) {
    return state;
  }
  return {
    ...state,
    history: state.history.filter((it) => it.type !== "drawer")
  };
};
function DrawerRouter({
  openByDefault,
  ...rest
}) {
  const router2 = TabRouter(rest);
  return {
    ...router2,
    type: "drawer",
    getInitialState({
      routeNames,
      routeParamList,
      routeGetIdList
    }) {
      let state = router2.getInitialState({
        routeNames,
        routeParamList,
        routeGetIdList
      });
      if (openByDefault) {
        state = openDrawer(state);
      }
      return {
        ...state,
        stale: false,
        type: "drawer",
        key: "drawer-".concat(nanoid())
      };
    },
    getRehydratedState(partialState, {
      routeNames,
      routeParamList,
      routeGetIdList
    }) {
      if (partialState.stale === false) {
        return partialState;
      }
      let state = router2.getRehydratedState(partialState, {
        routeNames,
        routeParamList,
        routeGetIdList
      });
      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {
        state = openDrawer(state);
      }
      return {
        ...state,
        type: "drawer",
        key: "drawer-".concat(nanoid())
      };
    },
    getStateForRouteFocus(state, key3) {
      const result = router2.getStateForRouteFocus(state, key3);
      if (openByDefault) {
        return openDrawer(result);
      }
      return closeDrawer(result);
    },
    getStateForAction(state, action, options) {
      switch (action.type) {
        case "OPEN_DRAWER":
          return openDrawer(state);
        case "CLOSE_DRAWER":
          return closeDrawer(state);
        case "TOGGLE_DRAWER":
          if (isDrawerOpen(state)) {
            return closeDrawer(state);
          }
          return openDrawer(state);
        case "GO_BACK":
          if (openByDefault) {
            if (!isDrawerOpen(state)) {
              return openDrawer(state);
            }
          } else {
            if (isDrawerOpen(state)) {
              return closeDrawer(state);
            }
          }
          return router2.getStateForAction(state, action, options);
        default:
          return router2.getStateForAction(state, action, options);
      }
    },
    actionCreators: DrawerActions
  };
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/BaseNavigationContainer.js
var React139 = __toModule(require_react());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/EnsureSingleNavigator.js
var React127 = __toModule(require_react());
var MULTIPLE_NAVIGATOR_ERROR = 'Another navigator is already registered for this container. You likely have multiple navigators under a single "NavigationContainer" or "Screen". Make sure each navigator is under a separate "Screen" container. See https://reactnavigation.org/docs/nesting-navigators for a guide on nesting.';
var SingleNavigatorContext = /* @__PURE__ */ React127.createContext(void 0);
function EnsureSingleNavigator({
  children
}) {
  const navigatorKeyRef = React127.useRef();
  const value = React127.useMemo(() => ({
    register(key3) {
      const currentKey = navigatorKeyRef.current;
      if (currentKey !== void 0 && key3 !== currentKey) {
        throw new Error(MULTIPLE_NAVIGATOR_ERROR);
      }
      navigatorKeyRef.current = key3;
    },
    unregister(key3) {
      const currentKey = navigatorKeyRef.current;
      if (key3 !== currentKey) {
        return;
      }
      navigatorKeyRef.current = void 0;
    }
  }), []);
  return /* @__PURE__ */ React127.createElement(SingleNavigatorContext.Provider, {
    value
  }, children);
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/UnhandledActionContext.js
var React128 = __toModule(require_react());
var UnhandledActionContext = /* @__PURE__ */ React128.createContext(void 0);
var UnhandledActionContext_default = UnhandledActionContext;

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/NavigationBuilderContext.js
var React129 = __toModule(require_react());
var NavigationBuilderContext = /* @__PURE__ */ React129.createContext({
  onDispatchAction: () => void 0,
  onOptionsChange: () => void 0
});
var NavigationBuilderContext_default = NavigationBuilderContext;

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/NavigationStateContext.js
var React130 = __toModule(require_react());
var MISSING_CONTEXT_ERROR = "Couldn't find a navigation context. Have you wrapped your app with 'NavigationContainer'? See https://reactnavigation.org/docs/getting-started for setup instructions.";
var NavigationStateContext_default = /* @__PURE__ */ React130.createContext({
  isDefault: true,
  get getKey() {
    throw new Error(MISSING_CONTEXT_ERROR);
  },
  get setKey() {
    throw new Error(MISSING_CONTEXT_ERROR);
  },
  get getState() {
    throw new Error(MISSING_CONTEXT_ERROR);
  },
  get setState() {
    throw new Error(MISSING_CONTEXT_ERROR);
  },
  get getIsInitial() {
    throw new Error(MISSING_CONTEXT_ERROR);
  }
});

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/NavigationRouteContext.js
var React131 = __toModule(require_react());
var NavigationContext = /* @__PURE__ */ React131.createContext(void 0);
var NavigationRouteContext_default = NavigationContext;

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/NavigationContext.js
var React132 = __toModule(require_react());
var NavigationContext2 = /* @__PURE__ */ React132.createContext(void 0);
var NavigationContext_default = NavigationContext2;

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useScheduleUpdate.js
var React133 = __toModule(require_react());
var MISSING_CONTEXT_ERROR2 = "Couldn't find a schedule context.";
var ScheduleUpdateContext = /* @__PURE__ */ React133.createContext({
  scheduleUpdate() {
    throw new Error(MISSING_CONTEXT_ERROR2);
  },
  flushUpdates() {
    throw new Error(MISSING_CONTEXT_ERROR2);
  }
});
function useScheduleUpdate(callback) {
  const {
    scheduleUpdate,
    flushUpdates
  } = React133.useContext(ScheduleUpdateContext);
  scheduleUpdate(callback);
  React133.useEffect(flushUpdates);
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useChildListeners.js
var React134 = __toModule(require_react());
function useChildListeners() {
  const {
    current: listeners3
  } = React134.useRef({
    action: [],
    focus: []
  });
  const addListener3 = React134.useCallback((type, listener3) => {
    listeners3[type].push(listener3);
    return () => {
      const index = listeners3[type].indexOf(listener3);
      listeners3[type].splice(index, 1);
    };
  }, [listeners3]);
  return {
    listeners: listeners3,
    addListener: addListener3
  };
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useKeyedChildListeners.js
var React135 = __toModule(require_react());
function useKeyedChildListeners() {
  const {
    current: keyedListeners
  } = React135.useRef({
    getState: {},
    beforeRemove: {}
  });
  const addKeyedListener = React135.useCallback((type, key3, listener3) => {
    keyedListeners[type][key3] = listener3;
    return () => {
      keyedListeners[type][key3] = void 0;
    };
  }, [keyedListeners]);
  return {
    keyedListeners,
    addKeyedListener
  };
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useOptionsGetters.js
var React136 = __toModule(require_react());
function useOptionsGetters({
  key: key3,
  options,
  navigation: navigation2
}) {
  const optionsRef = React136.useRef(options);
  const optionsGettersFromChildRef = React136.useRef({});
  const {
    onOptionsChange
  } = React136.useContext(NavigationBuilderContext_default);
  const {
    addOptionsGetter: parentAddOptionsGetter
  } = React136.useContext(NavigationStateContext_default);
  const optionsChangeListener = React136.useCallback(() => {
    var _navigation$isFocused;
    const isFocused = (_navigation$isFocused = navigation2 === null || navigation2 === void 0 ? void 0 : navigation2.isFocused()) !== null && _navigation$isFocused !== void 0 ? _navigation$isFocused : true;
    const hasChildren = Object.keys(optionsGettersFromChildRef.current).length;
    if (isFocused && !hasChildren) {
      var _optionsRef$current;
      onOptionsChange((_optionsRef$current = optionsRef.current) !== null && _optionsRef$current !== void 0 ? _optionsRef$current : {});
    }
  }, [navigation2, onOptionsChange]);
  React136.useEffect(() => {
    optionsRef.current = options;
    optionsChangeListener();
    return navigation2 === null || navigation2 === void 0 ? void 0 : navigation2.addListener("focus", optionsChangeListener);
  }, [navigation2, options, optionsChangeListener]);
  const getOptionsFromListener = React136.useCallback(() => {
    for (let key4 in optionsGettersFromChildRef.current) {
      if (optionsGettersFromChildRef.current.hasOwnProperty(key4)) {
        var _optionsGettersFromCh, _optionsGettersFromCh2;
        const result = (_optionsGettersFromCh = (_optionsGettersFromCh2 = optionsGettersFromChildRef.current)[key4]) === null || _optionsGettersFromCh === void 0 ? void 0 : _optionsGettersFromCh.call(_optionsGettersFromCh2);
        if (result !== null) {
          return result;
        }
      }
    }
    return null;
  }, []);
  const getCurrentOptions = React136.useCallback(() => {
    var _navigation$isFocused2;
    const isFocused = (_navigation$isFocused2 = navigation2 === null || navigation2 === void 0 ? void 0 : navigation2.isFocused()) !== null && _navigation$isFocused2 !== void 0 ? _navigation$isFocused2 : true;
    if (!isFocused) {
      return null;
    }
    const optionsFromListener = getOptionsFromListener();
    if (optionsFromListener !== null) {
      return optionsFromListener;
    }
    return optionsRef.current;
  }, [navigation2, getOptionsFromListener]);
  React136.useEffect(() => {
    return parentAddOptionsGetter === null || parentAddOptionsGetter === void 0 ? void 0 : parentAddOptionsGetter(key3, getCurrentOptions);
  }, [getCurrentOptions, parentAddOptionsGetter, key3]);
  const addOptionsGetter = React136.useCallback((key4, getter) => {
    optionsGettersFromChildRef.current[key4] = getter;
    optionsChangeListener();
    return () => {
      delete optionsGettersFromChildRef.current[key4];
      optionsChangeListener();
    };
  }, [optionsChangeListener]);
  return {
    addOptionsGetter,
    getCurrentOptions
  };
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useEventEmitter.js
var React137 = __toModule(require_react());
function useEventEmitter(listen) {
  const listenRef = React137.useRef(listen);
  React137.useEffect(() => {
    listenRef.current = listen;
  });
  const listeners3 = React137.useRef({});
  const create3 = React137.useCallback((target2) => {
    const removeListener2 = (type, callback) => {
      const callbacks = listeners3.current[type] ? listeners3.current[type][target2] : void 0;
      if (!callbacks) {
        return;
      }
      const index = callbacks.indexOf(callback);
      callbacks.splice(index, 1);
    };
    const addListener3 = (type, callback) => {
      listeners3.current[type] = listeners3.current[type] || {};
      listeners3.current[type][target2] = listeners3.current[type][target2] || [];
      listeners3.current[type][target2].push(callback);
      return () => removeListener2(type, callback);
    };
    return {
      addListener: addListener3,
      removeListener: removeListener2
    };
  }, []);
  const emit = React137.useCallback(({
    type,
    data: data2,
    target: target2,
    canPreventDefault
  }) => {
    var _items$target, _listenRef$current;
    const items2 = listeners3.current[type] || {};
    const callbacks = target2 !== void 0 ? (_items$target = items2[target2]) === null || _items$target === void 0 ? void 0 : _items$target.slice() : [].concat(...Object.keys(items2).map((t) => items2[t])).filter((cb, i, self2) => self2.lastIndexOf(cb) === i);
    const event4 = {
      get type() {
        return type;
      }
    };
    if (target2 !== void 0) {
      Object.defineProperty(event4, "target", {
        enumerable: true,
        get() {
          return target2;
        }
      });
    }
    if (data2 !== void 0) {
      Object.defineProperty(event4, "data", {
        enumerable: true,
        get() {
          return data2;
        }
      });
    }
    if (canPreventDefault) {
      let defaultPrevented = false;
      Object.defineProperties(event4, {
        defaultPrevented: {
          enumerable: true,
          get() {
            return defaultPrevented;
          }
        },
        preventDefault: {
          enumerable: true,
          value() {
            defaultPrevented = true;
          }
        }
      });
    }
    (_listenRef$current = listenRef.current) === null || _listenRef$current === void 0 ? void 0 : _listenRef$current.call(listenRef, event4);
    callbacks === null || callbacks === void 0 ? void 0 : callbacks.forEach((cb) => cb(event4));
    return event4;
  }, []);
  return React137.useMemo(() => ({
    create: create3,
    emit
  }), [create3, emit]);
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useSyncState.js
var React138 = __toModule(require_react());
var UNINTIALIZED_STATE = {};
function useSyncState(initialState2) {
  const stateRef = React138.useRef(UNINTIALIZED_STATE);
  const isSchedulingRef = React138.useRef(false);
  const isMountedRef = React138.useRef(true);
  React138.useEffect(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  if (stateRef.current === UNINTIALIZED_STATE) {
    stateRef.current = typeof initialState2 === "function" ? initialState2() : initialState2;
  }
  const [trackingState, setTrackingState] = React138.useState(stateRef.current);
  const getState = React138.useCallback(() => stateRef.current, []);
  const setState = React138.useCallback((state2) => {
    if (state2 === stateRef.current || !isMountedRef.current) {
      return;
    }
    stateRef.current = state2;
    if (!isSchedulingRef.current) {
      setTrackingState(state2);
    }
  }, []);
  const scheduleUpdate = React138.useCallback((callback) => {
    isSchedulingRef.current = true;
    try {
      callback();
    } finally {
      isSchedulingRef.current = false;
    }
  }, []);
  const flushUpdates = React138.useCallback(() => {
    if (!isMountedRef.current) {
      return;
    }
    setTrackingState(stateRef.current);
  }, []);
  if (trackingState !== stateRef.current) {
    setTrackingState(stateRef.current);
  }
  const state = stateRef.current;
  React138.useDebugValue(state);
  return [state, getState, setState, scheduleUpdate, flushUpdates];
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/checkSerializable.js
var checkSerializableWithoutCircularReference = (o, seen, location2) => {
  if (o === void 0 || o === null || typeof o === "boolean" || typeof o === "number" || typeof o === "string") {
    return {
      serializable: true
    };
  }
  if (Object.prototype.toString.call(o) !== "[object Object]" && !Array.isArray(o)) {
    return {
      serializable: false,
      location: location2,
      reason: typeof o === "function" ? "Function" : String(o)
    };
  }
  if (seen.has(o)) {
    return {
      serializable: false,
      reason: "Circular reference",
      location: location2
    };
  }
  seen.add(o);
  if (Array.isArray(o)) {
    for (let i = 0; i < o.length; i++) {
      const childResult = checkSerializableWithoutCircularReference(o[i], new Set(seen), [...location2, i]);
      if (!childResult.serializable) {
        return childResult;
      }
    }
  } else {
    for (const key3 in o) {
      const childResult = checkSerializableWithoutCircularReference(o[key3], new Set(seen), [...location2, key3]);
      if (!childResult.serializable) {
        return childResult;
      }
    }
  }
  return {
    serializable: true
  };
};
function checkSerializable(o) {
  return checkSerializableWithoutCircularReference(o, new Set(), []);
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/BaseNavigationContainer.js
var NOT_INITIALIZED_ERROR = "The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.";
var serializableWarnings = [];
try {
  Object.defineProperty(window, "REACT_NAVIGATION_REDUX_DEVTOOLS_EXTENSION_INTEGRATION_ENABLED", {
    set(_) {
      console.warn("Redux devtools extension integration can be enabled with the '@react-navigation/devtools' package. For more details, see https://reactnavigation.org/docs/devtools");
    }
  });
} catch (e) {
}
var getPartialState = (state) => {
  if (state === void 0) {
    return;
  }
  const {
    key: key3,
    routeNames,
    ...partialState
  } = state;
  return {
    ...partialState,
    stale: true,
    routes: state.routes.map((route) => {
      if (route.state === void 0) {
        return route;
      }
      return {
        ...route,
        state: getPartialState(route.state)
      };
    })
  };
};
var BaseNavigationContainer = /* @__PURE__ */ React139.forwardRef(function BaseNavigationContainer2({
  initialState: initialState2,
  onStateChange,
  onUnhandledAction,
  independent,
  children
}, ref) {
  const parent = React139.useContext(NavigationStateContext_default);
  if (!parent.isDefault && !independent) {
    throw new Error("Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.");
  }
  const [state, getState, setState, scheduleUpdate, flushUpdates] = useSyncState(() => getPartialState(initialState2 == null ? void 0 : initialState2));
  const isFirstMountRef = React139.useRef(true);
  const navigatorKeyRef = React139.useRef();
  const getKey = React139.useCallback(() => navigatorKeyRef.current, []);
  const setKey = React139.useCallback((key3) => {
    navigatorKeyRef.current = key3;
  }, []);
  const {
    listeners: listeners3,
    addListener: addListener3
  } = useChildListeners();
  const {
    keyedListeners,
    addKeyedListener
  } = useKeyedChildListeners();
  const dispatch = (action) => {
    if (listeners3.focus[0] == null) {
      throw new Error(NOT_INITIALIZED_ERROR);
    }
    listeners3.focus[0]((navigation2) => navigation2.dispatch(action));
  };
  const canGoBack = () => {
    if (listeners3.focus[0] == null) {
      return false;
    }
    const {
      result,
      handled
    } = listeners3.focus[0]((navigation2) => navigation2.canGoBack());
    if (handled) {
      return result;
    } else {
      return false;
    }
  };
  const resetRoot = React139.useCallback((state2) => {
    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;
    const target2 = (_state$key = state2 === null || state2 === void 0 ? void 0 : state2.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;
    if (target2 == null) {
      throw new Error(NOT_INITIALIZED_ERROR);
    }
    listeners3.focus[0]((navigation2) => navigation2.dispatch({
      ...CommonActions_exports.reset(state2),
      target: target2
    }));
  }, [keyedListeners.getState, listeners3.focus]);
  const getRootState = React139.useCallback(() => {
    var _keyedListeners$getSt3, _keyedListeners$getSt4;
    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);
  }, [keyedListeners.getState]);
  const getCurrentRoute = React139.useCallback(() => {
    let state2 = getRootState();
    if (state2 === void 0) {
      return void 0;
    }
    while (state2.routes[state2.index].state !== void 0) {
      state2 = state2.routes[state2.index].state;
    }
    return state2.routes[state2.index];
  }, [getRootState]);
  const emitter = useEventEmitter();
  const {
    addOptionsGetter,
    getCurrentOptions
  } = useOptionsGetters({});
  React139.useImperativeHandle(ref, () => ({
    ...Object.keys(CommonActions_exports).reduce((acc2, name) => {
      acc2[name] = (...args) => dispatch(CommonActions_exports[name](...args));
      return acc2;
    }, {}),
    ...emitter.create("root"),
    resetRoot,
    dispatch,
    canGoBack,
    getRootState,
    dangerouslyGetState: () => state,
    dangerouslyGetParent: () => void 0,
    getCurrentRoute,
    getCurrentOptions
  }));
  const onDispatchAction = React139.useCallback((action, noop) => {
    emitter.emit({
      type: "__unsafe_action__",
      data: {
        action,
        noop
      }
    });
  }, [emitter]);
  const lastEmittedOptionsRef = React139.useRef();
  const onOptionsChange = React139.useCallback((options) => {
    if (lastEmittedOptionsRef.current === options) {
      return;
    }
    lastEmittedOptionsRef.current = options;
    emitter.emit({
      type: "options",
      data: {
        options
      }
    });
  }, [emitter]);
  const builderContext = React139.useMemo(() => ({
    addListener: addListener3,
    addKeyedListener,
    onDispatchAction,
    onOptionsChange
  }), [addListener3, addKeyedListener, onDispatchAction, onOptionsChange]);
  const scheduleContext = React139.useMemo(() => ({
    scheduleUpdate,
    flushUpdates
  }), [scheduleUpdate, flushUpdates]);
  const isInitialRef = React139.useRef(true);
  const getIsInitial = React139.useCallback(() => isInitialRef.current, []);
  const context = React139.useMemo(() => ({
    state,
    getState,
    setState,
    getKey,
    setKey,
    getIsInitial,
    addOptionsGetter
  }), [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);
  const onStateChangeRef = React139.useRef(onStateChange);
  React139.useEffect(() => {
    isInitialRef.current = false;
    onStateChangeRef.current = onStateChange;
  });
  React139.useEffect(() => {
    if (true) {
      if (state !== void 0) {
        const result = checkSerializable(state);
        if (!result.serializable) {
          const {
            location: location2,
            reason
          } = result;
          let path = "";
          let pointer = state;
          let params = false;
          for (let i = 0; i < location2.length; i++) {
            const curr = location2[i];
            const prev = location2[i - 1];
            pointer = pointer[curr];
            if (!params && curr === "state") {
              continue;
            } else if (!params && curr === "routes") {
              if (path) {
                path += " > ";
              }
            } else if (!params && typeof curr === "number" && prev === "routes") {
              var _pointer;
              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;
            } else if (!params) {
              path += " > ".concat(curr);
              params = true;
            } else {
              if (typeof curr === "number" || /^[0-9]+$/.test(curr)) {
                path += "[".concat(curr, "]");
              } else if (/^[a-z$_]+$/i.test(curr)) {
                path += ".".concat(curr);
              } else {
                path += "[".concat(JSON.stringify(curr), "]");
              }
            }
          }
          const message2 = "Non-serializable values were found in the navigation state. Check:\n\n".concat(path, " (").concat(reason, ")\n\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.");
          if (!serializableWarnings.includes(message2)) {
            serializableWarnings.push(message2);
            console.warn(message2);
          }
        }
      }
    }
    emitter.emit({
      type: "state",
      data: {
        state
      }
    });
    if (!isFirstMountRef.current && onStateChangeRef.current) {
      onStateChangeRef.current(getRootState());
    }
    isFirstMountRef.current = false;
  }, [getRootState, emitter, state]);
  const defaultOnUnhandledAction = React139.useCallback((action) => {
    if (false) {
      return;
    }
    const payload = action.payload;
    let message2 = "The action '".concat(action.type, "'").concat(payload ? " with payload ".concat(JSON.stringify(action.payload)) : "", " was not handled by any navigator.");
    switch (action.type) {
      case "NAVIGATE":
      case "PUSH":
      case "REPLACE":
      case "JUMP_TO":
        if (payload !== null && payload !== void 0 && payload.name) {
          message2 += "\n\nDo you have a screen named '".concat(payload.name, "'?\n\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.");
        } else {
          message2 += "\n\nYou need to pass the name of the screen to navigate to.\n\nSee https://reactnavigation.org/docs/navigation-actions for usage.";
        }
        break;
      case "GO_BACK":
      case "POP":
      case "POP_TO_TOP":
        message2 += "\n\nIs there any screen to go back to?";
        break;
      case "OPEN_DRAWER":
      case "CLOSE_DRAWER":
      case "TOGGLE_DRAWER":
        message2 += "\n\nIs your screen inside a Drawer navigator?";
        break;
    }
    message2 += "\n\nThis is a development-only warning and won't be shown in production.";
    console.error(message2);
  }, []);
  let element = /* @__PURE__ */ React139.createElement(ScheduleUpdateContext.Provider, {
    value: scheduleContext
  }, /* @__PURE__ */ React139.createElement(NavigationBuilderContext_default.Provider, {
    value: builderContext
  }, /* @__PURE__ */ React139.createElement(NavigationStateContext_default.Provider, {
    value: context
  }, /* @__PURE__ */ React139.createElement(UnhandledActionContext_default.Provider, {
    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction
  }, /* @__PURE__ */ React139.createElement(EnsureSingleNavigator, null, children)))));
  if (independent) {
    element = /* @__PURE__ */ React139.createElement(NavigationRouteContext_default.Provider, {
      value: void 0
    }, /* @__PURE__ */ React139.createElement(NavigationContext_default.Provider, {
      value: void 0
    }, element));
  }
  return element;
});
var BaseNavigationContainer_default = BaseNavigationContainer;

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/Screen.js
function Screen(_) {
  return null;
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/createNavigatorFactory.js
function createNavigatorFactory(Navigator) {
  return function() {
    if (arguments[0] !== void 0) {
      throw new Error("Creating a navigator doesn't take an argument. Maybe you are trying to use React Navigation 4 API with React Navigation 5? See https://reactnavigation.org/docs/upgrading-from-4.x for migration guide.");
    }
    return {
      Navigator,
      Screen
    };
  };
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/NavigationHelpersContext.js
var React140 = __toModule(require_react());
var NavigationHelpersContext = /* @__PURE__ */ React140.createContext(void 0);
var NavigationHelpersContext_default = NavigationHelpersContext;

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/CurrentRenderContext.js
var React141 = __toModule(require_react());
var CurrentRenderContext = /* @__PURE__ */ React141.createContext(void 0);
var CurrentRenderContext_default = CurrentRenderContext;

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useNavigationBuilder.js
var React156 = __toModule(require_react());
var import_react_is = __toModule(require_react_is3());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useRegisterNavigator.js
var React142 = __toModule(require_react());
function useRegisterNavigator() {
  const [key3] = React142.useState(() => nanoid());
  const container = React142.useContext(SingleNavigatorContext);
  if (container === void 0) {
    throw new Error("Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?");
  }
  React142.useEffect(() => {
    const {
      register,
      unregister
    } = container;
    register(key3);
    return () => unregister(key3);
  }, [container, key3]);
  return key3;
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useDescriptors.js
var React147 = __toModule(require_react());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/SceneView.js
var React144 = __toModule(require_react());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/StaticContainer.js
var React143 = __toModule(require_react());
function StaticContainer(props) {
  return props.children;
}
var StaticContainer_default = /* @__PURE__ */ React143.memo(StaticContainer, (prevProps, nextProps) => {
  const prevPropKeys = Object.keys(prevProps);
  const nextPropKeys = Object.keys(nextProps);
  if (prevPropKeys.length !== nextPropKeys.length) {
    return false;
  }
  for (const key3 of prevPropKeys) {
    if (key3 === "children") {
      continue;
    }
    if (prevProps[key3] !== nextProps[key3]) {
      return false;
    }
  }
  return true;
});

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/SceneView.js
function SceneView({
  screen,
  route,
  navigation: navigation2,
  routeState,
  getState,
  setState,
  options
}) {
  const navigatorKeyRef = React144.useRef();
  const getKey = React144.useCallback(() => navigatorKeyRef.current, []);
  const {
    addOptionsGetter
  } = useOptionsGetters({
    key: route.key,
    options,
    navigation: navigation2
  });
  const setKey = React144.useCallback((key3) => {
    navigatorKeyRef.current = key3;
  }, []);
  const getCurrentState = React144.useCallback(() => {
    const state = getState();
    const currentRoute = state.routes.find((r) => r.key === route.key);
    return currentRoute ? currentRoute.state : void 0;
  }, [getState, route.key]);
  const setCurrentState = React144.useCallback((child2) => {
    const state = getState();
    setState({
      ...state,
      routes: state.routes.map((r) => r.key === route.key ? {
        ...r,
        state: child2
      } : r)
    });
  }, [getState, route.key, setState]);
  const isInitialRef = React144.useRef(true);
  React144.useEffect(() => {
    isInitialRef.current = false;
  });
  const getIsInitial = React144.useCallback(() => isInitialRef.current, []);
  const context = React144.useMemo(() => ({
    state: routeState,
    getState: getCurrentState,
    setState: setCurrentState,
    getKey,
    setKey,
    getIsInitial,
    addOptionsGetter
  }), [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);
  const ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;
  return /* @__PURE__ */ React144.createElement(NavigationStateContext_default.Provider, {
    value: context
  }, /* @__PURE__ */ React144.createElement(EnsureSingleNavigator, null, /* @__PURE__ */ React144.createElement(StaticContainer_default, {
    name: screen.name,
    render: ScreenComponent || screen.children,
    navigation: navigation2,
    route
  }, ScreenComponent !== void 0 ? /* @__PURE__ */ React144.createElement(ScreenComponent, {
    navigation: navigation2,
    route
  }) : screen.children !== void 0 ? screen.children({
    navigation: navigation2,
    route
  }) : null)));
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useNavigationCache.js
var React145 = __toModule(require_react());
function useNavigationCache({
  state,
  getState,
  navigation: navigation2,
  setOptions,
  router: router2,
  emitter
}) {
  const cache2 = React145.useMemo(() => ({
    current: {}
  }), [getState, navigation2, setOptions, router2, emitter]);
  const actions = {
    ...router2.actionCreators,
    ...CommonActions_exports
  };
  cache2.current = state.routes.reduce((acc2, route) => {
    const previous = cache2.current[route.key];
    if (previous) {
      acc2[route.key] = previous;
    } else {
      const {
        emit,
        ...rest
      } = navigation2;
      const dispatch = (action) => {
        const payload = typeof action === "function" ? action(getState()) : action;
        navigation2.dispatch(typeof payload === "object" && payload != null ? {
          source: route.key,
          ...payload
        } : payload);
      };
      const helpers = Object.keys(actions).reduce((acc3, name) => {
        acc3[name] = (...args) => dispatch(actions[name](...args));
        return acc3;
      }, {});
      acc2[route.key] = {
        ...rest,
        ...helpers,
        ...emitter.create(route.key),
        dispatch,
        setOptions: (options) => setOptions((o) => ({
          ...o,
          [route.key]: {
            ...o[route.key],
            ...options
          }
        })),
        isFocused: () => {
          const state2 = getState();
          if (state2.routes[state2.index].key !== route.key) {
            return false;
          }
          return navigation2 ? navigation2.isFocused() : true;
        }
      };
    }
    return acc2;
  }, {});
  return cache2.current;
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useRouteCache.js
var React146 = __toModule(require_react());
var SUPPRESS_STATE_ACCESS_WARNING = {
  value: false
};
function useRouteCache(routes2) {
  const cache2 = React146.useMemo(() => ({
    current: new Map()
  }), []);
  if (false) {
    return routes2;
  }
  cache2.current = routes2.reduce((acc2, route) => {
    const previous = cache2.current.get(route);
    if (previous) {
      acc2.set(route, previous);
    } else {
      const proxy = {
        ...route
      };
      Object.defineProperty(proxy, "state", {
        get() {
          if (!SUPPRESS_STATE_ACCESS_WARNING.value) {
            console.warn("Accessing the 'state' property of the 'route' object is not supported. If you want to get the focused route name, use the 'getFocusedRouteNameFromRoute' helper instead: https://reactnavigation.org/docs/screen-options-resolution/#setting-parent-screen-options-based-on-child-navigators-state");
          }
          return route.state;
        }
      });
      acc2.set(route, proxy);
    }
    return acc2;
  }, new Map());
  return Array.from(cache2.current.values());
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useDescriptors.js
function useDescriptors({
  state,
  screens,
  navigation: navigation2,
  screenOptions,
  onAction,
  getState,
  setState,
  addListener: addListener3,
  addKeyedListener,
  onRouteFocus,
  router: router2,
  emitter
}) {
  const [options, setOptions] = React147.useState({});
  const {
    onDispatchAction,
    onOptionsChange
  } = React147.useContext(NavigationBuilderContext_default);
  const context = React147.useMemo(() => ({
    navigation: navigation2,
    onAction,
    addListener: addListener3,
    addKeyedListener,
    onRouteFocus,
    onDispatchAction,
    onOptionsChange
  }), [navigation2, onAction, addListener3, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange]);
  const navigations = useNavigationCache({
    state,
    getState,
    navigation: navigation2,
    setOptions,
    router: router2,
    emitter
  });
  const routes2 = useRouteCache(state.routes);
  return routes2.reduce((acc2, route, i) => {
    const screen = screens[route.name];
    const navigation3 = navigations[route.key];
    const routeOptions = {
      ...typeof screenOptions === "object" || screenOptions == null ? screenOptions : screenOptions({
        route,
        navigation: navigation3
      }),
      ...typeof screen.options === "object" || screen.options == null ? screen.options : screen.options({
        route,
        navigation: navigation3
      }),
      ...options[route.key]
    };
    acc2[route.key] = {
      navigation: navigation3,
      render() {
        return /* @__PURE__ */ React147.createElement(NavigationBuilderContext_default.Provider, {
          key: route.key,
          value: context
        }, /* @__PURE__ */ React147.createElement(NavigationContext_default.Provider, {
          value: navigation3
        }, /* @__PURE__ */ React147.createElement(NavigationRouteContext_default.Provider, {
          value: route
        }, /* @__PURE__ */ React147.createElement(SceneView, {
          navigation: navigation3,
          route,
          screen,
          routeState: state.routes[i].state,
          getState,
          setState,
          options: routeOptions
        }))));
      },
      options: routeOptions
    };
    return acc2;
  }, {});
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useNavigationHelpers.js
var React148 = __toModule(require_react());
function useNavigationHelpers({
  onAction,
  getState,
  emitter,
  router: router2
}) {
  const onUnhandledAction = React148.useContext(UnhandledActionContext_default);
  const parentNavigationHelpers = React148.useContext(NavigationContext_default);
  return React148.useMemo(() => {
    const dispatch = (op) => {
      const action = typeof op === "function" ? op(getState()) : op;
      const handled = onAction(action);
      if (!handled) {
        onUnhandledAction === null || onUnhandledAction === void 0 ? void 0 : onUnhandledAction(action);
      }
    };
    const actions = {
      ...router2.actionCreators,
      ...CommonActions_exports
    };
    const helpers = Object.keys(actions).reduce((acc2, name) => {
      acc2[name] = (...args) => dispatch(actions[name](...args));
      return acc2;
    }, {});
    return {
      ...parentNavigationHelpers,
      ...helpers,
      dispatch,
      emit: emitter.emit,
      isFocused: parentNavigationHelpers ? parentNavigationHelpers.isFocused : () => true,
      canGoBack: () => {
        const state = getState();
        return router2.getStateForAction(state, CommonActions_exports.goBack(), {
          routeNames: state.routeNames,
          routeParamList: {},
          routeGetIdList: {}
        }) !== null || (parentNavigationHelpers === null || parentNavigationHelpers === void 0 ? void 0 : parentNavigationHelpers.canGoBack()) || false;
      },
      dangerouslyGetParent: () => parentNavigationHelpers,
      dangerouslyGetState: getState
    };
  }, [emitter.emit, getState, onAction, onUnhandledAction, parentNavigationHelpers, router2]);
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useOnAction.js
var React150 = __toModule(require_react());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useOnPreventRemove.js
var React149 = __toModule(require_react());
var VISITED_ROUTE_KEYS = Symbol("VISITED_ROUTE_KEYS");
var shouldPreventRemove = (emitter, beforeRemoveListeners, currentRoutes, nextRoutes, action) => {
  var _action$VISITED_ROUTE;
  const nextRouteKeys = nextRoutes.map((route) => route.key);
  const removedRoutes = currentRoutes.filter((route) => !nextRouteKeys.includes(route.key)).reverse();
  const visitedRouteKeys = (_action$VISITED_ROUTE = action[VISITED_ROUTE_KEYS]) !== null && _action$VISITED_ROUTE !== void 0 ? _action$VISITED_ROUTE : new Set();
  const beforeRemoveAction = {
    ...action,
    [VISITED_ROUTE_KEYS]: visitedRouteKeys
  };
  for (const route of removedRoutes) {
    var _beforeRemoveListener;
    if (visitedRouteKeys.has(route.key)) {
      continue;
    }
    const isPrevented = (_beforeRemoveListener = beforeRemoveListeners[route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);
    if (isPrevented) {
      return true;
    }
    visitedRouteKeys.add(route.key);
    const event4 = emitter.emit({
      type: "beforeRemove",
      target: route.key,
      data: {
        action: beforeRemoveAction
      },
      canPreventDefault: true
    });
    if (event4.defaultPrevented) {
      return true;
    }
  }
  return false;
};
function useOnPreventRemove({
  getState,
  emitter,
  beforeRemoveListeners
}) {
  const {
    addKeyedListener
  } = React149.useContext(NavigationBuilderContext_default);
  const route = React149.useContext(NavigationRouteContext_default);
  const routeKey = route === null || route === void 0 ? void 0 : route.key;
  React149.useEffect(() => {
    if (routeKey) {
      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener("beforeRemove", routeKey, (action) => {
        const state = getState();
        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, [], action);
      });
    }
  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useOnAction.js
function useOnAction({
  router: router2,
  getState,
  setState,
  key: key3,
  actionListeners,
  beforeRemoveListeners,
  routerConfigOptions,
  emitter
}) {
  const {
    onAction: onActionParent,
    onRouteFocus: onRouteFocusParent,
    addListener: addListenerParent,
    onDispatchAction
  } = React150.useContext(NavigationBuilderContext_default);
  const routerConfigOptionsRef = React150.useRef(routerConfigOptions);
  React150.useEffect(() => {
    routerConfigOptionsRef.current = routerConfigOptions;
  });
  const onAction = React150.useCallback((action, visitedNavigators = new Set()) => {
    const state = getState();
    if (visitedNavigators.has(state.key)) {
      return false;
    }
    visitedNavigators.add(state.key);
    if (typeof action.target !== "string" || action.target === state.key) {
      let result = router2.getStateForAction(state, action, routerConfigOptionsRef.current);
      result = result === null && action.target === state.key ? state : result;
      if (result !== null) {
        onDispatchAction(action, state === result);
        if (state !== result) {
          const isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);
          if (isPrevented) {
            return true;
          }
          setState(result);
        }
        if (onRouteFocusParent !== void 0) {
          const shouldFocus = router2.shouldActionChangeFocus(action);
          if (shouldFocus && key3 !== void 0) {
            onRouteFocusParent(key3);
          }
        }
        return true;
      }
    }
    if (onActionParent !== void 0) {
      if (onActionParent(action, visitedNavigators)) {
        return true;
      }
    }
    for (let i = actionListeners.length - 1; i >= 0; i--) {
      const listener3 = actionListeners[i];
      if (listener3(action, visitedNavigators)) {
        return true;
      }
    }
    return false;
  }, [actionListeners, beforeRemoveListeners, emitter, getState, key3, onActionParent, onDispatchAction, onRouteFocusParent, router2, setState]);
  useOnPreventRemove({
    getState,
    emitter,
    beforeRemoveListeners
  });
  React150.useEffect(() => addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent("action", onAction), [addListenerParent, onAction]);
  return onAction;
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useFocusEvents.js
var React151 = __toModule(require_react());
function useFocusEvents({
  state,
  emitter
}) {
  const navigation2 = React151.useContext(NavigationContext_default);
  const lastFocusedKeyRef = React151.useRef();
  const currentFocusedKey = state.routes[state.index].key;
  React151.useEffect(() => navigation2 === null || navigation2 === void 0 ? void 0 : navigation2.addListener("focus", () => {
    lastFocusedKeyRef.current = currentFocusedKey;
    emitter.emit({
      type: "focus",
      target: currentFocusedKey
    });
  }), [currentFocusedKey, emitter, navigation2]);
  React151.useEffect(() => navigation2 === null || navigation2 === void 0 ? void 0 : navigation2.addListener("blur", () => {
    lastFocusedKeyRef.current = void 0;
    emitter.emit({
      type: "blur",
      target: currentFocusedKey
    });
  }), [currentFocusedKey, emitter, navigation2]);
  React151.useEffect(() => {
    const lastFocusedKey = lastFocusedKeyRef.current;
    lastFocusedKeyRef.current = currentFocusedKey;
    if (lastFocusedKey === void 0 && !navigation2) {
      emitter.emit({
        type: "focus",
        target: currentFocusedKey
      });
    }
    if (lastFocusedKey === currentFocusedKey || !(navigation2 ? navigation2.isFocused() : true)) {
      return;
    }
    if (lastFocusedKey === void 0) {
      return;
    }
    emitter.emit({
      type: "blur",
      target: lastFocusedKey
    });
    emitter.emit({
      type: "focus",
      target: currentFocusedKey
    });
  }, [currentFocusedKey, emitter, navigation2]);
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useOnRouteFocus.js
var React152 = __toModule(require_react());
function useOnRouteFocus({
  router: router2,
  getState,
  key: sourceRouteKey,
  setState
}) {
  const {
    onRouteFocus: onRouteFocusParent
  } = React152.useContext(NavigationBuilderContext_default);
  return React152.useCallback((key3) => {
    const state = getState();
    const result = router2.getStateForRouteFocus(state, key3);
    if (result !== state) {
      setState(result);
    }
    if (onRouteFocusParent !== void 0 && sourceRouteKey !== void 0) {
      onRouteFocusParent(sourceRouteKey);
    }
  }, [getState, onRouteFocusParent, router2, setState, sourceRouteKey]);
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useFocusedListenersChildrenAdapter.js
var React153 = __toModule(require_react());
function useFocusedListenersChildrenAdapter({
  navigation: navigation2,
  focusedListeners
}) {
  const {
    addListener: addListener3
  } = React153.useContext(NavigationBuilderContext_default);
  const listener3 = React153.useCallback((callback) => {
    if (navigation2.isFocused()) {
      for (const listener4 of focusedListeners) {
        const {
          handled,
          result
        } = listener4(callback);
        if (handled) {
          return {
            handled,
            result
          };
        }
      }
      return {
        handled: true,
        result: callback(navigation2)
      };
    } else {
      return {
        handled: false,
        result: null
      };
    }
  }, [focusedListeners, navigation2]);
  React153.useEffect(() => addListener3 === null || addListener3 === void 0 ? void 0 : addListener3("focus", listener3), [addListener3, listener3]);
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useOnGetState.js
var React154 = __toModule(require_react());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/isArrayEqual.js
function isArrayEqual(a, b) {
  return a.length === b.length && a.every((it, index) => it === b[index]);
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useOnGetState.js
function useOnGetState({
  getState,
  getStateListeners
}) {
  const {
    addKeyedListener
  } = React154.useContext(NavigationBuilderContext_default);
  const route = React154.useContext(NavigationRouteContext_default);
  const key3 = route ? route.key : "root";
  const getRehydratedState = React154.useCallback(() => {
    const state = getState();
    const routes2 = state.routes.map((route2) => {
      var _getStateListeners$ro;
      const childState = (_getStateListeners$ro = getStateListeners[route2.key]) === null || _getStateListeners$ro === void 0 ? void 0 : _getStateListeners$ro.call(getStateListeners);
      if (route2.state === childState) {
        return route2;
      }
      return {
        ...route2,
        state: childState
      };
    });
    if (isArrayEqual(state.routes, routes2)) {
      return state;
    }
    return {
      ...state,
      routes: routes2
    };
  }, [getState, getStateListeners]);
  React154.useEffect(() => {
    return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener("getState", key3, getRehydratedState);
  }, [addKeyedListener, getRehydratedState, key3]);
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useCurrentRender.js
var React155 = __toModule(require_react());
function useCurrentRender({
  state,
  navigation: navigation2,
  descriptors
}) {
  const current = React155.useContext(CurrentRenderContext_default);
  if (current && navigation2.isFocused()) {
    current.options = descriptors[state.routes[state.index].key].options;
  }
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useNavigationBuilder.js
var getRouteConfigsFromChildren = (children) => {
  const configs = React156.Children.toArray(children).reduce((acc2, child2) => {
    var _child$type, _child$props;
    if (/* @__PURE__ */ React156.isValidElement(child2)) {
      if (child2.type === Screen) {
        acc2.push(child2.props);
        return acc2;
      }
      if (child2.type === React156.Fragment) {
        acc2.push(...getRouteConfigsFromChildren(child2.props.children));
        return acc2;
      }
    }
    throw new Error("A navigator can only contain 'Screen' components as its direct children (found ".concat(/* @__PURE__ */ React156.isValidElement(child2) ? "'".concat(typeof child2.type === "string" ? child2.type : (_child$type = child2.type) === null || _child$type === void 0 ? void 0 : _child$type.name, "'").concat((_child$props = child2.props) !== null && _child$props !== void 0 && _child$props.name ? " for the screen '".concat(child2.props.name, "'") : "") : typeof child2 === "object" ? JSON.stringify(child2) : "'".concat(String(child2), "'"), "). To render this component in the navigator, pass it in the 'component' prop to 'Screen'."));
  }, []);
  if (true) {
    configs.forEach((config) => {
      const {
        name,
        children: children2,
        component,
        getComponent
      } = config;
      if (typeof name !== "string" || !name) {
        throw new Error("Got an invalid name (".concat(JSON.stringify(name), ") for the screen. It must be a non-empty string."));
      }
      if (children2 != null || component !== void 0 || getComponent !== void 0) {
        if (children2 != null && component !== void 0) {
          throw new Error("Got both 'component' and 'children' props for the screen '".concat(name, "'. You must pass only one of them."));
        }
        if (children2 != null && getComponent !== void 0) {
          throw new Error("Got both 'getComponent' and 'children' props for the screen '".concat(name, "'. You must pass only one of them."));
        }
        if (component !== void 0 && getComponent !== void 0) {
          throw new Error("Got both 'component' and 'getComponent' props for the screen '".concat(name, "'. You must pass only one of them."));
        }
        if (children2 != null && typeof children2 !== "function") {
          throw new Error("Got an invalid value for 'children' prop for the screen '".concat(name, "'. It must be a function returning a React Element."));
        }
        if (component !== void 0 && !(0, import_react_is.isValidElementType)(component)) {
          throw new Error("Got an invalid value for 'component' prop for the screen '".concat(name, "'. It must be a valid React Component."));
        }
        if (getComponent !== void 0 && typeof getComponent !== "function") {
          throw new Error("Got an invalid value for 'getComponent' prop for the screen '".concat(name, "'. It must be a function returning a React Component."));
        }
        if (typeof component === "function" && component.name === "component") {
          console.warn("Looks like you're passing an inline function for 'component' prop for the screen '".concat(name, "' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour."));
        }
      } else {
        throw new Error("Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '".concat(name, "'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing."));
      }
    });
  }
  return configs;
};
function useNavigationBuilder(createRouter, options) {
  const navigatorKey = useRegisterNavigator();
  const route = React156.useContext(NavigationRouteContext_default);
  const {
    children,
    ...rest
  } = options;
  const {
    current: router2
  } = React156.useRef(createRouter({
    ...rest,
    ...route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === "string" ? {
      initialRouteName: route.params.screen
    } : null
  }));
  const routeConfigs = getRouteConfigsFromChildren(children);
  const screens = routeConfigs.reduce((acc2, config) => {
    if (config.name in acc2) {
      throw new Error("A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '".concat(config.name, "')"));
    }
    acc2[config.name] = config;
    return acc2;
  }, {});
  const routeNames = routeConfigs.map((config) => config.name);
  const routeParamList = routeNames.reduce((acc2, curr) => {
    var _route$params, _route$params2, _route$params3;
    const {
      initialParams
    } = screens[curr];
    const initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : void 0;
    acc2[curr] = initialParams !== void 0 || initialParamsFromParams !== void 0 ? {
      ...initialParams,
      ...initialParamsFromParams
    } : void 0;
    return acc2;
  }, {});
  const routeGetIdList = routeNames.reduce((acc2, curr) => Object.assign(acc2, {
    [curr]: screens[curr].getId
  }), {});
  if (!routeNames.length) {
    throw new Error("Couldn't find any screens for the navigator. Have you defined any screens as its children?");
  }
  const isStateValid = React156.useCallback((state2) => state2.type === void 0 || state2.type === router2.type, [router2.type]);
  const isStateInitialized = React156.useCallback((state2) => state2 !== void 0 && state2.stale === false && isStateValid(state2), [isStateValid]);
  const {
    state: currentState,
    getState: getCurrentState,
    setState,
    setKey,
    getKey,
    getIsInitial
  } = React156.useContext(NavigationStateContext_default);
  const [initializedState, isFirstStateInitialization] = React156.useMemo(() => {
    var _route$params4;
    if ((currentState === void 0 || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {
      return [router2.getInitialState({
        routeNames,
        routeParamList,
        routeGetIdList
      }), true];
    } else {
      var _route$params$state, _route$params5;
      return [router2.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {
        routeNames,
        routeParamList,
        routeGetIdList
      }), false];
    }
  }, [currentState, router2, isStateValid]);
  let state = isStateInitialized(currentState) ? currentState : initializedState;
  let nextState = state;
  if (!isArrayEqual(state.routeNames, routeNames)) {
    nextState = router2.getStateForRouteNamesChange(state, {
      routeNames,
      routeParamList,
      routeGetIdList
    });
  }
  const previousNestedParamsRef = React156.useRef(route === null || route === void 0 ? void 0 : route.params);
  React156.useEffect(() => {
    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;
  }, [route === null || route === void 0 ? void 0 : route.params]);
  if (route !== null && route !== void 0 && route.params) {
    const previousParams = previousNestedParamsRef.current;
    let action;
    if (typeof route.params.state === "object" && route.params.state != null && route.params.state !== (previousParams === null || previousParams === void 0 ? void 0 : previousParams.state)) {
      action = CommonActions_exports.reset(route.params.state);
    } else if (typeof route.params.screen === "string" && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {
      action = CommonActions_exports.navigate(route.params.screen, route.params.params);
    }
    const updatedState = action ? router2.getStateForAction(nextState, action, {
      routeNames,
      routeParamList,
      routeGetIdList
    }) : null;
    nextState = updatedState !== null ? router2.getRehydratedState(updatedState, {
      routeNames,
      routeParamList,
      routeGetIdList
    }) : nextState;
  }
  const shouldUpdate = state !== nextState;
  useScheduleUpdate(() => {
    if (shouldUpdate) {
      setState(nextState);
    }
  });
  state = nextState;
  React156.useEffect(() => {
    setKey(navigatorKey);
    if (!getIsInitial()) {
      setState(nextState);
    }
    return () => {
      setTimeout(() => {
        if (getCurrentState() !== void 0 && getKey() === navigatorKey) {
          setState(void 0);
        }
      }, 0);
    };
  }, []);
  const initializedStateRef = React156.useRef();
  initializedStateRef.current = initializedState;
  const getState = React156.useCallback(() => {
    const currentState2 = getCurrentState();
    return isStateInitialized(currentState2) ? currentState2 : initializedStateRef.current;
  }, [getCurrentState, isStateInitialized]);
  const emitter = useEventEmitter((e) => {
    let routeNames2 = [];
    let route2;
    if (e.target) {
      var _route;
      route2 = state.routes.find((route3) => route3.key === e.target);
      if ((_route = route2) !== null && _route !== void 0 && _route.name) {
        routeNames2.push(route2.name);
      }
    } else {
      route2 = state.routes[state.index];
      routeNames2.push(...Object.keys(screens).filter((name) => {
        var _route2;
        return ((_route2 = route2) === null || _route2 === void 0 ? void 0 : _route2.name) === name;
      }));
    }
    if (route2 == null) {
      return;
    }
    const navigation3 = descriptors[route2.key].navigation;
    const listeners3 = [].concat(...routeNames2.map((name) => {
      const {
        listeners: listeners4
      } = screens[name];
      const map3 = typeof listeners4 === "function" ? listeners4({
        route: route2,
        navigation: navigation3
      }) : listeners4;
      return map3 ? Object.keys(map3).filter((type) => type === e.type).map((type) => map3 === null || map3 === void 0 ? void 0 : map3[type]) : void 0;
    })).filter((cb, i, self2) => cb && self2.lastIndexOf(cb) === i);
    listeners3.forEach((listener3) => listener3 === null || listener3 === void 0 ? void 0 : listener3(e));
  });
  useFocusEvents({
    state,
    emitter
  });
  React156.useEffect(() => {
    emitter.emit({
      type: "state",
      data: {
        state
      }
    });
  }, [emitter, state]);
  const {
    listeners: childListeners,
    addListener: addListener3
  } = useChildListeners();
  const {
    keyedListeners,
    addKeyedListener
  } = useKeyedChildListeners();
  const onAction = useOnAction({
    router: router2,
    getState,
    setState,
    key: route === null || route === void 0 ? void 0 : route.key,
    actionListeners: childListeners.action,
    beforeRemoveListeners: keyedListeners.beforeRemove,
    routerConfigOptions: {
      routeNames,
      routeParamList,
      routeGetIdList
    },
    emitter
  });
  const onRouteFocus = useOnRouteFocus({
    router: router2,
    key: route === null || route === void 0 ? void 0 : route.key,
    getState,
    setState
  });
  const navigation2 = useNavigationHelpers({
    onAction,
    getState,
    emitter,
    router: router2
  });
  useFocusedListenersChildrenAdapter({
    navigation: navigation2,
    focusedListeners: childListeners.focus
  });
  useOnGetState({
    getState,
    getStateListeners: keyedListeners.getState
  });
  const descriptors = useDescriptors({
    state,
    screens,
    navigation: navigation2,
    screenOptions: options.screenOptions,
    onAction,
    getState,
    setState,
    onRouteFocus,
    addListener: addListener3,
    addKeyedListener,
    router: router2,
    emitter
  });
  useCurrentRender({
    state,
    navigation: navigation2,
    descriptors
  });
  return {
    state,
    navigation: navigation2,
    descriptors
  };
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useNavigation.js
var React157 = __toModule(require_react());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useRoute.js
var React158 = __toModule(require_react());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useFocusEffect.js
var React159 = __toModule(require_react());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useIsFocused.js
var React160 = __toModule(require_react());
var import_react33 = __toModule(require_react());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useNavigationState.js
var React161 = __toModule(require_react());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/getStateFromPath.js
var import_escape_string_regexp = __toModule(require_escape_string_regexp());
var queryString = __toModule(require_query_string());

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/checkLegacyPathConfig.js
function checkLegacyPathConfig(config) {
  let legacy = false;
  if (config) {
    legacy = Object.keys(config).some((key3) => key3 !== "screens" && key3 !== "initialRouteName");
    if (legacy && (config.hasOwnProperty("screens") || config.hasOwnProperty("initialRouteName"))) {
      throw new Error("Found invalid keys in the configuration object. See https://reactnavigation.org/docs/configuring-links/ for more details on the shape of the configuration object.");
    }
  }
  if (legacy) {
    return [legacy, {
      screens: config
    }];
  }
  return [legacy, config];
}

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/getStateFromPath.js
function getStateFromPath(path, options) {
  const [legacy, compatOptions] = checkLegacyPathConfig(options);
  let initialRoutes = [];
  if (compatOptions !== null && compatOptions !== void 0 && compatOptions.initialRouteName) {
    initialRoutes.push({
      initialRouteName: compatOptions.initialRouteName,
      connectedRoutes: Object.keys(compatOptions.screens)
    });
  }
  const screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;
  let remaining = path.replace(/\/+/g, "/").replace(/^\//, "").replace(/\?.*$/, "");
  remaining = remaining.endsWith("/") ? remaining : "".concat(remaining, "/");
  if (screens === void 0) {
    const routes2 = remaining.split("/").filter(Boolean).map((segment2, i, self2) => {
      const name = decodeURIComponent(segment2);
      if (i === self2.length - 1) {
        return {
          name,
          params: parseQueryParams(path)
        };
      }
      return {
        name
      };
    });
    if (routes2.length) {
      return createNestedStateObject(routes2, initialRoutes);
    }
    return void 0;
  }
  const configs = [].concat(...Object.keys(screens).map((key3) => createNormalizedConfigs(legacy, key3, screens, [], initialRoutes))).sort((a, b) => {
    if (a.pattern === b.pattern) {
      return b.routeNames.join(">").localeCompare(a.routeNames.join(">"));
    }
    if (a.pattern.startsWith(b.pattern)) {
      return -1;
    }
    if (b.pattern.startsWith(a.pattern)) {
      return 1;
    }
    const aParts = a.pattern.split("/");
    const bParts = b.pattern.split("/");
    const aWildcardIndex = aParts.indexOf("*");
    const bWildcardIndex = bParts.indexOf("*");
    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {
      return -1;
    }
    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {
      return 1;
    }
    if (aWildcardIndex === bWildcardIndex) {
      return bParts.length - aParts.length;
    }
    return bWildcardIndex - aWildcardIndex;
  });
  configs.reduce((acc2, config) => {
    if (acc2[config.pattern]) {
      const a = acc2[config.pattern].routeNames;
      const b = config.routeNames;
      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);
      if (!intersects) {
        throw new Error("Found conflicting screens with the same pattern. The pattern '".concat(config.pattern, "' resolves to both '").concat(a.join(" > "), "' and '").concat(b.join(" > "), "'. Patterns must be unique and cannot resolve to more than one screen."));
      }
    }
    return Object.assign(acc2, {
      [config.pattern]: config
    });
  }, {});
  if (remaining === "/") {
    const match = configs.find((config) => config.path === "" && config.routeNames.every((name) => {
      var _configs$find;
      return !((_configs$find = configs.find((c) => c.screen === name)) !== null && _configs$find !== void 0 && _configs$find.path);
    }));
    if (match) {
      return createNestedStateObject(match.routeNames.map((name, i, self2) => {
        if (i === self2.length - 1) {
          return {
            name,
            params: parseQueryParams(path, match.parse)
          };
        }
        return {
          name
        };
      }), initialRoutes);
    }
    return void 0;
  }
  let result;
  let current;
  if (legacy === false) {
    const {
      routes: routes2,
      remainingPath
    } = matchAgainstConfigs(remaining, configs.map((c) => ({
      ...c,
      regex: c.regex ? new RegExp(c.regex.source + "$") : void 0
    })));
    if (routes2 !== void 0) {
      current = createNestedStateObject(routes2, initialRoutes);
      remaining = remainingPath;
      result = current;
    }
  } else {
    while (remaining) {
      let {
        routes: routes2,
        remainingPath
      } = matchAgainstConfigs(remaining, configs);
      remaining = remainingPath;
      if (routes2 === void 0) {
        const segments = remaining.split("/");
        routes2 = [{
          name: decodeURIComponent(segments[0])
        }];
        segments.shift();
        remaining = segments.join("/");
      }
      const state = createNestedStateObject(routes2, initialRoutes);
      if (current) {
        var _current2;
        while ((_current = current) !== null && _current !== void 0 && _current.routes[current.index || 0].state) {
          var _current;
          current = current.routes[current.index || 0].state;
        }
        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;
      } else {
        result = state;
      }
      current = state;
    }
  }
  if (current == null || result == null) {
    return void 0;
  }
  const route = findFocusedRoute(current);
  const params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));
  if (params) {
    route.params = {
      ...route.params,
      ...params
    };
  }
  return result;
}
var joinPaths = (...paths) => [].concat(...paths.map((p) => p.split("/"))).filter(Boolean).join("/");
var matchAgainstConfigs = (remaining, configs) => {
  let routes2;
  let remainingPath = remaining;
  for (const config of configs) {
    if (!config.regex) {
      continue;
    }
    const match = remainingPath.match(config.regex);
    if (match) {
      var _config$pattern;
      const matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split("/").filter((p) => p.startsWith(":")).reduce((acc2, p, i) => Object.assign(acc2, {
        [p]: match[(i + 1) * 2].replace(/\//, "")
      }), {});
      routes2 = config.routeNames.map((name) => {
        var _config$path;
        const config2 = configs.find((c) => c.screen === name);
        const params = config2 === null || config2 === void 0 ? void 0 : (_config$path = config2.path) === null || _config$path === void 0 ? void 0 : _config$path.split("/").filter((p) => p.startsWith(":")).reduce((acc2, p) => {
          const value = matchedParams[p];
          if (value) {
            var _config$parse;
            const key3 = p.replace(/^:/, "").replace(/\?$/, "");
            acc2[key3] = (_config$parse = config2.parse) !== null && _config$parse !== void 0 && _config$parse[key3] ? config2.parse[key3](value) : value;
          }
          return acc2;
        }, {});
        if (params && Object.keys(params).length) {
          return {
            name,
            params
          };
        }
        return {
          name
        };
      });
      remainingPath = remainingPath.replace(match[1], "");
      break;
    }
  }
  return {
    routes: routes2,
    remainingPath
  };
};
var createNormalizedConfigs = (legacy, screen, routeConfig, routeNames = [], initials, parentPattern) => {
  const configs = [];
  routeNames.push(screen);
  const config = routeConfig[screen];
  if (typeof config === "string") {
    const pattern2 = parentPattern ? joinPaths(parentPattern, config) : config;
    configs.push(createConfigItem(legacy, screen, routeNames, pattern2, config));
  } else if (typeof config === "object") {
    let pattern2;
    if (typeof config.path === "string") {
      if (legacy) {
        pattern2 = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;
      } else {
        if (config.exact && config.path === void 0) {
          throw new Error("A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.");
        }
        pattern2 = config.exact !== true ? joinPaths(parentPattern || "", config.path || "") : config.path || "";
      }
      configs.push(createConfigItem(legacy, screen, routeNames, pattern2, config.path, config.parse));
    }
    if (config.screens) {
      if (config.initialRouteName) {
        initials.push({
          initialRouteName: config.initialRouteName,
          connectedRoutes: Object.keys(config.screens)
        });
      }
      Object.keys(config.screens).forEach((nestedConfig) => {
        var _pattern;
        const result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, (_pattern = pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);
        configs.push(...result);
      });
    }
  }
  routeNames.pop();
  return configs;
};
var createConfigItem = (legacy, screen, routeNames, pattern2, path, parse2) => {
  pattern2 = pattern2.split("/").filter(Boolean).join("/");
  const regex2 = pattern2 ? new RegExp("^(".concat(pattern2.split("/").map((it) => {
    if (legacy && it === "*") {
      throw new Error("Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config");
    }
    if (it.startsWith(":")) {
      return "(([^/]+\\/)".concat(it.endsWith("?") ? "?" : "", ")");
    }
    return "".concat(it === "*" ? ".*" : (0, import_escape_string_regexp.default)(it), "\\/");
  }).join(""), ")")) : void 0;
  return {
    screen,
    regex: regex2,
    pattern: pattern2,
    path,
    routeNames: [...routeNames],
    parse: parse2
  };
};
var findParseConfigForRoute = (routeName, flatConfig) => {
  for (const config of flatConfig) {
    if (routeName === config.routeNames[config.routeNames.length - 1]) {
      return config.parse;
    }
  }
  return void 0;
};
var findInitialRoute = (routeName, initialRoutes) => {
  for (const config of initialRoutes) {
    if (config.connectedRoutes.includes(routeName)) {
      return config.initialRouteName === routeName ? void 0 : config.initialRouteName;
    }
  }
  return void 0;
};
var createStateObject = (initialRoute, route, isEmpty) => {
  if (isEmpty) {
    if (initialRoute) {
      return {
        index: 1,
        routes: [{
          name: initialRoute
        }, route]
      };
    } else {
      return {
        routes: [route]
      };
    }
  } else {
    if (initialRoute) {
      return {
        index: 1,
        routes: [{
          name: initialRoute
        }, {
          ...route,
          state: {
            routes: []
          }
        }]
      };
    } else {
      return {
        routes: [{
          ...route,
          state: {
            routes: []
          }
        }]
      };
    }
  }
};
var createNestedStateObject = (routes2, initialRoutes) => {
  let state;
  let route = routes2.shift();
  let initialRoute = findInitialRoute(route.name, initialRoutes);
  state = createStateObject(initialRoute, route, routes2.length === 0);
  if (routes2.length > 0) {
    let nestedState = state;
    while (route = routes2.shift()) {
      initialRoute = findInitialRoute(route.name, initialRoutes);
      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;
      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes2.length === 0);
      if (routes2.length > 0) {
        nestedState = nestedState.routes[nestedStateIndex].state;
      }
    }
  }
  return state;
};
var findFocusedRoute = (state) => {
  var _current4;
  let current = state;
  while ((_current3 = current) !== null && _current3 !== void 0 && _current3.routes[current.index || 0].state) {
    var _current3;
    current = current.routes[current.index || 0].state;
  }
  const route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];
  return route;
};
var parseQueryParams = (path, parseConfig) => {
  const query2 = path.split("?")[1];
  const params = queryString.parse(query2);
  if (parseConfig) {
    Object.keys(params).forEach((name) => {
      if (parseConfig[name] && typeof params[name] === "string") {
        params[name] = parseConfig[name](params[name]);
      }
    });
  }
  return Object.keys(params).length ? params : void 0;
};

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/getPathFromState.js
var queryString2 = __toModule(require_query_string());
var getActiveRoute = (state) => {
  const route = typeof state.index === "number" ? state.routes[state.index] : state.routes[state.routes.length - 1];
  if (route.state) {
    return getActiveRoute(route.state);
  }
  return route;
};
function getPathFromState(state, options) {
  if (state == null) {
    throw Error("Got 'undefined' for the navigation state. You must pass a valid state object.");
  }
  const [legacy, compatOptions] = checkLegacyPathConfig(options);
  const configs = compatOptions ? createNormalizedConfigs2(legacy, compatOptions.screens) : {};
  let path = "/";
  let current = state;
  const allParams = {};
  while (current) {
    let index = typeof current.index === "number" ? current.index : 0;
    let route = current.routes[index];
    let pattern2;
    let focusedParams;
    let focusedRoute = getActiveRoute(state);
    let currentOptions = configs;
    let nestedRouteNames = [];
    let hasNext = true;
    while (route.name in currentOptions && hasNext) {
      pattern2 = currentOptions[route.name].pattern;
      nestedRouteNames.push(route.name);
      if (route.params) {
        var _currentOptions$route;
        const stringify2 = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;
        const currentParams = fromEntries(Object.entries(route.params).map(([key3, value]) => [key3, stringify2 !== null && stringify2 !== void 0 && stringify2[key3] ? stringify2[key3](value) : String(value)]));
        if (pattern2) {
          Object.assign(allParams, currentParams);
        }
        if (focusedRoute === route) {
          var _pattern;
          focusedParams = {
            ...currentParams
          };
          (_pattern = pattern2) === null || _pattern === void 0 ? void 0 : _pattern.split("/").filter((p) => p.startsWith(":")).forEach((p) => {
            const name = getParamName(p);
            if (focusedParams) {
              delete focusedParams[name];
            }
          });
        }
      }
      if (!currentOptions[route.name].screens || route.state === void 0) {
        hasNext = false;
      } else {
        index = typeof route.state.index === "number" ? route.state.index : route.state.routes.length - 1;
        const nextRoute = route.state.routes[index];
        const nestedConfig = currentOptions[route.name].screens;
        if (nestedConfig && nextRoute.name in nestedConfig) {
          route = nextRoute;
          currentOptions = nestedConfig;
        } else {
          hasNext = false;
        }
      }
    }
    if (pattern2 === void 0) {
      pattern2 = nestedRouteNames.join("/");
    }
    if (currentOptions[route.name] !== void 0) {
      path += pattern2.split("/").map((p) => {
        const name = getParamName(p);
        if (p === "*") {
          if (legacy) {
            throw new Error("Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config");
          }
          return route.name;
        }
        if (p.startsWith(":")) {
          const value = allParams[name];
          if (value === void 0 && p.endsWith("?")) {
            return "";
          }
          return encodeURIComponent(value);
        }
        return encodeURIComponent(p);
      }).join("/");
    } else {
      path += encodeURIComponent(route.name);
    }
    if (!focusedParams) {
      focusedParams = focusedRoute.params;
    }
    if (route.state) {
      path += "/";
    } else if (focusedParams) {
      for (let param in focusedParams) {
        if (focusedParams[param] === "undefined") {
          delete focusedParams[param];
        }
      }
      const query2 = queryString2.stringify(focusedParams);
      if (query2) {
        path += "?".concat(query2);
      }
    }
    current = route.state;
  }
  path = path.replace(/\/+/g, "/");
  path = path.length > 1 ? path.replace(/\/$/, "") : path;
  return path;
}
var fromEntries = (entries) => entries.reduce((acc2, [k, v]) => {
  if (acc2.hasOwnProperty(k)) {
    throw new Error("A value for key '".concat(k, "' already exists in the object."));
  }
  acc2[k] = v;
  return acc2;
}, {});
var getParamName = (pattern2) => pattern2.replace(/^:/, "").replace(/\?$/, "");
var joinPaths2 = (...paths) => [].concat(...paths.map((p) => p.split("/"))).filter(Boolean).join("/");
var createConfigItem2 = (legacy, config, parentPattern) => {
  var _pattern2;
  if (typeof config === "string") {
    const pattern3 = parentPattern ? joinPaths2(parentPattern, config) : config;
    return {
      pattern: pattern3
    };
  }
  let pattern2;
  if (legacy) {
    pattern2 = config.exact !== true && parentPattern && config.path ? joinPaths2(parentPattern, config.path) : config.path;
  } else {
    if (config.exact && config.path === void 0) {
      throw new Error("A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.");
    }
    pattern2 = config.exact !== true ? joinPaths2(parentPattern || "", config.path || "") : config.path || "";
  }
  const screens = config.screens ? createNormalizedConfigs2(legacy, config.screens, pattern2) : void 0;
  return {
    pattern: (_pattern2 = pattern2) === null || _pattern2 === void 0 ? void 0 : _pattern2.split("/").filter(Boolean).join("/"),
    stringify: config.stringify,
    screens
  };
};
var createNormalizedConfigs2 = (legacy, options, pattern2) => fromEntries(Object.entries(options).map(([name, c]) => {
  const result = createConfigItem2(legacy, c, pattern2);
  return [name, result];
}));

// node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/getActionFromState.js
function getActionFromState(state, options) {
  var _state$index, _normalizedConfig$scr;
  const normalizedConfig = options ? createNormalizedConfigItem(options) : {};
  const routes2 = state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;
  if (routes2.length === 0) {
    return void 0;
  }
  if (!(routes2.length === 1 && routes2[0].key === void 0 || routes2.length === 2 && routes2[0].key === void 0 && routes2[0].name === (normalizedConfig === null || normalizedConfig === void 0 ? void 0 : normalizedConfig.initialRouteName) && routes2[1].key === void 0)) {
    return {
      type: "RESET",
      payload: state
    };
  }
  const route = state.routes[(_state$index = state.index) !== null && _state$index !== void 0 ? _state$index : state.routes.length - 1];
  let current = route === null || route === void 0 ? void 0 : route.state;
  let config = normalizedConfig === null || normalizedConfig === void 0 ? void 0 : (_normalizedConfig$scr = normalizedConfig.screens) === null || _normalizedConfig$scr === void 0 ? void 0 : _normalizedConfig$scr[route === null || route === void 0 ? void 0 : route.name];
  let params = {
    ...route.params
  };
  let payload = route ? {
    name: route.name,
    params
  } : void 0;
  while (current) {
    var _config, _config2, _config2$screens;
    if (current.routes.length === 0) {
      return void 0;
    }
    const routes3 = current.index != null ? current.routes.slice(0, current.index + 1) : current.routes;
    const route2 = routes3[routes3.length - 1];
    Object.assign(params, {
      initial: void 0,
      screen: void 0,
      params: void 0,
      state: void 0
    });
    if (routes3.length === 1 && routes3[0].key === void 0) {
      params.initial = true;
      params.screen = route2.name;
    } else if (routes3.length === 2 && routes3[0].key === void 0 && routes3[0].name === ((_config = config) === null || _config === void 0 ? void 0 : _config.initialRouteName) && routes3[1].key === void 0) {
      params.initial = false;
      params.screen = route2.name;
    } else {
      params.state = current;
      break;
    }
    if (route2.state) {
      params.params = {
        ...route2.params
      };
      params = params.params;
    } else {
      params.params = route2.params;
    }
    current = route2.state;
    config = (_config2 = config) === null || _config2 === void 0 ? void 0 : (_config2$screens = _config2.screens) === null || _config2$screens === void 0 ? void 0 : _config2$screens[route2.name];
  }
  if (!payload) {
    return;
  }
  return {
    type: "NAVIGATE",
    payload
  };
}
var createNormalizedConfigItem = (config) => typeof config === "object" && config != null ? {
  initialRouteName: config.initialRouteName,
  screens: config.screens != null ? createNormalizedConfigs3(config.screens) : void 0
} : {};
var createNormalizedConfigs3 = (options) => Object.entries(options).reduce((acc2, [k, v]) => {
  acc2[k] = createNormalizedConfigItem(v);
  return acc2;
}, {});

// node_modules/@react-navigation/native/lib/module/NavigationContainer.js
var React170 = __toModule(require_react());

// node_modules/@react-navigation/native/lib/module/theming/ThemeProvider.js
var React163 = __toModule(require_react());

// node_modules/@react-navigation/native/lib/module/theming/ThemeContext.js
var React162 = __toModule(require_react());

// node_modules/@react-navigation/native/lib/module/theming/DefaultTheme.js
var DefaultTheme2 = {
  dark: false,
  colors: {
    primary: "rgb(0, 122, 255)",
    background: "rgb(242, 242, 242)",
    card: "rgb(255, 255, 255)",
    text: "rgb(28, 28, 30)",
    border: "rgb(216, 216, 216)",
    notification: "rgb(255, 59, 48)"
  }
};
var DefaultTheme_default2 = DefaultTheme2;

// node_modules/@react-navigation/native/lib/module/theming/ThemeContext.js
var ThemeContext = /* @__PURE__ */ React162.createContext(DefaultTheme_default2);
ThemeContext.displayName = "ThemeContext";
var ThemeContext_default = ThemeContext;

// node_modules/@react-navigation/native/lib/module/theming/ThemeProvider.js
function ThemeProvider2({
  value,
  children
}) {
  return /* @__PURE__ */ React163.createElement(ThemeContext_default.Provider, {
    value
  }, children);
}

// node_modules/@react-navigation/native/lib/module/LinkingContext.js
var React164 = __toModule(require_react());
var LinkingContext = /* @__PURE__ */ React164.createContext({
  options: void 0
});
LinkingContext.displayName = "LinkingContext";
var LinkingContext_default = LinkingContext;

// node_modules/@react-navigation/native/lib/module/useThenable.js
var React165 = __toModule(require_react());
function useThenable(create3) {
  const [promise] = React165.useState(create3);
  let initialState2 = [false, void 0];
  promise.then((result) => {
    initialState2 = [true, result];
  });
  const [state, setState] = React165.useState(initialState2);
  const [resolved] = state;
  React165.useEffect(() => {
    let cancelled = false;
    const resolve = async () => {
      let result;
      try {
        result = await promise;
      } finally {
        if (!cancelled) {
          setState([true, result]);
        }
      }
    };
    if (!resolved) {
      resolve();
    }
    return () => {
      cancelled = true;
    };
  }, [promise, resolved]);
  return state;
}

// node_modules/@react-navigation/native/lib/module/useLinking.js
var React167 = __toModule(require_react());

// node_modules/@react-navigation/native/lib/module/ServerContext.js
var React166 = __toModule(require_react());
var ServerContext = /* @__PURE__ */ React166.createContext(void 0);
var ServerContext_default = ServerContext;

// node_modules/@react-navigation/native/lib/module/useLinking.js
var createMemoryHistory = () => {
  let index = 0;
  let items2 = [];
  const pending = [];
  const interrupt = () => {
    pending.forEach((it) => {
      const cb = it.cb;
      it.cb = () => cb(true);
    });
  };
  const history3 = {
    get index() {
      var _window$history$state;
      const id2 = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;
      if (id2) {
        const index2 = items2.findIndex((item) => item.id === id2);
        return index2 > -1 ? index2 : 0;
      }
      return 0;
    },
    get(index2) {
      return items2[index2];
    },
    backIndex({
      path
    }) {
      for (let i = index - 1; i >= 0; i--) {
        const item = items2[i];
        if (item.path === path) {
          return i;
        }
      }
      return -1;
    },
    push({
      path,
      state
    }) {
      interrupt();
      const id2 = nanoid();
      items2 = items2.slice(0, index + 1);
      items2.push({
        path,
        state,
        id: id2
      });
      index = items2.length - 1;
      window.history.pushState({
        id: id2
      }, "", path);
    },
    replace({
      path,
      state
    }) {
      var _window$history$state2, _window$history$state3;
      interrupt();
      const id2 = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();
      if (items2.length) {
        items2[index] = {
          path,
          state,
          id: id2
        };
      } else {
        items2.push({
          path,
          state,
          id: id2
        });
      }
      window.history.replaceState({
        id: id2
      }, "", path);
    },
    go(n) {
      interrupt();
      if (n > 0) {
        n = Math.min(n, items2.length - 1);
      } else if (n < 0) {
        n = index + n < 0 ? -index : n;
      }
      if (n === 0) {
        return;
      }
      index += n;
      return new Promise((resolve, reject) => {
        const done = (interrupted) => {
          clearTimeout(timer2);
          if (interrupted) {
            reject(new Error("History was changed during navigation."));
            return;
          }
          const {
            title
          } = window.document;
          window.document.title = "";
          window.document.title = title;
          resolve();
        };
        pending.push({
          ref: done,
          cb: done
        });
        const timer2 = setTimeout(() => {
          const index2 = pending.findIndex((it) => it.ref === done);
          if (index2 > -1) {
            pending[index2].cb();
            pending.splice(index2, 1);
          }
        }, 100);
        const onPopState = () => {
          const last = pending.pop();
          window.removeEventListener("popstate", onPopState);
          last === null || last === void 0 ? void 0 : last.cb();
        };
        window.addEventListener("popstate", onPopState);
        window.history.go(n);
      });
    },
    listen(listener3) {
      const onPopState = () => {
        if (pending.length) {
          return;
        }
        listener3();
      };
      window.addEventListener("popstate", onPopState);
      return () => window.removeEventListener("popstate", onPopState);
    }
  };
  return history3;
};
var findMatchingState = (a, b) => {
  if (a === void 0 || b === void 0 || a.key !== b.key) {
    return [void 0, void 0];
  }
  const aHistoryLength = a.history ? a.history.length : a.routes.length;
  const bHistoryLength = b.history ? b.history.length : b.routes.length;
  const aRoute = a.routes[a.index];
  const bRoute = b.routes[b.index];
  const aChildState = aRoute.state;
  const bChildState = bRoute.state;
  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === void 0 || bChildState === void 0 || aChildState.key !== bChildState.key) {
    return [a, b];
  }
  return findMatchingState(aChildState, bChildState);
};
var series = (cb) => {
  let handling = false;
  let queue2 = [];
  const callback = async () => {
    try {
      if (handling) {
        queue2.unshift(callback);
        return;
      }
      handling = true;
      await cb();
    } finally {
      handling = false;
      if (queue2.length) {
        const last = queue2.pop();
        last === null || last === void 0 ? void 0 : last();
      }
    }
  };
  return callback;
};
var isUsingLinking = false;
function useLinking(ref, {
  enabled = true,
  config,
  getStateFromPath: getStateFromPath2 = getStateFromPath,
  getPathFromState: getPathFromState2 = getPathFromState,
  getActionFromState: getActionFromState2 = getActionFromState
}) {
  React167.useEffect(() => {
    if (enabled !== false && isUsingLinking) {
      throw new Error(["Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:", "- You are not using both 'linking' prop and 'useLinking'", "- You don't have 'useLinking' in multiple components"].join("\n").trim());
    } else {
      isUsingLinking = enabled !== false;
    }
    return () => {
      isUsingLinking = false;
    };
  });
  const [history3] = React167.useState(createMemoryHistory);
  const enabledRef = React167.useRef(enabled);
  const configRef = React167.useRef(config);
  const getStateFromPathRef = React167.useRef(getStateFromPath2);
  const getActionFromStateRef = React167.useRef(getActionFromState2);
  const getPathFromStateRef = React167.useRef(getPathFromState2);
  React167.useEffect(() => {
    enabledRef.current = enabled;
    configRef.current = config;
    getStateFromPathRef.current = getStateFromPath2;
    getActionFromStateRef.current = getActionFromState2;
    getPathFromStateRef.current = getPathFromState2;
  });
  const server3 = React167.useContext(ServerContext_default);
  const getInitialState2 = React167.useCallback(() => {
    let value;
    if (enabledRef.current) {
      var _server$location;
      const location2 = (_server$location = server3 === null || server3 === void 0 ? void 0 : server3.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== "undefined" ? window.location : void 0;
      const path = location2 ? location2.pathname + location2.search : void 0;
      if (path) {
        value = getStateFromPathRef.current(path, configRef.current);
      }
    }
    const thenable = {
      then(onfulfilled) {
        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);
      },
      catch() {
        return thenable;
      }
    };
    return thenable;
  }, []);
  const previousIndexRef = React167.useRef(void 0);
  const previousStateRef = React167.useRef(void 0);
  const pendingPopStatePathRef = React167.useRef(void 0);
  React167.useEffect(() => {
    previousIndexRef.current = history3.index;
    return history3.listen(() => {
      var _previousIndexRef$cur;
      const navigation2 = ref.current;
      if (!navigation2 || !enabled) {
        return;
      }
      const path = location.pathname + location.search;
      const index = history3.index;
      const previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;
      previousIndexRef.current = index;
      pendingPopStatePathRef.current = path;
      const record2 = history3.get(index);
      if ((record2 === null || record2 === void 0 ? void 0 : record2.path) === path && record2 !== null && record2 !== void 0 && record2.state) {
        navigation2.resetRoot(record2.state);
        return;
      }
      const state = getStateFromPathRef.current(path, configRef.current);
      if (state) {
        const rootState = navigation2.getRootState();
        if (state.routes.some((r) => !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name)))) {
          console.warn("The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.");
          return;
        }
        if (index > previousIndex) {
          const action = getActionFromStateRef.current(state, configRef.current);
          if (action !== void 0) {
            try {
              navigation2.dispatch(action);
            } catch (e) {
              console.warn("An error occurred when trying to handle the link '".concat(path, "': ").concat(e.message));
            }
          } else {
            navigation2.resetRoot(state);
          }
        } else {
          navigation2.resetRoot(state);
        }
      } else {
        navigation2.resetRoot(state);
      }
    });
  }, [enabled, history3, ref]);
  React167.useEffect(() => {
    var _ref$current;
    if (!enabled) {
      return;
    }
    if (ref.current) {
      const state = ref.current.getRootState();
      if (state) {
        const path = getPathFromStateRef.current(state, configRef.current);
        if (previousStateRef.current === void 0) {
          previousStateRef.current = state;
        }
        history3.replace({
          path,
          state
        });
      }
    }
    const onStateChange = async () => {
      const navigation2 = ref.current;
      if (!navigation2 || !enabled) {
        return;
      }
      const previousState = previousStateRef.current;
      const state = navigation2.getRootState();
      const pendingPath = pendingPopStatePathRef.current;
      const path = getPathFromStateRef.current(state, configRef.current);
      previousStateRef.current = state;
      pendingPopStatePathRef.current = void 0;
      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);
      if (previousFocusedState && focusedState && path !== pendingPath) {
        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);
        if (historyDelta > 0) {
          history3.push({
            path,
            state
          });
        } else if (historyDelta < 0) {
          const nextIndex = history3.backIndex({
            path
          });
          const currentIndex = history3.index;
          try {
            if (nextIndex !== -1 && nextIndex < currentIndex) {
              await history3.go(nextIndex - currentIndex);
            } else {
              await history3.go(historyDelta);
            }
            history3.replace({
              path,
              state
            });
          } catch (e) {
          }
        } else {
          history3.replace({
            path,
            state
          });
        }
      } else {
        history3.replace({
          path,
          state
        });
      }
    };
    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener("state", series(onStateChange));
  });
  return {
    getInitialState: getInitialState2
  };
}

// node_modules/@react-navigation/native/lib/module/useDocumentTitle.js
var React168 = __toModule(require_react());
function useDocumentTitle(ref, {
  enabled = true,
  formatter = (options, route) => {
    var _options$title;
    return (_options$title = options === null || options === void 0 ? void 0 : options.title) !== null && _options$title !== void 0 ? _options$title : route === null || route === void 0 ? void 0 : route.name;
  }
} = {}) {
  React168.useEffect(() => {
    if (!enabled) {
      return;
    }
    const navigation2 = ref.current;
    if (navigation2) {
      const title = formatter(navigation2.getCurrentOptions(), navigation2.getCurrentRoute());
      document.title = title;
    }
    return navigation2 === null || navigation2 === void 0 ? void 0 : navigation2.addListener("options", (e) => {
      const title = formatter(e.data.options, navigation2 === null || navigation2 === void 0 ? void 0 : navigation2.getCurrentRoute());
      document.title = title;
    });
  });
}

// node_modules/@react-navigation/native/lib/module/useBackButton.js
var React169 = __toModule(require_react());
function useBackButton(ref) {
  React169.useEffect(() => {
    const subscription = BackHandler_default.addEventListener("hardwareBackPress", () => {
      const navigation2 = ref.current;
      if (navigation2 == null) {
        return false;
      }
      if (navigation2.canGoBack()) {
        navigation2.goBack();
        return true;
      }
      return false;
    });
    return () => subscription.remove();
  }, [ref]);
}

// node_modules/@react-navigation/native/lib/module/NavigationContainer.js
function _extends79() {
  _extends79 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends79.apply(this, arguments);
}
var NavigationContainer = /* @__PURE__ */ React170.forwardRef(function NavigationContainer2({
  theme: theme2 = DefaultTheme_default2,
  linking,
  fallback = null,
  documentTitle,
  onReady,
  ...rest
}, ref) {
  const isLinkingEnabled = linking ? linking.enabled !== false : false;
  const refContainer = React170.useRef(null);
  useBackButton(refContainer);
  useDocumentTitle(refContainer, documentTitle);
  const {
    getInitialState: getInitialState2
  } = useLinking(refContainer, {
    enabled: isLinkingEnabled,
    prefixes: [],
    ...linking
  });
  const [isResolved, initialState2] = useThenable(getInitialState2);
  React170.useImperativeHandle(ref, () => refContainer.current);
  const linkingContext = React170.useMemo(() => ({
    options: linking
  }), [linking]);
  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;
  const onReadyRef = React170.useRef(onReady);
  React170.useEffect(() => {
    onReadyRef.current = onReady;
  });
  React170.useEffect(() => {
    if (isReady) {
      var _onReadyRef$current;
      (_onReadyRef$current = onReadyRef.current) === null || _onReadyRef$current === void 0 ? void 0 : _onReadyRef$current.call(onReadyRef);
    }
  }, [isReady]);
  if (!isReady) {
    return fallback;
  }
  return /* @__PURE__ */ React170.createElement(LinkingContext_default.Provider, {
    value: linkingContext
  }, /* @__PURE__ */ React170.createElement(ThemeProvider2, {
    value: theme2
  }, /* @__PURE__ */ React170.createElement(BaseNavigationContainer_default, _extends79({}, rest, {
    initialState: rest.initialState == null ? initialState2 : rest.initialState,
    ref: refContainer
  }))));
});
var NavigationContainer_default = NavigationContainer;

// node_modules/@react-navigation/native/lib/module/theming/DarkTheme.js
var DarkTheme2 = {
  dark: true,
  colors: {
    primary: "rgb(10, 132, 255)",
    background: "rgb(1, 1, 1)",
    card: "rgb(18, 18, 18)",
    text: "rgb(229, 229, 231)",
    border: "rgb(39, 39, 41)",
    notification: "rgb(255, 69, 58)"
  }
};
var DarkTheme_default2 = DarkTheme2;

// node_modules/@react-navigation/native/lib/module/theming/useTheme.js
var React171 = __toModule(require_react());
function useTheme2() {
  const theme2 = React171.useContext(ThemeContext_default);
  return theme2;
}

// node_modules/@react-navigation/native/lib/module/Link.js
var React174 = __toModule(require_react());

// node_modules/@react-navigation/native/lib/module/useLinkProps.js
var React173 = __toModule(require_react());

// node_modules/@react-navigation/native/lib/module/useLinkTo.js
var React172 = __toModule(require_react());
function useLinkTo() {
  const navigation2 = React172.useContext(NavigationContext_default);
  const linking = React172.useContext(LinkingContext_default);
  const linkTo = React172.useCallback((path) => {
    if (!path.startsWith("/")) {
      throw new Error("The path must start with '/' (".concat(path, ")."));
    }
    if (navigation2 === void 0) {
      throw new Error("Couldn't find a navigation object. Is your component inside a screen in a navigator?");
    }
    const {
      options
    } = linking;
    const state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(path, options.config) : getStateFromPath(path, options === null || options === void 0 ? void 0 : options.config);
    if (state) {
      let root = navigation2;
      let current;
      while (current = root.dangerouslyGetParent()) {
        root = current;
      }
      const action = getActionFromState(state, options === null || options === void 0 ? void 0 : options.config);
      if (action !== void 0) {
        root.dispatch(action);
      } else {
        root.reset(state);
      }
    } else {
      throw new Error("Failed to parse the path to a navigation state.");
    }
  }, [linking, navigation2]);
  return linkTo;
}

// node_modules/@react-navigation/native/lib/module/useLinkProps.js
function useLinkProps({
  to,
  action
}) {
  const navigation2 = React173.useContext(NavigationHelpersContext_default);
  const linkTo = useLinkTo();
  const onPress = (e) => {
    var _e$currentTarget;
    let shouldHandle = false;
    if (Platform_default.OS !== "web" || !e) {
      shouldHandle = e ? !e.defaultPrevented : true;
    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [void 0, null, "", "self"].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {
      e.preventDefault();
      shouldHandle = true;
    }
    if (shouldHandle) {
      if (action) {
        if (navigation2) {
          navigation2.dispatch(action);
        } else {
          throw new Error("Couldn't find a navigation object.");
        }
      } else {
        if (typeof to !== "string") {
          throw new Error("To 'to' option is invalid (found '".concat(String(to), "'. It must be a valid string for navigation."));
        }
        linkTo(to);
      }
    }
  };
  return {
    href: to,
    accessibilityRole: "link",
    onPress
  };
}

// node_modules/@react-navigation/native/lib/module/Link.js
function Link({
  to,
  action,
  ...rest
}) {
  const props = useLinkProps({
    to,
    action
  });
  const onPress = (e) => {
    if ("onPress" in rest) {
      var _rest$onPress;
      (_rest$onPress = rest.onPress) === null || _rest$onPress === void 0 ? void 0 : _rest$onPress.call(rest, e);
    }
    props.onPress(e);
  };
  return /* @__PURE__ */ React174.createElement(Text_default, {
    ...props,
    ...rest,
    ...Platform_default.select({
      web: {
        onClick: onPress
      },
      default: {
        onPress
      }
    })
  });
}

// node_modules/@react-navigation/native/lib/module/useLinkBuilder.js
var React175 = __toModule(require_react());
var getRootStateForNavigate = (navigation2, state) => {
  const parent = navigation2.dangerouslyGetParent();
  if (parent) {
    const parentState = parent.dangerouslyGetState();
    return getRootStateForNavigate(parent, {
      index: 0,
      routes: [{
        ...parentState.routes[parentState.index],
        state
      }]
    });
  }
  return state;
};
function useLinkBuilder() {
  const navigation2 = React175.useContext(NavigationHelpersContext_default);
  const linking = React175.useContext(LinkingContext_default);
  const buildLink = React175.useCallback((name, params) => {
    const {
      options
    } = linking;
    if ((options === null || options === void 0 ? void 0 : options.enabled) === false) {
      return void 0;
    }
    const state = navigation2 ? getRootStateForNavigate(navigation2, {
      index: 0,
      routes: [{
        name,
        params
      }]
    }) : {
      index: 0,
      routes: [{
        name,
        params
      }]
    };
    const path = options !== null && options !== void 0 && options.getPathFromState ? options.getPathFromState(state, options === null || options === void 0 ? void 0 : options.config) : getPathFromState(state, options === null || options === void 0 ? void 0 : options.config);
    return path;
  }, [linking, navigation2]);
  return buildLink;
}

// src/App.tsx
var import_setimmediate = __toModule(require_setImmediate());

// src/navigators/Root.tsx
var import_react65 = __toModule(require_react());

// node_modules/@react-navigation/stack/lib/module/utils/conditional.js
var {
  add: add3,
  multiply: multiply3
} = Animated_default;
function conditional(condition, main, fallback) {
  return add3(multiply3(condition, main), multiply3(condition.interpolate({
    inputRange: [0, 1],
    outputRange: [1, 0]
  }), fallback));
}

// node_modules/@react-navigation/stack/lib/module/TransitionConfigs/CardStyleInterpolators.js
var {
  add: add4,
  multiply: multiply4
} = Animated_default;
function forHorizontalIOS({
  current,
  next,
  inverted,
  layouts: {
    screen
  }
}) {
  const translateFocused = multiply4(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.width, 0],
    extrapolate: "clamp"
  }), inverted);
  const translateUnfocused = next ? multiply4(next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, screen.width * -0.3],
    extrapolate: "clamp"
  }), inverted) : 0;
  const overlayOpacity = current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 0.07],
    extrapolate: "clamp"
  });
  const shadowOpacity = current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 0.3],
    extrapolate: "clamp"
  });
  return {
    cardStyle: {
      transform: [
        {
          translateX: translateFocused
        },
        {
          translateX: translateUnfocused
        }
      ]
    },
    overlayStyle: {
      opacity: overlayOpacity
    },
    shadowStyle: {
      shadowOpacity
    }
  };
}
function forVerticalIOS({
  current,
  inverted,
  layouts: {
    screen
  }
}) {
  const translateY = multiply4(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height, 0],
    extrapolate: "clamp"
  }), inverted);
  return {
    cardStyle: {
      transform: [
        {
          translateY
        }
      ]
    }
  };
}
function forFadeFromBottomAndroid({
  current,
  inverted,
  layouts: {
    screen
  },
  closing
}) {
  const translateY = multiply4(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height * 0.08, 0],
    extrapolate: "clamp"
  }), inverted);
  const opacity3 = conditional(closing, current.progress, current.progress.interpolate({
    inputRange: [0, 0.5, 0.9, 1],
    outputRange: [0, 0.25, 0.7, 1]
  }));
  return {
    cardStyle: {
      opacity: opacity3,
      transform: [{
        translateY
      }]
    }
  };
}
function forRevealFromBottomAndroid({
  current,
  next,
  inverted,
  layouts: {
    screen
  }
}) {
  const containerTranslateY = multiply4(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height, 0],
    extrapolate: "clamp"
  }), inverted);
  const cardTranslateYFocused = multiply4(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height * (95.9 / 100) * -1, 0],
    extrapolate: "clamp"
  }), inverted);
  const cardTranslateYUnfocused = next ? multiply4(next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, screen.height * (2 / 100) * -1],
    extrapolate: "clamp"
  }), inverted) : 0;
  const overlayOpacity = current.progress.interpolate({
    inputRange: [0, 0.36, 1],
    outputRange: [0, 0.1, 0.1],
    extrapolate: "clamp"
  });
  return {
    containerStyle: {
      overflow: "hidden",
      transform: [{
        translateY: containerTranslateY
      }]
    },
    cardStyle: {
      transform: [{
        translateY: cardTranslateYFocused
      }, {
        translateY: cardTranslateYUnfocused
      }]
    },
    overlayStyle: {
      opacity: overlayOpacity
    }
  };
}
function forScaleFromCenterAndroid({
  current,
  next,
  closing
}) {
  const progress = add4(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: "clamp"
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: "clamp"
  }) : 0);
  const opacity3 = progress.interpolate({
    inputRange: [0, 0.75, 0.875, 1, 1.0825, 1.2075, 2],
    outputRange: [0, 0, 1, 1, 1, 1, 0]
  });
  const scale2 = conditional(closing, current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0.9, 1],
    extrapolate: "clamp"
  }), progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [0.85, 1, 1.1]
  }));
  return {
    containerStyle: {
      opacity: opacity3,
      transform: [{
        scale: scale2
      }]
    }
  };
}
function forNoAnimation() {
  return {};
}

// node_modules/@react-navigation/stack/lib/module/TransitionConfigs/HeaderStyleInterpolators.js
var {
  add: add5
} = Animated_default;
function forFade({
  current,
  next
}) {
  const progress = add5(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: "clamp"
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: "clamp"
  }) : 0);
  const opacity3 = progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [0, 1, 0]
  });
  return {
    leftButtonStyle: {
      opacity: opacity3
    },
    rightButtonStyle: {
      opacity: opacity3
    },
    titleStyle: {
      opacity: opacity3
    },
    backgroundStyle: {
      opacity: progress.interpolate({
        inputRange: [0, 1, 1.9, 2],
        outputRange: [0, 1, 1, 0]
      })
    }
  };
}
function forSlideLeft({
  current,
  next,
  layouts: {
    screen
  }
}) {
  const progress = add5(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: "clamp"
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: "clamp"
  }) : 0);
  const translateX = progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: I18nManager_default.isRTL ? [-screen.width, 0, screen.width] : [screen.width, 0, -screen.width]
  });
  const transform = [{
    translateX
  }];
  return {
    leftButtonStyle: {
      transform
    },
    rightButtonStyle: {
      transform
    },
    titleStyle: {
      transform
    },
    backgroundStyle: {
      transform
    }
  };
}
function forSlideRight({
  current,
  next,
  layouts: {
    screen
  }
}) {
  const progress = add5(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: "clamp"
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: "clamp"
  }) : 0);
  const translateX = progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: I18nManager_default.isRTL ? [screen.width, 0, -screen.width] : [-screen.width, 0, screen.width]
  });
  const transform = [{
    translateX
  }];
  return {
    leftButtonStyle: {
      transform
    },
    rightButtonStyle: {
      transform
    },
    titleStyle: {
      transform
    },
    backgroundStyle: {
      transform
    }
  };
}
function forSlideUp({
  current,
  next,
  layouts: {
    header: header2
  }
}) {
  const progress = add5(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: "clamp"
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: "clamp"
  }) : 0);
  const translateY = progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [-header2.height, 0, -header2.height]
  });
  const transform = [{
    translateY
  }];
  return {
    leftButtonStyle: {
      transform
    },
    rightButtonStyle: {
      transform
    },
    titleStyle: {
      transform
    },
    backgroundStyle: {
      transform
    }
  };
}
function forNoAnimation2() {
  return {};
}

// node_modules/@react-navigation/stack/lib/module/TransitionConfigs/TransitionSpecs.js
var TransitionIOSSpec = {
  animation: "spring",
  config: {
    stiffness: 1e3,
    damping: 500,
    mass: 3,
    overshootClamping: true,
    restDisplacementThreshold: 10,
    restSpeedThreshold: 10
  }
};
var FadeInFromBottomAndroidSpec = {
  animation: "timing",
  config: {
    duration: 350,
    easing: Easing_default2.out(Easing_default2.poly(5))
  }
};
var FadeOutToBottomAndroidSpec = {
  animation: "timing",
  config: {
    duration: 150,
    easing: Easing_default2.in(Easing_default2.linear)
  }
};
var RevealFromBottomAndroidSpec = {
  animation: "timing",
  config: {
    duration: 425,
    easing: Easing_default2.bezier(0.35, 0.45, 0, 1)
  }
};
var ScaleFromCenterAndroidSpec = {
  animation: "timing",
  config: {
    duration: 400,
    easing: Easing_default2.bezier(0.35, 0.45, 0, 1)
  }
};

// node_modules/@react-navigation/stack/lib/module/TransitionConfigs/TransitionPresets.js
var ANDROID_VERSION_PIE = 28;
var ANDROID_VERSION_10 = 29;
var SlideFromRightIOS = {
  gestureDirection: "horizontal",
  transitionSpec: {
    open: TransitionIOSSpec,
    close: TransitionIOSSpec
  },
  cardStyleInterpolator: forHorizontalIOS,
  headerStyleInterpolator: forFade
};
var ModalSlideFromBottomIOS = {
  gestureDirection: "vertical",
  transitionSpec: {
    open: TransitionIOSSpec,
    close: TransitionIOSSpec
  },
  cardStyleInterpolator: forVerticalIOS,
  headerStyleInterpolator: forFade
};
var FadeFromBottomAndroid = {
  gestureDirection: "vertical",
  transitionSpec: {
    open: FadeInFromBottomAndroidSpec,
    close: FadeOutToBottomAndroidSpec
  },
  cardStyleInterpolator: forFadeFromBottomAndroid,
  headerStyleInterpolator: forFade
};
var RevealFromBottomAndroid = {
  gestureDirection: "vertical",
  transitionSpec: {
    open: RevealFromBottomAndroidSpec,
    close: RevealFromBottomAndroidSpec
  },
  cardStyleInterpolator: forRevealFromBottomAndroid,
  headerStyleInterpolator: forFade
};
var ScaleFromCenterAndroid = {
  gestureDirection: "horizontal",
  transitionSpec: {
    open: ScaleFromCenterAndroidSpec,
    close: ScaleFromCenterAndroidSpec
  },
  cardStyleInterpolator: forScaleFromCenterAndroid,
  headerStyleInterpolator: forFade
};
var DefaultTransition = Platform_default.select({
  ios: SlideFromRightIOS,
  android: Platform_default.Version >= ANDROID_VERSION_10 ? ScaleFromCenterAndroid : Platform_default.Version >= ANDROID_VERSION_PIE ? RevealFromBottomAndroid : FadeFromBottomAndroid,
  default: ScaleFromCenterAndroid
});
var ModalTransition = Platform_default.select({
  ios: ModalSlideFromBottomIOS,
  default: DefaultTransition
});

// node_modules/@react-navigation/stack/lib/module/navigators/createStackNavigator.js
var React198 = __toModule(require_react());

// node_modules/@react-navigation/stack/lib/module/views/Stack/StackView.js
var React197 = __toModule(require_react());

// node_modules/react-native-safe-area-context/lib/module/SafeAreaContext.js
var React177 = __toModule(require_react());

// node_modules/react-native-safe-area-context/lib/module/NativeSafeAreaProvider.js
var React176 = __toModule(require_react());
var CSSTransitions = {
  WebkitTransition: "webkitTransitionEnd",
  Transition: "transitionEnd",
  MozTransition: "transitionend",
  MSTransition: "msTransitionEnd",
  OTransition: "oTransitionEnd"
};
function NativeSafeAreaView({
  children,
  style,
  onInsetsChange
}) {
  React176.useEffect(() => {
    if (typeof document === "undefined") {
      return;
    }
    const element = createContextElement();
    document.body.appendChild(element);
    const onEnd = () => {
      const {
        paddingTop,
        paddingBottom,
        paddingLeft: paddingLeft2,
        paddingRight: paddingRight2
      } = window.getComputedStyle(element);
      const insets = {
        top: paddingTop ? parseInt(paddingTop, 10) : 0,
        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,
        left: paddingLeft2 ? parseInt(paddingLeft2, 10) : 0,
        right: paddingRight2 ? parseInt(paddingRight2, 10) : 0
      };
      const frame = {
        x: 0,
        y: 0,
        width: document.documentElement.offsetWidth,
        height: document.documentElement.offsetHeight
      };
      onInsetsChange({
        nativeEvent: {
          insets,
          frame
        }
      });
    };
    element.addEventListener(getSupportedTransitionEvent(), onEnd);
    onEnd();
    return () => {
      document.body.removeChild(element);
      element.removeEventListener(getSupportedTransitionEvent(), onEnd);
    };
  }, [onInsetsChange]);
  return /* @__PURE__ */ React176.createElement(View_default, {
    style
  }, children);
}
var _supportedTransitionEvent = null;
function getSupportedTransitionEvent() {
  if (_supportedTransitionEvent !== null) {
    return _supportedTransitionEvent;
  }
  const element = document.createElement("invalidtype");
  _supportedTransitionEvent = CSSTransitions.Transition;
  for (const key3 in CSSTransitions) {
    if (element.style[key3] !== void 0) {
      _supportedTransitionEvent = CSSTransitions[key3];
      break;
    }
  }
  return _supportedTransitionEvent;
}
var _supportedEnv = null;
function getSupportedEnv() {
  if (_supportedEnv !== null) {
    return _supportedEnv;
  }
  const {
    CSS
  } = window;
  if (CSS && CSS.supports && CSS.supports("top: constant(safe-area-inset-top)")) {
    _supportedEnv = "constant";
  } else {
    _supportedEnv = "env";
  }
  return _supportedEnv;
}
function getInset(side) {
  return "".concat(getSupportedEnv(), "(safe-area-inset-").concat(side, ")");
}
function createContextElement() {
  const element = document.createElement("div");
  const {
    style
  } = element;
  style.position = "fixed";
  style.left = "0";
  style.top = "0";
  style.width = "0";
  style.height = "0";
  style.zIndex = "-1";
  style.overflow = "hidden";
  style.visibility = "hidden";
  style.transitionDuration = "0.05s";
  style.transitionProperty = "padding";
  style.transitionDelay = "0s";
  style.paddingTop = getInset("top");
  style.paddingBottom = getInset("bottom");
  style.paddingLeft = getInset("left");
  style.paddingRight = getInset("right");
  return element;
}

// node_modules/react-native-safe-area-context/lib/module/SafeAreaContext.js
var SafeAreaInsetsContext = React177.createContext(null);
var SafeAreaFrameContext = React177.createContext(null);
function SafeAreaProvider({
  children,
  initialMetrics,
  initialSafeAreaInsets: initialSafeAreaInsets3,
  style
}) {
  var _ref, _ref2, _initialMetrics$inset, _ref3, _initialMetrics$frame;
  const parentInsets = useParentSafeAreaInsets();
  const parentFrame = useParentSafeAreaFrame();
  const [insets, setInsets] = React177.useState((_ref = (_ref2 = (_initialMetrics$inset = initialMetrics === null || initialMetrics === void 0 ? void 0 : initialMetrics.insets) !== null && _initialMetrics$inset !== void 0 ? _initialMetrics$inset : initialSafeAreaInsets3) !== null && _ref2 !== void 0 ? _ref2 : parentInsets) !== null && _ref !== void 0 ? _ref : null);
  const [frame, setFrame] = React177.useState((_ref3 = (_initialMetrics$frame = initialMetrics === null || initialMetrics === void 0 ? void 0 : initialMetrics.frame) !== null && _initialMetrics$frame !== void 0 ? _initialMetrics$frame : parentFrame) !== null && _ref3 !== void 0 ? _ref3 : {
    x: 0,
    y: 0,
    width: Dimensions.get("window").width,
    height: Dimensions.get("window").height
  });
  const onInsetsChange = React177.useCallback((event4) => {
    const {
      nativeEvent: {
        frame: nextFrame,
        insets: nextInsets
      }
    } = event4;
    if (nextFrame && (nextFrame.height !== frame.height || nextFrame.width !== frame.width || nextFrame.x !== frame.x || nextFrame.y !== frame.y)) {
      setFrame(nextFrame);
    }
    if (!insets || nextInsets.bottom !== insets.bottom || nextInsets.left !== insets.left || nextInsets.right !== insets.right || nextInsets.top !== insets.top) {
      setInsets(nextInsets);
    }
  }, [frame, insets]);
  return /* @__PURE__ */ React177.createElement(NativeSafeAreaView, {
    style: [styles87.fill, style],
    onInsetsChange
  }, insets != null ? /* @__PURE__ */ React177.createElement(SafeAreaFrameContext.Provider, {
    value: frame
  }, /* @__PURE__ */ React177.createElement(SafeAreaInsetsContext.Provider, {
    value: insets
  }, children)) : null);
}
var styles87 = StyleSheet_default2.create({
  fill: {
    flex: 1
  }
});
function useParentSafeAreaInsets() {
  return React177.useContext(SafeAreaInsetsContext);
}
function useParentSafeAreaFrame() {
  return React177.useContext(SafeAreaFrameContext);
}
function useSafeAreaInsets() {
  const safeArea = React177.useContext(SafeAreaInsetsContext);
  if (safeArea == null) {
    throw new Error("No safe area insets value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.");
  }
  return safeArea;
}
function useSafeArea() {
  return useSafeAreaInsets();
}
var SafeAreaConsumer = SafeAreaInsetsContext.Consumer;

// node_modules/react-native-safe-area-context/lib/module/InitialWindow.js
var initialWindowSafeAreaInsets = null;

// node_modules/@react-navigation/stack/lib/module/views/GestureHandler.js
var React178 = __toModule(require_react());
var Dummy = ({
  children
}) => /* @__PURE__ */ React178.createElement(React178.Fragment, null, children);
var PanGestureHandler = Dummy;
var GestureHandlerRootView = View_default;
var GestureState = {
  UNDETERMINED: 0,
  FAILED: 1,
  BEGAN: 2,
  CANCELLED: 3,
  ACTIVE: 4,
  END: 5
};

// node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.js
var React191 = __toModule(require_react());

// node_modules/@react-navigation/stack/lib/module/views/Screens.js
var React179 = __toModule(require_react());
var _Screens;
function _extends80() {
  _extends80 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends80.apply(this, arguments);
}
var Screens;
try {
  Screens = require_module();
} catch (e) {
}
var WebScreen = class extends React179.Component {
  render() {
    const {
      active,
      style,
      ...rest
    } = this.props;
    return /* @__PURE__ */ React179.createElement(View_default, _extends80({
      hidden: !active,
      style: [style, {
        display: active ? "flex" : "none"
      }]
    }, rest));
  }
};
var AnimatedWebScreen = Animated_default.createAnimatedComponent(WebScreen);
var shouldUseActivityState = (_Screens = Screens) === null || _Screens === void 0 ? void 0 : _Screens.shouldUseActivityState;
var MaybeScreenContainer = ({
  enabled,
  ...rest
}) => {
  var _Screens2;
  if (enabled && Platform_default.OS !== "web" && (_Screens2 = Screens) !== null && _Screens2 !== void 0 && _Screens2.screensEnabled()) {
    return /* @__PURE__ */ React179.createElement(Screens.ScreenContainer, _extends80({
      enabled
    }, rest));
  }
  return /* @__PURE__ */ React179.createElement(View_default, rest);
};
var MaybeScreen = ({
  enabled,
  active,
  ...rest
}) => {
  var _Screens3;
  if (enabled && Platform_default.OS === "web") {
    return /* @__PURE__ */ React179.createElement(AnimatedWebScreen, _extends80({
      active
    }, rest));
  }
  if (enabled && (_Screens3 = Screens) !== null && _Screens3 !== void 0 && _Screens3.screensEnabled()) {
    if (shouldUseActivityState) {
      return /* @__PURE__ */ React179.createElement(Screens.Screen, _extends80({
        enabled,
        activityState: active
      }, rest));
    } else {
      return /* @__PURE__ */ React179.createElement(Screens.Screen, _extends80({
        enabled,
        active
      }, rest));
    }
  }
  return /* @__PURE__ */ React179.createElement(View_default, rest);
};

// node_modules/@react-navigation/stack/lib/module/views/Header/HeaderSegment.js
var React184 = __toModule(require_react());

// node_modules/@react-navigation/stack/lib/module/views/Header/HeaderBackButton.js
var React181 = __toModule(require_react());

// node_modules/@react-navigation/stack/lib/module/views/MaskedView.js
function MaskedView({
  children
}) {
  return children;
}

// node_modules/@react-navigation/stack/lib/module/views/TouchableItem.js
var React180 = __toModule(require_react());
function _extends81() {
  _extends81 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends81.apply(this, arguments);
}
var ANDROID_VERSION_LOLLIPOP = 21;
function TouchableItem({
  borderless = false,
  pressColor = "rgba(0, 0, 0, .32)",
  style,
  children,
  ...rest
}) {
  if (Platform_default.OS === "android" && Platform_default.Version >= ANDROID_VERSION_LOLLIPOP) {
    return /* @__PURE__ */ React180.createElement(TouchableNativeFeedback_default, _extends81({}, rest, {
      useForeground: TouchableNativeFeedback_default.canUseNativeForeground(),
      background: TouchableNativeFeedback_default.Ripple(pressColor, borderless)
    }), /* @__PURE__ */ React180.createElement(View_default, {
      style
    }, React180.Children.only(children)));
  } else {
    return /* @__PURE__ */ React180.createElement(TouchableOpacity_default, _extends81({
      style
    }, rest), children);
  }
}

// node_modules/@react-navigation/stack/lib/module/views/Header/HeaderBackButton.js
function HeaderBackButton({
  disabled,
  allowFontScaling,
  backImage,
  label: label2,
  labelStyle,
  labelVisible = Platform_default.OS === "ios",
  onLabelLayout,
  onPress,
  pressColorAndroid: customPressColorAndroid,
  screenLayout,
  tintColor: customTintColor,
  titleLayout,
  truncatedLabel = "Back",
  accessibilityLabel = label2 && label2 !== "Back" ? "".concat(label2, ", back") : "Go back",
  style
}) {
  const {
    dark,
    colors
  } = useTheme2();
  const [initialLabelWidth, setInitialLabelWidth] = React181.useState(void 0);
  const tintColor = customTintColor !== void 0 ? customTintColor : Platform_default.select({
    ios: colors.primary,
    default: colors.text
  });
  const pressColorAndroid = customPressColorAndroid !== void 0 ? customPressColorAndroid : dark ? "rgba(255, 255, 255, .32)" : "rgba(0, 0, 0, .32)";
  const handleLabelLayout = (e) => {
    onLabelLayout === null || onLabelLayout === void 0 ? void 0 : onLabelLayout(e);
    setInitialLabelWidth(e.nativeEvent.layout.x + e.nativeEvent.layout.width);
  };
  const shouldTruncateLabel = () => {
    return !label2 || initialLabelWidth && titleLayout && screenLayout && (screenLayout.width - titleLayout.width) / 2 < initialLabelWidth + 26;
  };
  const renderBackImage = () => {
    if (backImage) {
      return backImage({
        tintColor
      });
    } else {
      return /* @__PURE__ */ React181.createElement(Image_default, {
        style: [styles88.icon, Boolean(labelVisible) && styles88.iconWithLabel, Boolean(tintColor) && {
          tintColor
        }],
        source: require_back_icon(),
        fadeDuration: 0
      });
    }
  };
  const renderLabel = () => {
    const leftLabelText = shouldTruncateLabel() ? truncatedLabel : label2;
    if (!labelVisible || leftLabelText === void 0) {
      return null;
    }
    const labelElement = /* @__PURE__ */ React181.createElement(View_default, {
      style: screenLayout ? [styles88.labelWrapper, {
        minWidth: screenLayout.width / 2 - 27
      }] : null
    }, /* @__PURE__ */ React181.createElement(Animated_default.Text, {
      accessible: false,
      onLayout: leftLabelText === label2 ? handleLabelLayout : void 0,
      style: [styles88.label, tintColor ? {
        color: tintColor
      } : null, labelStyle],
      numberOfLines: 1,
      allowFontScaling: !!allowFontScaling
    }, leftLabelText));
    if (backImage || Platform_default.OS !== "ios") {
      return labelElement;
    }
    return /* @__PURE__ */ React181.createElement(MaskedView, {
      maskElement: /* @__PURE__ */ React181.createElement(View_default, {
        style: styles88.iconMaskContainer
      }, /* @__PURE__ */ React181.createElement(Image_default, {
        source: require_back_icon_mask(),
        style: styles88.iconMask
      }), /* @__PURE__ */ React181.createElement(View_default, {
        style: styles88.iconMaskFillerRect
      }))
    }, labelElement);
  };
  const handlePress2 = () => onPress && requestAnimationFrame(onPress);
  return /* @__PURE__ */ React181.createElement(TouchableItem, {
    disabled,
    accessible: true,
    accessibilityRole: "button",
    accessibilityComponentType: "button",
    accessibilityLabel,
    accessibilityTraits: "button",
    testID: "header-back",
    delayPressIn: 0,
    onPress: disabled ? void 0 : handlePress2,
    pressColor: pressColorAndroid,
    style: [styles88.container, disabled && styles88.disabled, style],
    hitSlop: Platform_default.select({
      ios: void 0,
      default: {
        top: 16,
        right: 16,
        bottom: 16,
        left: 16
      }
    }),
    borderless: true
  }, /* @__PURE__ */ React181.createElement(React181.Fragment, null, renderBackImage(), renderLabel()));
}
var styles88 = StyleSheet_default2.create({
  container: {
    alignItems: "center",
    flexDirection: "row",
    ...Platform_default.select({
      ios: null,
      default: {
        marginVertical: 3,
        marginHorizontal: 11
      }
    })
  },
  disabled: {
    opacity: 0.5
  },
  label: {
    fontSize: 17,
    letterSpacing: 0.35
  },
  labelWrapper: {
    flexDirection: "row",
    alignItems: "flex-start"
  },
  icon: Platform_default.select({
    ios: {
      height: 21,
      width: 13,
      marginLeft: 8,
      marginRight: 22,
      marginVertical: 12,
      resizeMode: "contain",
      transform: [{
        scaleX: I18nManager_default.isRTL ? -1 : 1
      }]
    },
    default: {
      height: 24,
      width: 24,
      margin: 3,
      resizeMode: "contain",
      transform: [{
        scaleX: I18nManager_default.isRTL ? -1 : 1
      }]
    }
  }),
  iconWithLabel: Platform_default.OS === "ios" ? {
    marginRight: 6
  } : {},
  iconMaskContainer: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center"
  },
  iconMaskFillerRect: {
    flex: 1,
    backgroundColor: "#000"
  },
  iconMask: {
    height: 21,
    width: 13,
    marginLeft: -14.5,
    marginVertical: 12,
    alignSelf: "center",
    resizeMode: "contain",
    transform: [{
      scaleX: I18nManager_default.isRTL ? -1 : 1
    }]
  }
});

// node_modules/@react-navigation/stack/lib/module/views/Header/HeaderBackground.js
var React182 = __toModule(require_react());
function _extends82() {
  _extends82 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends82.apply(this, arguments);
}
function HeaderBackground({
  style,
  ...rest
}) {
  const {
    colors
  } = useTheme2();
  return /* @__PURE__ */ React182.createElement(Animated_default.View, _extends82({
    style: [styles89.container, {
      backgroundColor: colors.card,
      borderBottomColor: colors.border,
      shadowColor: colors.border
    }, style]
  }, rest));
}
var styles89 = StyleSheet_default2.create({
  container: {
    flex: 1,
    ...Platform_default.select({
      android: {
        elevation: 4
      },
      ios: {
        shadowOpacity: 0.85,
        shadowRadius: 0,
        shadowOffset: {
          width: 0,
          height: StyleSheet_default2.hairlineWidth
        }
      },
      default: {
        borderBottomWidth: StyleSheet_default2.hairlineWidth
      }
    })
  }
});

// node_modules/@react-navigation/stack/lib/module/utils/HeaderShownContext.js
var React183 = __toModule(require_react());
var HeaderShownContext = /* @__PURE__ */ React183.createContext(false);
var HeaderShownContext_default = HeaderShownContext;

// node_modules/@react-navigation/stack/lib/module/utils/memoize.js
function memoize(callback) {
  let previous;
  let result;
  return (...dependencies) => {
    let hasChanged = false;
    if (previous) {
      if (previous.length !== dependencies.length) {
        hasChanged = true;
      } else {
        for (let i = 0; i < previous.length; i++) {
          if (previous[i] !== dependencies[i]) {
            hasChanged = true;
            break;
          }
        }
      }
    } else {
      hasChanged = true;
    }
    previous = dependencies;
    if (hasChanged || result === void 0) {
      result = callback(...dependencies);
    }
    return result;
  };
}

// node_modules/@react-navigation/stack/lib/module/views/Header/HeaderSegment.js
var warnIfHeaderStylesDefined = (styles152) => {
  Object.keys(styles152).forEach((styleProp) => {
    const value = styles152[styleProp];
    if (styleProp === "position" && value === "absolute") {
      console.warn("position: 'absolute' is not supported on headerStyle. If you would like to render content under the header, use the 'headerTransparent' navigationOption.");
    } else if (value !== void 0) {
      console.warn("".concat(styleProp, " was given a value of ").concat(value, ", this has no effect on headerStyle."));
    }
  });
};
var getDefaultHeaderHeight = (layout, statusBarHeight2) => {
  const isLandscape = layout.width > layout.height;
  let headerHeight;
  if (Platform_default.OS === "ios") {
    if (isLandscape && !Platform_default.isPad) {
      headerHeight = 32;
    } else {
      headerHeight = 44;
    }
  } else if (Platform_default.OS === "android") {
    headerHeight = 56;
  } else {
    headerHeight = 64;
  }
  return headerHeight + statusBarHeight2;
};
function HeaderSegment(props) {
  const [leftLabelLayout, setLeftLabelLayout] = React184.useState(void 0);
  const [titleLayout, setTitleLayout] = React184.useState(void 0);
  const isParentHeaderShown = React184.useContext(HeaderShownContext_default);
  const handleTitleLayout = (e) => {
    const {
      height: height2,
      width
    } = e.nativeEvent.layout;
    setTitleLayout((titleLayout2) => {
      if (titleLayout2 && height2 === titleLayout2.height && width === titleLayout2.width) {
        return titleLayout2;
      }
      return {
        height: height2,
        width
      };
    });
  };
  const handleLeftLabelLayout = (e) => {
    const {
      height: height2,
      width
    } = e.nativeEvent.layout;
    if (leftLabelLayout && height2 === leftLabelLayout.height && width === leftLabelLayout.width) {
      return;
    }
    setLeftLabelLayout({
      height: height2,
      width
    });
  };
  const getInterpolatedStyle = memoize((styleInterpolator2, layout2, current, next, titleLayout2, leftLabelLayout2, headerHeight) => styleInterpolator2({
    current: {
      progress: current
    },
    next: next && {
      progress: next
    },
    layouts: {
      header: {
        height: headerHeight,
        width: layout2.width
      },
      screen: layout2,
      title: titleLayout2,
      leftLabel: leftLabelLayout2
    }
  }));
  const {
    scene,
    layout,
    insets,
    title: currentTitle,
    leftLabel: previousTitle,
    onGoBack,
    headerTitle,
    headerTitleAlign = Platform_default.select({
      ios: "center",
      default: "left"
    }),
    headerLeft: left2 = onGoBack ? (props2) => /* @__PURE__ */ React184.createElement(HeaderBackButton, props2) : void 0,
    headerTransparent,
    headerTintColor,
    headerBackground,
    headerRight: right2,
    headerBackImage: backImage,
    headerBackTitle: leftLabel,
    headerBackTitleVisible,
    headerTruncatedBackTitle: truncatedLabel,
    headerPressColorAndroid: pressColorAndroid,
    headerBackAccessibilityLabel: backAccessibilityLabel,
    headerBackAllowFontScaling: backAllowFontScaling,
    headerTitleAllowFontScaling: titleAllowFontScaling,
    headerTitleStyle: customTitleStyle,
    headerBackTitleStyle: customLeftLabelStyle,
    headerLeftContainerStyle: leftContainerStyle,
    headerRightContainerStyle: rightContainerStyle,
    headerTitleContainerStyle: titleContainerStyle,
    headerStyle: customHeaderStyle,
    headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,
    styleInterpolator
  } = props;
  const defaultHeight = getDefaultHeaderHeight(layout, headerStatusBarHeight);
  const {
    height = defaultHeight,
    minHeight,
    maxHeight,
    backgroundColor,
    borderBottomColor,
    borderBottomEndRadius,
    borderBottomLeftRadius: borderBottomLeftRadius2,
    borderBottomRightRadius: borderBottomRightRadius2,
    borderBottomStartRadius,
    borderBottomWidth,
    borderColor,
    borderEndColor,
    borderEndWidth,
    borderLeftColor: borderLeftColor2,
    borderLeftWidth: borderLeftWidth2,
    borderRadius,
    borderRightColor: borderRightColor2,
    borderRightWidth: borderRightWidth2,
    borderStartColor,
    borderStartWidth,
    borderStyle,
    borderTopColor,
    borderTopEndRadius,
    borderTopLeftRadius: borderTopLeftRadius2,
    borderTopRightRadius: borderTopRightRadius2,
    borderTopStartRadius,
    borderTopWidth,
    borderWidth,
    boxShadow,
    elevation,
    shadowColor,
    shadowOffset,
    shadowOpacity,
    shadowRadius,
    opacity: opacity3,
    transform,
    ...unsafeStyles
  } = StyleSheet_default2.flatten(customHeaderStyle || {});
  if (true) {
    warnIfHeaderStylesDefined(unsafeStyles);
  }
  const safeStyles = {
    backgroundColor,
    borderBottomColor,
    borderBottomEndRadius,
    borderBottomLeftRadius: borderBottomLeftRadius2,
    borderBottomRightRadius: borderBottomRightRadius2,
    borderBottomStartRadius,
    borderBottomWidth,
    borderColor,
    borderEndColor,
    borderEndWidth,
    borderLeftColor: borderLeftColor2,
    borderLeftWidth: borderLeftWidth2,
    borderRadius,
    borderRightColor: borderRightColor2,
    borderRightWidth: borderRightWidth2,
    borderStartColor,
    borderStartWidth,
    borderStyle,
    borderTopColor,
    borderTopEndRadius,
    borderTopLeftRadius: borderTopLeftRadius2,
    borderTopRightRadius: borderTopRightRadius2,
    borderTopStartRadius,
    borderTopWidth,
    borderWidth,
    boxShadow,
    elevation,
    shadowColor,
    shadowOffset,
    shadowOpacity,
    shadowRadius,
    opacity: opacity3,
    transform
  };
  for (const styleProp in safeStyles) {
    if (safeStyles[styleProp] === void 0) {
      delete safeStyles[styleProp];
    }
  }
  const {
    titleStyle,
    leftButtonStyle,
    leftLabelStyle,
    rightButtonStyle,
    backgroundStyle
  } = getInterpolatedStyle(styleInterpolator, layout, scene.progress.current, scene.progress.next, titleLayout, previousTitle ? leftLabelLayout : void 0, typeof height === "number" ? height : defaultHeight);
  const leftButton = left2 ? left2({
    backImage,
    pressColorAndroid,
    accessibilityLabel: backAccessibilityLabel,
    allowFontScaling: backAllowFontScaling,
    onPress: onGoBack,
    labelVisible: headerBackTitleVisible,
    label: leftLabel !== void 0 ? leftLabel : previousTitle,
    truncatedLabel,
    labelStyle: [leftLabelStyle, customLeftLabelStyle],
    onLabelLayout: handleLeftLabelLayout,
    screenLayout: layout,
    titleLayout,
    tintColor: headerTintColor,
    canGoBack: Boolean(onGoBack)
  }) : null;
  const rightButton = right2 ? right2({
    tintColor: headerTintColor
  }) : null;
  return /* @__PURE__ */ React184.createElement(React184.Fragment, null, /* @__PURE__ */ React184.createElement(Animated_default.View, {
    pointerEvents: "box-none",
    style: [StyleSheet_default2.absoluteFill, {
      zIndex: 0
    }, backgroundStyle]
  }, headerBackground ? headerBackground({
    style: safeStyles
  }) : headerTransparent ? null : /* @__PURE__ */ React184.createElement(HeaderBackground, {
    style: safeStyles
  })), /* @__PURE__ */ React184.createElement(Animated_default.View, {
    pointerEvents: "box-none",
    style: [{
      height,
      minHeight,
      maxHeight,
      opacity: opacity3,
      transform
    }]
  }, /* @__PURE__ */ React184.createElement(View_default, {
    pointerEvents: "none",
    style: {
      height: headerStatusBarHeight
    }
  }), /* @__PURE__ */ React184.createElement(View_default, {
    pointerEvents: "box-none",
    style: styles90.content
  }, leftButton ? /* @__PURE__ */ React184.createElement(Animated_default.View, {
    pointerEvents: "box-none",
    style: [styles90.left, {
      left: insets.left
    }, leftButtonStyle, leftContainerStyle]
  }, leftButton) : null, /* @__PURE__ */ React184.createElement(Animated_default.View, {
    pointerEvents: "box-none",
    style: [headerTitleAlign === "left" ? {
      position: "absolute",
      left: (leftButton ? 72 : 16) + insets.left,
      right: (rightButton ? 72 : 16) + insets.right
    } : {
      marginHorizontal: (leftButton ? 32 : 16) + (leftButton && headerBackTitleVisible !== false ? 40 : 0) + Math.max(insets.left, insets.right)
    }, titleStyle, titleContainerStyle]
  }, headerTitle({
    children: currentTitle,
    onLayout: handleTitleLayout,
    allowFontScaling: titleAllowFontScaling,
    tintColor: headerTintColor,
    style: customTitleStyle
  })), rightButton ? /* @__PURE__ */ React184.createElement(Animated_default.View, {
    pointerEvents: "box-none",
    style: [styles90.right, {
      right: insets.right
    }, rightButtonStyle, rightContainerStyle]
  }, rightButton) : null)));
}
var styles90 = StyleSheet_default2.create({
  content: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center"
  },
  left: {
    position: "absolute",
    left: 0,
    top: 0,
    bottom: 0,
    justifyContent: "center",
    alignItems: "flex-start"
  },
  right: {
    position: "absolute",
    right: 0,
    top: 0,
    bottom: 0,
    justifyContent: "center",
    alignItems: "flex-end"
  }
});

// node_modules/@react-navigation/stack/lib/module/views/Stack/CardContainer.js
var React190 = __toModule(require_react());

// node_modules/@react-navigation/stack/lib/module/views/Stack/Card.js
var React187 = __toModule(require_react());
var import_color39 = __toModule(require_color());

// node_modules/@react-navigation/stack/lib/module/views/Stack/CardSheet.js
var React185 = __toModule(require_react());
function _extends83() {
  _extends83 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends83.apply(this, arguments);
}
var CardSheet_default = /* @__PURE__ */ React185.forwardRef(function CardSheet({
  enabled,
  layout,
  style,
  ...rest
}, ref) {
  const [fill, setFill] = React185.useState(false);
  React185.useEffect(() => {
    if (typeof document === "undefined" || !document.body) {
      return;
    }
    const width = document.body.clientWidth;
    const height = document.body.clientHeight;
    setFill(width === layout.width && height === layout.height);
  }, [layout.height, layout.width]);
  return /* @__PURE__ */ React185.createElement(View_default, _extends83({}, rest, {
    ref,
    style: [enabled && fill ? styles91.page : styles91.card, style]
  }));
});
var styles91 = StyleSheet_default2.create({
  page: {
    minHeight: "100%"
  },
  card: {
    flex: 1,
    overflow: "hidden"
  }
});

// node_modules/@react-navigation/stack/lib/module/utils/CardAnimationContext.js
var React186 = __toModule(require_react());
var CardAnimationContext_default = /* @__PURE__ */ React186.createContext(void 0);

// node_modules/@react-navigation/stack/lib/module/utils/getInvertedMultiplier.js
function getInvertedMultiplier(gestureDirection) {
  switch (gestureDirection) {
    case "vertical":
      return 1;
    case "vertical-inverted":
      return -1;
    case "horizontal":
      return I18nManager_default.isRTL ? -1 : 1;
    case "horizontal-inverted":
      return I18nManager_default.isRTL ? 1 : -1;
  }
}

// node_modules/@react-navigation/stack/lib/module/utils/getDistanceForDirection.js
function getDistanceForDirection(layout, gestureDirection) {
  const multiplier = getInvertedMultiplier(gestureDirection);
  switch (gestureDirection) {
    case "vertical":
    case "vertical-inverted":
      return layout.height * multiplier;
    case "horizontal":
    case "horizontal-inverted":
      return layout.width * multiplier;
  }
}

// node_modules/@react-navigation/stack/lib/module/views/Stack/Card.js
function _extends84() {
  _extends84 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends84.apply(this, arguments);
}
function _defineProperty32(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var GESTURE_VELOCITY_IMPACT = 0.3;
var TRUE = 1;
var FALSE = 0;
var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;
var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;
var useNativeDriver = Platform_default.OS !== "web";
var hasOpacityStyle = (style) => {
  if (style) {
    const flattenedStyle = StyleSheet_default2.flatten(style);
    return flattenedStyle.opacity != null;
  }
  return false;
};
var Card2 = class extends React187.Component {
  constructor(...args) {
    super(...args);
    _defineProperty32(this, "isCurrentlyMounted", false);
    _defineProperty32(this, "isClosing", new Animated_default.Value(FALSE));
    _defineProperty32(this, "inverted", new Animated_default.Value(getInvertedMultiplier(this.props.gestureDirection)));
    _defineProperty32(this, "layout", {
      width: new Animated_default.Value(this.props.layout.width),
      height: new Animated_default.Value(this.props.layout.height)
    });
    _defineProperty32(this, "isSwiping", new Animated_default.Value(FALSE));
    _defineProperty32(this, "interactionHandle", void 0);
    _defineProperty32(this, "pendingGestureCallback", void 0);
    _defineProperty32(this, "lastToValue", void 0);
    _defineProperty32(this, "animate", ({
      closing,
      velocity
    }) => {
      const {
        gesture: gesture2,
        transitionSpec,
        onOpen,
        onClose,
        onTransition
      } = this.props;
      const toValue = this.getAnimateToValue({
        ...this.props,
        closing
      });
      this.lastToValue = toValue;
      const spec = closing ? transitionSpec.close : transitionSpec.open;
      const animation2 = spec.animation === "spring" ? Animated_default.spring : Animated_default.timing;
      this.setPointerEventsEnabled(!closing);
      this.handleStartInteraction();
      clearTimeout(this.pendingGestureCallback);
      onTransition === null || onTransition === void 0 ? void 0 : onTransition({
        closing,
        gesture: velocity !== void 0
      });
      animation2(gesture2, {
        ...spec.config,
        velocity,
        toValue,
        useNativeDriver,
        isInteraction: false
      }).start(({
        finished
      }) => {
        this.handleEndInteraction();
        clearTimeout(this.pendingGestureCallback);
        if (finished) {
          if (closing) {
            onClose();
          } else {
            onOpen();
          }
          if (this.isCurrentlyMounted) {
            this.forceUpdate();
          }
        }
      });
    });
    _defineProperty32(this, "getAnimateToValue", ({
      closing,
      layout,
      gestureDirection
    }) => {
      if (!closing) {
        return 0;
      }
      return getDistanceForDirection(layout, gestureDirection);
    });
    _defineProperty32(this, "setPointerEventsEnabled", (enabled) => {
      var _this$contentRef$curr;
      const pointerEvents = enabled ? "box-none" : "none";
      (_this$contentRef$curr = this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({
        pointerEvents
      });
    });
    _defineProperty32(this, "handleStartInteraction", () => {
      if (this.interactionHandle === void 0) {
        this.interactionHandle = InteractionManager_default.createInteractionHandle();
      }
    });
    _defineProperty32(this, "handleEndInteraction", () => {
      if (this.interactionHandle !== void 0) {
        InteractionManager_default.clearInteractionHandle(this.interactionHandle);
        this.interactionHandle = void 0;
      }
    });
    _defineProperty32(this, "handleGestureStateChange", ({
      nativeEvent
    }) => {
      const {
        layout,
        onClose,
        onGestureBegin,
        onGestureCanceled,
        onGestureEnd,
        gestureDirection,
        gestureVelocityImpact
      } = this.props;
      switch (nativeEvent.state) {
        case GestureState.BEGAN:
          this.isSwiping.setValue(TRUE);
          this.handleStartInteraction();
          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();
          break;
        case GestureState.CANCELLED: {
          this.isSwiping.setValue(FALSE);
          this.handleEndInteraction();
          const velocity = gestureDirection === "vertical" || gestureDirection === "vertical-inverted" ? nativeEvent.velocityY : nativeEvent.velocityX;
          this.animate({
            closing: this.props.closing,
            velocity
          });
          onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();
          break;
        }
        case GestureState.END: {
          this.isSwiping.setValue(FALSE);
          let distance;
          let translation;
          let velocity;
          if (gestureDirection === "vertical" || gestureDirection === "vertical-inverted") {
            distance = layout.height;
            translation = nativeEvent.translationY;
            velocity = nativeEvent.velocityY;
          } else {
            distance = layout.width;
            translation = nativeEvent.translationX;
            velocity = nativeEvent.velocityX;
          }
          const closing = (translation + velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? velocity !== 0 || translation !== 0 : this.props.closing;
          this.animate({
            closing,
            velocity
          });
          if (closing) {
            this.pendingGestureCallback = setTimeout(() => {
              onClose();
              this.forceUpdate();
            }, 32);
          }
          onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();
          break;
        }
      }
    });
    _defineProperty32(this, "getInterpolatedStyle", memoize((styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => styleInterpolator({
      index,
      current: {
        progress: current
      },
      next: next && {
        progress: next
      },
      closing: this.isClosing,
      swiping: this.isSwiping,
      inverted: this.inverted,
      layouts: {
        screen: layout
      },
      insets: {
        top: insetTop,
        right: insetRight,
        bottom: insetBottom,
        left: insetLeft
      }
    })));
    _defineProperty32(this, "getCardAnimationContext", memoize((index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => ({
      index,
      current: {
        progress: current
      },
      next: next && {
        progress: next
      },
      closing: this.isClosing,
      swiping: this.isSwiping,
      inverted: this.inverted,
      layouts: {
        screen: layout
      },
      insets: {
        top: insetTop,
        right: insetRight,
        bottom: insetBottom,
        left: insetLeft
      }
    })));
    _defineProperty32(this, "contentRef", /* @__PURE__ */ React187.createRef());
  }
  componentDidMount() {
    this.animate({
      closing: this.props.closing
    });
    this.isCurrentlyMounted = true;
  }
  componentDidUpdate(prevProps) {
    const {
      layout,
      gestureDirection,
      closing
    } = this.props;
    const {
      width,
      height
    } = layout;
    if (width !== prevProps.layout.width) {
      this.layout.width.setValue(width);
    }
    if (height !== prevProps.layout.height) {
      this.layout.height.setValue(height);
    }
    if (gestureDirection !== prevProps.gestureDirection) {
      this.inverted.setValue(getInvertedMultiplier(gestureDirection));
    }
    const toValue = this.getAnimateToValue(this.props);
    if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {
      this.animate({
        closing
      });
    }
  }
  componentWillUnmount() {
    this.isCurrentlyMounted = false;
    this.handleEndInteraction();
  }
  gestureActivationCriteria() {
    const {
      layout,
      gestureDirection,
      gestureResponseDistance
    } = this.props;
    const distance = gestureDirection === "vertical" || gestureDirection === "vertical-inverted" ? (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.vertical) !== void 0 ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.horizontal) !== void 0 ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;
    if (gestureDirection === "vertical") {
      return {
        maxDeltaX: 15,
        minOffsetY: 5,
        hitSlop: {
          bottom: -layout.height + distance
        }
      };
    } else if (gestureDirection === "vertical-inverted") {
      return {
        maxDeltaX: 15,
        minOffsetY: -5,
        hitSlop: {
          top: -layout.height + distance
        }
      };
    } else {
      const hitSlop = -layout.width + distance;
      const invertedMultiplier = getInvertedMultiplier(gestureDirection);
      if (invertedMultiplier === 1) {
        return {
          minOffsetX: 5,
          maxDeltaY: 20,
          hitSlop: {
            right: hitSlop
          }
        };
      } else {
        return {
          minOffsetX: -5,
          maxDeltaY: 20,
          hitSlop: {
            left: hitSlop
          }
        };
      }
    }
  }
  render() {
    const {
      styleInterpolator,
      index,
      current,
      gesture: gesture2,
      next,
      layout,
      insets,
      overlay: overlay2,
      overlayEnabled,
      shadowEnabled,
      gestureEnabled,
      gestureDirection,
      pageOverflowEnabled,
      children,
      containerStyle: customContainerStyle,
      contentStyle,
      ...rest
    } = this.props;
    const interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);
    const animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);
    const {
      containerStyle,
      cardStyle,
      overlayStyle: overlayStyle2,
      shadowStyle
    } = interpolatedStyle;
    const handleGestureEvent = gestureEnabled ? Animated_default.event([{
      nativeEvent: gestureDirection === "vertical" || gestureDirection === "vertical-inverted" ? {
        translationY: gesture2
      } : {
        translationX: gesture2
      }
    }], {
      useNativeDriver
    }) : void 0;
    const {
      backgroundColor
    } = StyleSheet_default2.flatten(contentStyle || {});
    const isTransparent = typeof backgroundColor === "string" ? (0, import_color39.default)(backgroundColor).alpha() === 0 : false;
    return /* @__PURE__ */ React187.createElement(CardAnimationContext_default.Provider, {
      value: animationContext
    }, /* @__PURE__ */ React187.createElement(Animated_default.View, {
      style: {
        opacity: current
      },
      collapsable: false
    }), /* @__PURE__ */ React187.createElement(View_default, _extends84({
      pointerEvents: "box-none"
    }, rest), overlayEnabled ? /* @__PURE__ */ React187.createElement(View_default, {
      pointerEvents: "box-none",
      style: StyleSheet_default2.absoluteFill
    }, overlay2({
      style: overlayStyle2
    })) : null, /* @__PURE__ */ React187.createElement(Animated_default.View, {
      needsOffscreenAlphaCompositing: hasOpacityStyle(containerStyle),
      style: [styles92.container, containerStyle, customContainerStyle],
      pointerEvents: "box-none"
    }, /* @__PURE__ */ React187.createElement(PanGestureHandler, _extends84({
      enabled: layout.width !== 0 && gestureEnabled,
      onGestureEvent: handleGestureEvent,
      onHandlerStateChange: this.handleGestureStateChange
    }, this.gestureActivationCriteria()), /* @__PURE__ */ React187.createElement(Animated_default.View, {
      style: [styles92.container, cardStyle]
    }, shadowEnabled && shadowStyle && !isTransparent ? /* @__PURE__ */ React187.createElement(Animated_default.View, {
      style: [styles92.shadow, gestureDirection === "horizontal" ? [styles92.shadowHorizontal, styles92.shadowLeft] : gestureDirection === "horizontal-inverted" ? [styles92.shadowHorizontal, styles92.shadowRight] : gestureDirection === "vertical" ? [styles92.shadowVertical, styles92.shadowTop] : [styles92.shadowVertical, styles92.shadowBottom], {
        backgroundColor
      }, shadowStyle],
      pointerEvents: "none"
    }) : null, /* @__PURE__ */ React187.createElement(CardSheet_default, {
      ref: this.contentRef,
      enabled: pageOverflowEnabled,
      layout,
      style: contentStyle
    }, children))))));
  }
};
var Card_default2 = Card2;
_defineProperty32(Card2, "defaultProps", {
  overlayEnabled: Platform_default.OS !== "ios",
  shadowEnabled: true,
  gestureEnabled: true,
  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,
  overlay: ({
    style
  }) => style ? /* @__PURE__ */ React187.createElement(Animated_default.View, {
    pointerEvents: "none",
    style: [styles92.overlay, style]
  }) : null
});
var styles92 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  overlay: {
    flex: 1,
    backgroundColor: "#000"
  },
  shadow: {
    position: "absolute",
    shadowRadius: 5,
    shadowColor: "#000",
    shadowOpacity: 0.3
  },
  shadowHorizontal: {
    top: 0,
    bottom: 0,
    width: 3,
    shadowOffset: {
      width: -1,
      height: 1
    }
  },
  shadowLeft: {
    left: 0
  },
  shadowRight: {
    right: 0
  },
  shadowVertical: {
    left: 0,
    right: 0,
    height: 3,
    shadowOffset: {
      width: 1,
      height: -1
    }
  },
  shadowTop: {
    top: 0
  },
  shadowBottom: {
    bottom: 0
  }
});

// node_modules/@react-navigation/stack/lib/module/utils/HeaderHeightContext.js
var React188 = __toModule(require_react());
var HeaderHeightContext_default = /* @__PURE__ */ React188.createContext(void 0);

// node_modules/@react-navigation/stack/lib/module/utils/PreviousSceneContext.js
var React189 = __toModule(require_react());
var PreviousSceneContext = /* @__PURE__ */ React189.createContext(void 0);
var PreviousSceneContext_default = PreviousSceneContext;

// node_modules/@react-navigation/stack/lib/module/views/Stack/CardContainer.js
var EPSILON = 0.1;
function CardContainer({
  active,
  cardOverlay,
  cardOverlayEnabled,
  cardShadowEnabled,
  cardStyle,
  cardStyleInterpolator,
  closing,
  gesture: gesture2,
  focused,
  gestureDirection,
  gestureEnabled,
  gestureResponseDistance,
  gestureVelocityImpact,
  getPreviousScene,
  getFocusedRoute,
  mode,
  headerMode,
  headerShown,
  headerStyleInterpolator,
  hasAbsoluteHeader,
  headerHeight,
  onHeaderHeightChange,
  isParentHeaderShown,
  index,
  layout,
  onCloseRoute,
  onOpenRoute,
  onPageChangeCancel,
  onPageChangeConfirm,
  onPageChangeStart,
  onGestureCancel,
  onGestureEnd,
  onGestureStart,
  onTransitionEnd,
  onTransitionStart,
  renderHeader,
  renderScene,
  safeAreaInsetBottom,
  safeAreaInsetLeft,
  safeAreaInsetRight,
  safeAreaInsetTop,
  scene,
  transitionSpec
}) {
  const handleOpen = () => {
    const {
      route
    } = scene;
    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({
      route
    }, false);
    onOpenRoute({
      route
    });
  };
  const handleClose = () => {
    const {
      route
    } = scene;
    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({
      route
    }, true);
    onCloseRoute({
      route
    });
  };
  const handleGestureBegin = () => {
    const {
      route
    } = scene;
    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();
    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({
      route
    });
  };
  const handleGestureCanceled = () => {
    const {
      route
    } = scene;
    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();
    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({
      route
    });
  };
  const handleGestureEnd = () => {
    const {
      route
    } = scene;
    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({
      route
    });
  };
  const handleTransition = ({
    closing: closing2,
    gesture: gesture3
  }) => {
    const {
      route
    } = scene;
    if (!gesture3) {
      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);
    } else if (active && closing2) {
      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);
    } else {
      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();
    }
    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({
      route
    }, closing2);
  };
  const insets = {
    top: safeAreaInsetTop,
    right: safeAreaInsetRight,
    bottom: safeAreaInsetBottom,
    left: safeAreaInsetLeft
  };
  const {
    colors
  } = useTheme2();
  const [pointerEvents, setPointerEvents] = React190.useState("box-none");
  React190.useEffect(() => {
    var _scene$progress$next, _scene$progress$next$;
    const listener3 = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, ({
      value
    }) => {
      setPointerEvents(value <= EPSILON ? "box-none" : "none");
    });
    return () => {
      if (listener3) {
        var _scene$progress$next2, _scene$progress$next3;
        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener3);
      }
    };
  }, [pointerEvents, scene.progress.next]);
  const isCurrentHeaderShown = headerMode !== "none" && headerShown !== false;
  const previousScene = getPreviousScene({
    route: scene.route
  });
  return /* @__PURE__ */ React190.createElement(Card_default2, {
    index,
    gestureDirection,
    layout,
    insets,
    gesture: gesture2,
    current: scene.progress.current,
    next: scene.progress.next,
    closing,
    onOpen: handleOpen,
    onClose: handleClose,
    overlay: cardOverlay,
    overlayEnabled: cardOverlayEnabled,
    shadowEnabled: cardShadowEnabled,
    onTransition: handleTransition,
    onGestureBegin: handleGestureBegin,
    onGestureCanceled: handleGestureCanceled,
    onGestureEnd: handleGestureEnd,
    gestureEnabled,
    gestureResponseDistance,
    gestureVelocityImpact,
    transitionSpec,
    styleInterpolator: cardStyleInterpolator,
    accessibilityElementsHidden: !focused,
    importantForAccessibility: focused ? "auto" : "no-hide-descendants",
    pointerEvents: active ? "box-none" : pointerEvents,
    pageOverflowEnabled: headerMode === "screen" && mode === "card",
    containerStyle: hasAbsoluteHeader ? {
      marginTop: headerHeight
    } : null,
    contentStyle: [{
      backgroundColor: colors.background
    }, cardStyle],
    style: [{
      overflow: active ? void 0 : "hidden"
    }, StyleSheet_default2.absoluteFill]
  }, /* @__PURE__ */ React190.createElement(View_default, {
    style: styles93.container
  }, /* @__PURE__ */ React190.createElement(View_default, {
    style: styles93.scene
  }, /* @__PURE__ */ React190.createElement(PreviousSceneContext_default.Provider, {
    value: previousScene
  }, /* @__PURE__ */ React190.createElement(HeaderShownContext_default.Provider, {
    value: isParentHeaderShown || isCurrentHeaderShown
  }, /* @__PURE__ */ React190.createElement(HeaderHeightContext_default.Provider, {
    value: headerHeight
  }, renderScene({
    route: scene.route
  }))))), headerMode === "screen" ? renderHeader({
    mode: "screen",
    layout,
    insets,
    scenes: [previousScene, scene],
    getPreviousScene,
    getFocusedRoute,
    gestureDirection,
    styleInterpolator: headerStyleInterpolator,
    onContentHeightChange: onHeaderHeightChange
  }) : null));
}
var CardContainer_default = /* @__PURE__ */ React190.memo(CardContainer);
var styles93 = StyleSheet_default2.create({
  container: {
    flex: 1,
    flexDirection: "column-reverse"
  },
  scene: {
    flex: 1
  }
});

// node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.js
function _extends85() {
  _extends85 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends85.apply(this, arguments);
}
function _defineProperty33(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var EPSILON2 = 0.01;
var STATE_INACTIVE = 0;
var STATE_TRANSITIONING_OR_BELOW_TOP = 1;
var STATE_ON_TOP = 2;
var FALLBACK_DESCRIPTOR = Object.freeze({
  options: {}
});
var getHeaderHeights = (routes2, insets, isParentHeaderShown, descriptors, layout, previous) => {
  return routes2.reduce((acc2, curr) => {
    const {
      options = {}
    } = descriptors[curr.key] || {};
    const style = StyleSheet_default2.flatten(options.headerStyle || {});
    const height = typeof style.height === "number" ? style.height : previous[curr.key];
    const safeAreaInsets = {
      ...insets,
      ...options.safeAreaInsets
    };
    const {
      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top
    } = options;
    acc2[curr.key] = typeof height === "number" ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);
    return acc2;
  }, {});
};
var getDistanceFromOptions = (mode, layout, descriptor) => {
  const {
    gestureDirection = mode === "modal" ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection
  } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};
  return getDistanceForDirection(layout, gestureDirection);
};
var getProgressFromGesture = (mode, gesture2, layout, descriptor) => {
  const distance = getDistanceFromOptions(mode, {
    width: Math.max(1, layout.width),
    height: Math.max(1, layout.height)
  }, descriptor);
  if (distance > 0) {
    return gesture2.interpolate({
      inputRange: [0, distance],
      outputRange: [1, 0]
    });
  }
  return gesture2.interpolate({
    inputRange: [distance, 0],
    outputRange: [0, 1]
  });
};
var CardStack = class extends React191.Component {
  static getDerivedStateFromProps(props, state) {
    if (props.routes === state.routes && props.descriptors === state.descriptors) {
      return null;
    }
    const gestures = props.routes.reduce((acc2, curr) => {
      const descriptor = props.descriptors[curr.key];
      const {
        animationEnabled
      } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};
      acc2[curr.key] = state.gestures[curr.key] || new Animated_default.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);
      return acc2;
    }, {});
    return {
      routes: props.routes,
      scenes: props.routes.map((route, index, self2) => {
        const previousRoute = self2[index - 1];
        const nextRoute = self2[index + 1];
        const oldScene = state.scenes[index];
        const currentGesture = gestures[route.key];
        const previousGesture = previousRoute ? gestures[previousRoute.key] : void 0;
        const nextGesture = nextRoute ? gestures[nextRoute.key] : void 0;
        const descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);
        const nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];
        const previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];
        const scene = {
          route,
          descriptor,
          progress: {
            current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),
            next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : void 0,
            previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : void 0
          },
          __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]
        };
        if (oldScene && scene.__memo.every((it, i) => {
          return oldScene.__memo[i] === it;
        })) {
          return oldScene;
        }
        return scene;
      }),
      gestures,
      descriptors: props.descriptors,
      headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)
    };
  }
  constructor(_props) {
    super(_props);
    _defineProperty33(this, "handleLayout", (e) => {
      const {
        height,
        width
      } = e.nativeEvent.layout;
      const layout = {
        width,
        height
      };
      this.setState((state, props) => {
        if (height === state.layout.height && width === state.layout.width) {
          return null;
        }
        return {
          layout,
          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)
        };
      });
    });
    _defineProperty33(this, "handleHeaderLayout", ({
      route,
      height
    }) => {
      this.setState(({
        headerHeights
      }) => {
        const previousHeight = headerHeights[route.key];
        if (previousHeight === height) {
          return null;
        }
        return {
          headerHeights: {
            ...headerHeights,
            [route.key]: height
          }
        };
      });
    });
    _defineProperty33(this, "getFocusedRoute", () => {
      const {
        state
      } = this.props;
      return state.routes[state.index];
    });
    _defineProperty33(this, "getPreviousScene", ({
      route
    }) => {
      const {
        getPreviousRoute
      } = this.props;
      const {
        scenes
      } = this.state;
      const previousRoute = getPreviousRoute({
        route
      });
      if (previousRoute) {
        const previousScene = scenes.find((scene) => scene.route.key === previousRoute.key);
        return previousScene;
      }
      return void 0;
    });
    const {
      height: _height = 0,
      width: _width = 0
    } = Dimensions.get("window");
    this.state = {
      routes: [],
      scenes: [],
      gestures: {},
      layout: {
        height: _height,
        width: _width
      },
      descriptors: this.props.descriptors,
      headerHeights: {}
    };
  }
  render() {
    const {
      mode,
      insets,
      descriptors,
      state,
      routes: routes2,
      closingRouteKeys,
      onOpenRoute,
      onCloseRoute,
      getGesturesEnabled,
      renderHeader,
      renderScene,
      headerMode,
      isParentHeaderShown,
      onTransitionStart,
      onTransitionEnd,
      onPageChangeStart,
      onPageChangeConfirm,
      onPageChangeCancel,
      onGestureStart,
      onGestureEnd,
      onGestureCancel,
      detachInactiveScreens = Platform_default.OS === "web" || shouldUseActivityState
    } = this.props;
    const {
      scenes,
      layout,
      gestures,
      headerHeights
    } = this.state;
    const focusedRoute = state.routes[state.index];
    const focusedDescriptor = descriptors[focusedRoute.key];
    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};
    const focusedHeaderHeight = headerHeights[focusedRoute.key];
    let defaultTransitionPreset = mode === "modal" ? ModalTransition : DefaultTransition;
    if (headerMode === "screen") {
      defaultTransitionPreset = {
        ...defaultTransitionPreset,
        headerStyleInterpolator: forNoAnimation2
      };
    }
    const {
      top = insets.top,
      right: right2 = insets.right,
      bottom = insets.bottom,
      left: left2 = insets.left
    } = focusedOptions.safeAreaInsets || {};
    let activeScreensLimit = 1;
    for (let i = scenes.length - 1; i >= 0; i--) {
      const {
        detachPreviousScreen = mode === "modal" ? i !== scenes.length - 1 : true
      } = scenes[i].descriptor.options;
      if (detachPreviousScreen === false) {
        activeScreensLimit++;
      } else {
        break;
      }
    }
    const isFloatHeaderAbsolute = headerMode === "float" ? this.state.scenes.slice(-2).some((scene) => {
      const {
        descriptor
      } = scene;
      const options = descriptor ? descriptor.options : {};
      const {
        headerTransparent,
        headerShown = true
      } = options;
      if (headerTransparent || headerShown === false) {
        return true;
      }
      return false;
    }) : false;
    const floatingHeader = headerMode === "float" ? /* @__PURE__ */ React191.createElement(React191.Fragment, {
      key: "header"
    }, renderHeader({
      mode: "float",
      layout,
      insets: {
        top,
        right: right2,
        bottom,
        left: left2
      },
      scenes,
      getPreviousScene: this.getPreviousScene,
      getFocusedRoute: this.getFocusedRoute,
      onContentHeightChange: this.handleHeaderLayout,
      gestureDirection: focusedOptions.gestureDirection !== void 0 ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,
      styleInterpolator: focusedOptions.headerStyleInterpolator !== void 0 ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,
      style: [styles94.floating, isFloatHeaderAbsolute && [
        {
          height: focusedHeaderHeight
        },
        styles94.absolute
      ]]
    })) : null;
    return /* @__PURE__ */ React191.createElement(React191.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, /* @__PURE__ */ React191.createElement(MaybeScreenContainer, {
      enabled: detachInactiveScreens,
      style: styles94.container,
      onLayout: this.handleLayout
    }, routes2.map((route, index, self2) => {
      const focused = focusedRoute.key === route.key;
      const gesture2 = gestures[route.key];
      const scene = scenes[index];
      let isScreenActive = 1;
      if (shouldUseActivityState || Platform_default.OS === "web") {
        if (index < self2.length - activeScreensLimit - 1) {
          isScreenActive = STATE_INACTIVE;
        } else {
          const sceneForActivity = scenes[self2.length - 1];
          const outputValue = index === self2.length - 1 ? STATE_ON_TOP : index >= self2.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;
          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({
            inputRange: [0, 1 - EPSILON2, 1],
            outputRange: [1, 1, outputValue],
            extrapolate: "clamp"
          }) : STATE_TRANSITIONING_OR_BELOW_TOP;
        }
      } else {
        isScreenActive = scene.progress.next ? scene.progress.next.interpolate({
          inputRange: [0, 1 - EPSILON2, 1],
          outputRange: [1, 1, 0],
          extrapolate: "clamp"
        }) : 1;
      }
      const {
        safeAreaInsets,
        headerShown = true,
        headerTransparent,
        cardShadowEnabled,
        cardOverlayEnabled,
        cardOverlay,
        cardStyle,
        animationEnabled,
        gestureResponseDistance,
        gestureVelocityImpact,
        gestureDirection = defaultTransitionPreset.gestureDirection,
        transitionSpec = defaultTransitionPreset.transitionSpec,
        cardStyleInterpolator = animationEnabled === false ? forNoAnimation : defaultTransitionPreset.cardStyleInterpolator,
        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator
      } = scene.descriptor ? scene.descriptor.options : {};
      let transitionConfig = {
        gestureDirection,
        transitionSpec,
        cardStyleInterpolator,
        headerStyleInterpolator
      };
      if (index !== self2.length - 1) {
        const nextScene = scenes[index + 1];
        if (nextScene) {
          const {
            animationEnabled: animationEnabled2,
            gestureDirection: gestureDirection2 = defaultTransitionPreset.gestureDirection,
            transitionSpec: transitionSpec2 = defaultTransitionPreset.transitionSpec,
            cardStyleInterpolator: cardStyleInterpolator2 = animationEnabled2 === false ? forNoAnimation : defaultTransitionPreset.cardStyleInterpolator,
            headerStyleInterpolator: headerStyleInterpolator2 = defaultTransitionPreset.headerStyleInterpolator
          } = nextScene.descriptor ? nextScene.descriptor.options : {};
          transitionConfig = {
            gestureDirection: gestureDirection2,
            transitionSpec: transitionSpec2,
            cardStyleInterpolator: cardStyleInterpolator2,
            headerStyleInterpolator: headerStyleInterpolator2
          };
        }
      }
      const {
        top: safeAreaInsetTop = insets.top,
        right: safeAreaInsetRight = insets.right,
        bottom: safeAreaInsetBottom = insets.bottom,
        left: safeAreaInsetLeft = insets.left
      } = safeAreaInsets || {};
      const headerHeight = headerMode !== "none" && headerShown !== false ? headerHeights[route.key] : 0;
      return /* @__PURE__ */ React191.createElement(MaybeScreen, {
        key: route.key,
        style: StyleSheet_default2.absoluteFill,
        enabled: detachInactiveScreens,
        active: isScreenActive,
        pointerEvents: "box-none"
      }, /* @__PURE__ */ React191.createElement(CardContainer_default, _extends85({
        index,
        active: index === self2.length - 1,
        focused,
        closing: closingRouteKeys.includes(route.key),
        layout,
        gesture: gesture2,
        scene,
        safeAreaInsetTop,
        safeAreaInsetRight,
        safeAreaInsetBottom,
        safeAreaInsetLeft,
        cardOverlay,
        cardOverlayEnabled,
        cardShadowEnabled,
        cardStyle,
        onPageChangeStart,
        onPageChangeConfirm,
        onPageChangeCancel,
        onGestureStart,
        onGestureCancel,
        onGestureEnd,
        gestureResponseDistance,
        headerHeight,
        isParentHeaderShown,
        onHeaderHeightChange: this.handleHeaderLayout,
        getPreviousScene: this.getPreviousScene,
        getFocusedRoute: this.getFocusedRoute,
        mode,
        headerMode,
        headerShown,
        hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,
        renderHeader,
        renderScene,
        onOpenRoute,
        onCloseRoute,
        onTransitionStart,
        onTransitionEnd,
        gestureEnabled: index !== 0 && getGesturesEnabled({
          route
        }),
        gestureVelocityImpact
      }, transitionConfig)));
    })), isFloatHeaderAbsolute ? floatingHeader : null);
  }
};
var CardStack_default = CardStack;
var styles94 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  absolute: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0
  },
  floating: {
    zIndex: 1
  }
});

// node_modules/@react-navigation/stack/lib/module/views/KeyboardManager.js
var React192 = __toModule(require_react());
function _defineProperty34(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var KeyboardManager = class extends React192.Component {
  constructor(...args) {
    super(...args);
    _defineProperty34(this, "previouslyFocusedTextInput", void 0);
    _defineProperty34(this, "startTimestamp", 0);
    _defineProperty34(this, "keyboardTimeout", void 0);
    _defineProperty34(this, "clearKeyboardTimeout", () => {
      if (this.keyboardTimeout !== void 0) {
        clearTimeout(this.keyboardTimeout);
        this.keyboardTimeout = void 0;
      }
    });
    _defineProperty34(this, "handlePageChangeStart", () => {
      if (!this.props.enabled) {
        return;
      }
      this.clearKeyboardTimeout();
      const input = TextInput_default.State.currentlyFocusedInput ? TextInput_default.State.currentlyFocusedInput() : TextInput_default.State.currentlyFocusedField();
      TextInput_default.State.blurTextInput(input);
      this.previouslyFocusedTextInput = input;
      this.startTimestamp = Date.now();
    });
    _defineProperty34(this, "handlePageChangeConfirm", (force) => {
      if (!this.props.enabled) {
        return;
      }
      this.clearKeyboardTimeout();
      if (force) {
        Keyboard_default.dismiss();
      } else {
        const input = this.previouslyFocusedTextInput;
        if (input) {
          TextInput_default.State.blurTextInput(input);
        }
      }
      this.previouslyFocusedTextInput = void 0;
    });
    _defineProperty34(this, "handlePageChangeCancel", () => {
      if (!this.props.enabled) {
        return;
      }
      this.clearKeyboardTimeout();
      const input = this.previouslyFocusedTextInput;
      if (input) {
        if (Date.now() - this.startTimestamp < 100) {
          this.keyboardTimeout = setTimeout(() => {
            TextInput_default.State.focusTextInput(input);
            this.previouslyFocusedTextInput = void 0;
          }, 100);
        } else {
          TextInput_default.State.focusTextInput(input);
          this.previouslyFocusedTextInput = void 0;
        }
      }
    });
  }
  componentWillUnmount() {
    this.clearKeyboardTimeout();
  }
  render() {
    return this.props.children({
      onPageChangeStart: this.handlePageChangeStart,
      onPageChangeConfirm: this.handlePageChangeConfirm,
      onPageChangeCancel: this.handlePageChangeCancel
    });
  }
};
var KeyboardManager_default = KeyboardManager;

// node_modules/@react-navigation/stack/lib/module/views/Header/HeaderContainer.js
var React195 = __toModule(require_react());

// node_modules/@react-navigation/stack/lib/module/views/Header/Header.js
var React194 = __toModule(require_react());

// node_modules/@react-navigation/stack/lib/module/views/Header/HeaderTitle.js
var React193 = __toModule(require_react());
function _extends86() {
  _extends86 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends86.apply(this, arguments);
}
function HeaderTitle({
  tintColor,
  style,
  ...rest
}) {
  const {
    colors
  } = useTheme2();
  return /* @__PURE__ */ React193.createElement(Animated_default.Text, _extends86({
    accessibilityRole: "header",
    "aria-level": "1",
    numberOfLines: 1
  }, rest, {
    style: [styles95.title, {
      color: tintColor === void 0 ? colors.text : tintColor
    }, style]
  }));
}
var styles95 = StyleSheet_default2.create({
  title: Platform_default.select({
    ios: {
      fontSize: 17,
      fontWeight: "600"
    },
    android: {
      fontSize: 20,
      fontFamily: "sans-serif-medium",
      fontWeight: "normal"
    },
    default: {
      fontSize: 18,
      fontWeight: "500"
    }
  })
});

// node_modules/@react-navigation/stack/lib/module/utils/debounce.js
function debounce(func, duration) {
  let timeout;
  return function(...args) {
    if (!timeout) {
      func.apply(this, args);
      timeout = setTimeout(() => {
        timeout = void 0;
      }, duration);
    }
  };
}

// node_modules/@react-navigation/stack/lib/module/views/Header/Header.js
function _extends87() {
  _extends87 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends87.apply(this, arguments);
}
var Header_default = /* @__PURE__ */ React194.memo(function Header(props) {
  const {
    scene,
    previous,
    layout,
    insets,
    navigation: navigation2,
    styleInterpolator
  } = props;
  const {
    options
  } = scene.descriptor;
  const title = typeof options.headerTitle !== "function" && options.headerTitle !== void 0 ? options.headerTitle : options.title !== void 0 ? options.title : scene.route.name;
  let leftLabel;
  if (options.headerBackTitle !== void 0) {
    leftLabel = options.headerBackTitle;
  } else if (previous) {
    const o = previous.descriptor.options;
    leftLabel = typeof o.headerTitle !== "function" && o.headerTitle !== void 0 ? o.headerTitle : o.title !== void 0 ? o.title : previous.route.name;
  }
  const goBack2 = React194.useCallback(debounce(() => {
    if (navigation2.isFocused() && navigation2.canGoBack()) {
      navigation2.dispatch({
        ...StackActions.pop(),
        source: scene.route.key
      });
    }
  }, 50), [navigation2, scene.route.key]);
  return /* @__PURE__ */ React194.createElement(HeaderSegment, _extends87({}, options, {
    insets,
    layout,
    scene,
    title,
    leftLabel,
    headerTitle: typeof options.headerTitle !== "function" ? (props2) => /* @__PURE__ */ React194.createElement(HeaderTitle, props2) : options.headerTitle,
    onGoBack: previous ? goBack2 : void 0,
    styleInterpolator
  }));
});

// node_modules/@react-navigation/stack/lib/module/views/Header/HeaderContainer.js
function HeaderContainer({
  mode,
  scenes,
  layout,
  insets,
  getPreviousScene,
  getFocusedRoute,
  onContentHeightChange,
  gestureDirection,
  styleInterpolator,
  style
}) {
  const focusedRoute = getFocusedRoute();
  const parentPreviousScene = React195.useContext(PreviousSceneContext_default);
  return /* @__PURE__ */ React195.createElement(Animated_default.View, {
    pointerEvents: "box-none",
    style
  }, scenes.slice(-3).map((scene, i, self2) => {
    var _getPreviousScene;
    if (mode === "screen" && i !== self2.length - 1 || !scene) {
      return null;
    }
    const {
      header: header2,
      headerShown = true,
      headerTransparent
    } = scene.descriptor.options || {};
    if (!headerShown) {
      return null;
    }
    const isFocused = focusedRoute.key === scene.route.key;
    const previous = (_getPreviousScene = getPreviousScene({
      route: scene.route
    })) !== null && _getPreviousScene !== void 0 ? _getPreviousScene : parentPreviousScene;
    const previousScene = self2[i - 1];
    const nextScene = self2[i + 1];
    const {
      headerShown: previousHeaderShown = true
    } = (previousScene === null || previousScene === void 0 ? void 0 : previousScene.descriptor.options) || {};
    const {
      headerShown: nextHeaderShown = true
    } = (nextScene === null || nextScene === void 0 ? void 0 : nextScene.descriptor.options) || {};
    const isHeaderStatic = previousHeaderShown === false && !nextScene || nextHeaderShown === false;
    const props = {
      mode,
      layout,
      insets,
      scene,
      previous,
      navigation: scene.descriptor.navigation,
      styleInterpolator: mode === "float" ? isHeaderStatic ? gestureDirection === "vertical" || gestureDirection === "vertical-inverted" ? forSlideUp : gestureDirection === "horizontal-inverted" ? forSlideRight : forSlideLeft : styleInterpolator : forNoAnimation2
    };
    return /* @__PURE__ */ React195.createElement(NavigationContext_default.Provider, {
      key: scene.route.key,
      value: scene.descriptor.navigation
    }, /* @__PURE__ */ React195.createElement(NavigationRouteContext_default.Provider, {
      value: scene.route
    }, /* @__PURE__ */ React195.createElement(View_default, {
      onLayout: onContentHeightChange ? (e) => {
        const {
          height
        } = e.nativeEvent.layout;
        onContentHeightChange({
          route: scene.route,
          height
        });
      } : void 0,
      pointerEvents: isFocused ? "box-none" : "none",
      accessibilityElementsHidden: !isFocused,
      importantForAccessibility: isFocused ? "auto" : "no-hide-descendants",
      style: mode === "float" && !isFocused || headerTransparent ? styles96.header : null
    }, header2 !== void 0 ? header2(props) : /* @__PURE__ */ React195.createElement(Header_default, props))));
  }));
}
var styles96 = StyleSheet_default2.create({
  header: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0
  }
});

// node_modules/@react-navigation/stack/lib/module/views/SafeAreaProviderCompat.js
var React196 = __toModule(require_react());
var initialSafeAreaInsets = {
  top: getStatusBarHeight(true),
  bottom: getBottomSpace(),
  right: 0,
  left: 0,
  ...initialWindowSafeAreaInsets
};
function SafeAreaProviderCompat({
  children
}) {
  return /* @__PURE__ */ React196.createElement(SafeAreaConsumer, null, (insets) => {
    if (insets) {
      return children;
    }
    return /* @__PURE__ */ React196.createElement(SafeAreaProvider, {
      initialSafeAreaInsets
    }, children);
  });
}

// node_modules/@react-navigation/stack/lib/module/views/Stack/StackView.js
function _extends88() {
  _extends88 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends88.apply(this, arguments);
}
function _defineProperty35(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View_default;
var isArrayEqual2 = (a, b) => a.length === b.length && a.every((it, index) => it === b[index]);
var StackView = class extends React197.Component {
  constructor(...args) {
    super(...args);
    _defineProperty35(this, "state", {
      routes: [],
      previousRoutes: [],
      previousDescriptors: {},
      openingRouteKeys: [],
      closingRouteKeys: [],
      replacingRouteKeys: [],
      descriptors: {}
    });
    _defineProperty35(this, "getGesturesEnabled", ({
      route
    }) => {
      const descriptor = this.state.descriptors[route.key];
      if (descriptor) {
        const {
          gestureEnabled,
          animationEnabled
        } = descriptor.options;
        if (animationEnabled === false) {
          return false;
        }
        return gestureEnabled !== false;
      }
      return false;
    });
    _defineProperty35(this, "getPreviousRoute", ({
      route
    }) => {
      const {
        closingRouteKeys,
        replacingRouteKeys
      } = this.state;
      const routes2 = this.state.routes.filter((r) => r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key));
      const index = routes2.findIndex((r) => r.key === route.key);
      return routes2[index - 1];
    });
    _defineProperty35(this, "renderScene", ({
      route
    }) => {
      const descriptor = this.state.descriptors[route.key] || this.props.descriptors[route.key];
      if (!descriptor) {
        return null;
      }
      return descriptor.render();
    });
    _defineProperty35(this, "renderHeader", (props) => {
      return /* @__PURE__ */ React197.createElement(HeaderContainer, props);
    });
    _defineProperty35(this, "handleOpenRoute", ({
      route
    }) => {
      const {
        state,
        navigation: navigation2
      } = this.props;
      const {
        closingRouteKeys,
        replacingRouteKeys
      } = this.state;
      if (closingRouteKeys.some((key3) => key3 === route.key) && replacingRouteKeys.every((key3) => key3 !== route.key) && state.routeNames.includes(route.name) && !state.routes.some((r) => r.key === route.key)) {
        navigation2.navigate(route);
      } else {
        this.setState((state2) => ({
          routes: state2.replacingRouteKeys.length ? state2.routes.filter((r) => !state2.replacingRouteKeys.includes(r.key)) : state2.routes,
          openingRouteKeys: state2.openingRouteKeys.filter((key3) => key3 !== route.key),
          closingRouteKeys: state2.closingRouteKeys.filter((key3) => key3 !== route.key),
          replacingRouteKeys: []
        }));
      }
    });
    _defineProperty35(this, "handleCloseRoute", ({
      route
    }) => {
      const {
        state,
        navigation: navigation2
      } = this.props;
      if (state.routes.some((r) => r.key === route.key)) {
        navigation2.dispatch({
          ...StackActions.pop(),
          source: route.key,
          target: state.key
        });
      } else {
        this.setState((state2) => ({
          routes: state2.routes.filter((r) => r.key !== route.key),
          openingRouteKeys: state2.openingRouteKeys.filter((key3) => key3 !== route.key),
          closingRouteKeys: state2.closingRouteKeys.filter((key3) => key3 !== route.key)
        }));
      }
    });
    _defineProperty35(this, "handleTransitionStart", ({
      route
    }, closing) => this.props.navigation.emit({
      type: "transitionStart",
      data: {
        closing
      },
      target: route.key
    }));
    _defineProperty35(this, "handleTransitionEnd", ({
      route
    }, closing) => this.props.navigation.emit({
      type: "transitionEnd",
      data: {
        closing
      },
      target: route.key
    }));
    _defineProperty35(this, "handleGestureStart", ({
      route
    }) => {
      this.props.navigation.emit({
        type: "gestureStart",
        target: route.key
      });
    });
    _defineProperty35(this, "handleGestureEnd", ({
      route
    }) => {
      this.props.navigation.emit({
        type: "gestureEnd",
        target: route.key
      });
    });
    _defineProperty35(this, "handleGestureCancel", ({
      route
    }) => {
      this.props.navigation.emit({
        type: "gestureCancel",
        target: route.key
      });
    });
  }
  static getDerivedStateFromProps(props, state) {
    if ((props.state.routes === state.previousRoutes || isArrayEqual2(props.state.routes.map((r) => r.key), state.previousRoutes.map((r) => r.key))) && state.routes.length) {
      let routes3 = state.routes;
      let previousRoutes2 = state.previousRoutes;
      let descriptors2 = props.descriptors;
      let previousDescriptors = state.previousDescriptors;
      if (props.descriptors !== state.previousDescriptors) {
        descriptors2 = state.routes.reduce((acc2, route) => {
          acc2[route.key] = props.descriptors[route.key] || state.descriptors[route.key];
          return acc2;
        }, {});
        previousDescriptors = props.descriptors;
      }
      if (props.state.routes !== state.previousRoutes) {
        const map3 = props.state.routes.reduce((acc2, route) => {
          acc2[route.key] = route;
          return acc2;
        }, {});
        routes3 = state.routes.map((route) => map3[route.key] || route);
        previousRoutes2 = props.state.routes;
      }
      return {
        routes: routes3,
        previousRoutes: previousRoutes2,
        descriptors: descriptors2,
        previousDescriptors
      };
    }
    let routes2 = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;
    let {
      openingRouteKeys,
      closingRouteKeys,
      replacingRouteKeys,
      previousRoutes
    } = state;
    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1];
    const nextFocusedRoute = routes2[routes2.length - 1];
    const isAnimationEnabled = (key3) => {
      const descriptor = props.descriptors[key3] || state.descriptors[key3];
      return descriptor ? descriptor.options.animationEnabled !== false : true;
    };
    const getAnimationTypeForReplace = (key3) => {
      var _descriptor$options$a;
      const descriptor = props.descriptors[key3] || state.descriptors[key3];
      return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : "push";
    };
    if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {
      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {
        if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {
          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];
          closingRouteKeys = closingRouteKeys.filter((key3) => key3 !== nextFocusedRoute.key);
          replacingRouteKeys = replacingRouteKeys.filter((key3) => key3 !== nextFocusedRoute.key);
          if (!routes2.some((r) => r.key === previousFocusedRoute.key)) {
            openingRouteKeys = openingRouteKeys.filter((key3) => key3 !== previousFocusedRoute.key);
            if (getAnimationTypeForReplace(nextFocusedRoute.key) === "pop") {
              closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];
              openingRouteKeys = openingRouteKeys.filter((key3) => key3 !== nextFocusedRoute.key);
              routes2 = [...routes2, previousFocusedRoute];
            } else {
              replacingRouteKeys = [...replacingRouteKeys, previousFocusedRoute.key];
              closingRouteKeys = closingRouteKeys.filter((key3) => key3 !== previousFocusedRoute.key);
              routes2 = routes2.slice();
              routes2.splice(routes2.length - 1, 0, previousFocusedRoute);
            }
          }
        }
      } else if (!routes2.some((r) => r.key === previousFocusedRoute.key)) {
        if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {
          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];
          openingRouteKeys = openingRouteKeys.filter((key3) => key3 !== previousFocusedRoute.key);
          replacingRouteKeys = replacingRouteKeys.filter((key3) => key3 !== previousFocusedRoute.key);
          routes2 = [...routes2, previousFocusedRoute];
        }
      } else {
      }
    } else if (replacingRouteKeys.length || closingRouteKeys.length) {
      routes2 = routes2.slice();
      routes2.splice(routes2.length - 1, 0, ...state.routes.filter(({
        key: key3
      }) => isAnimationEnabled(key3) ? replacingRouteKeys.includes(key3) || closingRouteKeys.includes(key3) : false));
    }
    if (!routes2.length) {
      throw new Error("There should always be at least one route in the navigation state.");
    }
    const descriptors = routes2.reduce((acc2, route) => {
      acc2[route.key] = props.descriptors[route.key] || state.descriptors[route.key];
      return acc2;
    }, {});
    return {
      routes: routes2,
      previousRoutes: props.state.routes,
      previousDescriptors: props.descriptors,
      openingRouteKeys,
      closingRouteKeys,
      replacingRouteKeys,
      descriptors
    };
  }
  render() {
    const {
      state,
      navigation: navigation2,
      keyboardHandlingEnabled,
      mode = "card",
      headerMode = mode === "card" && Platform_default.OS === "ios" ? "float" : "screen",
      descriptors: _,
      ...rest
    } = this.props;
    const {
      routes: routes2,
      descriptors,
      openingRouteKeys,
      closingRouteKeys
    } = this.state;
    return /* @__PURE__ */ React197.createElement(NavigationHelpersContext_default.Provider, {
      value: navigation2
    }, /* @__PURE__ */ React197.createElement(GestureHandlerWrapper, {
      style: styles97.container
    }, /* @__PURE__ */ React197.createElement(SafeAreaProviderCompat, null, /* @__PURE__ */ React197.createElement(SafeAreaConsumer, null, (insets) => /* @__PURE__ */ React197.createElement(KeyboardManager_default, {
      enabled: keyboardHandlingEnabled !== false
    }, (props) => /* @__PURE__ */ React197.createElement(HeaderShownContext_default.Consumer, null, (isParentHeaderShown) => /* @__PURE__ */ React197.createElement(CardStack_default, _extends88({
      mode,
      insets,
      isParentHeaderShown,
      getPreviousRoute: this.getPreviousRoute,
      getGesturesEnabled: this.getGesturesEnabled,
      routes: routes2,
      openingRouteKeys,
      closingRouteKeys,
      onOpenRoute: this.handleOpenRoute,
      onCloseRoute: this.handleCloseRoute,
      onTransitionStart: this.handleTransitionStart,
      onTransitionEnd: this.handleTransitionEnd,
      renderHeader: this.renderHeader,
      renderScene: this.renderScene,
      headerMode,
      state,
      descriptors,
      onGestureStart: this.handleGestureStart,
      onGestureEnd: this.handleGestureEnd,
      onGestureCancel: this.handleGestureCancel
    }, rest, props))))))));
  }
};
var StackView_default = StackView;
var styles97 = StyleSheet_default2.create({
  container: {
    flex: 1
  }
});

// node_modules/@react-navigation/stack/lib/module/navigators/createStackNavigator.js
function _extends89() {
  _extends89 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends89.apply(this, arguments);
}
function StackNavigator({
  initialRouteName,
  children,
  screenOptions,
  ...rest
}) {
  const defaultOptions = {
    gestureEnabled: Platform_default.OS === "ios",
    animationEnabled: Platform_default.OS !== "web" && Platform_default.OS !== "windows" && Platform_default.OS !== "macos"
  };
  const {
    state,
    descriptors,
    navigation: navigation2
  } = useNavigationBuilder(StackRouter, {
    initialRouteName,
    children,
    screenOptions: typeof screenOptions === "function" ? (...args) => ({
      ...defaultOptions,
      ...screenOptions(...args)
    }) : {
      ...defaultOptions,
      ...screenOptions
    }
  });
  React198.useEffect(() => {
    var _navigation$addListen;
    return (_navigation$addListen = navigation2.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation2, "tabPress", (e) => {
      const isFocused = navigation2.isFocused();
      requestAnimationFrame(() => {
        if (state.index > 0 && isFocused && !e.defaultPrevented) {
          navigation2.dispatch({
            ...StackActions.popToTop(),
            target: state.key
          });
        }
      });
    });
  }, [navigation2, state.index, state.key]);
  return /* @__PURE__ */ React198.createElement(StackView_default, _extends89({}, rest, {
    state,
    descriptors,
    navigation: navigation2
  }));
}
var createStackNavigator_default = createNavigatorFactory(StackNavigator);

// src/screens/HomeScreen.tsx
var import_react40 = __toModule(require_react());

// src/components/Background.tsx
var import_react34 = __toModule(require_react());
var Background = ({children}) => /* @__PURE__ */ import_react34.default.createElement(ImageBackground_default, {
  source: require_background_dot(),
  resizeMode: "repeat",
  style: styles98.background
}, /* @__PURE__ */ import_react34.default.createElement(KeyboardAvoidingView_default, {
  style: styles98.container,
  behavior: "padding"
}, children));
var styles98 = StyleSheet_default2.create({
  background: {
    flex: 1,
    width: "100%"
  },
  container: {
    flex: 1,
    padding: 20,
    width: "100%",
    maxWidth: 340,
    alignSelf: "center",
    alignItems: "center",
    justifyContent: "center"
  }
});
var Background_default = (0, import_react34.memo)(Background);

// src/components/Logo.tsx
var import_react35 = __toModule(require_react());
var Logo = () => /* @__PURE__ */ import_react35.default.createElement(Image_default, {
  source: require_logo(),
  style: styles99.image
});
var styles99 = StyleSheet_default2.create({
  image: {
    width: 128,
    height: 128,
    marginBottom: 12
  }
});
var Logo_default = (0, import_react35.memo)(Logo);

// src/components/Header.tsx
var import_react37 = __toModule(require_react());

// src/core/theme.tsx
var import_react36 = __toModule(require_react());
var CustomDefaultTheme = {
  ...DefaultTheme_default,
  ...DefaultTheme_default2,
  colors: {
    ...DefaultTheme_default.colors,
    ...DefaultTheme_default2.colors,
    customColor: "#BADA55",
    primary: "#600EE6",
    secondary: "#414757",
    error: "#f13a59"
  },
  fonts: {
    ...DefaultTheme_default.fonts,
    superLight: {...DefaultTheme_default.fonts["light"]}
  },
  userDefinedThemeProperty: "",
  animation: {
    ...DefaultTheme_default.animation,
    customProperty: 1
  }
};
var CustomDarkTheme = {
  ...DarkTheme_default,
  ...DarkTheme_default2,
  colors: {
    ...DarkTheme_default.colors,
    ...DarkTheme_default2.colors,
    customColor: "#BADA55"
  },
  fonts: {
    ...DarkTheme_default.fonts,
    superLight: {...DarkTheme_default.fonts["light"]}
  },
  userDefinedThemeProperty: "",
  animation: {
    ...DarkTheme_default.animation,
    customProperty: 1
  }
};
var theme = CustomDefaultTheme;
var ThemeContext2 = (0, import_react36.createContext)({
  toggleTheme: () => {
  },
  isThemeDark: false,
  theme: CustomDefaultTheme
});
var ThemeProvider3 = ({children}) => {
  const [isThemeDark, setIsThemeDark] = (0, import_react36.useState)(false);
  const theme2 = isThemeDark ? CustomDarkTheme : CustomDefaultTheme;
  const toggleTheme = (0, import_react36.useCallback)(() => {
    return setIsThemeDark(!isThemeDark);
  }, [isThemeDark]);
  const preferences = (0, import_react36.useMemo)(() => ({
    toggleTheme,
    isThemeDark,
    theme: theme2
  }), [toggleTheme, isThemeDark, theme2]);
  return /* @__PURE__ */ import_react36.default.createElement(ThemeContext2.Provider, {
    value: preferences
  }, children);
};

// src/components/Header.tsx
var Header2 = ({children}) => /* @__PURE__ */ import_react37.default.createElement(Text_default, {
  style: styles100.header
}, children);
var styles100 = StyleSheet_default2.create({
  header: {
    fontSize: 26,
    color: theme.colors.primary,
    fontWeight: "bold",
    paddingVertical: 14
  }
});
var Header_default2 = (0, import_react37.memo)(Header2);

// src/components/Button.tsx
var import_react38 = __toModule(require_react());
var Button2 = ({mode, style, children, ...props}) => {
  const theme2 = useTheme();
  return /* @__PURE__ */ import_react38.default.createElement(Button_default, {
    style: [
      styles101.button,
      mode === "outlined" && {backgroundColor: theme2.colors.surface},
      style
    ],
    labelStyle: styles101.text,
    mode,
    ...props
  }, children);
};
var styles101 = StyleSheet_default2.create({
  button: {
    width: "100%",
    marginVertical: 10
  },
  text: {
    fontWeight: "bold",
    fontSize: 15,
    lineHeight: 26
  }
});
var Button_default2 = (0, import_react38.memo)(Button2);

// src/components/Paragraph.tsx
var import_react39 = __toModule(require_react());
var Paragraph2 = ({children}) => /* @__PURE__ */ import_react39.default.createElement(Text_default, {
  style: styles102.text
}, children);
var styles102 = StyleSheet_default2.create({
  text: {
    fontSize: 16,
    lineHeight: 26,
    color: theme.colors.secondary,
    textAlign: "center",
    marginBottom: 14
  }
});
var Paragraph_default2 = (0, import_react39.memo)(Paragraph2);

// node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/Fonts/FontAwesome.ttf
var FontAwesome_default = "/assets/FontAwesome-COY6VNS2.ttf";

// node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/glyphmaps/FontAwesome.json
var glass = 61440;
var music2 = 61441;
var search = 61442;
var envelope_o = 61443;
var heart2 = 61444;
var star2 = 61445;
var star_o = 61446;
var user = 61447;
var film2 = 61448;
var th_large = 61449;
var th = 61450;
var th_list = 61451;
var check2 = 61452;
var remove = 61453;
var close2 = 61453;
var times = 61453;
var search_plus = 61454;
var search_minus = 61456;
var power_off2 = 61457;
var signal2 = 61458;
var gear = 61459;
var cog2 = 61459;
var trash_o = 61460;
var home2 = 61461;
var file_o = 61462;
var clock_o = 61463;
var road2 = 61464;
var download2 = 61465;
var arrow_circle_o_down = 61466;
var arrow_circle_o_up = 61467;
var inbox2 = 61468;
var play_circle_o = 61469;
var rotate_right2 = 61470;
var repeat2 = 61470;
var refresh2 = 61473;
var list_alt = 61474;
var lock2 = 61475;
var flag2 = 61476;
var headphones2 = 61477;
var volume_off2 = 61478;
var volume_down = 61479;
var volume_up = 61480;
var qrcode2 = 61481;
var barcode2 = 61482;
var tag2 = 61483;
var tags = 61484;
var book2 = 61485;
var bookmark2 = 61486;
var print = 61487;
var camera2 = 61488;
var font = 61489;
var bold = 61490;
var italic = 61491;
var text_height = 61492;
var text_width = 61493;
var align_left = 61494;
var align_center = 61495;
var align_right = 61496;
var align_justify = 61497;
var list = 61498;
var dedent = 61499;
var outdent = 61499;
var indent = 61500;
var video_camera = 61501;
var photo = 61502;
var image2 = 61502;
var picture_o = 61502;
var pencil2 = 61504;
var map_marker2 = 61505;
var adjust2 = 61506;
var tint = 61507;
var edit = 61508;
var pencil_square_o = 61508;
var share_square_o = 61509;
var check_square_o = 61510;
var arrows = 61511;
var step_backward2 = 61512;
var fast_backward = 61513;
var backward = 61514;
var play2 = 61515;
var pause2 = 61516;
var stop2 = 61517;
var forward2 = 61518;
var fast_forward2 = 61520;
var step_forward2 = 61521;
var eject2 = 61522;
var chevron_left2 = 61523;
var chevron_right2 = 61524;
var plus_circle2 = 61525;
var minus_circle2 = 61526;
var times_circle = 61527;
var check_circle2 = 61528;
var question_circle = 61529;
var info_circle = 61530;
var crosshairs2 = 61531;
var times_circle_o = 61532;
var check_circle_o = 61533;
var ban = 61534;
var arrow_left2 = 61536;
var arrow_right2 = 61537;
var arrow_up2 = 61538;
var arrow_down2 = 61539;
var mail_forward = 61540;
var share2 = 61540;
var expand = 61541;
var compress = 61542;
var plus2 = 61543;
var minus2 = 61544;
var asterisk2 = 61545;
var exclamation_circle = 61546;
var gift2 = 61547;
var leaf2 = 61548;
var fire2 = 61549;
var eye2 = 61550;
var eye_slash = 61552;
var warning5 = 61553;
var exclamation_triangle = 61553;
var plane = 61554;
var calendar2 = 61555;
var random = 61556;
var comment2 = 61557;
var magnet2 = 61558;
var chevron_up2 = 61559;
var chevron_down2 = 61560;
var retweet = 61561;
var shopping_cart = 61562;
var folder2 = 61563;
var folder_open2 = 61564;
var arrows_v = 61565;
var arrows_h = 61566;
var bar_chart_o = 61568;
var bar_chart = 61568;
var twitter_square = 61569;
var facebook_square = 61570;
var camera_retro = 61571;
var key2 = 61572;
var gears = 61573;
var cogs2 = 61573;
var comments = 61574;
var thumbs_o_up = 61575;
var thumbs_o_down = 61576;
var star_half2 = 61577;
var heart_o = 61578;
var sign_out = 61579;
var linkedin_square = 61580;
var thumb_tack = 61581;
var external_link = 61582;
var sign_in = 61584;
var trophy2 = 61585;
var github_square = 61586;
var upload2 = 61587;
var lemon_o = 61588;
var phone2 = 61589;
var square_o = 61590;
var bookmark_o = 61591;
var phone_square = 61592;
var twitter2 = 61593;
var facebook_f = 61594;
var facebook2 = 61594;
var github2 = 61595;
var unlock = 61596;
var credit_card2 = 61597;
var feed = 61598;
var rss2 = 61598;
var hdd_o = 61600;
var bullhorn2 = 61601;
var bell2 = 61683;
var certificate2 = 61603;
var hand_o_right = 61604;
var hand_o_left = 61605;
var hand_o_up = 61606;
var hand_o_down = 61607;
var arrow_circle_left = 61608;
var arrow_circle_right = 61609;
var arrow_circle_up = 61610;
var arrow_circle_down = 61611;
var globe = 61612;
var wrench2 = 61613;
var tasks = 61614;
var filter3 = 61616;
var briefcase2 = 61617;
var arrows_alt = 61618;
var group2 = 61632;
var users = 61632;
var chain = 61633;
var link2 = 61633;
var cloud2 = 61634;
var flask2 = 61635;
var cut = 61636;
var scissors = 61636;
var copy = 61637;
var files_o = 61637;
var paperclip2 = 61638;
var save = 61639;
var floppy_o = 61639;
var square2 = 61640;
var navicon = 61641;
var reorder = 61641;
var bars = 61641;
var list_ul = 61642;
var list_ol = 61643;
var strikethrough = 61644;
var underline = 61645;
var table2 = 61646;
var magic = 61648;
var truck2 = 61649;
var pinterest2 = 61650;
var pinterest_square = 61651;
var google_plus_square = 61652;
var google_plus2 = 61653;
var money = 61654;
var caret_down = 61655;
var caret_up = 61656;
var caret_left = 61657;
var caret_right = 61658;
var columns = 61659;
var unsorted = 61660;
var sort2 = 61660;
var sort_down = 61661;
var sort_desc = 61661;
var sort_up = 61662;
var sort_asc = 61662;
var envelope = 61664;
var linkedin2 = 61665;
var rotate_left2 = 61666;
var undo2 = 61666;
var legal = 61667;
var gavel2 = 61667;
var dashboard = 61668;
var tachometer = 61668;
var comment_o = 61669;
var comments_o = 61670;
var flash2 = 61671;
var bolt2 = 61671;
var sitemap2 = 61672;
var umbrella2 = 61673;
var paste = 61674;
var clipboard2 = 61674;
var lightbulb_o = 61675;
var exchange = 61676;
var cloud_download2 = 61677;
var cloud_upload2 = 61678;
var user_md = 61680;
var stethoscope2 = 61681;
var suitcase = 61682;
var bell_o = 61602;
var coffee2 = 61684;
var cutlery = 61685;
var file_text_o = 61686;
var building_o = 61687;
var hospital_o = 61688;
var ambulance2 = 61689;
var medkit = 61690;
var fighter_jet = 61691;
var beer2 = 61692;
var h_square = 61693;
var plus_square = 61694;
var angle_double_left = 61696;
var angle_double_right = 61697;
var angle_double_up = 61698;
var angle_double_down = 61699;
var angle_left = 61700;
var angle_right2 = 61701;
var angle_up = 61702;
var angle_down = 61703;
var desktop = 61704;
var laptop2 = 61705;
var tablet2 = 61706;
var mobile_phone = 61707;
var mobile = 61707;
var circle_o = 61708;
var quote_left = 61709;
var quote_right = 61710;
var spinner = 61712;
var circle2 = 61713;
var mail_reply = 61714;
var reply2 = 61714;
var github_alt = 61715;
var folder_o = 61716;
var folder_open_o = 61717;
var smile_o = 61720;
var frown_o = 61721;
var meh_o = 61722;
var gamepad2 = 61723;
var keyboard_o = 61724;
var flag_o = 61725;
var flag_checkered2 = 61726;
var terminal = 61728;
var code = 61729;
var mail_reply_all = 61730;
var reply_all2 = 61730;
var star_half_empty = 61731;
var star_half_full2 = 61731;
var star_half_o = 61731;
var location_arrow = 61732;
var crop2 = 61733;
var code_fork = 61734;
var unlink = 61735;
var chain_broken = 61735;
var question = 61736;
var info = 61737;
var exclamation2 = 61738;
var superscript = 61739;
var subscript = 61740;
var eraser2 = 61741;
var puzzle_piece = 61742;
var microphone2 = 61744;
var microphone_slash = 61745;
var shield2 = 61746;
var calendar_o = 61747;
var fire_extinguisher2 = 61748;
var rocket2 = 61749;
var maxcdn = 61750;
var chevron_circle_left = 61751;
var chevron_circle_right = 61752;
var chevron_circle_up = 61753;
var chevron_circle_down = 61754;
var html5 = 61755;
var css3 = 61756;
var anchor2 = 61757;
var unlock_alt = 61758;
var bullseye2 = 61760;
var ellipsis_h = 61761;
var ellipsis_v = 61762;
var rss_square = 61763;
var play_circle2 = 61764;
var ticket2 = 61765;
var minus_square = 61766;
var minus_square_o = 61767;
var level_up = 61768;
var level_down = 61769;
var check_square = 61770;
var pencil_square = 61771;
var external_link_square = 61772;
var share_square = 61773;
var compass2 = 61774;
var toggle_down = 61776;
var caret_square_o_down = 61776;
var toggle_up = 61777;
var caret_square_o_up = 61777;
var toggle_right = 61778;
var caret_square_o_right = 61778;
var euro = 61779;
var eur = 61779;
var gbp = 61780;
var dollar = 61781;
var usd = 61781;
var rupee = 61782;
var inr = 61782;
var cny = 61783;
var rmb = 61783;
var yen = 61783;
var jpy = 61783;
var ruble = 61784;
var rouble = 61784;
var rub = 61784;
var won = 61785;
var krw = 61785;
var bitcoin2 = 61786;
var btc = 61786;
var file2 = 61787;
var file_text = 61788;
var sort_alpha_asc = 61789;
var sort_alpha_desc = 61790;
var sort_amount_asc = 61792;
var sort_amount_desc = 61793;
var sort_numeric_asc = 61794;
var sort_numeric_desc = 61795;
var thumbs_up = 61796;
var thumbs_down = 61797;
var youtube_square = 61798;
var youtube2 = 61799;
var xing2 = 61800;
var xing_square = 61801;
var youtube_play = 61802;
var dropbox2 = 61803;
var stack_overflow2 = 61804;
var instagram2 = 61805;
var flickr = 61806;
var adn = 61808;
var bitbucket2 = 61809;
var bitbucket_square = 61810;
var tumblr = 61811;
var tumblr_square = 61812;
var long_arrow_down = 61813;
var long_arrow_up = 61814;
var long_arrow_left = 61815;
var long_arrow_right = 61816;
var apple2 = 61817;
var windows = 61818;
var android2 = 61819;
var linux2 = 61820;
var dribbble = 61821;
var skype2 = 61822;
var foursquare = 61824;
var trello2 = 61825;
var female = 61826;
var male = 61827;
var gittip = 61828;
var gratipay = 61828;
var sun_o = 61829;
var moon_o = 61830;
var archive2 = 61831;
var bug2 = 61832;
var vk2 = 61833;
var weibo = 61834;
var renren = 61835;
var pagelines = 61836;
var stack_exchange2 = 61837;
var arrow_circle_o_right = 61838;
var arrow_circle_o_left = 61840;
var toggle_left = 61841;
var caret_square_o_left = 61841;
var dot_circle_o = 61842;
var wheelchair = 61843;
var vimeo_square = 61844;
var turkish_lira = 61845;
var try2 = 61845;
var plus_square_o = 61846;
var space_shuttle = 61847;
var slack2 = 61848;
var envelope_square = 61849;
var wordpress2 = 61850;
var openid2 = 61851;
var institution = 61852;
var bank2 = 61852;
var university = 61852;
var mortar_board = 61853;
var graduation_cap = 61853;
var yahoo2 = 61854;
var google2 = 61856;
var reddit2 = 61857;
var reddit_square = 61858;
var stumbleupon_circle = 61859;
var stumbleupon = 61860;
var delicious = 61861;
var digg = 61862;
var pied_piper_pp = 61863;
var pied_piper_alt = 61864;
var drupal2 = 61865;
var joomla = 61866;
var language = 61867;
var fax2 = 61868;
var building = 61869;
var child = 61870;
var paw2 = 61872;
var spoon = 61873;
var cube2 = 61874;
var cubes = 61875;
var behance = 61876;
var behance_square = 61877;
var steam2 = 61878;
var steam_square = 61879;
var recycle2 = 61880;
var automobile = 61881;
var car2 = 61881;
var cab = 61882;
var taxi2 = 61882;
var tree2 = 61883;
var spotify2 = 61884;
var deviantart2 = 61885;
var soundcloud2 = 61886;
var database2 = 61888;
var file_pdf_o = 61889;
var file_word_o = 61890;
var file_excel_o = 61891;
var file_powerpoint_o = 61892;
var file_photo_o = 61893;
var file_picture_o = 61893;
var file_image_o = 61893;
var file_zip_o = 61894;
var file_archive_o = 61894;
var file_sound_o = 61895;
var file_audio_o = 61895;
var file_movie_o = 61896;
var file_video_o = 61896;
var file_code_o = 61897;
var vine = 61898;
var codepen2 = 61899;
var jsfiddle2 = 61900;
var life_bouy = 61901;
var life_buoy = 61901;
var life_saver = 61901;
var support = 61901;
var life_ring = 61901;
var circle_o_notch = 61902;
var ra = 61904;
var resistance = 61904;
var rebel = 61904;
var ge = 61905;
var empire = 61905;
var git_square = 61906;
var git2 = 61907;
var y_combinator_square = 61908;
var yc_square = 61908;
var hacker_news = 61908;
var tencent_weibo = 61909;
var qq = 61910;
var wechat2 = 61911;
var weixin = 61911;
var send2 = 61912;
var paper_plane = 61912;
var send_o = 61913;
var paper_plane_o = 61913;
var history2 = 61914;
var circle_thin = 61915;
var header = 61916;
var paragraph = 61917;
var sliders = 61918;
var share_alt = 61920;
var share_alt_square = 61921;
var bomb2 = 61922;
var soccer_ball_o = 61923;
var futbol_o = 61923;
var tty = 61924;
var binoculars2 = 61925;
var plug = 61926;
var slideshare = 61927;
var twitch2 = 61928;
var yelp = 61929;
var newspaper_o = 61930;
var wifi2 = 61931;
var calculator2 = 61932;
var paypal = 61933;
var google_wallet = 61934;
var cc_visa = 61936;
var cc_mastercard = 61937;
var cc_discover = 61938;
var cc_amex = 61939;
var cc_paypal = 61940;
var cc_stripe = 61941;
var bell_slash = 61942;
var bell_slash_o = 61943;
var trash = 61944;
var copyright2 = 61945;
var at2 = 61946;
var eyedropper2 = 61947;
var paint_brush = 61948;
var birthday_cake = 61949;
var area_chart = 61950;
var pie_chart = 61952;
var line_chart = 61953;
var lastfm = 61954;
var lastfm_square = 61955;
var toggle_off = 61956;
var toggle_on = 61957;
var bicycle2 = 61958;
var bus2 = 61959;
var ioxhost = 61960;
var angellist = 61961;
var cc = 61962;
var shekel = 61963;
var sheqel = 61963;
var ils = 61963;
var meanpath = 61964;
var buysellads = 61965;
var connectdevelop = 61966;
var dashcube = 61968;
var forumbee = 61969;
var leanpub = 61970;
var sellsy = 61971;
var shirtsinbulk = 61972;
var simplybuilt = 61973;
var skyatlas = 61974;
var cart_plus2 = 61975;
var cart_arrow_down2 = 61976;
var diamond2 = 61977;
var ship = 61978;
var user_secret = 61979;
var motorcycle = 61980;
var street_view = 61981;
var heartbeat = 61982;
var venus = 61985;
var mars = 61986;
var mercury = 61987;
var intersex = 61988;
var transgender = 61988;
var transgender_alt = 61989;
var venus_double = 61990;
var mars_double = 61991;
var venus_mars = 61992;
var mars_stroke = 61993;
var mars_stroke_v = 61994;
var mars_stroke_h = 61995;
var neuter = 61996;
var genderless = 61997;
var facebook_official = 62e3;
var pinterest_p = 62001;
var whatsapp2 = 62002;
var server2 = 62003;
var user_plus = 62004;
var user_times = 62005;
var hotel = 62006;
var bed2 = 62006;
var viacoin = 62007;
var train2 = 62008;
var subway2 = 62009;
var medium = 62010;
var yc = 62011;
var y_combinator2 = 62011;
var optin_monster = 62012;
var opencart = 62013;
var expeditedssl = 62014;
var battery_4 = 62016;
var battery2 = 62016;
var battery_full = 62016;
var battery_3 = 62017;
var battery_three_quarters = 62017;
var battery_2 = 62018;
var battery_half = 62018;
var battery_1 = 62019;
var battery_quarter = 62019;
var battery_0 = 62020;
var battery_empty = 62020;
var mouse_pointer = 62021;
var i_cursor = 62022;
var object_group = 62023;
var object_ungroup = 62024;
var sticky_note = 62025;
var sticky_note_o = 62026;
var cc_jcb = 62027;
var cc_diners_club = 62028;
var clone = 62029;
var balance_scale = 62030;
var hourglass_o = 62032;
var hourglass_1 = 62033;
var hourglass_start = 62033;
var hourglass_2 = 62034;
var hourglass_half = 62034;
var hourglass_3 = 62035;
var hourglass_end = 62035;
var hourglass = 62036;
var hand_grab_o = 62037;
var hand_rock_o = 62037;
var hand_stop_o = 62038;
var hand_paper_o = 62038;
var hand_scissors_o = 62039;
var hand_lizard_o = 62040;
var hand_spock_o = 62041;
var hand_pointer_o = 62042;
var hand_peace_o = 62043;
var trademark2 = 62044;
var registered = 62045;
var creative_commons2 = 62046;
var gg = 62048;
var gg_circle = 62049;
var tripadvisor = 62050;
var odnoklassniki2 = 62051;
var odnoklassniki_square = 62052;
var get_pocket = 62053;
var wikipedia_w = 62054;
var safari = 62055;
var chrome = 62056;
var firefox2 = 62057;
var opera2 = 62058;
var internet_explorer = 62059;
var tv = 62060;
var television2 = 62060;
var contao = 62061;
var _00px = 62062;
var amazon2 = 62064;
var calendar_plus_o = 62065;
var calendar_minus_o = 62066;
var calendar_times_o = 62067;
var calendar_check_o = 62068;
var industry = 62069;
var map_pin = 62070;
var map_signs = 62071;
var map_o = 62072;
var map2 = 62073;
var commenting = 62074;
var commenting_o = 62075;
var houzz = 62076;
var vimeo2 = 62077;
var black_tie = 62078;
var fonticons = 62080;
var reddit_alien = 62081;
var edge = 62082;
var credit_card_alt = 62083;
var codiepie = 62084;
var modx = 62085;
var fort_awesome = 62086;
var usb2 = 62087;
var product_hunt = 62088;
var mixcloud = 62089;
var scribd = 62090;
var pause_circle2 = 62091;
var pause_circle_o = 62092;
var stop_circle2 = 62093;
var stop_circle_o = 62094;
var shopping_bag = 62096;
var shopping_basket = 62097;
var hashtag = 62098;
var bluetooth2 = 62099;
var bluetooth_b = 62100;
var percent2 = 62101;
var gitlab2 = 62102;
var wpbeginner = 62103;
var wpforms = 62104;
var envira = 62105;
var universal_access = 62106;
var wheelchair_alt = 62107;
var question_circle_o = 62108;
var blind = 62109;
var audio_description = 62110;
var volume_control_phone = 62112;
var braille2 = 62113;
var assistive_listening_systems = 62114;
var asl_interpreting = 62115;
var american_sign_language_interpreting = 62115;
var deafness = 62116;
var hard_of_hearing = 62116;
var deaf = 62116;
var glide = 62117;
var glide_g = 62118;
var signing = 62119;
var sign_language = 62119;
var low_vision = 62120;
var viadeo = 62121;
var viadeo_square = 62122;
var snapchat2 = 62123;
var snapchat_ghost = 62124;
var snapchat_square = 62125;
var pied_piper = 62126;
var first_order = 62128;
var yoast = 62129;
var themeisle = 62130;
var google_plus_circle = 62131;
var google_plus_official = 62131;
var fa = 62132;
var font_awesome2 = 62132;
var handshake_o = 62133;
var envelope_open = 62134;
var envelope_open_o = 62135;
var linode = 62136;
var address_book = 62137;
var address_book_o = 62138;
var vcard = 62139;
var address_card = 62139;
var vcard_o = 62140;
var address_card_o = 62140;
var user_circle = 62141;
var user_circle_o = 62142;
var user_o = 62144;
var id_badge = 62145;
var drivers_license = 62146;
var id_card2 = 62146;
var drivers_license_o = 62147;
var id_card_o = 62147;
var quora2 = 62148;
var free_code_camp = 62149;
var telegram2 = 62150;
var thermometer_4 = 62151;
var thermometer2 = 62151;
var thermometer_full = 62151;
var thermometer_3 = 62152;
var thermometer_three_quarters = 62152;
var thermometer_2 = 62153;
var thermometer_half = 62153;
var thermometer_1 = 62154;
var thermometer_quarter = 62154;
var thermometer_0 = 62155;
var thermometer_empty = 62155;
var shower2 = 62156;
var bathtub = 62157;
var s15 = 62157;
var bath = 62157;
var podcast2 = 62158;
var window_maximize2 = 62160;
var window_minimize2 = 62161;
var window_restore2 = 62162;
var times_rectangle = 62163;
var window_close2 = 62163;
var times_rectangle_o = 62164;
var window_close_o = 62164;
var bandcamp2 = 62165;
var grav = 62166;
var etsy = 62167;
var imdb = 62168;
var ravelry = 62169;
var eercast = 62170;
var microchip = 62171;
var snowflake_o = 62172;
var superpowers = 62173;
var wpexplorer = 62174;
var meetup = 62176;
var FontAwesome_default2 = {
  glass,
  music: music2,
  search,
  "envelope-o": envelope_o,
  heart: heart2,
  star: star2,
  "star-o": star_o,
  user,
  film: film2,
  "th-large": th_large,
  th,
  "th-list": th_list,
  check: check2,
  remove,
  close: close2,
  times,
  "search-plus": search_plus,
  "search-minus": search_minus,
  "power-off": power_off2,
  signal: signal2,
  gear,
  cog: cog2,
  "trash-o": trash_o,
  home: home2,
  "file-o": file_o,
  "clock-o": clock_o,
  road: road2,
  download: download2,
  "arrow-circle-o-down": arrow_circle_o_down,
  "arrow-circle-o-up": arrow_circle_o_up,
  inbox: inbox2,
  "play-circle-o": play_circle_o,
  "rotate-right": rotate_right2,
  repeat: repeat2,
  refresh: refresh2,
  "list-alt": list_alt,
  lock: lock2,
  flag: flag2,
  headphones: headphones2,
  "volume-off": volume_off2,
  "volume-down": volume_down,
  "volume-up": volume_up,
  qrcode: qrcode2,
  barcode: barcode2,
  tag: tag2,
  tags,
  book: book2,
  bookmark: bookmark2,
  print,
  camera: camera2,
  font,
  bold,
  italic,
  "text-height": text_height,
  "text-width": text_width,
  "align-left": align_left,
  "align-center": align_center,
  "align-right": align_right,
  "align-justify": align_justify,
  list,
  dedent,
  outdent,
  indent,
  "video-camera": video_camera,
  photo,
  image: image2,
  "picture-o": picture_o,
  pencil: pencil2,
  "map-marker": map_marker2,
  adjust: adjust2,
  tint,
  edit,
  "pencil-square-o": pencil_square_o,
  "share-square-o": share_square_o,
  "check-square-o": check_square_o,
  arrows,
  "step-backward": step_backward2,
  "fast-backward": fast_backward,
  backward,
  play: play2,
  pause: pause2,
  stop: stop2,
  forward: forward2,
  "fast-forward": fast_forward2,
  "step-forward": step_forward2,
  eject: eject2,
  "chevron-left": chevron_left2,
  "chevron-right": chevron_right2,
  "plus-circle": plus_circle2,
  "minus-circle": minus_circle2,
  "times-circle": times_circle,
  "check-circle": check_circle2,
  "question-circle": question_circle,
  "info-circle": info_circle,
  crosshairs: crosshairs2,
  "times-circle-o": times_circle_o,
  "check-circle-o": check_circle_o,
  ban,
  "arrow-left": arrow_left2,
  "arrow-right": arrow_right2,
  "arrow-up": arrow_up2,
  "arrow-down": arrow_down2,
  "mail-forward": mail_forward,
  share: share2,
  expand,
  compress,
  plus: plus2,
  minus: minus2,
  asterisk: asterisk2,
  "exclamation-circle": exclamation_circle,
  gift: gift2,
  leaf: leaf2,
  fire: fire2,
  eye: eye2,
  "eye-slash": eye_slash,
  warning: warning5,
  "exclamation-triangle": exclamation_triangle,
  plane,
  calendar: calendar2,
  random,
  comment: comment2,
  magnet: magnet2,
  "chevron-up": chevron_up2,
  "chevron-down": chevron_down2,
  retweet,
  "shopping-cart": shopping_cart,
  folder: folder2,
  "folder-open": folder_open2,
  "arrows-v": arrows_v,
  "arrows-h": arrows_h,
  "bar-chart-o": bar_chart_o,
  "bar-chart": bar_chart,
  "twitter-square": twitter_square,
  "facebook-square": facebook_square,
  "camera-retro": camera_retro,
  key: key2,
  gears,
  cogs: cogs2,
  comments,
  "thumbs-o-up": thumbs_o_up,
  "thumbs-o-down": thumbs_o_down,
  "star-half": star_half2,
  "heart-o": heart_o,
  "sign-out": sign_out,
  "linkedin-square": linkedin_square,
  "thumb-tack": thumb_tack,
  "external-link": external_link,
  "sign-in": sign_in,
  trophy: trophy2,
  "github-square": github_square,
  upload: upload2,
  "lemon-o": lemon_o,
  phone: phone2,
  "square-o": square_o,
  "bookmark-o": bookmark_o,
  "phone-square": phone_square,
  twitter: twitter2,
  "facebook-f": facebook_f,
  facebook: facebook2,
  github: github2,
  unlock,
  "credit-card": credit_card2,
  feed,
  rss: rss2,
  "hdd-o": hdd_o,
  bullhorn: bullhorn2,
  bell: bell2,
  certificate: certificate2,
  "hand-o-right": hand_o_right,
  "hand-o-left": hand_o_left,
  "hand-o-up": hand_o_up,
  "hand-o-down": hand_o_down,
  "arrow-circle-left": arrow_circle_left,
  "arrow-circle-right": arrow_circle_right,
  "arrow-circle-up": arrow_circle_up,
  "arrow-circle-down": arrow_circle_down,
  globe,
  wrench: wrench2,
  tasks,
  filter: filter3,
  briefcase: briefcase2,
  "arrows-alt": arrows_alt,
  group: group2,
  users,
  chain,
  link: link2,
  cloud: cloud2,
  flask: flask2,
  cut,
  scissors,
  copy,
  "files-o": files_o,
  paperclip: paperclip2,
  save,
  "floppy-o": floppy_o,
  square: square2,
  navicon,
  reorder,
  bars,
  "list-ul": list_ul,
  "list-ol": list_ol,
  strikethrough,
  underline,
  table: table2,
  magic,
  truck: truck2,
  pinterest: pinterest2,
  "pinterest-square": pinterest_square,
  "google-plus-square": google_plus_square,
  "google-plus": google_plus2,
  money,
  "caret-down": caret_down,
  "caret-up": caret_up,
  "caret-left": caret_left,
  "caret-right": caret_right,
  columns,
  unsorted,
  sort: sort2,
  "sort-down": sort_down,
  "sort-desc": sort_desc,
  "sort-up": sort_up,
  "sort-asc": sort_asc,
  envelope,
  linkedin: linkedin2,
  "rotate-left": rotate_left2,
  undo: undo2,
  legal,
  gavel: gavel2,
  dashboard,
  tachometer,
  "comment-o": comment_o,
  "comments-o": comments_o,
  flash: flash2,
  bolt: bolt2,
  sitemap: sitemap2,
  umbrella: umbrella2,
  paste,
  clipboard: clipboard2,
  "lightbulb-o": lightbulb_o,
  exchange,
  "cloud-download": cloud_download2,
  "cloud-upload": cloud_upload2,
  "user-md": user_md,
  stethoscope: stethoscope2,
  suitcase,
  "bell-o": bell_o,
  coffee: coffee2,
  cutlery,
  "file-text-o": file_text_o,
  "building-o": building_o,
  "hospital-o": hospital_o,
  ambulance: ambulance2,
  medkit,
  "fighter-jet": fighter_jet,
  beer: beer2,
  "h-square": h_square,
  "plus-square": plus_square,
  "angle-double-left": angle_double_left,
  "angle-double-right": angle_double_right,
  "angle-double-up": angle_double_up,
  "angle-double-down": angle_double_down,
  "angle-left": angle_left,
  "angle-right": angle_right2,
  "angle-up": angle_up,
  "angle-down": angle_down,
  desktop,
  laptop: laptop2,
  tablet: tablet2,
  "mobile-phone": mobile_phone,
  mobile,
  "circle-o": circle_o,
  "quote-left": quote_left,
  "quote-right": quote_right,
  spinner,
  circle: circle2,
  "mail-reply": mail_reply,
  reply: reply2,
  "github-alt": github_alt,
  "folder-o": folder_o,
  "folder-open-o": folder_open_o,
  "smile-o": smile_o,
  "frown-o": frown_o,
  "meh-o": meh_o,
  gamepad: gamepad2,
  "keyboard-o": keyboard_o,
  "flag-o": flag_o,
  "flag-checkered": flag_checkered2,
  terminal,
  code,
  "mail-reply-all": mail_reply_all,
  "reply-all": reply_all2,
  "star-half-empty": star_half_empty,
  "star-half-full": star_half_full2,
  "star-half-o": star_half_o,
  "location-arrow": location_arrow,
  crop: crop2,
  "code-fork": code_fork,
  unlink,
  "chain-broken": chain_broken,
  question,
  info,
  exclamation: exclamation2,
  superscript,
  subscript,
  eraser: eraser2,
  "puzzle-piece": puzzle_piece,
  microphone: microphone2,
  "microphone-slash": microphone_slash,
  shield: shield2,
  "calendar-o": calendar_o,
  "fire-extinguisher": fire_extinguisher2,
  rocket: rocket2,
  maxcdn,
  "chevron-circle-left": chevron_circle_left,
  "chevron-circle-right": chevron_circle_right,
  "chevron-circle-up": chevron_circle_up,
  "chevron-circle-down": chevron_circle_down,
  html5,
  css3,
  anchor: anchor2,
  "unlock-alt": unlock_alt,
  bullseye: bullseye2,
  "ellipsis-h": ellipsis_h,
  "ellipsis-v": ellipsis_v,
  "rss-square": rss_square,
  "play-circle": play_circle2,
  ticket: ticket2,
  "minus-square": minus_square,
  "minus-square-o": minus_square_o,
  "level-up": level_up,
  "level-down": level_down,
  "check-square": check_square,
  "pencil-square": pencil_square,
  "external-link-square": external_link_square,
  "share-square": share_square,
  compass: compass2,
  "toggle-down": toggle_down,
  "caret-square-o-down": caret_square_o_down,
  "toggle-up": toggle_up,
  "caret-square-o-up": caret_square_o_up,
  "toggle-right": toggle_right,
  "caret-square-o-right": caret_square_o_right,
  euro,
  eur,
  gbp,
  dollar,
  usd,
  rupee,
  inr,
  cny,
  rmb,
  yen,
  jpy,
  ruble,
  rouble,
  rub,
  won,
  krw,
  bitcoin: bitcoin2,
  btc,
  file: file2,
  "file-text": file_text,
  "sort-alpha-asc": sort_alpha_asc,
  "sort-alpha-desc": sort_alpha_desc,
  "sort-amount-asc": sort_amount_asc,
  "sort-amount-desc": sort_amount_desc,
  "sort-numeric-asc": sort_numeric_asc,
  "sort-numeric-desc": sort_numeric_desc,
  "thumbs-up": thumbs_up,
  "thumbs-down": thumbs_down,
  "youtube-square": youtube_square,
  youtube: youtube2,
  xing: xing2,
  "xing-square": xing_square,
  "youtube-play": youtube_play,
  dropbox: dropbox2,
  "stack-overflow": stack_overflow2,
  instagram: instagram2,
  flickr,
  adn,
  bitbucket: bitbucket2,
  "bitbucket-square": bitbucket_square,
  tumblr,
  "tumblr-square": tumblr_square,
  "long-arrow-down": long_arrow_down,
  "long-arrow-up": long_arrow_up,
  "long-arrow-left": long_arrow_left,
  "long-arrow-right": long_arrow_right,
  apple: apple2,
  windows,
  android: android2,
  linux: linux2,
  dribbble,
  skype: skype2,
  foursquare,
  trello: trello2,
  female,
  male,
  gittip,
  gratipay,
  "sun-o": sun_o,
  "moon-o": moon_o,
  archive: archive2,
  bug: bug2,
  vk: vk2,
  weibo,
  renren,
  pagelines,
  "stack-exchange": stack_exchange2,
  "arrow-circle-o-right": arrow_circle_o_right,
  "arrow-circle-o-left": arrow_circle_o_left,
  "toggle-left": toggle_left,
  "caret-square-o-left": caret_square_o_left,
  "dot-circle-o": dot_circle_o,
  wheelchair,
  "vimeo-square": vimeo_square,
  "turkish-lira": turkish_lira,
  try: try2,
  "plus-square-o": plus_square_o,
  "space-shuttle": space_shuttle,
  slack: slack2,
  "envelope-square": envelope_square,
  wordpress: wordpress2,
  openid: openid2,
  institution,
  bank: bank2,
  university,
  "mortar-board": mortar_board,
  "graduation-cap": graduation_cap,
  yahoo: yahoo2,
  google: google2,
  reddit: reddit2,
  "reddit-square": reddit_square,
  "stumbleupon-circle": stumbleupon_circle,
  stumbleupon,
  delicious,
  digg,
  "pied-piper-pp": pied_piper_pp,
  "pied-piper-alt": pied_piper_alt,
  drupal: drupal2,
  joomla,
  language,
  fax: fax2,
  building,
  child,
  paw: paw2,
  spoon,
  cube: cube2,
  cubes,
  behance,
  "behance-square": behance_square,
  steam: steam2,
  "steam-square": steam_square,
  recycle: recycle2,
  automobile,
  car: car2,
  cab,
  taxi: taxi2,
  tree: tree2,
  spotify: spotify2,
  deviantart: deviantart2,
  soundcloud: soundcloud2,
  database: database2,
  "file-pdf-o": file_pdf_o,
  "file-word-o": file_word_o,
  "file-excel-o": file_excel_o,
  "file-powerpoint-o": file_powerpoint_o,
  "file-photo-o": file_photo_o,
  "file-picture-o": file_picture_o,
  "file-image-o": file_image_o,
  "file-zip-o": file_zip_o,
  "file-archive-o": file_archive_o,
  "file-sound-o": file_sound_o,
  "file-audio-o": file_audio_o,
  "file-movie-o": file_movie_o,
  "file-video-o": file_video_o,
  "file-code-o": file_code_o,
  vine,
  codepen: codepen2,
  jsfiddle: jsfiddle2,
  "life-bouy": life_bouy,
  "life-buoy": life_buoy,
  "life-saver": life_saver,
  support,
  "life-ring": life_ring,
  "circle-o-notch": circle_o_notch,
  ra,
  resistance,
  rebel,
  ge,
  empire,
  "git-square": git_square,
  git: git2,
  "y-combinator-square": y_combinator_square,
  "yc-square": yc_square,
  "hacker-news": hacker_news,
  "tencent-weibo": tencent_weibo,
  qq,
  wechat: wechat2,
  weixin,
  send: send2,
  "paper-plane": paper_plane,
  "send-o": send_o,
  "paper-plane-o": paper_plane_o,
  history: history2,
  "circle-thin": circle_thin,
  header,
  paragraph,
  sliders,
  "share-alt": share_alt,
  "share-alt-square": share_alt_square,
  bomb: bomb2,
  "soccer-ball-o": soccer_ball_o,
  "futbol-o": futbol_o,
  tty,
  binoculars: binoculars2,
  plug,
  slideshare,
  twitch: twitch2,
  yelp,
  "newspaper-o": newspaper_o,
  wifi: wifi2,
  calculator: calculator2,
  paypal,
  "google-wallet": google_wallet,
  "cc-visa": cc_visa,
  "cc-mastercard": cc_mastercard,
  "cc-discover": cc_discover,
  "cc-amex": cc_amex,
  "cc-paypal": cc_paypal,
  "cc-stripe": cc_stripe,
  "bell-slash": bell_slash,
  "bell-slash-o": bell_slash_o,
  trash,
  copyright: copyright2,
  at: at2,
  eyedropper: eyedropper2,
  "paint-brush": paint_brush,
  "birthday-cake": birthday_cake,
  "area-chart": area_chart,
  "pie-chart": pie_chart,
  "line-chart": line_chart,
  lastfm,
  "lastfm-square": lastfm_square,
  "toggle-off": toggle_off,
  "toggle-on": toggle_on,
  bicycle: bicycle2,
  bus: bus2,
  ioxhost,
  angellist,
  cc,
  shekel,
  sheqel,
  ils,
  meanpath,
  buysellads,
  connectdevelop,
  dashcube,
  forumbee,
  leanpub,
  sellsy,
  shirtsinbulk,
  simplybuilt,
  skyatlas,
  "cart-plus": cart_plus2,
  "cart-arrow-down": cart_arrow_down2,
  diamond: diamond2,
  ship,
  "user-secret": user_secret,
  motorcycle,
  "street-view": street_view,
  heartbeat,
  venus,
  mars,
  mercury,
  intersex,
  transgender,
  "transgender-alt": transgender_alt,
  "venus-double": venus_double,
  "mars-double": mars_double,
  "venus-mars": venus_mars,
  "mars-stroke": mars_stroke,
  "mars-stroke-v": mars_stroke_v,
  "mars-stroke-h": mars_stroke_h,
  neuter,
  genderless,
  "facebook-official": facebook_official,
  "pinterest-p": pinterest_p,
  whatsapp: whatsapp2,
  server: server2,
  "user-plus": user_plus,
  "user-times": user_times,
  hotel,
  bed: bed2,
  viacoin,
  train: train2,
  subway: subway2,
  medium,
  yc,
  "y-combinator": y_combinator2,
  "optin-monster": optin_monster,
  opencart,
  expeditedssl,
  "battery-4": battery_4,
  battery: battery2,
  "battery-full": battery_full,
  "battery-3": battery_3,
  "battery-three-quarters": battery_three_quarters,
  "battery-2": battery_2,
  "battery-half": battery_half,
  "battery-1": battery_1,
  "battery-quarter": battery_quarter,
  "battery-0": battery_0,
  "battery-empty": battery_empty,
  "mouse-pointer": mouse_pointer,
  "i-cursor": i_cursor,
  "object-group": object_group,
  "object-ungroup": object_ungroup,
  "sticky-note": sticky_note,
  "sticky-note-o": sticky_note_o,
  "cc-jcb": cc_jcb,
  "cc-diners-club": cc_diners_club,
  clone,
  "balance-scale": balance_scale,
  "hourglass-o": hourglass_o,
  "hourglass-1": hourglass_1,
  "hourglass-start": hourglass_start,
  "hourglass-2": hourglass_2,
  "hourglass-half": hourglass_half,
  "hourglass-3": hourglass_3,
  "hourglass-end": hourglass_end,
  hourglass,
  "hand-grab-o": hand_grab_o,
  "hand-rock-o": hand_rock_o,
  "hand-stop-o": hand_stop_o,
  "hand-paper-o": hand_paper_o,
  "hand-scissors-o": hand_scissors_o,
  "hand-lizard-o": hand_lizard_o,
  "hand-spock-o": hand_spock_o,
  "hand-pointer-o": hand_pointer_o,
  "hand-peace-o": hand_peace_o,
  trademark: trademark2,
  registered,
  "creative-commons": creative_commons2,
  gg,
  "gg-circle": gg_circle,
  tripadvisor,
  odnoklassniki: odnoklassniki2,
  "odnoklassniki-square": odnoklassniki_square,
  "get-pocket": get_pocket,
  "wikipedia-w": wikipedia_w,
  safari,
  chrome,
  firefox: firefox2,
  opera: opera2,
  "internet-explorer": internet_explorer,
  tv,
  television: television2,
  contao,
  "500px": _00px,
  amazon: amazon2,
  "calendar-plus-o": calendar_plus_o,
  "calendar-minus-o": calendar_minus_o,
  "calendar-times-o": calendar_times_o,
  "calendar-check-o": calendar_check_o,
  industry,
  "map-pin": map_pin,
  "map-signs": map_signs,
  "map-o": map_o,
  map: map2,
  commenting,
  "commenting-o": commenting_o,
  houzz,
  vimeo: vimeo2,
  "black-tie": black_tie,
  fonticons,
  "reddit-alien": reddit_alien,
  edge,
  "credit-card-alt": credit_card_alt,
  codiepie,
  modx,
  "fort-awesome": fort_awesome,
  usb: usb2,
  "product-hunt": product_hunt,
  mixcloud,
  scribd,
  "pause-circle": pause_circle2,
  "pause-circle-o": pause_circle_o,
  "stop-circle": stop_circle2,
  "stop-circle-o": stop_circle_o,
  "shopping-bag": shopping_bag,
  "shopping-basket": shopping_basket,
  hashtag,
  bluetooth: bluetooth2,
  "bluetooth-b": bluetooth_b,
  percent: percent2,
  gitlab: gitlab2,
  wpbeginner,
  wpforms,
  envira,
  "universal-access": universal_access,
  "wheelchair-alt": wheelchair_alt,
  "question-circle-o": question_circle_o,
  blind,
  "audio-description": audio_description,
  "volume-control-phone": volume_control_phone,
  braille: braille2,
  "assistive-listening-systems": assistive_listening_systems,
  "asl-interpreting": asl_interpreting,
  "american-sign-language-interpreting": american_sign_language_interpreting,
  deafness,
  "hard-of-hearing": hard_of_hearing,
  deaf,
  glide,
  "glide-g": glide_g,
  signing,
  "sign-language": sign_language,
  "low-vision": low_vision,
  viadeo,
  "viadeo-square": viadeo_square,
  snapchat: snapchat2,
  "snapchat-ghost": snapchat_ghost,
  "snapchat-square": snapchat_square,
  "pied-piper": pied_piper,
  "first-order": first_order,
  yoast,
  themeisle,
  "google-plus-circle": google_plus_circle,
  "google-plus-official": google_plus_official,
  fa,
  "font-awesome": font_awesome2,
  "handshake-o": handshake_o,
  "envelope-open": envelope_open,
  "envelope-open-o": envelope_open_o,
  linode,
  "address-book": address_book,
  "address-book-o": address_book_o,
  vcard,
  "address-card": address_card,
  "vcard-o": vcard_o,
  "address-card-o": address_card_o,
  "user-circle": user_circle,
  "user-circle-o": user_circle_o,
  "user-o": user_o,
  "id-badge": id_badge,
  "drivers-license": drivers_license,
  "id-card": id_card2,
  "drivers-license-o": drivers_license_o,
  "id-card-o": id_card_o,
  quora: quora2,
  "free-code-camp": free_code_camp,
  telegram: telegram2,
  "thermometer-4": thermometer_4,
  thermometer: thermometer2,
  "thermometer-full": thermometer_full,
  "thermometer-3": thermometer_3,
  "thermometer-three-quarters": thermometer_three_quarters,
  "thermometer-2": thermometer_2,
  "thermometer-half": thermometer_half,
  "thermometer-1": thermometer_1,
  "thermometer-quarter": thermometer_quarter,
  "thermometer-0": thermometer_0,
  "thermometer-empty": thermometer_empty,
  shower: shower2,
  bathtub,
  s15,
  bath,
  podcast: podcast2,
  "window-maximize": window_maximize2,
  "window-minimize": window_minimize2,
  "window-restore": window_restore2,
  "times-rectangle": times_rectangle,
  "window-close": window_close2,
  "times-rectangle-o": times_rectangle_o,
  "window-close-o": window_close_o,
  bandcamp: bandcamp2,
  grav,
  etsy,
  imdb,
  ravelry,
  eercast,
  microchip,
  "snowflake-o": snowflake_o,
  superpowers,
  wpexplorer,
  meetup
};

// node_modules/@expo/vector-icons/build/FontAwesome.js
var FontAwesome_default3 = createIconSet_default(FontAwesome_default2, "FontAwesome", FontAwesome_default);

// src/screens/HomeScreen.tsx
var MyComponent = () => /* @__PURE__ */ import_react40.default.createElement(MaterialCommunityIcons_default3, {
  name: "camera",
  color: colors_exports.red500,
  size: 20,
  onPress: () => console.log("Pressed")
});
var HomeScreen = ({navigation: navigation2}) => /* @__PURE__ */ import_react40.default.createElement(Background_default, null, /* @__PURE__ */ import_react40.default.createElement(Logo_default, null), /* @__PURE__ */ import_react40.default.createElement(MyComponent, null), /* @__PURE__ */ import_react40.default.createElement(Header_default2, null, "Login Template"), /* @__PURE__ */ import_react40.default.createElement(Paragraph_default2, null, "The easiest way to start with your amazing application."), /* @__PURE__ */ import_react40.default.createElement(Button_default2, {
  mode: "contained",
  onPress: () => navigation2.navigate("LoginScreen")
}, "Login"), /* @__PURE__ */ import_react40.default.createElement(Button_default2, {
  mode: "outlined",
  onPress: () => navigation2.navigate("RegisterScreen")
}, "Sign Up"));
var HomeScreen_default = (0, import_react40.memo)(HomeScreen);

// src/screens/LoginScreen.tsx
var import_react43 = __toModule(require_react());

// src/components/TextInput.tsx
var import_react41 = __toModule(require_react());
var TextInput3 = ({errorText, ...props}) => /* @__PURE__ */ import_react41.default.createElement(View_default, {
  style: styles103.container
}, /* @__PURE__ */ import_react41.default.createElement(TextInput_default2, {
  style: styles103.input,
  selectionColor: theme.colors.primary,
  underlineColor: "transparent",
  mode: "outlined",
  ...props
}), errorText ? /* @__PURE__ */ import_react41.default.createElement(Text_default, {
  style: styles103.error
}, errorText) : null);
var styles103 = StyleSheet_default2.create({
  container: {
    width: "100%",
    marginVertical: 12
  },
  input: {
    backgroundColor: theme.colors.surface
  },
  error: {
    fontSize: 14,
    color: theme.colors.error,
    paddingHorizontal: 4,
    paddingTop: 4
  }
});
var TextInput_default3 = (0, import_react41.memo)(TextInput3);

// src/components/BackButton.tsx
var import_react42 = __toModule(require_react());

// node_modules/react-native-status-bar-height/index.js
var STATUSBAR_DEFAULT_HEIGHT = 20;
var STATUSBAR_X_HEIGHT = 44;
var STATUSBAR_IP12_HEIGHT = 47;
var STATUSBAR_IP12MAX_HEIGHT = 47;
var X_WIDTH = 375;
var X_HEIGHT = 812;
var XSMAX_WIDTH = 414;
var XSMAX_HEIGHT = 896;
var IP12_WIDTH = 390;
var IP12_HEIGHT = 844;
var IP12MAX_WIDTH = 428;
var IP12MAX_HEIGHT = 926;
var {height: W_HEIGHT, width: W_WIDTH} = Dimensions.get("window");
var statusBarHeight = STATUSBAR_DEFAULT_HEIGHT;
var isIPhoneX_v = false;
var isIPhoneXMax_v = false;
var isIPhone12_v = false;
var isIPhone12Max_v = false;
var isIPhoneWithMonobrow_v = false;
if (Platform_default.OS === "ios" && !Platform_default.isPad && !Platform_default.isTVOS) {
  if (W_WIDTH === X_WIDTH && W_HEIGHT === X_HEIGHT) {
    isIPhoneWithMonobrow_v = true;
    isIPhoneX_v = true;
    statusBarHeight = STATUSBAR_X_HEIGHT;
  } else if (W_WIDTH === XSMAX_WIDTH && W_HEIGHT === XSMAX_HEIGHT) {
    isIPhoneWithMonobrow_v = true;
    isIPhoneXMax_v = true;
    statusBarHeight = STATUSBAR_X_HEIGHT;
  } else if (W_WIDTH === IP12_WIDTH && W_HEIGHT === IP12_HEIGHT) {
    isIPhoneWithMonobrow_v = true;
    isIPhone12_v = true;
    statusBarHeight = STATUSBAR_IP12_HEIGHT;
  } else if (W_WIDTH === IP12MAX_WIDTH && W_HEIGHT === IP12MAX_HEIGHT) {
    isIPhoneWithMonobrow_v = true;
    isIPhone12Max_v = true;
    statusBarHeight = STATUSBAR_IP12MAX_HEIGHT;
  }
}
function getStatusBarHeight2(skipAndroid) {
  return Platform_default.select({
    ios: statusBarHeight,
    android: skipAndroid ? 0 : StatusBar_default.currentHeight,
    default: 0
  });
}

// src/components/BackButton.tsx
var BackButton = ({goBack: goBack2}) => /* @__PURE__ */ import_react42.default.createElement(Pressable_default, {
  onPress: goBack2,
  style: ({pressed}) => [
    {
      opacity: pressed ? 0.6 : 1
    },
    styles104.container
  ]
}, /* @__PURE__ */ import_react42.default.createElement(Image_default, {
  style: styles104.image,
  source: require_arrow_back()
}));
var styles104 = StyleSheet_default2.create({
  container: {
    position: "absolute",
    top: 10 + getStatusBarHeight2(),
    left: 10
  },
  image: {
    width: 24,
    height: 24
  }
});
var BackButton_default = (0, import_react42.memo)(BackButton);

// src/core/utils.tsx
var emailValidator = (email2) => {
  const re = /\S+@\S+\.\S+/;
  if (!email2 || email2.length <= 0)
    return "Email cannot be empty.";
  if (!re.test(email2))
    return "Ooops! We need a valid email address.";
  return "";
};
var passwordValidator = (password) => {
  if (!password || password.length <= 0)
    return "Password cannot be empty.";
  return "";
};
var nameValidator = (name) => {
  if (!name || name.length <= 0)
    return "Name cannot be empty.";
  return "";
};

// src/screens/LoginScreen.tsx
var LoginScreen = ({navigation: navigation2}) => {
  const [email2, setEmail] = (0, import_react43.useState)({value: "", error: ""});
  const [password, setPassword] = (0, import_react43.useState)({value: "", error: ""});
  const _onLoginPressed = () => {
    const emailError = emailValidator(email2.value);
    const passwordError = passwordValidator(password.value);
    if (emailError || passwordError) {
      setEmail({...email2, error: emailError});
      setPassword({...password, error: passwordError});
      return;
    }
    navigation2.navigate("Dashboard");
  };
  return /* @__PURE__ */ import_react43.default.createElement(Background_default, null, /* @__PURE__ */ import_react43.default.createElement(BackButton_default, {
    goBack: () => navigation2.navigate("HomeScreen")
  }), /* @__PURE__ */ import_react43.default.createElement(Logo_default, null), /* @__PURE__ */ import_react43.default.createElement(Header_default2, null, "Welcome back."), /* @__PURE__ */ import_react43.default.createElement(TextInput_default3, {
    label: "Email",
    returnKeyType: "next",
    value: email2.value,
    onChangeText: (text2) => setEmail({value: text2, error: ""}),
    error: !!email2.error,
    errorText: email2.error,
    autoCapitalize: "none",
    autoCompleteType: "email",
    textContentType: "emailAddress",
    keyboardType: "email-address"
  }), /* @__PURE__ */ import_react43.default.createElement(TextInput_default3, {
    label: "Password",
    returnKeyType: "done",
    value: password.value,
    onChangeText: (text2) => setPassword({value: text2, error: ""}),
    error: !!password.error,
    errorText: password.error,
    secureTextEntry: true
  }), /* @__PURE__ */ import_react43.default.createElement(View_default, {
    style: styles105.forgotPassword
  }, /* @__PURE__ */ import_react43.default.createElement(Pressable_default, {
    onPress: () => navigation2.navigate("ForgotPasswordScreen"),
    style: ({pressed}) => [
      {opacity: pressed ? 0.6 : 1},
      {color: theme.colors.secondary}
    ]
  }, /* @__PURE__ */ import_react43.default.createElement(Text_default, {
    style: styles105.label
  }, "Forgot your password?"))), /* @__PURE__ */ import_react43.default.createElement(Button_default2, {
    mode: "contained",
    onPress: _onLoginPressed
  }, "Login"), /* @__PURE__ */ import_react43.default.createElement(View_default, {
    style: styles105.row
  }, /* @__PURE__ */ import_react43.default.createElement(Text_default, {
    style: styles105.label
  }, "Don\u2019t have an account? "), /* @__PURE__ */ import_react43.default.createElement(Pressable_default, {
    onPress: () => navigation2.navigate("RegisterScreen"),
    style: ({pressed}) => [
      {opacity: pressed ? 0.6 : 1},
      {color: theme.colors.secondary}
    ]
  }, /* @__PURE__ */ import_react43.default.createElement(Text_default, {
    style: styles105.link
  }, "Sign up"))));
};
var styles105 = StyleSheet_default2.create({
  forgotPassword: {
    width: "100%",
    alignItems: "flex-end",
    marginBottom: 24
  },
  row: {
    flexDirection: "row",
    marginTop: 4
  },
  label: {
    color: theme.colors.secondary
  },
  link: {
    fontWeight: "bold",
    color: theme.colors.primary
  }
});
var LoginScreen_default = (0, import_react43.memo)(LoginScreen);

// src/screens/RegisterScreen.tsx
var import_react44 = __toModule(require_react());
var RegisterScreen = ({navigation: navigation2}) => {
  const [name, setName] = (0, import_react44.useState)({value: "", error: ""});
  const [email2, setEmail] = (0, import_react44.useState)({value: "", error: ""});
  const [password, setPassword] = (0, import_react44.useState)({value: "", error: ""});
  const _onSignUpPressed = () => {
    const nameError = nameValidator(name.value);
    const emailError = emailValidator(email2.value);
    const passwordError = passwordValidator(password.value);
    if (emailError || passwordError || nameError) {
      setName({...name, error: nameError});
      setEmail({...email2, error: emailError});
      setPassword({...password, error: passwordError});
      return;
    }
    navigation2.navigate("Dashboard");
  };
  return /* @__PURE__ */ import_react44.default.createElement(Background_default, null, /* @__PURE__ */ import_react44.default.createElement(BackButton_default, {
    goBack: () => navigation2.navigate("HomeScreen")
  }), /* @__PURE__ */ import_react44.default.createElement(Logo_default, null), /* @__PURE__ */ import_react44.default.createElement(Header_default2, null, "Create Account"), /* @__PURE__ */ import_react44.default.createElement(TextInput_default3, {
    label: "Name",
    returnKeyType: "next",
    value: name.value,
    onChangeText: (text2) => setName({value: text2, error: ""}),
    error: !!name.error,
    errorText: name.error
  }), /* @__PURE__ */ import_react44.default.createElement(TextInput_default3, {
    label: "Email",
    returnKeyType: "next",
    value: email2.value,
    onChangeText: (text2) => setEmail({value: text2, error: ""}),
    error: !!email2.error,
    errorText: email2.error,
    autoCapitalize: "none",
    autoCompleteType: "email",
    textContentType: "emailAddress",
    keyboardType: "email-address"
  }), /* @__PURE__ */ import_react44.default.createElement(TextInput_default3, {
    label: "Password",
    returnKeyType: "done",
    value: password.value,
    onChangeText: (text2) => setPassword({value: text2, error: ""}),
    error: !!password.error,
    errorText: password.error,
    secureTextEntry: true
  }), /* @__PURE__ */ import_react44.default.createElement(Button_default2, {
    mode: "contained",
    onPress: _onSignUpPressed,
    style: styles106.button
  }, "Sign Up"), /* @__PURE__ */ import_react44.default.createElement(View_default, {
    style: styles106.row
  }, /* @__PURE__ */ import_react44.default.createElement(Text_default, {
    style: styles106.label
  }, "Already have an account? "), /* @__PURE__ */ import_react44.default.createElement(Pressable_default, {
    onPress: () => navigation2.navigate("LoginScreen"),
    style: ({pressed}) => [{opacity: pressed ? 0.6 : 1}]
  }, /* @__PURE__ */ import_react44.default.createElement(Text_default, {
    style: styles106.link
  }, "Login"))));
};
var styles106 = StyleSheet_default2.create({
  label: {
    color: theme.colors.secondary
  },
  button: {
    marginTop: 24
  },
  row: {
    flexDirection: "row",
    marginTop: 4
  },
  link: {
    fontWeight: "bold",
    color: theme.colors.primary
  }
});
var RegisterScreen_default = (0, import_react44.memo)(RegisterScreen);

// src/screens/ForgotPasswordScreen.tsx
var import_react45 = __toModule(require_react());
var ForgotPasswordScreen = ({navigation: navigation2}) => {
  const [email2, setEmail] = (0, import_react45.useState)({value: "", error: ""});
  const _onSendPressed = () => {
    const emailError = emailValidator(email2.value);
    if (emailError) {
      setEmail({...email2, error: emailError});
      return;
    }
    navigation2.navigate("LoginScreen");
  };
  return /* @__PURE__ */ import_react45.default.createElement(Background_default, null, /* @__PURE__ */ import_react45.default.createElement(BackButton_default, {
    goBack: () => navigation2.navigate("LoginScreen")
  }), /* @__PURE__ */ import_react45.default.createElement(Logo_default, null), /* @__PURE__ */ import_react45.default.createElement(Header_default2, null, "Restore Password"), /* @__PURE__ */ import_react45.default.createElement(TextInput_default3, {
    label: "E-mail address",
    returnKeyType: "done",
    value: email2.value,
    onChangeText: (text2) => setEmail({value: text2, error: ""}),
    error: !!email2.error,
    errorText: email2.error,
    autoCapitalize: "none",
    autoCompleteType: "email",
    textContentType: "emailAddress",
    keyboardType: "email-address"
  }), /* @__PURE__ */ import_react45.default.createElement(Button_default2, {
    mode: "contained",
    onPress: _onSendPressed,
    style: styles107.button
  }, "Send Reset Instructions"), /* @__PURE__ */ import_react45.default.createElement(Pressable_default, {
    style: ({pressed}) => [{opacity: pressed ? 0.6 : 1}, styles107.back],
    onPress: () => navigation2.navigate("LoginScreen")
  }, /* @__PURE__ */ import_react45.default.createElement(Text_default, {
    style: styles107.label
  }, "\u2190 Back to login")));
};
var styles107 = StyleSheet_default2.create({
  back: {
    width: "100%",
    marginTop: 12
  },
  button: {
    marginTop: 12
  },
  label: {
    color: theme.colors.secondary,
    width: "100%"
  }
});
var ForgotPasswordScreen_default = (0, import_react45.memo)(ForgotPasswordScreen);

// src/screens/Dashboard.tsx
var import_react46 = __toModule(require_react());
var Dashboard = ({navigation: navigation2}) => /* @__PURE__ */ import_react46.default.createElement(Background_default, null, /* @__PURE__ */ import_react46.default.createElement(Logo_default, null), /* @__PURE__ */ import_react46.default.createElement(Header_default2, null, "Let\u2019s startxxxz"), /* @__PURE__ */ import_react46.default.createElement(Paragraph_default2, null, "Your amazing app starts here. Open you favourite code editor and start editing this project."), /* @__PURE__ */ import_react46.default.createElement(Button_default2, {
  mode: "outlined",
  onPress: () => navigation2.navigate("Examples")
}, "Examples"), /* @__PURE__ */ import_react46.default.createElement(Button_default2, {
  mode: "outlined",
  onPress: () => navigation2.navigate("MDX")
}, "MDX"), /* @__PURE__ */ import_react46.default.createElement(Button_default2, {
  mode: "outlined",
  onPress: () => navigation2.navigate("HomeScreen")
}, "Logout"));
var Dashboard_default = (0, import_react46.memo)(Dashboard);

// src/screens/MDXProvider.tsx
var import_react56 = __toModule(require_react());

// node_modules/@mdx-js/react/dist/esm.js
var import_react47 = __toModule(require_react());
function _defineProperty36(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key3] = value;
  }
  return obj;
}
function ownKeys22(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread22(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys22(Object(source), true).forEach(function(key3) {
        _defineProperty36(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys22(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _objectWithoutPropertiesLoose16(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target2 = _objectWithoutPropertiesLoose16(source, excluded);
  var key3, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key3 = sourceSymbolKeys[i];
      if (excluded.indexOf(key3) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key3))
        continue;
      target2[key3] = source[key3];
    }
  }
  return target2;
}
var isFunction = function isFunction2(obj) {
  return typeof obj === "function";
};
var MDXContext = /* @__PURE__ */ import_react47.default.createContext({});
var useMDXComponents = function useMDXComponents2(components2) {
  var contextComponents = import_react47.default.useContext(MDXContext);
  var allComponents = contextComponents;
  if (components2) {
    allComponents = isFunction(components2) ? components2(contextComponents) : _objectSpread22(_objectSpread22({}, contextComponents), components2);
  }
  return allComponents;
};
var MDXProvider = function MDXProvider2(props) {
  var allComponents = useMDXComponents(props.components);
  return /* @__PURE__ */ import_react47.default.createElement(MDXContext.Provider, {
    value: allComponents
  }, props.children);
};
var TYPE_PROP_NAME = "mdxType";
var DEFAULTS = {
  inlineCode: "code",
  wrapper: function wrapper(_ref) {
    var children = _ref.children;
    return /* @__PURE__ */ import_react47.default.createElement(import_react47.default.Fragment, {}, children);
  }
};
var MDXCreateElement = /* @__PURE__ */ import_react47.default.forwardRef(function(props, ref) {
  var propComponents = props.components, mdxType = props.mdxType, originalType = props.originalType, parentName = props.parentName, etc = _objectWithoutProperties(props, ["components", "mdxType", "originalType", "parentName"]);
  var components2 = useMDXComponents(propComponents);
  var type = mdxType;
  var Component19 = components2["".concat(parentName, ".").concat(type)] || components2[type] || DEFAULTS[type] || originalType;
  if (propComponents) {
    return /* @__PURE__ */ import_react47.default.createElement(Component19, _objectSpread22(_objectSpread22({
      ref
    }, etc), {}, {
      components: propComponents
    }));
  }
  return /* @__PURE__ */ import_react47.default.createElement(Component19, _objectSpread22({
    ref
  }, etc));
});
MDXCreateElement.displayName = "MDXCreateElement";
function createElement125(type, props) {
  var args = arguments;
  var mdxType = props && props.mdxType;
  if (typeof type === "string" || mdxType) {
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = MDXCreateElement;
    var newProps = {};
    for (var key3 in props) {
      if (hasOwnProperty.call(props, key3)) {
        newProps[key3] = props[key3];
      }
    }
    newProps.originalType = type;
    newProps[TYPE_PROP_NAME] = typeof type === "string" ? type : mdxType;
    createElementArgArray[1] = newProps;
    for (var i = 2; i < argsLength; i++) {
      createElementArgArray[i] = args[i];
    }
    return import_react47.default.createElement.apply(null, createElementArgArray);
  }
  return import_react47.default.createElement.apply(null, args);
}

// node_modules/@expo/html-elements/build/elements/Headings.js
var import_react48 = __toModule(require_react());

// node_modules/@expo/html-elements/build/css/units.js
function rem(value) {
  if (Platform_default.OS === "web")
    return `${value}rem`;
  return PixelRatio.getFontScale() * 16 * value;
}
function em(value) {
  if (Platform_default.OS === "web")
    return `${value}em`;
  return rem(value);
}

// node_modules/@expo/html-elements/build/primitives/Text.js
var Text3 = Text_default;
var Text_default3 = Text3;

// node_modules/@expo/html-elements/build/elements/Headings.js
function createHeadingComponent(level) {
  const nativeProps = Platform_default.select({
    web: {
      "aria-level": `${level}`
    },
    default: {}
  });
  return (0, import_react48.forwardRef)((props, ref) => {
    return import_react48.default.createElement(Text_default3, Object.assign({}, nativeProps, {accessibilityRole: "header"}, props, {style: [styles108[`h${level}`], props.style], ref}));
  });
}
var H1 = createHeadingComponent(1);
var H2 = createHeadingComponent(2);
var H3 = createHeadingComponent(3);
var H4 = createHeadingComponent(4);
var H5 = createHeadingComponent(5);
var H6 = createHeadingComponent(6);
var styles108 = StyleSheet_default2.create({
  h1: {
    fontSize: em(2),
    marginVertical: em(0.67),
    fontWeight: "bold"
  },
  h2: {
    fontSize: em(1.5),
    marginVertical: em(0.83),
    fontWeight: "bold"
  },
  h3: {
    fontSize: em(1.17),
    marginVertical: em(1),
    fontWeight: "bold"
  },
  h4: {
    fontSize: em(1),
    marginVertical: em(1.33),
    fontWeight: "bold"
  },
  h5: {
    fontSize: em(0.83),
    marginVertical: em(1.67),
    fontWeight: "bold"
  },
  h6: {
    fontSize: em(0.67),
    marginVertical: em(2.33),
    fontWeight: "bold"
  }
});

// node_modules/@expo/html-elements/build/elements/Anchor.js
var import_react49 = __toModule(require_react());
var A2 = (0, import_react49.forwardRef)(({href, target: target2, ...props}, ref) => {
  const nativeProps = Platform_default.select({
    web: {
      href,
      target: target2
    },
    default: {
      onPress: (event4) => {
        props.onPress && props.onPress(event4);
        if (Platform_default.OS !== "web" && href !== void 0) {
          Linking_default.openURL(href);
        }
      }
    }
  });
  return import_react49.default.createElement(Text_default3, Object.assign({accessibilityRole: "link"}, props, nativeProps, {ref}));
});

// node_modules/@expo/html-elements/build/primitives/View.js
var View2 = View_default;
var View_default2 = View2;

// node_modules/@expo/html-elements/build/elements/Text.js
var import_react50 = __toModule(require_react());
var P = (0, import_react50.forwardRef)(({style, ...props}, ref) => {
  return import_react50.default.createElement(Text_default3, Object.assign({}, props, {style: [styles109.p, style], ref}));
});
var B2 = (0, import_react50.forwardRef)(({style, ...props}, ref) => {
  return import_react50.default.createElement(Text_default3, Object.assign({}, props, {style: [styles109.b, style], ref}));
});
var S = (0, import_react50.forwardRef)(({style, ...props}, ref) => {
  return import_react50.default.createElement(Text_default3, Object.assign({}, props, {style: [styles109.s, style], ref}));
});
var I = (0, import_react50.forwardRef)(({style, ...props}, ref) => {
  return import_react50.default.createElement(Text_default3, Object.assign({}, props, {style: [styles109.i, style], ref}));
});
var Q = (0, import_react50.forwardRef)(({children, cite, style, ...props}, ref) => {
  return import_react50.default.createElement(Text_default3, Object.assign({}, props, {style: [styles109.q, style], ref}), '"', children, '"');
});
var BlockQuote = (0, import_react50.forwardRef)(({style, cite, ...props}, ref) => {
  return import_react50.default.createElement(View_default2, Object.assign({}, props, {style: [styles109.blockQuote, style], ref}));
});
var BR = (0, import_react50.forwardRef)(({style, ...props}, ref) => {
  return import_react50.default.createElement(Text_default3, Object.assign({}, props, {style: [styles109.br, style], ref}));
});
var Mark = (0, import_react50.forwardRef)(({style, ...props}, ref) => {
  return import_react50.default.createElement(Text_default3, Object.assign({}, props, {style: [styles109.mark, style], ref}));
});
var Code = (0, import_react50.forwardRef)(({style, ...props}, ref) => {
  return import_react50.default.createElement(Text_default3, Object.assign({}, props, {style: [styles109.code, style], ref}));
});
function isTextProps(props) {
  return typeof props.children === "string";
}
var Pre = (0, import_react50.forwardRef)((props, ref) => {
  if (isTextProps(props)) {
    return import_react50.default.createElement(Text_default3, Object.assign({}, props, {style: [styles109.code, styles109.pre, props.style], ref}));
  }
  return import_react50.default.createElement(View_default2, Object.assign({}, props, {style: [styles109.pre, props.style], ref}));
});
var Time = (0, import_react50.forwardRef)(({dateTime, ...props}, ref) => {
  return import_react50.default.createElement(Text_default3, Object.assign({}, props, {ref}));
});
var styles109 = StyleSheet_default2.create({
  p: {
    marginVertical: em(1)
  },
  b: {
    fontWeight: "bold"
  },
  q: {
    fontStyle: "italic"
  },
  code: {
    fontFamily: Platform_default.select({default: "Courier", android: "monospace"}),
    fontWeight: "500"
  },
  pre: {
    marginVertical: em(1)
  },
  blockQuote: {
    marginVertical: em(1)
  },
  br: {
    width: 0,
    height: em(0.5)
  },
  s: {
    textDecorationLine: "line-through",
    textDecorationStyle: "solid"
  },
  mark: {
    backgroundColor: "yellow",
    color: "black"
  },
  i: {
    fontStyle: "italic"
  }
});

// node_modules/@expo/html-elements/build/elements/Rules.web.js
var import_react51 = __toModule(require_react());
var HR = (0, import_react51.forwardRef)((props, ref) => {
  return createElement_default("hr", {...props, ref});
});

// node_modules/@expo/html-elements/build/elements/Table.web.js
var import_react52 = __toModule(require_react());
var Table = (0, import_react52.forwardRef)((props, ref) => {
  return createElement_default("table", {...props, style: [styles110.reset, props.style], ref});
});
var THead = (0, import_react52.forwardRef)((props, ref) => {
  return createElement_default("thead", {...props, style: [styles110.reset, props.style], ref});
});
var TBody = (0, import_react52.forwardRef)((props, ref) => {
  return createElement_default("tbody", {...props, style: [styles110.reset, props.style], ref});
});
var TFoot = (0, import_react52.forwardRef)((props, ref) => {
  return createElement_default("tfoot", {...props, style: [styles110.reset, props.style], ref});
});
var TH = (0, import_react52.forwardRef)((props, ref) => {
  return createElement_default("th", {...props, style: [styles110.reset, props.style], ref});
});
var TR = (0, import_react52.forwardRef)((props, ref) => {
  return createElement_default("tr", {...props, style: [styles110.reset, props.style], ref});
});
var TD = (0, import_react52.forwardRef)((props, ref) => {
  return createElement_default("td", {...props, style: [styles110.reset, props.style], ref});
});
var Caption2 = (0, import_react52.forwardRef)((props, ref) => {
  return createElement_default("caption", {...props, style: [styles110.reset, props.style], ref});
});
var styles110 = StyleSheet_default2.create({
  reset: {
    fontFamily: "System",
    padding: 0
  }
});

// node_modules/@expo/html-elements/build/elements/Lists.js
var import_react53 = __toModule(require_react());
function createView(nativeProps = {}) {
  return (0, import_react53.forwardRef)((props, ref) => {
    return import_react53.default.createElement(View_default2, Object.assign({}, nativeProps, props, {ref}));
  });
}
var UL = createView(Platform_default.select({
  web: {
    accessibilityRole: "list"
  }
}));
function isTextProps2(props) {
  return typeof props.children === "string";
}
var LI = (0, import_react53.forwardRef)((props, ref) => {
  if (isTextProps2(props)) {
    const accessibilityRole2 = Platform_default.select({
      web: "listitem",
      default: props.accessibilityRole
    });
    return import_react53.default.createElement(Text_default3, Object.assign({}, props, {accessibilityRole: accessibilityRole2, ref}));
  }
  const accessibilityRole = Platform_default.select({
    web: "listitem",
    default: props.accessibilityRole
  });
  return import_react53.default.createElement(View_default2, Object.assign({}, props, {accessibilityRole, ref}));
});

// src/screens/mdxComponent.md
var import_react54 = __toModule(require_react());
var layoutProps = {};
var MDXLayout = "wrapper";
function MDXContent({
  components: components2,
  ...props
}) {
  return /* @__PURE__ */ createElement125(MDXLayout, {
    ...layoutProps,
    ...props,
    components: components2,
    mdxType: "MDXLayout"
  }, /* @__PURE__ */ createElement125("h1", null, `Example MDX react-native-web`), /* @__PURE__ */ createElement125("p", null, `This page uses @expo/html-elements and @mdx-js/react with the plugin esbuild-mdx`), /* @__PURE__ */ createElement125("table", null, /* @__PURE__ */ createElement125("thead", {
    parentName: "table"
  }, /* @__PURE__ */ createElement125("tr", {
    parentName: "thead"
  }, /* @__PURE__ */ createElement125("th", {
    parentName: "tr",
    ...{
      align: null
    }
  }, `Tag`), /* @__PURE__ */ createElement125("th", {
    parentName: "tr",
    ...{
      align: null
    }
  }, `Name`), /* @__PURE__ */ createElement125("th", {
    parentName: "tr",
    ...{
      align: null
    }
  }, `Syntax`), /* @__PURE__ */ createElement125("th", {
    parentName: "tr",
    ...{
      align: null
    }
  }))), /* @__PURE__ */ createElement125("tbody", {
    parentName: "table"
  }, /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `p`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#paragraph"
    }
  }, `Paragraph`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<P />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `h1`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#heading"
    }
  }, `Heading 1`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `#`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<H1 />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `h2`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#heading"
    }
  }, `Heading 2`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `##`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<H2 />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `h3`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#heading"
    }
  }, `Heading 3`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `###`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<H3 />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `h4`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#heading"
    }
  }, `Heading 4`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `####`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<H4 />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `h5`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#heading"
    }
  }, `Heading 5`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `#####`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<H5 />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `h6`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#heading"
    }
  }, `Heading 6`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `######`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<H6 />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `blockquote`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#blockquote"
    }
  }, `Blockquote`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `>`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<BlockQuote />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `ul`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#list"
    }
  }, `List`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `-`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Ul />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `ol`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#list"
    }
  }, `Ordered list`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `1.`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  })), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `li`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#listitem"
    }
  }, `List item`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Li />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `table`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#table"
    }
  }, `Table`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Table />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `thead`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#table"
    }
  }, `Table head`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<THead />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `tbody`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#table"
    }
  }, `Table body`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<TBody />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `tr`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#tablerow"
    }
  }, `Table row`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Tr />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `td`), `/`, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `th`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#tablecell"
    }
  }, `Table cell`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Td/Th />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `code`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#code"
    }
  }, `Code`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `\`\`\`code\`\`\``)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Code />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `inlineCode`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#inlinecode"
    }
  }, `InlineCode`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `\`inlineCode\``)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Code* />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `pre`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#code"
    }
  }, `Code`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `\`\`\`code\`\`\``)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Pre />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `em`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#emphasis"
    }
  }, `Emphasis`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `_emphasis_`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Em />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `strong`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#strong"
    }
  }, `Strong`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `**strong**`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Strong />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `del`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#delete"
    }
  }, `Delete`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `~~strikethrough~~`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Del />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `hr`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#thematicbreak"
    }
  }, `Thematic break`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `---`), ` or `, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `***`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Hr />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `a`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#link"
    }
  }, `Link`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<https://mdxjs.com>`), ` or `, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `[MDX](https://mdxjs.com)`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<A />`))), /* @__PURE__ */ createElement125("tr", {
    parentName: "tbody"
  }, /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `img`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("a", {
    parentName: "td",
    ...{
      href: "https://github.com/syntax-tree/mdast#image"
    }
  }, `Image`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `![alt](https://mdx-logo.now.sh)`)), /* @__PURE__ */ createElement125("td", {
    parentName: "tr",
    ...{
      align: null
    }
  }, /* @__PURE__ */ createElement125("inlineCode", {
    parentName: "td"
  }, `<Image />`))))), /* @__PURE__ */ createElement125("pre", null, /* @__PURE__ */ createElement125("code", {
    parentName: "pre",
    ...{
      className: "language-import",
      metastring: "{P, H1, H2, H3, H4, H5, H6, BlockQuote, Ul, Li, Table, THead, TBody, Tr, Td, Th, Code, Pre, Hr, A} from '@expo/html-elements'",
      "{P,": true,
      "H1,": true,
      "H2,": true,
      "H3,": true,
      "H4,": true,
      "H5,": true,
      "H6,": true,
      "BlockQuote,": true,
      "Ul,": true,
      "Li,": true,
      "Table,": true,
      "THead,": true,
      "TBody,": true,
      "Tr,": true,
      "Td,": true,
      "Th,": true,
      "Code,": true,
      "Pre,": true,
      "Hr,": true,
      "A}": true,
      from: true,
      "'@expo/html-elements'": true
    }
  }, `import {Image} from 'react-native'
const Ol = ({ children }) => {return <View style={[styles.list, styles.listOrdered]}>{children}</View>;} 
const components = {p: P, h1: H1, h2: H2, h3: H3, h4: H4, h5: H5, h6: H6, blockquote: BlockQuote, ul: Ul, li: Li, table: Table, thaed: THead, tbody: TBody, tr: Tr, td: Td, th: Th, code: Code, inlinecode: Code, pre: Pre, hr: Hr, a: A, image: Image}
`)));
}
MDXContent.isMDXComponent = true;

// src/screens/MDXProvider.tsx
var components = {
  p: P,
  h1: H1,
  h2: H2,
  h3: H3,
  h4: H4,
  h5: H5,
  h6: H6,
  blockquote: BlockQuote,
  ul: UL,
  li: LI,
  table: Table,
  thaed: THead,
  tbody: TBody,
  tr: TR,
  td: TD,
  th: TH,
  code: Code,
  inlinecode: Code,
  pre: Pre,
  hr: HR,
  a: A2,
  image: Image
};
function MDXComp() {
  return /* @__PURE__ */ import_react56.default.createElement(MDXProvider, {
    components
  }, /* @__PURE__ */ import_react56.default.createElement("div", null, /* @__PURE__ */ import_react56.default.createElement("h1", null, "Hello, world rendered by ", /* @__PURE__ */ import_react56.default.createElement("code", null, "React"), "!"), /* @__PURE__ */ import_react56.default.createElement(MDXContent, null)));
}

// src/navigators/Drawer.tsx
var import_react64 = __toModule(require_react());

// node_modules/@react-navigation/drawer/lib/module/navigators/createDrawerNavigator.js
var React238 = __toModule(require_react());

// node_modules/@react-navigation/drawer/lib/module/views/DrawerView.js
var React237 = __toModule(require_react());
var import_react_native_screens2 = require_module();

// node_modules/@react-navigation/drawer/lib/module/views/GestureHandler.js
var React219 = __toModule(require_react());
var Dummy2 = ({
  children
}) => /* @__PURE__ */ React219.createElement(React219.Fragment, null, children);
var PanGestureHandler2 = Dummy2;
var TapGestureHandler = Dummy2;
var GestureHandlerRootView2 = View_default;
var GestureState2 = {
  UNDETERMINED: 0,
  FAILED: 1,
  BEGAN: 2,
  CANCELLED: 3,
  ACTIVE: 4,
  END: 5
};

// node_modules/@react-navigation/drawer/lib/module/views/SafeAreaProviderCompat.js
var React220 = __toModule(require_react());
var initialSafeAreaInsets2 = {
  top: getStatusBarHeight(true),
  bottom: getBottomSpace(),
  right: 0,
  left: 0,
  ...initialWindowSafeAreaInsets
};
function SafeAreaProviderCompat2({
  children
}) {
  return /* @__PURE__ */ React220.createElement(SafeAreaConsumer, null, (insets) => {
    if (insets) {
      return children;
    }
    return /* @__PURE__ */ React220.createElement(SafeAreaProvider, {
      initialSafeAreaInsets: initialSafeAreaInsets2
    }, children);
  });
}

// node_modules/@react-navigation/drawer/lib/module/views/ResourceSavingScene.js
var React221 = __toModule(require_react());
var import_react_native_screens = require_module();
function _extends90() {
  _extends90 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends90.apply(this, arguments);
}
var FAR_FAR_AWAY2 = 3e4;
function ResourceSavingScene({
  isVisible,
  children,
  style,
  ...rest
}) {
  if (import_react_native_screens.screensEnabled !== null && import_react_native_screens.screensEnabled !== void 0 && (0, import_react_native_screens.screensEnabled)() && Platform_default.OS !== "web") {
    if (import_react_native_screens.shouldUseActivityState) {
      return /* @__PURE__ */ React221.createElement(import_react_native_screens.Screen, _extends90({
        activityState: isVisible ? 2 : 0,
        style
      }, rest), children);
    } else {
      return /* @__PURE__ */ React221.createElement(import_react_native_screens.Screen, _extends90({
        active: isVisible ? 1 : 0,
        style
      }, rest), children);
    }
  }
  if (Platform_default.OS === "web") {
    return /* @__PURE__ */ React221.createElement(View_default, _extends90({
      hidden: !isVisible,
      style: [{
        display: isVisible ? "flex" : "none"
      }, styles111.container, style],
      pointerEvents: isVisible ? "auto" : "none"
    }, rest), children);
  }
  return /* @__PURE__ */ React221.createElement(View_default, {
    style: [styles111.container, style],
    pointerEvents: isVisible ? "auto" : "none"
  }, /* @__PURE__ */ React221.createElement(View_default, {
    collapsable: false,
    removeClippedSubviews: Platform_default.OS === "ios" ? !isVisible : true,
    pointerEvents: isVisible ? "auto" : "none",
    style: isVisible ? styles111.attached : styles111.detached
  }, children));
}
var styles111 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  attached: {
    flex: 1
  },
  detached: {
    flex: 1,
    top: FAR_FAR_AWAY2
  }
});

// node_modules/@react-navigation/drawer/lib/module/views/Header.js
var React223 = __toModule(require_react());

// node_modules/@react-navigation/drawer/lib/module/views/TouchableItem.js
var React222 = __toModule(require_react());
function _extends91() {
  _extends91 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends91.apply(this, arguments);
}
var ANDROID_VERSION_LOLLIPOP2 = 21;
function TouchableItem2({
  borderless = false,
  pressColor = "rgba(0, 0, 0, .32)",
  style,
  children,
  ...rest
}) {
  if (Platform_default.OS === "android" && Platform_default.Version >= ANDROID_VERSION_LOLLIPOP2) {
    return /* @__PURE__ */ React222.createElement(TouchableNativeFeedback_default, _extends91({}, rest, {
      useForeground: TouchableNativeFeedback_default.canUseNativeForeground(),
      background: TouchableNativeFeedback_default.Ripple(pressColor, borderless)
    }), /* @__PURE__ */ React222.createElement(View_default, {
      style
    }, React222.Children.only(children)));
  } else {
    return /* @__PURE__ */ React222.createElement(TouchableOpacity_default, _extends91({
      style
    }, rest), children);
  }
}

// node_modules/@react-navigation/drawer/lib/module/views/Header.js
var getDefaultHeaderHeight2 = (layout, statusBarHeight2) => {
  const isLandscape = layout.width > layout.height;
  let headerHeight;
  if (Platform_default.OS === "ios") {
    if (isLandscape && !Platform_default.isPad) {
      headerHeight = 32;
    } else {
      headerHeight = 44;
    }
  } else if (Platform_default.OS === "android") {
    headerHeight = 56;
  } else {
    headerHeight = 64;
  }
  return headerHeight + statusBarHeight2;
};
function HeaderSegment2({
  scene,
  layout
}) {
  const insets = useSafeAreaInsets();
  const {
    colors
  } = useTheme2();
  const {
    title,
    headerTitle,
    headerTitleAlign = Platform_default.select({
      ios: "center",
      default: "left"
    }),
    headerLeft,
    headerLeftAccessibilityLabel,
    headerRight,
    headerTitleAllowFontScaling,
    headerTitleStyle,
    headerTintColor,
    headerPressColorAndroid,
    headerStyle,
    headerStatusBarHeight = insets.top
  } = scene.descriptor.options;
  const currentTitle = typeof headerTitle !== "function" && headerTitle !== void 0 ? headerTitle : title !== void 0 ? title : scene.route.name;
  const defaultHeight = getDefaultHeaderHeight2(layout, headerStatusBarHeight);
  const leftButton = headerLeft ? headerLeft({
    tintColor: headerTintColor
  }) : /* @__PURE__ */ React223.createElement(TouchableItem2, {
    accessible: true,
    accessibilityRole: "button",
    accessibilityComponentType: "button",
    accessibilityLabel: headerLeftAccessibilityLabel,
    accessibilityTraits: "button",
    delayPressIn: 0,
    onPress: () => scene.descriptor.navigation.dispatch(DrawerActions.toggleDrawer()),
    style: styles112.touchable,
    pressColor: headerPressColorAndroid,
    hitSlop: Platform_default.select({
      ios: void 0,
      default: {
        top: 16,
        right: 16,
        bottom: 16,
        left: 16
      }
    }),
    borderless: true
  }, /* @__PURE__ */ React223.createElement(Image_default, {
    style: [styles112.icon, headerTintColor ? {
      tintColor: headerTintColor
    } : null],
    source: require_toggle_drawer_icon(),
    fadeDuration: 0
  }));
  const rightButton = headerRight ? headerRight({
    tintColor: headerTintColor
  }) : null;
  return /* @__PURE__ */ React223.createElement(View_default, {
    pointerEvents: "box-none",
    style: [{
      height: defaultHeight,
      backgroundColor: colors.card,
      borderBottomColor: colors.border,
      shadowColor: colors.border
    }, styles112.container, headerStyle]
  }, /* @__PURE__ */ React223.createElement(View_default, {
    pointerEvents: "none",
    style: {
      height: headerStatusBarHeight
    }
  }), /* @__PURE__ */ React223.createElement(View_default, {
    pointerEvents: "box-none",
    style: styles112.content
  }, leftButton ? /* @__PURE__ */ React223.createElement(View_default, {
    pointerEvents: "box-none",
    style: [styles112.left, {
      left: insets.left
    }]
  }, leftButton) : null, /* @__PURE__ */ React223.createElement(View_default, {
    pointerEvents: "box-none",
    style: [headerTitleAlign === "left" ? {
      position: "absolute",
      left: (leftButton ? 72 : 16) + insets.left,
      right: (rightButton ? 72 : 16) + insets.right
    } : {
      marginHorizontal: (leftButton ? 32 : 16) + Math.max(insets.left, insets.right)
    }]
  }, typeof headerTitle === "function" ? headerTitle({
    children: currentTitle,
    allowFontScaling: headerTitleAllowFontScaling,
    tintColor: headerTintColor,
    style: headerTitleStyle
  }) : /* @__PURE__ */ React223.createElement(Text_default, {
    accessibilityRole: "header",
    "aria-level": "1",
    numberOfLines: 1,
    allowFontScaling: headerTitleAllowFontScaling,
    style: [styles112.title, {
      color: headerTintColor !== null && headerTintColor !== void 0 ? headerTintColor : colors.text
    }, styles112.title, headerTitleStyle]
  }, currentTitle)), rightButton ? /* @__PURE__ */ React223.createElement(View_default, {
    pointerEvents: "box-none",
    style: [styles112.right, {
      right: insets.right
    }]
  }, rightButton) : null));
}
var styles112 = StyleSheet_default2.create({
  container: {
    ...Platform_default.select({
      android: {
        elevation: 4
      },
      ios: {
        shadowOpacity: 0.85,
        shadowRadius: 0,
        shadowOffset: {
          width: 0,
          height: StyleSheet_default2.hairlineWidth
        }
      },
      default: {
        borderBottomWidth: StyleSheet_default2.hairlineWidth
      }
    }),
    zIndex: 1
  },
  content: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center"
  },
  title: Platform_default.select({
    ios: {
      fontSize: 17,
      fontWeight: "600"
    },
    android: {
      fontSize: 20,
      fontFamily: "sans-serif-medium",
      fontWeight: "normal"
    },
    default: {
      fontSize: 18,
      fontWeight: "500"
    }
  }),
  icon: {
    height: 24,
    width: 24,
    margin: 3,
    resizeMode: "contain"
  },
  touchable: {
    marginHorizontal: 11
  },
  left: {
    position: "absolute",
    left: 0,
    top: 0,
    bottom: 0,
    justifyContent: "center",
    alignItems: "flex-start"
  },
  right: {
    position: "absolute",
    right: 0,
    top: 0,
    bottom: 0,
    justifyContent: "center",
    alignItems: "flex-end"
  }
});

// node_modules/@react-navigation/drawer/lib/module/views/DrawerContent.js
var React228 = __toModule(require_react());

// node_modules/@react-navigation/drawer/lib/module/views/DrawerItemList.js
var React225 = __toModule(require_react());

// node_modules/@react-navigation/drawer/lib/module/views/DrawerItem.js
var React224 = __toModule(require_react());
var import_color40 = __toModule(require_color());
function _extends92() {
  _extends92 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends92.apply(this, arguments);
}
var Touchable2 = ({
  children,
  style,
  onPress,
  to,
  accessibilityRole,
  delayPressIn,
  ...rest
}) => {
  if (Platform_default.OS === "web" && to) {
    return /* @__PURE__ */ React224.createElement(Link, _extends92({}, rest, {
      to,
      style: [styles113.button, style],
      onPress: (e) => {
        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {
          e.preventDefault();
          onPress === null || onPress === void 0 ? void 0 : onPress(e);
        }
      }
    }), children);
  } else {
    return /* @__PURE__ */ React224.createElement(TouchableItem2, _extends92({}, rest, {
      accessibilityRole,
      delayPressIn,
      onPress
    }), /* @__PURE__ */ React224.createElement(View_default, {
      style
    }, children));
  }
};
function DrawerItem2(props) {
  const {
    colors
  } = useTheme2();
  const {
    icon,
    label: label2,
    labelStyle,
    to,
    focused = false,
    activeTintColor = colors.primary,
    inactiveTintColor = (0, import_color40.default)(colors.text).alpha(0.68).rgb().string(),
    activeBackgroundColor = (0, import_color40.default)(activeTintColor).alpha(0.12).rgb().string(),
    inactiveBackgroundColor = "transparent",
    style,
    onPress,
    pressColor,
    pressOpacity,
    ...rest
  } = props;
  const {
    borderRadius = 4
  } = StyleSheet_default2.flatten(style || {});
  const color39 = focused ? activeTintColor : inactiveTintColor;
  const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
  const iconNode = icon ? icon({
    size: 24,
    focused,
    color: color39
  }) : null;
  return /* @__PURE__ */ React224.createElement(View_default, _extends92({
    collapsable: false
  }, rest, {
    style: [styles113.container, {
      borderRadius,
      backgroundColor
    }, style]
  }), /* @__PURE__ */ React224.createElement(Touchable2, {
    delayPressIn: 0,
    onPress,
    style: [styles113.wrapper, {
      borderRadius
    }],
    accessibilityTraits: focused ? ["button", "selected"] : "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      selected: focused
    },
    accessibilityStates: focused ? ["selected"] : [],
    pressColor,
    pressOpacity,
    to
  }, /* @__PURE__ */ React224.createElement(React224.Fragment, null, iconNode, /* @__PURE__ */ React224.createElement(View_default, {
    style: [styles113.label, {
      marginLeft: iconNode ? 32 : 0,
      marginVertical: 5
    }]
  }, typeof label2 === "string" ? /* @__PURE__ */ React224.createElement(Text_default, {
    numberOfLines: 1,
    style: [{
      color: color39,
      fontWeight: "500"
    }, labelStyle]
  }, label2) : label2({
    color: color39,
    focused
  })))));
}
var styles113 = StyleSheet_default2.create({
  container: {
    marginHorizontal: 10,
    marginVertical: 4,
    overflow: "hidden"
  },
  wrapper: {
    flexDirection: "row",
    alignItems: "center",
    padding: 8
  },
  label: {
    marginRight: 32,
    flex: 1
  },
  button: {
    display: "flex"
  }
});

// node_modules/@react-navigation/drawer/lib/module/views/DrawerItemList.js
function DrawerItemList({
  state,
  navigation: navigation2,
  descriptors,
  activeTintColor,
  inactiveTintColor,
  activeBackgroundColor,
  inactiveBackgroundColor,
  itemStyle,
  labelStyle
}) {
  const buildLink = useLinkBuilder();
  return state.routes.map((route, i) => {
    const focused = i === state.index;
    const {
      title,
      drawerLabel,
      drawerIcon
    } = descriptors[route.key].options;
    return /* @__PURE__ */ React225.createElement(DrawerItem2, {
      key: route.key,
      label: drawerLabel !== void 0 ? drawerLabel : title !== void 0 ? title : route.name,
      icon: drawerIcon,
      focused,
      activeTintColor,
      inactiveTintColor,
      activeBackgroundColor,
      inactiveBackgroundColor,
      labelStyle,
      style: itemStyle,
      to: buildLink(route.name, route.params),
      onPress: () => {
        navigation2.dispatch({
          ...focused ? DrawerActions.closeDrawer() : CommonActions_exports.navigate(route.name),
          target: state.key
        });
      }
    });
  });
}

// node_modules/@react-navigation/drawer/lib/module/views/DrawerContentScrollView.js
var React227 = __toModule(require_react());

// node_modules/@react-navigation/drawer/lib/module/utils/DrawerPositionContext.js
var React226 = __toModule(require_react());
var DrawerPositionContext_default = /* @__PURE__ */ React226.createContext(void 0);

// node_modules/@react-navigation/drawer/lib/module/views/DrawerContentScrollView.js
function _extends93() {
  _extends93 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends93.apply(this, arguments);
}
function DrawerContentScrollView({
  contentContainerStyle,
  style,
  children,
  ...rest
}) {
  const drawerPosition = React227.useContext(DrawerPositionContext_default);
  const insets = useSafeArea();
  return /* @__PURE__ */ React227.createElement(ScrollView_default, _extends93({}, rest, {
    contentContainerStyle: [{
      paddingTop: insets.top + 4,
      paddingLeft: drawerPosition === "left" ? insets.left : 0,
      paddingRight: drawerPosition === "right" ? insets.right : 0
    }, contentContainerStyle],
    style: [styles114.container, style]
  }), children);
}
var styles114 = StyleSheet_default2.create({
  container: {
    flex: 1
  }
});

// node_modules/@react-navigation/drawer/lib/module/views/DrawerContent.js
function DrawerContent(props) {
  return /* @__PURE__ */ React228.createElement(DrawerContentScrollView, props, /* @__PURE__ */ React228.createElement(DrawerItemList, props));
}

// node_modules/@react-navigation/drawer/lib/module/views/Drawer.js
var React234 = __toModule(require_react());

// node_modules/react-native-reanimated/lib/module/base.js
var base_exports = {};
__export(base_exports, {
  abs: () => abs,
  acos: () => acos,
  adapt: () => adapt,
  add: () => add6,
  always: () => createAnimatedAlways,
  and: () => and,
  asin: () => asin,
  atan: () => atan,
  block: () => createAnimatedBlock,
  call: () => createAnimatedCall,
  ceil: () => ceil,
  clockRunning: () => createAnimatedClockTest,
  concat: () => createAnimatedConcat,
  cond: () => createAnimatedCond,
  cos: () => cos,
  debug: () => createAnimatedDebug,
  defined: () => defined,
  divide: () => divide3,
  eq: () => eq,
  event: () => createAnimatedEvent,
  exp: () => exp,
  floor: () => floor,
  greaterOrEq: () => greaterOrEq,
  greaterThan: () => greaterThan,
  lessOrEq: () => lessOrEq,
  lessThan: () => lessThan,
  log: () => log,
  max: () => max,
  min: () => min,
  modulo: () => modulo3,
  multiply: () => multiply5,
  neq: () => neq,
  not: () => not,
  or: () => or,
  pow: () => pow,
  proc: () => createAnimatedFunction,
  round: () => round,
  set: () => createAnimatedSet,
  sin: () => sin,
  sqrt: () => sqrt,
  startClock: () => createAnimatedStartClock,
  stopClock: () => createAnimatedStopClock,
  sub: () => sub,
  tan: () => tan
});

// node_modules/react-native-reanimated/lib/module/core/AnimatedCond.js
var import_invariant28 = __toModule(require_invariant2());

// node_modules/react-native-reanimated/lib/module/core/AnimatedBlock.js
var import_invariant27 = __toModule(require_invariant2());

// node_modules/react-native-reanimated/lib/module/val.js
function val(v) {
  return v && v.__getValue ? v.__getValue() : v || 0;
}

// node_modules/react-native-reanimated/lib/module/ReanimatedModuleCompat.js
var ReanimatedModuleCompat_default = {
  async disconnectNodeFromView() {
  },
  async attachEvent(viewTag, eventName, nodeID) {
  },
  async detachEvent(viewTag, eventName, nodeID) {
  },
  async createNode(nodeID, config) {
  },
  async dropNode(nodeID) {
  },
  async configureProps() {
  },
  async disconnectNodes() {
  },
  async animateNextTransition() {
    console.warn("Reanimated: animateNextTransition is unimplemented on current platform");
  }
};

// node_modules/react-native-reanimated/lib/module/ReanimatedModule.js
var ReanimatedModule_default = ReanimatedModuleCompat_default;

// node_modules/react-native-reanimated/lib/module/core/AnimatedNode.js
function ownKeys23(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread23(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys23(Object(source), true).forEach(function(key3) {
        _defineProperty37(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys23(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty37(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var UPDATED_NODES = [];
var loopID = 1;
var propUpdatesEnqueued = null;
var nodeCount = 0;
var callID = "";
function getCallID() {
  return callID;
}
function setCallID(nextCallID) {
  callID = nextCallID;
}
function sanitizeConfig(config) {
  if (Platform_default.OS === "web" || Platform_default.OS === "windows" || Platform_default.OS === "macos" || ["undefined", "string", "function", "boolean", "number"].includes(typeof config)) {
    return config;
  } else if (Array.isArray(config)) {
    return config.map(sanitizeConfig);
  } else if (config instanceof AnimatedNode2) {
    return config.__nodeID;
  } else if (typeof config === "object") {
    const output = {};
    for (const property in config) {
      if (property in config) {
        output[property] = sanitizeConfig(config[property]);
      }
    }
    return output;
  }
  return config;
}
function runPropUpdates() {
  const visitedNodes = new Set();
  const findAndUpdateNodes = (node) => {
    if (!node) {
      console.warn("findAndUpdateNodes was passed a nullish node");
      return;
    }
    if (visitedNodes.has(node)) {
      return;
    } else {
      visitedNodes.add(node);
    }
    if (typeof node.update === "function") {
      node.update();
    } else {
      const nodes = node.__getChildren();
      if (nodes) {
        for (let i = 0, l = nodes.length; i < l; i++) {
          findAndUpdateNodes(nodes[i]);
        }
      }
    }
  };
  for (let i = 0; i < UPDATED_NODES.length; i++) {
    const node = UPDATED_NODES[i];
    findAndUpdateNodes(node);
  }
  UPDATED_NODES.length = 0;
  propUpdatesEnqueued = null;
  loopID += 1;
}
var AnimatedNode2 = class {
  constructor(nodeConfig, inputNodes) {
    _defineProperty37(this, "__nodeID", void 0);
    _defineProperty37(this, "__lastLoopID", {
      "": -1
    });
    _defineProperty37(this, "__memoizedValue", {
      "": null
    });
    _defineProperty37(this, "__children", []);
    this.__nodeID = ++nodeCount;
    this.__nodeConfig = sanitizeConfig(nodeConfig);
    this.__initialized = false;
    this.__inputNodes = inputNodes && inputNodes.filter((node) => node instanceof AnimatedNode2);
  }
  toString() {
    return "AnimatedNode, id: ".concat(this.__nodeID);
  }
  __attach() {
    this.__nativeInitialize();
    const nodes = this.__inputNodes;
    if (nodes) {
      for (let i = 0, l = nodes.length; i < l; i++) {
        nodes[i].__addChild(this);
      }
    }
  }
  __detach() {
    const nodes = this.__inputNodes;
    if (nodes) {
      for (let i = 0, l = nodes.length; i < l; i++) {
        nodes[i].__removeChild(this);
      }
    }
    this.__nativeTearDown();
  }
  __getValue() {
    if (!(callID in this.__lastLoopID) || this.__lastLoopID[callID] < loopID) {
      this.__lastLoopID[callID] = loopID;
      const result = this.__onEvaluate();
      this.__memoizedValue[callID] = result;
      return result;
    }
    return this.__memoizedValue[callID];
  }
  __forceUpdateCache(newValue) {
    this.__memoizedValue[callID] = newValue;
    this.__markUpdated();
  }
  __dangerouslyRescheduleEvaluate() {
    this.__lastLoopID[callID] = -1;
    this.__markUpdated();
  }
  __markUpdated() {
    UPDATED_NODES.push(this);
    if (!propUpdatesEnqueued) {
      propUpdatesEnqueued = setImmediate(runPropUpdates);
    }
  }
  __nativeInitialize() {
    if (!this.__initialized) {
      ReanimatedModule_default.createNode(this.__nodeID, _objectSpread23({}, this.__nodeConfig));
      this.__initialized = true;
    }
  }
  __nativeTearDown() {
    if (this.__initialized) {
      ReanimatedModule_default.dropNode(this.__nodeID);
      this.__initialized = false;
    }
  }
  isNativelyInitialized() {
    return this.__initialized;
  }
  __onEvaluate() {
    throw new Error("Missing implementation of onEvaluate");
  }
  __getProps() {
    return this.__getValue();
  }
  __getChildren() {
    return this.__children;
  }
  __addChild(child2) {
    if (this.__children.length === 0) {
      this.__attach();
    }
    this.__children.push(child2);
    child2.__nativeInitialize();
    if (ReanimatedModule_default.connectNodes) {
      ReanimatedModule_default.connectNodes(this.__nodeID, child2.__nodeID);
    } else {
      child2.__dangerouslyRescheduleEvaluate();
    }
  }
  __removeChild(child2) {
    const index = this.__children.indexOf(child2);
    if (index === -1) {
      console.warn("Trying to remove a child that doesn't exist");
      return;
    }
    if (ReanimatedModule_default.disconnectNodes) {
      ReanimatedModule_default.disconnectNodes(this.__nodeID, child2.__nodeID);
    }
    this.__children.splice(index, 1);
    if (this.__children.length === 0) {
      this.__detach();
    }
  }
  _connectAnimatedView(nativeViewTag) {
    if (ReanimatedModule_default.connectNodeToView) {
      ReanimatedModule_default.connectNodeToView(this.__nodeID, nativeViewTag);
    } else {
      this.__dangerouslyRescheduleEvaluate();
    }
  }
  _disconnectAnimatedView(nativeViewTag) {
    ReanimatedModule_default.disconnectNodeFromView(this.__nodeID, nativeViewTag);
  }
};
var AnimatedNode_default2 = AnimatedNode2;

// node_modules/react-native-reanimated/lib/module/core/InternalAnimatedValue.js
var import_invariant26 = __toModule(require_invariant2());
function sanitizeValue(value) {
  return value === null || value === void 0 || typeof value === "string" ? value : Number(value);
}
var CONSTANT_VALUES = new Map();
function initializeConstantValues() {
  if (CONSTANT_VALUES.size !== 0) {
    return;
  }
  [0, -1, 1, -2, 2].forEach((v) => CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true)));
}
var InternalAnimatedValue = class extends AnimatedNode_default2 {
  static valueForConstant(number) {
    initializeConstantValues();
    return CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true);
  }
  constructor(value, constant = false) {
    (0, import_invariant26.default)(value !== null, "Animated.Value cannot be set to the null");
    super({
      type: "value",
      value: sanitizeValue(value)
    });
    this._startingValue = this._value = value;
    this._animation = null;
    this._constant = constant;
  }
  __detach() {
    if (!this._constant) {
      if (ReanimatedModule_default.getValue) {
        ReanimatedModule_default.getValue(this.__nodeID, (val2) => this.__nodeConfig.value = val2);
      } else {
        this.__nodeConfig.value = this.__getValue();
      }
    }
    this.__detachAnimation(this._animation);
    super.__detach();
  }
  __detachAnimation(animation2) {
    animation2 && animation2.__detach();
    if (this._animation === animation2) {
      this._animation = null;
    }
  }
  __attachAnimation(animation2) {
    this.__detachAnimation(this._animation);
    this._animation = animation2;
  }
  __onEvaluate() {
    if (this.__inputNodes && this.__inputNodes.length) {
      this.__inputNodes.forEach(val);
    }
    return this._value;
  }
  setValue(value) {
    this.__detachAnimation(this._animation);
    this._updateValue(value);
  }
  _updateValue(value) {
    this._value = value;
    this.__forceUpdateCache(value);
  }
};
var InternalAnimatedValue_default = InternalAnimatedValue;

// node_modules/react-native-reanimated/lib/module/core/AnimatedBlock.js
function _defineProperty38(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedBlock = class extends AnimatedNode_default2 {
  constructor(array) {
    (0, import_invariant27.default)(array.every((el) => el instanceof AnimatedNode_default2), "Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes");
    super({
      type: "block",
      block: array
    }, array);
    _defineProperty38(this, "_array", void 0);
    this._array = array;
  }
  toString() {
    return "AnimatedBlock, id: ".concat(this.__nodeID);
  }
  __onEvaluate() {
    let result;
    this._array.forEach((node) => {
      result = val(node);
    });
    return result;
  }
};
function createAnimatedBlock(items2) {
  return adapt(items2);
}
function nodify(v) {
  if (typeof v === "object" && (v === null || v === void 0 ? void 0 : v.__isProxy)) {
    if (!v.__val) {
      v.__val = new InternalAnimatedValue_default(0);
    }
    return v.__val;
  }
  return v instanceof AnimatedNode_default2 ? v : InternalAnimatedValue_default.valueForConstant(v);
}
function adapt(v) {
  return Array.isArray(v) ? new AnimatedBlock(v.map((node) => adapt(node))) : nodify(v);
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedCond.js
function _defineProperty39(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedCond = class extends AnimatedNode_default2 {
  constructor(condition, ifBlock, elseBlock) {
    (0, import_invariant28.default)(condition instanceof AnimatedNode_default2, "Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ".concat(condition));
    (0, import_invariant28.default)(ifBlock instanceof AnimatedNode_default2, "Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ".concat(ifBlock));
    (0, import_invariant28.default)(elseBlock instanceof AnimatedNode_default2 || elseBlock === void 0, "Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ".concat(elseBlock));
    super({
      type: "cond",
      cond: condition,
      ifBlock,
      elseBlock
    }, [condition, ifBlock, elseBlock]);
    _defineProperty39(this, "_condition", void 0);
    _defineProperty39(this, "_ifBlock", void 0);
    _defineProperty39(this, "_elseBlock", void 0);
    this._condition = condition;
    this._ifBlock = ifBlock;
    this._elseBlock = elseBlock;
  }
  toString() {
    return "AnimatedCond, id: ".concat(this.__nodeID);
  }
  __onEvaluate() {
    if (val(this._condition)) {
      return val(this._ifBlock);
    } else {
      return this._elseBlock !== void 0 ? val(this._elseBlock) : void 0;
    }
  }
};
function createAnimatedCond(cond3, ifBlock, elseBlock) {
  return new AnimatedCond(adapt(cond3), adapt(ifBlock), elseBlock === void 0 ? void 0 : adapt(elseBlock));
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedSet.js
var import_invariant29 = __toModule(require_invariant2());
function _defineProperty40(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedSet = class extends AnimatedNode_default2 {
  constructor(what, value) {
    (0, import_invariant29.default)(what instanceof AnimatedNode_default2, "Reanimated: Animated.set first argument should be of type AnimatedNode but got ".concat(what));
    (0, import_invariant29.default)(value instanceof AnimatedNode_default2, "Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ".concat(value));
    super({
      type: "set",
      what,
      value
    }, [value]);
    _defineProperty40(this, "_what", void 0);
    _defineProperty40(this, "_value", void 0);
    (0, import_invariant29.default)(!what._constant, "Value to be set cannot be constant");
    this._what = what;
    this._value = value;
  }
  toString() {
    return "AnimatedSet, id: ".concat(this.__nodeID);
  }
  __onEvaluate() {
    const newValue = val(this._value);
    this._what.setValue(newValue);
    return newValue;
  }
};
function createAnimatedSet(what, value) {
  return new AnimatedSet(what, adapt(value));
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedClock.js
function _defineProperty41(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedMainClock = class extends InternalAnimatedValue_default {
  constructor() {
    super({
      type: "MAIN_CLOCK"
    });
    _defineProperty41(this, "_frameCallback", void 0);
    _defineProperty41(this, "_runFrame", () => {
      this._updateValue(0);
      if (this.__children.length > 0) {
        this._frameCallback = requestAnimationFrame(this._runFrame);
      }
    });
  }
  __onEvaluate() {
    return +new Date();
  }
  __attach() {
    super.__attach();
    if (!this._frameCallback) {
      this._frameCallback = requestAnimationFrame(this._runFrame);
    }
  }
  __detach() {
    if (this._frameCallback) {
      cancelAnimationFrame(this._frameCallback);
      this._frameCallback = null;
    }
    super.__detach();
  }
};
var mainClock = new AnimatedMainClock();
var AnimatedClock = class extends AnimatedNode_default2 {
  constructor() {
    super({
      type: "clock"
    });
    _defineProperty41(this, "_started", void 0);
    _defineProperty41(this, "_attached", void 0);
  }
  toString() {
    return "AnimatedClock, id: ".concat(this.__nodeID);
  }
  __onEvaluate() {
    return val(mainClock);
  }
  __attach() {
    super.__attach();
    if (this._started && !this._attached) {
      mainClock.__addChild(this);
    }
    this._attached = true;
  }
  __detach() {
    if (this._started && this._attached) {
      mainClock.__removeChild(this);
    }
    this._attached = false;
    super.__detach();
  }
  start() {
    if (!this._started && this._attached) {
      mainClock.__addChild(this);
    }
    this._started = true;
  }
  stop() {
    if (this._started && this._attached) {
      mainClock.__removeChild(this);
    }
    this._started = false;
  }
  isStarted() {
    return this._started;
  }
};
var AnimatedClock_default = AnimatedClock;

// node_modules/react-native-reanimated/lib/module/core/AnimatedParam.js
var import_invariant30 = __toModule(require_invariant2());
function _defineProperty42(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedParam = class extends AnimatedNode_default2 {
  constructor() {
    super({
      type: "param"
    }, []);
    _defineProperty42(this, "argsStack", []);
    _defineProperty42(this, "_prevCallID", void 0);
    this.__attach();
  }
  beginContext(ref, prevCallID) {
    this._prevCallID = prevCallID;
    this.argsStack.push(ref);
  }
  endContext() {
    this.argsStack.pop();
  }
  _getTopNode() {
    if (this.argsStack.length === 0)
      throw new Error("param: Invocation failed because argsStack is empty");
    const top = this.argsStack[this.argsStack.length - 1];
    return top;
  }
  setValue(value) {
    const top = this._getTopNode();
    if (top.setValue) {
      const callID2 = getCallID();
      setCallID(this._prevCallID);
      top.setValue(value);
      setCallID(callID2);
    } else {
      throw new Error("param: setValue(".concat(value, ") failed because the top element has no known method for updating it's current value."));
    }
  }
  __onEvaluate() {
    const callID2 = getCallID();
    setCallID(this._prevCallID);
    const top = this._getTopNode();
    const value = val(top);
    setCallID(callID2);
    return value;
  }
  start() {
    const node = this._getTopNode();
    (0, import_invariant30.default)(node instanceof AnimatedClock_default || node instanceof AnimatedParam, "param: top node should be of type AnimatedClock but got ".concat(node));
    node.start();
  }
  stop() {
    const node = this._getTopNode();
    (0, import_invariant30.default)(node instanceof AnimatedClock_default || node instanceof AnimatedParam, "param: top node should be of type AnimatedClock but got ".concat(node));
    node.stop();
  }
  isRunning() {
    const node = this._getTopNode();
    if (node instanceof AnimatedParam) {
      return node.isRunning();
    }
    (0, import_invariant30.default)(node instanceof AnimatedClock_default, "param: top node should be of type AnimatedClock but got ".concat(node));
    return node.isStarted();
  }
};
function createAnimatedParam() {
  return new AnimatedParam();
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedStartClock.js
var import_invariant31 = __toModule(require_invariant2());
function _defineProperty43(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedStartClock = class extends AnimatedNode_default2 {
  constructor(clockNode) {
    (0, import_invariant31.default)(clockNode instanceof AnimatedClock_default || clockNode instanceof AnimatedParam, "Reanimated: Animated.startClock argument should be of type AnimatedClock but got ".concat(clockNode));
    super({
      type: "clockStart",
      clock: clockNode
    });
    _defineProperty43(this, "_clockNode", void 0);
    this._clockNode = clockNode;
  }
  toString() {
    return "AnimatedStartClock, id: ".concat(this.__nodeID);
  }
  __onEvaluate() {
    this._clockNode.start();
    return 0;
  }
};
function createAnimatedStartClock(clock2) {
  return new AnimatedStartClock(clock2);
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedStopClock.js
var import_invariant32 = __toModule(require_invariant2());
function _defineProperty44(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedStopClock = class extends AnimatedNode_default2 {
  constructor(clockNode) {
    (0, import_invariant32.default)(clockNode instanceof AnimatedClock_default || clockNode instanceof AnimatedParam, "Reanimated: Animated.stopClock argument should be of type AnimatedClock but got ".concat(clockNode));
    super({
      type: "clockStop",
      clock: clockNode
    });
    _defineProperty44(this, "_clockNode", void 0);
    this._clockNode = clockNode;
  }
  toString() {
    return "AnimatedStopClock, id: ".concat(this.__nodeID);
  }
  __onEvaluate() {
    this._clockNode.stop();
    return 0;
  }
};
function createAnimatedStopClock(clock2) {
  return new AnimatedStopClock(clock2);
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedClockTest.js
function _defineProperty45(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedClockTest = class extends AnimatedNode_default2 {
  constructor(clockNode) {
    super({
      type: "clockTest",
      clock: clockNode
    });
    _defineProperty45(this, "_clockNode", void 0);
    this._clockNode = clockNode;
  }
  toString() {
    return "AnimatedClockTest, id: ".concat(this.__nodeID);
  }
  __onEvaluate() {
    return this._clockNode.isStarted() ? 1 : 0;
  }
};
function createAnimatedClockTest(clock2) {
  return new AnimatedClockTest(clock2);
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedDebug.js
var import_invariant34 = __toModule(require_invariant2());

// node_modules/react-native-reanimated/lib/module/core/AnimatedCall.js
var import_invariant33 = __toModule(require_invariant2());

// node_modules/react-native-reanimated/lib/module/ReanimatedEventEmitter.js
var ReanimatedEventEmitter_default = new NativeEventEmitter_default2(ReanimatedModule_default);

// node_modules/react-native-reanimated/lib/module/core/AnimatedCall.js
function _defineProperty46(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var NODE_MAPPING = new Map();
function listener(data2) {
  const node = NODE_MAPPING.get(data2.id);
  node && node._callback(data2.args);
}
var AnimatedCall = class extends AnimatedNode_default2 {
  constructor(args, jsFunction) {
    (0, import_invariant33.default)(args.every((el) => el instanceof AnimatedNode_default2), "Reanimated: Animated.call node args should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes");
    super({
      type: "call",
      input: args
    }, args);
    _defineProperty46(this, "_callback", void 0);
    _defineProperty46(this, "_args", void 0);
    this._callback = jsFunction;
    this._args = args;
  }
  toString() {
    return "AnimatedCall, id: ".concat(this.__nodeID);
  }
  __attach() {
    super.__attach();
    NODE_MAPPING.set(this.__nodeID, this);
    if (NODE_MAPPING.size === 1) {
      ReanimatedEventEmitter_default.addListener("onReanimatedCall", listener);
    }
  }
  __detach() {
    NODE_MAPPING.delete(this.__nodeID);
    if (NODE_MAPPING.size === 0) {
      ReanimatedEventEmitter_default.removeAllListeners("onReanimatedCall");
    }
    super.__detach();
  }
  __onEvaluate() {
    this._callback(this._args.map(val));
    return 0;
  }
};
function createAnimatedCall(args, func) {
  return new AnimatedCall(args, func);
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedDebug.js
function _defineProperty47(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedDebug = class extends AnimatedNode_default2 {
  constructor(message2, value) {
    (0, import_invariant34.default)(typeof message2 === "string", "Reanimated: Animated.debug node first argument should be of type string but got ".concat(message2));
    (0, import_invariant34.default)(value instanceof AnimatedNode_default2, "Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ".concat(value));
    super({
      type: "debug",
      message: message2,
      value
    }, [value]);
    _defineProperty47(this, "_message", void 0);
    _defineProperty47(this, "_value", void 0);
    this._message = message2;
    this._value = value;
  }
  toString() {
    return "AnimatedDebug, id: ".concat(this.__nodeID);
  }
  __onEvaluate() {
    const value = val(this._value);
    console.log(this._message, value);
    return value;
  }
};
function createAnimatedDebug(message2, value) {
  if (true) {
    const runningInRemoteDebugger = typeof atob !== "undefined";
    const runningInExpoShell = window.Expo && window.Expo.Constants.appOwnership !== "standalone";
    if (runningInRemoteDebugger || runningInExpoShell) {
      return createAnimatedBlock([createAnimatedCall([value], ([a]) => console.log("".concat(message2, " ").concat(a))), value]);
    } else {
      return new AnimatedDebug(message2, adapt(value));
    }
  }
  return value;
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedOperator.js
var import_invariant35 = __toModule(require_invariant2());
function _defineProperty48(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function reduce(fn) {
  return (input) => input.reduce((a, b) => fn(val(a), val(b)));
}
function reduceFrom(fn, initialValue) {
  return (input) => input.reduce((a, b) => fn(val(a), val(b)), initialValue);
}
function infix(fn) {
  return (input) => fn(val(input[0]), val(input[1]));
}
function single(fn) {
  return (input) => fn(val(input[0]));
}
var OPERATIONS = {
  add: reduce((a, b) => a + b),
  sub: reduce((a, b) => a - b),
  multiply: reduce((a, b) => a * b),
  divide: reduce((a, b) => a / b),
  pow: reduce((a, b) => Math.pow(a, b)),
  modulo: reduce((a, b) => (a % b + b) % b),
  sqrt: single((a) => Math.sqrt(a)),
  log: single((a) => Math.log(a)),
  sin: single((a) => Math.sin(a)),
  cos: single((a) => Math.cos(a)),
  tan: single((a) => Math.tan(a)),
  acos: single((a) => Math.acos(a)),
  asin: single((a) => Math.asin(a)),
  atan: single((a) => Math.atan(a)),
  exp: single((a) => Math.exp(a)),
  round: single((a) => Math.round(a)),
  abs: single((a) => Math.abs(a)),
  ceil: single((a) => Math.ceil(a)),
  floor: single((a) => Math.floor(a)),
  max: reduce((a, b) => Math.max(a, b)),
  min: reduce((a, b) => Math.min(a, b)),
  and: reduceFrom((a, b) => a && b, true),
  or: reduceFrom((a, b) => a || b, false),
  not: single((a) => !a),
  defined: single((a) => a !== null && a !== void 0 && !isNaN(a)),
  lessThan: infix((a, b) => a < b),
  eq: infix((a, b) => a == b),
  greaterThan: infix((a, b) => a > b),
  lessOrEq: infix((a, b) => a <= b),
  greaterOrEq: infix((a, b) => a >= b),
  neq: infix((a, b) => a != b)
};
var AnimatedOperator = class extends AnimatedNode_default2 {
  constructor(operator2, input) {
    (0, import_invariant35.default)(typeof operator2 === "string", "Reanimated: Animated.operator node first argument should be of type String, but got: ".concat(operator2));
    (0, import_invariant35.default)(input.every((el) => el instanceof AnimatedNode_default2 || typeof el === "string" || typeof el === "number"), "Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ".concat(input));
    super({
      type: "op",
      op: operator2,
      input
    }, input);
    _defineProperty48(this, "_input", void 0);
    _defineProperty48(this, "_op", void 0);
    _defineProperty48(this, "_operation", void 0);
    this._op = operator2;
    this._input = input;
  }
  toString() {
    return "AnimatedOperator, id: ".concat(this.__nodeID);
  }
  __onEvaluate() {
    if (!this._operation) {
      this._operation = OPERATIONS[this._op];
      (0, import_invariant35.default)(this._operation, "Illegal operator '%s'", this._op);
    }
    return this._operation(this._input);
  }
};
function createAnimatedOperator(name) {
  return (...args) => new AnimatedOperator(name, args.map(adapt));
}

// node_modules/react-native-reanimated/lib/module/operators.js
var operator = createAnimatedOperator;
var add6 = operator("add");
var sub = operator("sub");
var multiply5 = operator("multiply");
var divide3 = operator("divide");
var pow = operator("pow");
var modulo3 = operator("modulo");
var sqrt = operator("sqrt");
var log = operator("log");
var sin = operator("sin");
var cos = operator("cos");
var exp = operator("exp");
var round = operator("round");
var lessThan = operator("lessThan");
var eq = operator("eq");
var greaterThan = operator("greaterThan");
var lessOrEq = operator("lessOrEq");
var greaterOrEq = operator("greaterOrEq");
var neq = operator("neq");
var and = operator("and");
var or = operator("or");
var defined = operator("defined");
var not = operator("not");
var tan = operator("tan");
var acos = operator("acos");
var asin = operator("asin");
var atan = operator("atan");
var abs = operator("abs");
var ceil = operator("ceil");
var floor = operator("floor");
var max = operator("max");
var min = operator("min");

// node_modules/react-native-reanimated/lib/module/derived/interpolate.js
var import_invariant38 = __toModule(require_invariant2());

// node_modules/react-native-reanimated/lib/module/core/AnimatedCallFunc.js
var import_invariant36 = __toModule(require_invariant2());
function _defineProperty49(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedCallFunc = class extends AnimatedNode_default2 {
  constructor(what, args, params) {
    (0, import_invariant36.default)(what instanceof AnimatedNode_default2, "Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ".concat(what));
    (0, import_invariant36.default)(args.every((el) => el instanceof AnimatedNode_default2), "Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got ".concat(args));
    (0, import_invariant36.default)(params.every((el) => el instanceof AnimatedNode_default2), "Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got ".concat(params));
    super({
      type: "callfunc",
      what,
      args,
      params
    }, [...args]);
    _defineProperty49(this, "_previousCallID", void 0);
    _defineProperty49(this, "_what", void 0);
    _defineProperty49(this, "_args", void 0);
    _defineProperty49(this, "_params", void 0);
    this._what = what;
    this._args = args;
    this._params = params;
  }
  toString() {
    return "AnimatedCallFunc, id: ".concat(this.__nodeID);
  }
  beginContext() {
    this._previousCallID = getCallID();
    setCallID(getCallID() + "/" + this.__nodeID);
    this._params.forEach((param, index) => {
      param.beginContext(this._args[index], this._previousCallID);
    });
  }
  endContext() {
    this._params.forEach((param, index) => {
      param.endContext();
    });
    setCallID(this._previousCallID);
  }
  __onEvaluate() {
    this.beginContext();
    const value = val(this._what);
    this.endContext();
    return value;
  }
};
function createAnimatedCallFunc(proc, args, params) {
  return new AnimatedCallFunc(proc, args.map((p) => adapt(p)), params);
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedFunction.js
var import_invariant37 = __toModule(require_invariant2());
function _defineProperty50(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedFunction = class extends AnimatedNode_default2 {
  constructor(what, ...params) {
    (0, import_invariant37.default)(what instanceof AnimatedNode_default2, "Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ".concat(what));
    super({
      type: "func",
      what
    }, [what, ...params]);
    _defineProperty50(this, "_what", void 0);
    this._what = what;
    this.__attach();
  }
  __onEvaluate() {
    return val(this._what);
  }
  toString() {
    return "AnimatedFunction, id: ".concat(this.__nodeID);
  }
};
function createAnimatedFunction(cb) {
  const params = new Array(cb.length);
  for (let i = 0; i < params.length; i++) {
    params[i] = createAnimatedParam();
  }
  const what = cb(...params);
  const func = new AnimatedFunction(what, ...params);
  return (...args) => {
    if (args.length !== params.length) {
      throw new Error("Parameter mismatch when calling reanimated function. Expected " + params.length + " parameters, got " + args.length + ".");
    }
    return createAnimatedCallFunc(func, args, params);
  };
}

// node_modules/react-native-reanimated/lib/module/derived/interpolate.js
var interpolateInternalSingleProc = createAnimatedFunction(function(value, inS, inE, outS, outE) {
  const progress = divide3(sub(value, inS), sub(inE, inS));
  const resultForNonZeroRange = add6(outS, multiply5(progress, sub(outE, outS)));
  const result = createAnimatedCond(eq(inS, inE), createAnimatedCond(lessOrEq(value, inS), outS, outE), resultForNonZeroRange);
  return result;
});
function interpolateInternalSingle(value, inputRange, outputRange, offset) {
  const inS = inputRange[offset];
  const inE = inputRange[offset + 1];
  const outS = outputRange[offset];
  const outE = outputRange[offset + 1];
  return interpolateInternalSingleProc(value, inS, inE, outS, outE);
}
function interpolateInternal(value, inputRange, outputRange, offset = 0) {
  if (inputRange.length - offset === 2) {
    return interpolateInternalSingle(value, inputRange, outputRange, offset);
  }
  return createAnimatedCond(lessThan(value, inputRange[offset + 1]), interpolateInternalSingle(value, inputRange, outputRange, offset), interpolateInternal(value, inputRange, outputRange, offset + 1));
}
var Extrapolate = {
  EXTEND: "extend",
  CLAMP: "clamp",
  IDENTITY: "identity"
};
function checkNonDecreasing(name, arr) {
  for (let i = 1; i < arr.length; ++i) {
    if (arr[i] instanceof AnimatedNode_default2 || arr[i - 1] instanceof AnimatedNode_default2)
      continue;
    (0, import_invariant38.default)(arr[i] >= arr[i - 1], "%s must be monotonically non-decreasing. (%s)", name, arr);
  }
}
function checkMinElements(name, arr) {
  (0, import_invariant38.default)(arr.length >= 2, "%s must have at least 2 elements. (%s)", name, arr);
}
function checkValidNumbers(name, arr) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] instanceof AnimatedNode_default2 || typeof arr[i] !== "number")
      continue;
    (0, import_invariant38.default)(Number.isFinite(arr[i]), "%s cannot include %s. (%s)", name, arr[i], arr);
  }
}
function convertToRadians(outputRange) {
  for (const [i, value] of outputRange.entries()) {
    if (typeof value === "string" && value.endsWith("deg")) {
      outputRange[i] = parseFloat(value) * (Math.PI / 180);
    }
  }
}
function interpolate2(value, config) {
  const {
    inputRange,
    outputRange,
    extrapolate = Extrapolate.EXTEND,
    extrapolateLeft,
    extrapolateRight
  } = config;
  checkMinElements("inputRange", inputRange);
  checkValidNumbers("inputRange", inputRange);
  checkMinElements("outputRange", outputRange);
  checkValidNumbers("outputRange", outputRange);
  checkNonDecreasing("inputRange", inputRange);
  (0, import_invariant38.default)(inputRange.length === outputRange.length, "inputRange and outputRange must be the same length.");
  convertToRadians(outputRange);
  const left2 = extrapolateLeft || extrapolate;
  const right2 = extrapolateRight || extrapolate;
  let output = interpolateInternal(value, inputRange, outputRange);
  if (left2 === Extrapolate.EXTEND) {
  } else if (left2 === Extrapolate.CLAMP) {
    output = createAnimatedCond(lessThan(value, inputRange[0]), outputRange[0], output);
  } else if (left2 === Extrapolate.IDENTITY) {
    output = createAnimatedCond(lessThan(value, inputRange[0]), value, output);
  }
  if (right2 === Extrapolate.EXTEND) {
  } else if (right2 === Extrapolate.CLAMP) {
    output = createAnimatedCond(greaterThan(value, inputRange[inputRange.length - 1]), outputRange[outputRange.length - 1], output);
  } else if (right2 === Extrapolate.IDENTITY) {
    output = createAnimatedCond(greaterThan(value, inputRange[inputRange.length - 1]), value, output);
  }
  return output;
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedAlways.js
var import_invariant39 = __toModule(require_invariant2());
function _defineProperty51(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var AnimatedAlways = class extends AnimatedNode_default2 {
  constructor(what) {
    (0, import_invariant39.default)(what instanceof AnimatedNode_default2, "Reanimated: Animated.always node argument should be of type AnimatedNode but got ".concat(what));
    super({
      type: "always",
      what
    }, [what]);
    _defineProperty51(this, "_what", void 0);
    this._what = what;
  }
  toString() {
    return "AnimatedAlways, id: ".concat(this.__nodeID);
  }
  update() {
    this.__getValue();
  }
  __onEvaluate() {
    val(this._what);
    return 0;
  }
};
function createAnimatedAlways(item) {
  return new AnimatedAlways(item);
}

// node_modules/react-native-reanimated/lib/module/derived/evaluateOnce.js
function evaluateOnce(node, input = [], callback) {
  if (!Array.isArray(input)) {
    input = [input];
  }
  const done = new InternalAnimatedValue_default(0);
  const evalNode = createAnimatedCond(done, 0, createAnimatedCall([node, createAnimatedSet(done, 1)], () => {
    callback && callback();
    for (let i = 0; i < input.length; i++) {
      input[i].__removeChild(alwaysNode);
      alwaysNode.__detach();
    }
  }));
  const alwaysNode = createAnimatedAlways(evalNode);
  for (let i = 0; i < input.length; i++) {
    input[i].__addChild(alwaysNode);
    alwaysNode.__attach();
  }
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedValue.js
var AnimatedValue2 = class extends InternalAnimatedValue_default {
  setValue(value) {
    this.__detachAnimation(this._animation);
    if (Platform_default.OS === "web" || Platform_default.OS === "windows" || Platform_default.OS === "macos") {
      this._updateValue(val(value));
    } else {
      if (ReanimatedModule_default.setValue && typeof value === "number") {
        ReanimatedModule_default.setValue(this.__nodeID, value);
      } else {
        evaluateOnce(createAnimatedSet(this, value), this);
      }
    }
  }
  toString() {
    return "AnimatedValue, id: ".concat(this.__nodeID);
  }
  interpolate(config) {
    return interpolate2(this, config);
  }
};
var AnimatedValue_default2 = AnimatedValue2;

// node_modules/react-native-reanimated/lib/module/core/AnimatedEvent.js
var import_invariant40 = __toModule(require_invariant2());

// node_modules/react-native-reanimated/lib/module/core/createEventObjectProxyPolyfill.js
function createEventObjectProxyPolyfill() {
  const nodesMap = {
    translationX: {},
    translationY: {},
    state: {},
    oldState: {},
    absoluteX: {},
    absoluteY: {},
    x: {},
    y: {},
    velocityX: {},
    velocityY: {},
    scale: {},
    focalX: {},
    focalY: {},
    rotation: {},
    anchorX: {},
    anchorY: {},
    velocity: {},
    numberOfPointers: {},
    layout: {
      x: {},
      y: {},
      width: {},
      height: {}
    },
    contentOffset: {
      y: {},
      x: {}
    },
    layoutMeasurement: {
      width: {},
      height: {}
    },
    contentSize: {
      width: {},
      height: {}
    },
    zoomScale: {},
    contentInset: {
      right: {},
      top: {},
      left: {},
      bottom: {}
    }
  };
  const traverse = (obj) => {
    for (const key3 in obj) {
      traverse(obj[key3]);
      Object.assign(obj[key3], {
        __isProxy: true
      });
    }
  };
  traverse(nodesMap);
  return nodesMap;
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedEvent.js
function _defineProperty52(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function sanitizeArgMapping(argMapping) {
  const eventMappings = [];
  const alwaysNodes = [];
  const getNode = (node) => {
    if (Platform_default.OS === "web" || Platform_default.OS === "windows" || Platform_default.OS === "macos") {
      return node;
    }
    return node.__nodeID;
  };
  const traverse = (value, path) => {
    if (value instanceof AnimatedValue_default2) {
      eventMappings.push(path.concat(getNode(value)));
    } else if (typeof value === "object" && value.__val) {
      eventMappings.push(path.concat(getNode(value.__val)));
    } else if (typeof value === "function") {
      const node = new AnimatedValue_default2(0);
      alwaysNodes.push(createAnimatedAlways(value(node)));
      eventMappings.push(path.concat(getNode(node)));
    } else if (typeof value === "object") {
      for (const key3 in value) {
        traverse(value[key3], path.concat(key3));
      }
    }
  };
  (0, import_invariant40.default)(argMapping[0] && argMapping[0].nativeEvent, "Native driven events only support animated values contained inside `nativeEvent`.");
  const ev = argMapping[0].nativeEvent;
  if (typeof ev === "object") {
    traverse(ev, []);
  } else if (typeof ev === "function") {
    const proxyHandler = {
      get: function get3(target2, name) {
        if (name === "__isProxy") {
          return true;
        }
        if (!target2[name] && name !== "__val") {
          target2[name] = new Proxy({}, proxyHandler);
        }
        return target2[name];
      },
      set: function set3(target2, prop, value) {
        if (prop === "__val") {
          target2[prop] = value;
          return true;
        }
        return false;
      }
    };
    const proxy = typeof Proxy === "function" ? new Proxy({}, proxyHandler) : createEventObjectProxyPolyfill();
    alwaysNodes.push(createAnimatedAlways(ev(proxy)));
    traverse(proxy, []);
  }
  return {
    eventMappings,
    alwaysNodes
  };
}
var AnimatedEvent2 = class extends AnimatedNode_default2 {
  constructor(argMapping, config = {}) {
    const {
      eventMappings,
      alwaysNodes
    } = sanitizeArgMapping(argMapping);
    super({
      type: "event",
      argMapping: eventMappings
    });
    _defineProperty52(this, "__isNative", true);
    this._alwaysNodes = alwaysNodes;
  }
  toString() {
    return "AnimatedEvent, id: ".concat(this.__nodeID);
  }
  attachEvent(viewRef, eventName) {
    for (let i = 0; i < this._alwaysNodes.length; i++) {
      this._alwaysNodes[i].__attach();
    }
    this.__attach();
    const viewTag = findNodeHandle_default(viewRef);
    ReanimatedModule_default.attachEvent(viewTag, eventName, this.__nodeID);
  }
  __onEvaluate() {
    return 0;
  }
  detachEvent(viewRef, eventName) {
    for (let i = 0; i < this._alwaysNodes.length; i++) {
      this._alwaysNodes[i].isNativelyInitialized() && this._alwaysNodes[i].__detach();
    }
    const viewTag = findNodeHandle_default(viewRef);
    ReanimatedModule_default.detachEvent(viewTag, eventName, this.__nodeID);
    this.__detach();
  }
};
var AnimatedEvent_default = AnimatedEvent2;
function createAnimatedEvent(argMapping, config) {
  return new AnimatedEvent2(argMapping, config);
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedConcat.js
var import_invariant41 = __toModule(require_invariant2());
var AnimatedConcat = class extends AnimatedNode_default2 {
  constructor(input) {
    (0, import_invariant41.default)(input.every((el) => el instanceof AnimatedNode_default2 || typeof el === "number" || typeof el === "string"), "Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: ".concat(input));
    super({
      type: "concat",
      input
    }, input);
    this._input = input;
  }
  __onEvaluate() {
    return this._input.reduce((prev, current) => prev + val(current), "");
  }
  toString() {
    return "AnimatedConcat, id: ".concat(this.__nodeID);
  }
};
function createAnimatedConcat(...args) {
  return new AnimatedConcat(args.map(adapt));
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedBezier.js
var import_invariant42 = __toModule(require_invariant2());
var kSplineTableSize2 = 11;
var kSampleStepSize2 = 1 / (kSplineTableSize2 - 1);

// node_modules/react-native-reanimated/lib/module/derived/useCode.js
var import_react58 = __toModule(require_react());
function useCode(nodeFactory, dependencies) {
  if (!(import_react58.default.useEffect instanceof Function))
    return;
  import_react58.default.useEffect(() => {
    if (!(nodeFactory instanceof Function)) {
      console.warn("useCode() first argument should be a function that returns an animation node.");
      const node2 = nodeFactory;
      nodeFactory = () => node2;
    }
    let node = nodeFactory();
    if (node) {
      if (node instanceof Array)
        node = createAnimatedBlock(node);
      const animatedAlways = createAnimatedAlways(node);
      animatedAlways.__attach();
      return () => animatedAlways.__detach();
    }
  }, dependencies);
}

// node_modules/react-native-reanimated/lib/module/core/AnimatedCode.js
function assertNodesNotNull(code2, children, exec) {
  if (!code2) {
    const error2 = !children ? 'Got "'.concat(typeof children, '" type passed to children') : 'Got "'.concat(typeof exec, '" type passed to exec');
    throw new Error("<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ".concat(error2));
  }
}
function Code2({
  exec,
  children,
  dependencies
}) {
  const nodes = children || exec;
  let code2 = null;
  if (nodes instanceof AnimatedNode_default2) {
    code2 = () => nodes;
  } else if (typeof nodes === "function") {
    code2 = nodes;
  }
  assertNodesNotNull(code2, children, exec);
  useCode(code2, dependencies);
  return null;
}
var AnimatedCode_default = Code2;

// node_modules/react-native-reanimated/lib/module/derived/index.js
var derived_exports = {};
__export(derived_exports, {
  Extrapolate: () => Extrapolate,
  acc: () => acc,
  color: () => color37,
  diff: () => diff,
  diffClamp: () => diffClamp3,
  interpolate: () => interpolate2,
  interpolateColors: () => interpolateColors,
  onChange: () => onChange,
  useCode: () => useCode
});

// node_modules/react-native-reanimated/lib/module/derived/acc.js
var procAcc = createAnimatedFunction(function(v, acc2) {
  return createAnimatedSet(acc2, add6(acc2, v));
});
function acc(v) {
  const acc2 = new InternalAnimatedValue_default(0);
  return procAcc(v, acc2);
}

// node_modules/react-native-reanimated/lib/module/derived/color.js
var procColor = createAnimatedFunction(function(r, g, b, a) {
  const color39 = add6(multiply5(a, 1 << 24), multiply5(round(r), 1 << 16), multiply5(round(g), 1 << 8), round(b));
  if (Platform_default.OS === "android") {
    return createAnimatedCond(lessThan(color39, 1 << 31 >>> 0), color39, sub(color39, Math.pow(2, 32)));
  }
  return color39;
});
function color37(r, g, b, a = 1) {
  if (Platform_default.OS === "web") {
    return createAnimatedConcat("rgba(", r, ",", g, ",", b, ",", a, ")");
  }
  if (a instanceof AnimatedNode_default2) {
    a = round(multiply5(a, 255));
  } else {
    a = Math.round(a * 255);
  }
  return procColor(r, g, b, a);
}

// node_modules/react-native-reanimated/lib/module/derived/diff.js
var procDiff = createAnimatedFunction(function(v, stash, prev) {
  return createAnimatedBlock([createAnimatedSet(stash, createAnimatedCond(defined(prev), sub(v, prev), 0)), createAnimatedSet(prev, v), stash]);
});
function diff(v) {
  const stash = new InternalAnimatedValue_default(0);
  const prev = new InternalAnimatedValue_default();
  return procDiff(v, stash, prev);
}

// node_modules/react-native-reanimated/lib/module/derived/diffClamp.js
function diffClamp3(a, minVal, maxVal) {
  const value = new InternalAnimatedValue_default();
  return createAnimatedSet(value, min(max(add6(createAnimatedCond(defined(value), value, a), diff(a)), minVal), maxVal));
}

// node_modules/react-native-reanimated/lib/module/derived/interpolateColors.js
function red(c) {
  return c >> 16 & 255;
}
function green(c) {
  return c >> 8 & 255;
}
function blue(c) {
  return c & 255;
}
function opacity2(c) {
  return (c >> 24 & 255) / 255;
}
function interpolateColors(animationValue, options) {
  const {
    inputRange,
    outputColorRange
  } = options;
  const colors = outputColorRange.map(processColor_default);
  const r = round(interpolate2(animationValue, {
    inputRange,
    outputRange: colors.map(red),
    extrapolate: Extrapolate.CLAMP
  }));
  const g = round(interpolate2(animationValue, {
    inputRange,
    outputRange: colors.map(green),
    extrapolate: Extrapolate.CLAMP
  }));
  const b = round(interpolate2(animationValue, {
    inputRange,
    outputRange: colors.map(blue),
    extrapolate: Extrapolate.CLAMP
  }));
  const a = interpolate2(animationValue, {
    inputRange,
    outputRange: colors.map(opacity2),
    extrapolate: Extrapolate.CLAMP
  });
  return color37(r, g, b, a);
}

// node_modules/react-native-reanimated/lib/module/derived/onChange.js
var procOnChange = createAnimatedFunction(function(value, action, prevValue) {
  return createAnimatedBlock([createAnimatedCond(not(defined(prevValue)), createAnimatedSet(prevValue, value)), createAnimatedCond(neq(value, prevValue), [createAnimatedSet(prevValue, value), action])]);
});
function onChange(value, action) {
  const prevValue = new InternalAnimatedValue_default();
  return procOnChange(value, action, prevValue);
}

// node_modules/react-native-reanimated/lib/module/createAnimatedComponent.js
var import_react59 = __toModule(require_react());

// node_modules/react-native-reanimated/lib/module/core/AnimatedTransform.js
var import_areEqual = __toModule(require_areEqual());
function sanitizeTransform(inputTransform) {
  const outputTransform = [];
  inputTransform.forEach((transform) => {
    for (const key3 in transform) {
      const value = transform[key3];
      if (value instanceof AnimatedNode_default2) {
        outputTransform.push({
          property: key3,
          nodeID: value.__nodeID
        });
      } else {
        outputTransform.push({
          property: key3,
          value
        });
      }
    }
  });
  return outputTransform;
}
function extractAnimatedParentNodes(transform) {
  const parents = [];
  transform.forEach((transform2) => {
    for (const key3 in transform2) {
      const value = transform2[key3];
      if (value instanceof AnimatedNode_default2) {
        parents.push(value);
      }
    }
  });
  return parents;
}
function createOrReuseTransformNode(transform, oldNode) {
  const config = sanitizeTransform(transform);
  if (oldNode && (0, import_areEqual.default)(config, oldNode._config)) {
    return oldNode;
  }
  return new AnimatedTransform2(transform, config);
}
var AnimatedTransform2 = class extends AnimatedNode_default2 {
  constructor(transform, config) {
    super({
      type: "transform",
      transform: config
    }, extractAnimatedParentNodes(transform));
    this._config = config;
    this._transform = transform;
  }
  toString() {
    return "AnimatedTransform, id: ".concat(this.__nodeID);
  }
  __onEvaluate() {
    return this._transform.map((transform) => {
      const result = {};
      for (const key3 in transform) {
        const value = transform[key3];
        if (value instanceof AnimatedNode_default2) {
          result[key3] = value.__getValue();
        }
      }
      return result;
    });
  }
};

// node_modules/react-native-reanimated/lib/module/core/AnimatedStyle.js
var import_areEqual2 = __toModule(require_areEqual());
function ownKeys24(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread24(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys24(Object(source), true).forEach(function(key3) {
        _defineProperty53(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys24(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty53(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function sanitizeStyle(inputStyle) {
  const style = {};
  for (const key3 in inputStyle) {
    const value = inputStyle[key3];
    if (value instanceof AnimatedNode_default2) {
      style[key3] = value.__nodeID;
    }
  }
  return style;
}
function createOrReuseStyleNode(style, oldNode) {
  style = StyleSheet_default2.flatten(style) || {};
  if (style.transform) {
    style = _objectSpread24(_objectSpread24({}, style), {}, {
      transform: createOrReuseTransformNode(style.transform, oldNode && oldNode._style.transform)
    });
  }
  const config = sanitizeStyle(style);
  if (oldNode && (0, import_areEqual2.default)(config, oldNode._config)) {
    return oldNode;
  }
  return new AnimatedStyle2(style, config);
}
var AnimatedStyle2 = class extends AnimatedNode_default2 {
  constructor(style, config) {
    super({
      type: "style",
      style: config
    }, Object.values(style));
    this._config = config;
    this._style = style;
  }
  toString() {
    return "AnimatedStyle, id: ".concat(this.__nodeID);
  }
  _walkStyleAndGetAnimatedValues(style) {
    const updatedStyle = {};
    for (const key3 in style) {
      const value = style[key3];
      if (value instanceof AnimatedNode_default2) {
        updatedStyle[key3] = value.__getValue();
      } else if (value && !Array.isArray(value) && typeof value === "object") {
        updatedStyle[key3] = this._walkStyleAndGetAnimatedValues(value);
      }
    }
    return updatedStyle;
  }
  __onEvaluate() {
    return this._walkStyleAndGetAnimatedValues(this._style);
  }
};
var AnimatedStyle_default2 = AnimatedStyle2;

// node_modules/react-native-reanimated/lib/module/core/AnimatedProps.js
var import_invariant43 = __toModule(require_invariant2());
var import_areEqual3 = __toModule(require_areEqual());
function ownKeys25(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread25(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys25(Object(source), true).forEach(function(key3) {
        _defineProperty54(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys25(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty54(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function sanitizeProps(inputProps) {
  const props = {};
  for (const key3 in inputProps) {
    const value = inputProps[key3];
    if (value instanceof AnimatedNode_default2 && !(value instanceof AnimatedEvent_default)) {
      props[key3] = value.__nodeID;
    }
  }
  return props;
}
function createOrReusePropsNode(props, callback, oldNode) {
  if (props.style) {
    props = _objectSpread25(_objectSpread25({}, props), {}, {
      style: createOrReuseStyleNode(props.style, oldNode && oldNode._props.style)
    });
  }
  const config = sanitizeProps(props);
  if (oldNode && (0, import_areEqual3.default)(config, oldNode._config)) {
    return oldNode;
  }
  return new AnimatedProps2(props, config, callback);
}
var AnimatedProps2 = class extends AnimatedNode_default2 {
  constructor(props, config, callback) {
    super({
      type: "props",
      props: config
    }, Object.values(props).filter((n) => !(n instanceof AnimatedEvent_default)));
    this._config = config;
    this._props = props;
    this._callback = callback;
    this.__attach();
  }
  toString() {
    return "AnimatedProps, id: ".concat(this.__nodeID);
  }
  __onEvaluate() {
    const props = {};
    for (const key3 in this._props) {
      const value = this._props[key3];
      if (value instanceof AnimatedNode_default2) {
        props[key3] = value.__getValue();
      }
    }
    return props;
  }
  __detach() {
    const nativeViewTag = findNodeHandle_default(this._animatedView);
    (0, import_invariant43.default)(nativeViewTag != null, "Unable to locate attached view in the native tree");
    this._disconnectAnimatedView(nativeViewTag);
    super.__detach();
  }
  update() {
    this._callback();
    if (!this._animatedView) {
      return;
    }
    val(this);
  }
  setNativeView(animatedView) {
    if (this._animatedView === animatedView) {
      return;
    }
    this._animatedView = animatedView;
    const nativeViewTag = findNodeHandle_default(this._animatedView);
    (0, import_invariant43.default)(nativeViewTag != null, "Unable to locate attached view in the native tree");
    this._connectAnimatedView(nativeViewTag);
  }
};

// node_modules/react-native-reanimated/lib/module/createAnimatedComponent.js
var import_invariant44 = __toModule(require_invariant2());
function _extends94() {
  _extends94 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends94.apply(this, arguments);
}
function _defineProperty55(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var NODE_MAPPING2 = new Map();
function listener2(data2) {
  const component = NODE_MAPPING2.get(data2.viewTag);
  component && component._updateFromNative(data2.props);
}
function dummyListener() {
}
function createAnimatedComponent2(Component19) {
  (0, import_invariant44.default)(typeof Component19 !== "function" || Component19.prototype && Component19.prototype.isReactComponent, "`createAnimatedComponent` does not support stateless functional components; use a class component instead.");
  class AnimatedComponent extends import_react59.default.Component {
    constructor(props) {
      super(props);
      _defineProperty55(this, "_invokeAnimatedPropsCallbackOnMount", false);
      _defineProperty55(this, "_animatedPropsCallback", () => {
        if (this._component == null) {
          this._invokeAnimatedPropsCallbackOnMount = true;
        } else if (typeof this._component.setNativeProps !== "function") {
          this.forceUpdate();
        } else {
          this._component.setNativeProps(this._propsAnimated.__getValue());
        }
      });
      _defineProperty55(this, "_setComponentRef", (c) => {
        if (c !== this._component) {
          this._component = c;
        }
      });
      this._attachProps(this.props);
    }
    componentWillUnmount() {
      this._detachPropUpdater();
      this._propsAnimated && this._propsAnimated.__detach();
      this._detachNativeEvents();
    }
    setNativeProps(props) {
      this._component.setNativeProps(props);
    }
    componentDidMount() {
      if (this._invokeAnimatedPropsCallbackOnMount) {
        this._invokeAnimatedPropsCallbackOnMount = false;
        this._animatedPropsCallback();
      }
      this._propsAnimated.setNativeView(this._component);
      this._attachNativeEvents();
      this._attachPropUpdater();
    }
    _getEventViewRef() {
      return this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;
    }
    _attachNativeEvents() {
      const node = this._getEventViewRef();
      for (const key3 in this.props) {
        const prop = this.props[key3];
        if (prop instanceof AnimatedEvent_default) {
          prop.attachEvent(node, key3);
        }
      }
    }
    _detachNativeEvents() {
      const node = this._getEventViewRef();
      for (const key3 in this.props) {
        const prop = this.props[key3];
        if (prop instanceof AnimatedEvent_default) {
          prop.detachEvent(node, key3);
        }
      }
    }
    _reattachNativeEvents(prevProps) {
      const node = this._getEventViewRef();
      const attached = new Set();
      const nextEvts = new Set();
      for (const key3 in this.props) {
        const prop = this.props[key3];
        if (prop instanceof AnimatedEvent_default) {
          nextEvts.add(prop.__nodeID);
        }
      }
      for (const key3 in prevProps) {
        const prop = this.props[key3];
        if (prop instanceof AnimatedEvent_default) {
          if (!nextEvts.has(prop.__nodeID)) {
            prop.detachEvent(node, key3);
          } else {
            attached.add(prop.__nodeID);
          }
        }
      }
      for (const key3 in this.props) {
        const prop = this.props[key3];
        if (prop instanceof AnimatedEvent_default && !attached.has(prop.__nodeID)) {
          prop.attachEvent(node, key3);
        }
      }
    }
    _attachProps(nextProps) {
      const oldPropsAnimated = this._propsAnimated;
      this._propsAnimated = createOrReusePropsNode(nextProps, this._animatedPropsCallback, oldPropsAnimated);
      if (oldPropsAnimated !== this._propsAnimated) {
        oldPropsAnimated && oldPropsAnimated.__detach();
      }
    }
    _updateFromNative(props) {
      this._component.setNativeProps(props);
    }
    _attachPropUpdater() {
      const viewTag = findNodeHandle_default(this);
      NODE_MAPPING2.set(viewTag, this);
      if (NODE_MAPPING2.size === 1) {
        ReanimatedEventEmitter_default.addListener("onReanimatedPropsChange", listener2);
      }
    }
    _detachPropUpdater() {
      const viewTag = findNodeHandle_default(this);
      NODE_MAPPING2.delete(viewTag);
      if (NODE_MAPPING2.size === 0) {
        ReanimatedEventEmitter_default.removeAllListeners("onReanimatedPropsChange");
      }
    }
    componentDidUpdate(prevProps) {
      this._attachProps(this.props);
      this._reattachNativeEvents(prevProps);
      this._propsAnimated.setNativeView(this._component);
    }
    _filterNonAnimatedStyle(inputStyle) {
      const style = {};
      for (const key3 in inputStyle) {
        const value = inputStyle[key3];
        if (key3 !== "transform") {
          if (value instanceof AnimatedValue_default2) {
            style[key3] = value._startingValue;
          } else if (!(value instanceof AnimatedNode_default2)) {
            style[key3] = value;
          }
        }
      }
      return style;
    }
    _filterNonAnimatedProps(inputProps) {
      const props = {};
      for (const key3 in inputProps) {
        const value = inputProps[key3];
        if (key3 === "style") {
          props[key3] = this._filterNonAnimatedStyle(StyleSheet_default2.flatten(value));
        } else if (value instanceof AnimatedEvent_default) {
          props[key3] = dummyListener;
        } else if (value instanceof AnimatedValue_default2) {
          props[key3] = value._startingValue;
        } else if (!(value instanceof AnimatedNode_default2)) {
          props[key3] = value;
        }
      }
      return props;
    }
    render() {
      const props = this._filterNonAnimatedProps(this.props);
      const platformProps = Platform_default.select({
        web: {},
        default: {
          collapsable: false
        }
      });
      return /* @__PURE__ */ import_react59.default.createElement(Component19, _extends94({}, props, {
        ref: this._setComponentRef
      }, platformProps));
    }
    getNode() {
      return this._component;
    }
  }
  AnimatedComponent.displayName = "AnimatedComponent(".concat(Component19.displayName || Component19.name || "Component", ")");
  return AnimatedComponent;
}

// node_modules/react-native-reanimated/lib/module/animations/decay.js
var VELOCITY_EPS = 5;
function decay3(clock2, state, config) {
  const lastTime = createAnimatedCond(state.time, state.time, clock2);
  const deltaTime = sub(clock2, lastTime);
  const kv = pow(config.deceleration, deltaTime);
  const kx = divide3(multiply5(config.deceleration, sub(1, kv)), sub(1, config.deceleration));
  const v0 = divide3(state.velocity, 1e3);
  const v = multiply5(v0, kv, 1e3);
  const x = add6(state.position, multiply5(v0, kx));
  return createAnimatedBlock([createAnimatedSet(state.position, x), createAnimatedSet(state.velocity, v), createAnimatedSet(state.time, clock2), createAnimatedCond(lessThan(abs(v), VELOCITY_EPS), createAnimatedSet(state.finished, 1))]);
}
var procDecay = createAnimatedFunction((clock2, time, velocity, position2, finished, deceleration) => decay3(clock2, {
  time,
  velocity,
  position: position2,
  finished
}, {
  deceleration
}));
var decay_default = (clock2, {
  time,
  velocity,
  position: position2,
  finished
}, {
  deceleration
}) => procDecay(clock2, time, velocity, position2, finished, deceleration);

// node_modules/react-native-reanimated/lib/module/animations/timing.js
var internalTiming = createAnimatedFunction(function(clock2, time, frameTime, position2, finished, toValue, duration, nextProgress, progress, newFrameTime) {
  const state = {
    time,
    finished,
    frameTime,
    position: position2
  };
  const config = {
    duration,
    toValue
  };
  const distanceLeft = sub(config.toValue, state.position);
  const fullDistance = divide3(distanceLeft, sub(1, progress));
  const startPosition = sub(config.toValue, fullDistance);
  const nextPosition = add6(startPosition, multiply5(fullDistance, nextProgress));
  return createAnimatedBlock([createAnimatedCond(greaterOrEq(newFrameTime, config.duration), [createAnimatedSet(state.position, config.toValue), createAnimatedSet(state.finished, 1)], createAnimatedSet(state.position, nextPosition)), createAnimatedSet(state.frameTime, newFrameTime), createAnimatedSet(state.time, clock2)]);
});
function timing_default(clock2, state, config) {
  if (config.duration === 0) {
    return createAnimatedBlock([createAnimatedSet(state.position, config.toValue), createAnimatedSet(state.finished, 1)]);
  }
  const lastTime = createAnimatedCond(state.time, state.time, clock2);
  const newFrameTime = add6(state.frameTime, sub(clock2, lastTime));
  const nextProgress = config.easing(divide3(newFrameTime, config.duration));
  const progress = config.easing(divide3(state.frameTime, config.duration));
  return internalTiming(clock2, state.time, state.frameTime, state.position, state.finished, config.toValue, config.duration, nextProgress, progress, newFrameTime);
}

// node_modules/react-native-reanimated/lib/module/animations/spring.js
var MAX_STEPS_MS = 64;
function spring3(clock2, state, config) {
  const lastTime = createAnimatedCond(state.time, state.time, clock2);
  const deltaTime = min(sub(clock2, lastTime), MAX_STEPS_MS);
  const c = config.damping;
  const m2 = config.mass;
  const k = config.stiffness;
  const v0 = multiply5(-1, state.velocity);
  const x0 = sub(config.toValue, state.position);
  const zeta = divide3(c, multiply5(2, sqrt(multiply5(k, m2))));
  const omega0 = sqrt(divide3(k, m2));
  const omega1 = multiply5(omega0, sqrt(sub(1, multiply5(zeta, zeta))));
  const t = divide3(deltaTime, 1e3);
  const sin1 = sin(multiply5(omega1, t));
  const cos1 = cos(multiply5(omega1, t));
  const underDampedEnvelope = exp(multiply5(-1, zeta, omega0, t));
  const underDampedFrag1 = multiply5(underDampedEnvelope, add6(multiply5(sin1, divide3(add6(v0, multiply5(zeta, omega0, x0)), omega1)), multiply5(x0, cos1)));
  const underDampedPosition = sub(config.toValue, underDampedFrag1);
  const underDampedVelocity = sub(multiply5(zeta, omega0, underDampedFrag1), multiply5(underDampedEnvelope, sub(multiply5(cos1, add6(v0, multiply5(zeta, omega0, x0))), multiply5(omega1, x0, sin1))));
  const criticallyDampedEnvelope = exp(multiply5(-1, omega0, t));
  const criticallyDampedPosition = sub(config.toValue, multiply5(criticallyDampedEnvelope, add6(x0, multiply5(add6(v0, multiply5(omega0, x0)), t))));
  const criticallyDampedVelocity = multiply5(criticallyDampedEnvelope, add6(multiply5(v0, sub(multiply5(t, omega0), 1)), multiply5(t, x0, omega0, omega0)));
  const prevPosition = state.prevPosition ? state.prevPosition : new InternalAnimatedValue_default(0);
  const isOvershooting = createAnimatedCond(and(config.overshootClamping, neq(config.stiffness, 0)), createAnimatedCond(lessThan(prevPosition, config.toValue), greaterThan(state.position, config.toValue), lessThan(state.position, config.toValue)));
  const isVelocity = lessThan(abs(state.velocity), config.restSpeedThreshold);
  const isDisplacement = or(eq(config.stiffness, 0), lessThan(abs(sub(config.toValue, state.position)), config.restDisplacementThreshold));
  return createAnimatedBlock([createAnimatedSet(prevPosition, state.position), createAnimatedCond(lessThan(zeta, 1), [createAnimatedSet(state.position, underDampedPosition), createAnimatedSet(state.velocity, underDampedVelocity)], [createAnimatedSet(state.position, criticallyDampedPosition), createAnimatedSet(state.velocity, criticallyDampedVelocity)]), createAnimatedSet(state.time, clock2), createAnimatedCond(or(isOvershooting, and(isVelocity, isDisplacement)), [createAnimatedCond(neq(config.stiffness, 0), [createAnimatedSet(state.velocity, 0), createAnimatedSet(state.position, config.toValue)]), createAnimatedSet(state.finished, 1)])]);
}
var procSpring = createAnimatedFunction((finished, velocity, position2, time, prevPosition, toValue, damping, mass, stiffness, overshootClamping, restSpeedThreshold, restDisplacementThreshold, clock2) => spring3(clock2, {
  finished,
  velocity,
  position: position2,
  time,
  prevPosition
}, {
  toValue,
  damping,
  mass,
  stiffness,
  overshootClamping,
  restDisplacementThreshold,
  restSpeedThreshold
}));
var spring_default = (clock2, {
  finished,
  velocity,
  position: position2,
  time,
  prevPosition
}, {
  toValue,
  damping,
  mass,
  stiffness,
  overshootClamping,
  restDisplacementThreshold,
  restSpeedThreshold
}) => procSpring(finished, velocity, position2, time, prevPosition, toValue, damping, mass, stiffness, overshootClamping, restSpeedThreshold, restDisplacementThreshold, clock2);

// node_modules/react-native-reanimated/lib/module/animations/Animation.js
var Animation2 = class {
  static springDefaultState() {
    return {
      position: new InternalAnimatedValue_default(0),
      finished: new InternalAnimatedValue_default(0),
      velocity: new InternalAnimatedValue_default(0),
      time: new InternalAnimatedValue_default(0)
    };
  }
  static decayDefaultState() {
    return {
      position: new InternalAnimatedValue_default(0),
      finished: new InternalAnimatedValue_default(0),
      velocity: new InternalAnimatedValue_default(0),
      time: new InternalAnimatedValue_default(0)
    };
  }
  static timingDefaultState() {
    return {
      position: new InternalAnimatedValue_default(0),
      finished: new InternalAnimatedValue_default(0),
      time: new InternalAnimatedValue_default(0),
      frameTime: new InternalAnimatedValue_default(0)
    };
  }
};
var Animation_default2 = Animation2;

// node_modules/react-native-reanimated/lib/module/ConfigHelper.js
function ownKeys26(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread26(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys26(Object(source), true).forEach(function(key3) {
        _defineProperty56(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys26(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty56(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var UI_THREAD_PROPS_WHITELIST = {
  opacity: true,
  transform: true,
  backgroundColor: true,
  borderRightColor: true,
  borderBottomColor: true,
  borderColor: true,
  borderEndColor: true,
  borderLeftColor: true,
  borderStartColor: true,
  borderTopColor: true,
  shadowOpacity: true,
  shadowRadius: true,
  scaleX: true,
  scaleY: true,
  translateX: true,
  translateY: true
};
var NATIVE_THREAD_PROPS_WHITELIST = {
  borderBottomWidth: true,
  borderEndWidth: true,
  borderLeftWidth: true,
  borderRightWidth: true,
  borderStartWidth: true,
  borderTopWidth: true,
  borderWidth: true,
  bottom: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  height: true,
  left: true,
  margin: true,
  marginBottom: true,
  marginEnd: true,
  marginHorizontal: true,
  marginLeft: true,
  marginRight: true,
  marginStart: true,
  marginTop: true,
  marginVertical: true,
  maxHeight: true,
  maxWidth: true,
  minHeight: true,
  minWidth: true,
  padding: true,
  paddingBottom: true,
  paddingEnd: true,
  paddingHorizontal: true,
  paddingLeft: true,
  paddingRight: true,
  paddingStart: true,
  paddingTop: true,
  paddingVertical: true,
  right: true,
  start: true,
  top: true,
  width: true,
  zIndex: true,
  borderBottomEndRadius: true,
  borderBottomLeftRadius: true,
  borderBottomRightRadius: true,
  borderBottomStartRadius: true,
  borderRadius: true,
  borderTopEndRadius: true,
  borderTopLeftRadius: true,
  borderTopRightRadius: true,
  borderTopStartRadius: true,
  opacity: true,
  elevation: true,
  fontSize: true,
  lineHeight: true,
  textShadowRadius: true,
  letterSpacing: true,
  display: true,
  backfaceVisibility: true,
  overflow: true,
  resizeMode: true,
  fontStyle: true,
  fontWeight: true,
  textAlign: true,
  textDecorationLine: true,
  fontFamily: true,
  textAlignVertical: true,
  fontVariant: true,
  textDecorationStyle: true,
  textTransform: true,
  writingDirection: true,
  color: true
};
function configureProps() {
  ReanimatedModule_default.configureProps(Object.keys(NATIVE_THREAD_PROPS_WHITELIST), Object.keys(UI_THREAD_PROPS_WHITELIST));
}
function addWhitelistedNativeProps(props) {
  NATIVE_THREAD_PROPS_WHITELIST = _objectSpread26(_objectSpread26({}, NATIVE_THREAD_PROPS_WHITELIST), props);
  configureProps();
}
function addWhitelistedUIProps(props) {
  UI_THREAD_PROPS_WHITELIST = _objectSpread26(_objectSpread26({}, UI_THREAD_PROPS_WHITELIST), props);
  configureProps();
}
configureProps();

// node_modules/react-native-reanimated/lib/module/animations/backwardCompatibleAnimWrapper.js
function createOldAnimationObject(node, animationStateDefaults, value, config) {
  const newClock = new AnimatedClock_default();
  const currentState = animationStateDefaults();
  let alwaysNode;
  let isStarted = false;
  let isDone = false;
  let wasStopped = false;
  let animationCallback;
  const animation2 = {
    start: (currentAnimationCallback) => {
      animationCallback = currentAnimationCallback;
      if (isStarted) {
        animationCallback && animationCallback({
          finished: false
        });
        return;
      }
      if (isDone) {
        console.warn("Animation has been finished before");
        return;
      }
      if (!value.isNativelyInitialized()) {
        return;
      }
      isStarted = true;
      evaluateOnce(createAnimatedSet(currentState.position, value), currentState.position, () => {
        alwaysNode = createAnimatedAlways(createAnimatedSet(value, createAnimatedBlock([createAnimatedCond(createAnimatedClockTest(newClock), 0, createAnimatedStartClock(newClock)), node(newClock, currentState, config), createAnimatedCond(currentState.finished, [createAnimatedCall([], () => {
          isStarted = false;
          if (!wasStopped) {
            isDone = true;
          }
          value.__detachAnimation(animation2);
          isDone = true;
          if (!wasStopped) {
            wasStopped = false;
          }
        }), createAnimatedStopClock(newClock)]), currentState.position])));
        value.__attachAnimation(animation2);
        alwaysNode.__addChild(value);
      });
    },
    __detach: () => {
      animationCallback && animationCallback({
        finished: isDone
      });
      animationCallback = null;
      value.__initialized && alwaysNode.__removeChild(value);
    },
    stop: () => {
      if (isDone) {
        console.warn("Calling stop has no effect as the animation has already completed");
        return;
      }
      if (!isStarted) {
        console.warn("Calling stop has no effect as the animation hasn't been started");
        return;
      }
      wasStopped = true;
      evaluateOnce(createAnimatedSet(currentState.finished, 1), currentState.finished);
    },
    __stopImmediately_testOnly: (result) => {
      animation2.stop();
      isDone = result;
      value.__detachAnimation(animation2);
    }
  };
  return animation2;
}
function backwardsCompatibleAnimWrapper(node, animationStateDefaults) {
  return (clock2, state, config) => {
    if (config !== void 0) {
      return node(clock2, state, config);
    }
    return createOldAnimationObject(node, animationStateDefaults, clock2, state);
  };
}

// node_modules/react-native-reanimated/lib/module/Transitioning.js
var import_react60 = __toModule(require_react());
function _objectWithoutProperties2(source, excluded) {
  if (source == null)
    return {};
  var target2 = _objectWithoutPropertiesLoose17(source, excluded);
  var key3, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key3 = sourceSymbolKeys[i];
      if (excluded.indexOf(key3) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key3))
        continue;
      target2[key3] = source[key3];
    }
  }
  return target2;
}
function _objectWithoutPropertiesLoose17(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
function _defineProperty57(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function _extends95() {
  _extends95 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends95.apply(this, arguments);
}
var TransitioningContext = import_react60.default.createContext();
function configFromProps(type, props) {
  const config = {
    type
  };
  if ("durationMs" in props) {
    config.durationMs = props.durationMs;
  }
  if ("interpolation" in props) {
    config.interpolation = props.interpolation;
  }
  if ("type" in props) {
    config.animation = props.type;
  }
  if ("delayMs" in props) {
    config.delayMs = props.delayMs;
  }
  if ("propagation" in props) {
    config.propagation = props.propagation;
  }
  return config;
}
function wrapTransitioningContext(Comp) {
  return (props) => {
    return /* @__PURE__ */ import_react60.default.createElement(TransitioningContext.Consumer, null, (context) => /* @__PURE__ */ import_react60.default.createElement(Comp, _extends95({
      context
    }, props)));
  };
}
var In = class extends import_react60.default.Component {
  componentDidMount() {
    this.props.context.push(configFromProps("in", this.props));
  }
  render() {
    return this.props.children || null;
  }
};
var Change = class extends import_react60.default.Component {
  componentDidMount() {
    this.props.context.push(configFromProps("change", this.props));
  }
  render() {
    return this.props.children || null;
  }
};
var Out = class extends import_react60.default.Component {
  componentDidMount() {
    this.props.context.push(configFromProps("out", this.props));
  }
  render() {
    return this.props.children || null;
  }
};
var Together = class extends import_react60.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty57(this, "transitions", []);
  }
  componentDidMount() {
    const config = configFromProps("group", this.props);
    config.transitions = this.transitions;
    this.props.context.push(config);
  }
  render() {
    return /* @__PURE__ */ import_react60.default.createElement(TransitioningContext.Provider, {
      value: this.transitions
    }, this.props.children);
  }
};
var Sequence = class extends import_react60.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty57(this, "transitions", []);
  }
  componentDidMount() {
    const config = configFromProps("group", this.props);
    config.sequence = true;
    config.transitions = this.transitions;
    this.props.context.push(config);
  }
  render() {
    return /* @__PURE__ */ import_react60.default.createElement(TransitioningContext.Provider, {
      value: this.transitions
    }, this.props.children);
  }
};
function createTransitioningComponent(Component19) {
  class Wrapped extends import_react60.default.Component {
    constructor(...args) {
      super(...args);
      _defineProperty57(this, "propTypes", Component19.propTypes);
      _defineProperty57(this, "transitions", []);
      _defineProperty57(this, "viewRef", import_react60.default.createRef());
    }
    componentDidMount() {
      if (this.props.animateMount) {
        this.animateNextTransition();
      }
    }
    setNativeProps(props) {
      this.viewRef.current.setNativeProps(props);
    }
    animateNextTransition() {
      const viewTag = findNodeHandle_default(this.viewRef.current);
      ReanimatedModule_default.animateNextTransition(viewTag, {
        transitions: this.transitions
      });
    }
    render() {
      const _this$props = this.props, {
        transition: transition3
      } = _this$props, rest = _objectWithoutProperties2(_this$props, ["transition"]);
      return /* @__PURE__ */ import_react60.default.createElement(import_react60.default.Fragment, null, /* @__PURE__ */ import_react60.default.createElement(TransitioningContext.Provider, {
        value: this.transitions
      }, transition3), /* @__PURE__ */ import_react60.default.createElement(Component19, _extends95({}, rest, {
        ref: this.viewRef,
        collapsable: false
      })));
    }
  }
  return Wrapped;
}
var Transitioning = {
  View: createTransitioningComponent(View_default)
};
var Transition = {
  Sequence: wrapTransitioningContext(Sequence),
  Together: wrapTransitioningContext(Together),
  In: wrapTransitioningContext(In),
  Out: wrapTransitioningContext(Out),
  Change: wrapTransitioningContext(Change)
};

// node_modules/react-native-reanimated/lib/module/animations/SpringUtils.js
function ownKeys27(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread27(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys27(Object(source), true).forEach(function(key3) {
        _defineProperty58(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys27(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty58(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
function _objectWithoutProperties3(source, excluded) {
  if (source == null)
    return {};
  var target2 = _objectWithoutPropertiesLoose18(source, excluded);
  var key3, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key3 = sourceSymbolKeys[i];
      if (excluded.indexOf(key3) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key3))
        continue;
      target2[key3] = source[key3];
    }
  }
  return target2;
}
function _objectWithoutPropertiesLoose18(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key3, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key3 = sourceKeys[i];
    if (excluded.indexOf(key3) >= 0)
      continue;
    target2[key3] = source[key3];
  }
  return target2;
}
function stiffnessFromOrigamiValue2(oValue) {
  return (oValue - 30) * 3.62 + 194;
}
function dampingFromOrigamiValue2(oValue) {
  return (oValue - 8) * 3 + 25;
}
function stiffnessFromOrigamiNode(oValue) {
  return add6(multiply5(sub(oValue, 30), 3.62), 194);
}
function dampingFromOrigamiNode(oValue) {
  return add6(multiply5(sub(oValue, 8), 3), 25);
}
function makeConfigFromOrigamiTensionAndFriction(prevConfig) {
  const {
    tension,
    friction
  } = prevConfig, rest = _objectWithoutProperties3(prevConfig, ["tension", "friction"]);
  return _objectSpread27(_objectSpread27({}, rest), {}, {
    stiffness: typeof tension === "number" ? stiffnessFromOrigamiValue2(tension) : stiffnessFromOrigamiNode(tension),
    damping: typeof friction === "number" ? dampingFromOrigamiValue2(friction) : dampingFromOrigamiNode(friction)
  });
}
function makeConfigFromBouncinessAndSpeed(prevConfig) {
  const {
    bounciness,
    speed
  } = prevConfig, rest = _objectWithoutProperties3(prevConfig, ["bounciness", "speed"]);
  if (typeof bounciness === "number" && typeof speed === "number") {
    return fromBouncinessAndSpeedNumbers(bounciness, speed, rest);
  }
  return fromBouncinessAndSpeedNodes(bounciness, speed, rest);
}
function fromBouncinessAndSpeedNodes(bounciness, speed, rest) {
  function normalize(value, startValue, endValue) {
    return divide3(sub(value, startValue), sub(endValue, startValue));
  }
  function projectNormal(n, start, end) {
    return add6(start, multiply5(n, sub(end, start)));
  }
  function linearInterpolation(t, start, end) {
    return add6(multiply5(t, end), multiply5(sub(1, t), start));
  }
  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(sub(multiply5(2, t), multiply5(t, t)), start, end);
  }
  function b3Friction1(x) {
    return add6(sub(multiply5(7e-4, pow(x, 3)), multiply5(0.031, pow(x, 2))), multiply5(0.64, x), 1.28);
  }
  function b3Friction2(x) {
    return add6(sub(multiply5(44e-6, pow(x, 3)), multiply5(6e-3, pow(x, 2))), multiply5(0.36, x), 2);
  }
  function b3Friction3(x) {
    return add6(sub(multiply5(45e-8, pow(x, 3)), multiply5(332e-6, pow(x, 2))), multiply5(0.1078, x), 5.84);
  }
  function b3Nobounce(tension) {
    return createAnimatedCond(lessOrEq(tension, 18), b3Friction1(tension), createAnimatedCond(and(greaterThan(tension, 18), lessOrEq(tension, 44)), b3Friction2(tension), b3Friction3(tension)));
  }
  let b = normalize(divide3(bounciness, 1.7), 0, 20);
  b = projectNormal(b, 0, 0.8);
  const s = normalize(divide3(speed, 1.7), 0, 20);
  const bouncyTension = projectNormal(s, 0.5, 200);
  const bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
  return _objectSpread27(_objectSpread27({}, rest), {}, {
    stiffness: stiffnessFromOrigamiNode(bouncyTension),
    damping: dampingFromOrigamiNode(bouncyFriction)
  });
}
function fromBouncinessAndSpeedNumbers(bounciness, speed, rest) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }
  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }
  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }
  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }
  function b3Friction1(x) {
    return 7e-4 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }
  function b3Friction2(x) {
    return 44e-6 * Math.pow(x, 3) - 6e-3 * Math.pow(x, 2) + 0.36 * x + 2;
  }
  function b3Friction3(x) {
    return 45e-8 * Math.pow(x, 3) - 332e-6 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }
  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }
  let b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  const s = normalize(speed / 1.7, 0, 20);
  const bouncyTension = projectNormal(s, 0.5, 200);
  const bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
  return _objectSpread27(_objectSpread27({}, rest), {}, {
    stiffness: stiffnessFromOrigamiValue2(bouncyTension),
    damping: dampingFromOrigamiValue2(bouncyFriction)
  });
}
function makeDefaultConfig() {
  return {
    stiffness: new InternalAnimatedValue_default(100),
    mass: new InternalAnimatedValue_default(1),
    damping: new InternalAnimatedValue_default(10),
    overshootClamping: false,
    restSpeedThreshold: 1e-3,
    restDisplacementThreshold: 1e-3,
    toValue: new InternalAnimatedValue_default(0)
  };
}
var SpringUtils_default = {
  makeDefaultConfig,
  makeConfigFromBouncinessAndSpeed,
  makeConfigFromOrigamiTensionAndFriction
};

// node_modules/react-native-reanimated/lib/module/useValue.js
var import_react61 = __toModule(require_react());
function useValue(initialValue) {
  const ref = import_react61.default.useRef(null);
  if (ref.current === null) {
    ref.current = new AnimatedValue_default2(initialValue);
  }
  return ref.current;
}

// node_modules/react-native-reanimated/lib/module/Animated.js
function ownKeys28(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread28(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys28(Object(source), true).forEach(function(key3) {
        _defineProperty59(target2, key3, source[key3]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys28(Object(source)).forEach(function(key3) {
        Object.defineProperty(target2, key3, Object.getOwnPropertyDescriptor(source, key3));
      });
    }
  }
  return target2;
}
function _defineProperty59(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var decayWrapper = backwardsCompatibleAnimWrapper(decay_default, Animation_default2.decayDefaultState);
var timingWrapper = backwardsCompatibleAnimWrapper(timing_default, Animation_default2.timingDefaultState);
var springWrapper = backwardsCompatibleAnimWrapper(spring_default, Animation_default2.springDefaultState);
var Animated2 = _objectSpread28(_objectSpread28(_objectSpread28({
  View: createAnimatedComponent2(View_default),
  Text: createAnimatedComponent2(Text_default),
  Image: createAnimatedComponent2(Image_default),
  ScrollView: createAnimatedComponent2(ScrollView_default),
  Code: AnimatedCode_default,
  createAnimatedComponent: createAnimatedComponent2,
  Clock: AnimatedClock_default,
  Value: AnimatedValue_default2,
  Node: AnimatedNode_default2
}, base_exports), derived_exports), {}, {
  decay: decayWrapper,
  timing: timingWrapper,
  spring: springWrapper,
  SpringUtils: SpringUtils_default,
  addWhitelistedNativeProps,
  addWhitelistedUIProps,
  useValue
});
var Animated_default2 = Animated2;

// node_modules/@react-navigation/drawer/lib/module/views/Overlay.js
var React233 = __toModule(require_react());
function _extends96() {
  _extends96 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends96.apply(this, arguments);
}
var {
  interpolate: interpolateDeprecated,
  interpolateNode,
  cond,
  greaterThan: greaterThan2
} = Animated_default2;
var interpolate3 = interpolateNode !== null && interpolateNode !== void 0 ? interpolateNode : interpolateDeprecated;
var PROGRESS_EPSILON = 0.05;
var Overlay = /* @__PURE__ */ React233.forwardRef(function Overlay2({
  progress,
  style,
  ...props
}, ref) {
  const animatedStyle = {
    opacity: interpolate3(progress, {
      inputRange: Platform_default.OS === "windows" || Platform_default.OS === "macos" ? [0, 1] : [PROGRESS_EPSILON, 1],
      outputRange: [0, 1]
    }),
    zIndex: cond(greaterThan2(progress, PROGRESS_EPSILON), 0, -1)
  };
  return /* @__PURE__ */ React233.createElement(Animated_default2.View, _extends96({}, props, {
    ref,
    style: [styles115.overlay, overlayStyle, animatedStyle, style]
  }));
});
var overlayStyle = Platform_default.select({
  web: {
    WebkitTapHighlightColor: "transparent"
  },
  default: {}
});
var styles115 = StyleSheet_default2.create({
  overlay: {
    ...StyleSheet_default2.absoluteFillObject,
    backgroundColor: "rgba(0, 0, 0, 0.5)"
  }
});
var Overlay_default = Overlay;

// node_modules/@react-navigation/drawer/lib/module/views/Drawer.js
function _extends97() {
  _extends97 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends97.apply(this, arguments);
}
function _defineProperty60(obj, key3, value) {
  if (key3 in obj) {
    Object.defineProperty(obj, key3, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key3] = value;
  }
  return obj;
}
var {
  Clock,
  Value,
  onChange: onChange2,
  clockRunning,
  startClock,
  stopClock,
  spring: spring4,
  abs: abs2,
  add: add7,
  and: and2,
  block,
  call,
  cond: cond2,
  divide: divide4,
  eq: eq2,
  event: event3,
  greaterThan: greaterThan3,
  lessThan: lessThan2,
  max: max2,
  min: min2,
  multiply: multiply6,
  neq: neq2,
  or: or2,
  set: set2,
  sub: sub2
} = Animated_default2;
var TRUE2 = 1;
var FALSE2 = 0;
var NOOP = 0;
var UNSET = -1;
var DIRECTION_LEFT = 1;
var DIRECTION_RIGHT = -1;
var SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;
var SWIPE_DISTANCE_MINIMUM = 5;
var DEFAULT_DRAWER_WIDTH = "80%";
var SPRING_CONFIG = {
  stiffness: 1e3,
  damping: 500,
  mass: 3,
  overshootClamping: true,
  restDisplacementThreshold: 0.01,
  restSpeedThreshold: 0.01
};
var ANIMATED_ZERO = new Animated_default2.Value(0);
var ANIMATED_ONE = new Animated_default2.Value(1);
var DrawerView = class extends React234.Component {
  constructor(...args) {
    super(...args);
    _defineProperty60(this, "handleEscape", (e) => {
      const {
        open: open3,
        onClose
      } = this.props;
      if (e.key === "Escape") {
        if (open3) {
          onClose();
        }
      }
    });
    _defineProperty60(this, "handleEndInteraction", () => {
      if (this.interactionHandle !== void 0) {
        InteractionManager_default.clearInteractionHandle(this.interactionHandle);
        this.interactionHandle = void 0;
      }
    });
    _defineProperty60(this, "handleStartInteraction", () => {
      if (this.interactionHandle === void 0) {
        this.interactionHandle = InteractionManager_default.createInteractionHandle();
      }
    });
    _defineProperty60(this, "getDrawerWidth", () => {
      const {
        drawerStyle,
        dimensions: dimensions2
      } = this.props;
      const {
        width = DEFAULT_DRAWER_WIDTH
      } = StyleSheet_default2.flatten(drawerStyle) || {};
      if (typeof width === "string" && width.endsWith("%")) {
        const percentage = Number(width.replace(/%$/, ""));
        if (Number.isFinite(percentage)) {
          return dimensions2.width * (percentage / 100);
        }
      }
      return typeof width === "number" ? width : 0;
    });
    _defineProperty60(this, "clock", new Clock());
    _defineProperty60(this, "interactionHandle", void 0);
    _defineProperty60(this, "isDrawerTypeFront", new Value(this.props.drawerType === "front" ? TRUE2 : FALSE2));
    _defineProperty60(this, "isOpen", new Value(this.props.open ? TRUE2 : FALSE2));
    _defineProperty60(this, "nextIsOpen", new Value(UNSET));
    _defineProperty60(this, "isSwiping", new Value(FALSE2));
    _defineProperty60(this, "initialDrawerWidth", this.getDrawerWidth());
    _defineProperty60(this, "gestureState", new Value(GestureState2.UNDETERMINED));
    _defineProperty60(this, "touchX", new Value(0));
    _defineProperty60(this, "velocityX", new Value(0));
    _defineProperty60(this, "gestureX", new Value(0));
    _defineProperty60(this, "offsetX", new Value(0));
    _defineProperty60(this, "position", new Value(this.props.open ? this.initialDrawerWidth * (this.props.drawerPosition === "right" ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));
    _defineProperty60(this, "containerWidth", new Value(this.props.dimensions.width));
    _defineProperty60(this, "drawerWidth", new Value(this.initialDrawerWidth));
    _defineProperty60(this, "drawerOpacity", new Value(this.props.drawerType === "permanent" ? 1 : 0));
    _defineProperty60(this, "drawerPosition", new Value(this.props.drawerPosition === "right" ? DIRECTION_RIGHT : DIRECTION_LEFT));
    _defineProperty60(this, "touchDistanceFromDrawer", cond2(this.isDrawerTypeFront, cond2(eq2(this.drawerPosition, DIRECTION_LEFT), max2(sub2(sub2(this.touchX, this.gestureX), this.drawerWidth), 0), min2(multiply6(sub2(sub2(this.containerWidth, this.drawerWidth), sub2(this.touchX, this.gestureX)), DIRECTION_RIGHT), 0)), 0));
    _defineProperty60(this, "swipeDistanceThreshold", new Value(this.props.swipeDistanceThreshold !== void 0 ? this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT));
    _defineProperty60(this, "swipeVelocityThreshold", new Value(this.props.swipeVelocityThreshold));
    _defineProperty60(this, "currentOpenValue", this.props.open);
    _defineProperty60(this, "pendingOpenValue", void 0);
    _defineProperty60(this, "isStatusBarHidden", false);
    _defineProperty60(this, "manuallyTriggerSpring", new Value(FALSE2));
    _defineProperty60(this, "transitionTo", (isOpen) => {
      const toValue = new Value(0);
      const frameTime = new Value(0);
      const state = {
        position: this.position,
        time: new Value(0),
        finished: new Value(FALSE2),
        velocity: new Value(0)
      };
      return block([cond2(clockRunning(this.clock), NOOP, [
        set2(toValue, multiply6(isOpen, this.drawerWidth, this.drawerPosition)),
        set2(frameTime, 0),
        set2(state.time, 0),
        set2(state.finished, FALSE2),
        set2(state.velocity, this.velocityX),
        set2(this.isOpen, isOpen),
        startClock(this.clock),
        call([], this.handleStartInteraction),
        set2(this.manuallyTriggerSpring, FALSE2)
      ]), spring4(this.clock, state, {
        ...SPRING_CONFIG,
        toValue
      }), cond2(state.finished, [
        set2(this.touchX, 0),
        set2(this.gestureX, 0),
        set2(this.velocityX, 0),
        set2(this.offsetX, 0),
        stopClock(this.clock),
        call([this.isOpen], ([value]) => {
          const open3 = Boolean(value);
          this.handleEndInteraction();
          if (open3 !== this.props.open) {
            this.toggleDrawer(this.props.open);
          }
        })
      ])]);
    });
    _defineProperty60(this, "dragX", block([
      onChange2(this.isOpen, call([this.isOpen], ([value]) => {
        const open3 = Boolean(value);
        this.currentOpenValue = open3;
        if (open3 !== this.props.open) {
          if (open3) {
            this.props.onOpen();
          } else {
            this.props.onClose();
          }
          this.pendingOpenValue = open3;
          this.forceUpdate();
        }
      })),
      onChange2(this.nextIsOpen, cond2(neq2(this.nextIsOpen, UNSET), [
        cond2(clockRunning(this.clock), stopClock(this.clock)),
        set2(this.isOpen, this.nextIsOpen),
        set2(this.gestureX, 0),
        set2(this.nextIsOpen, UNSET)
      ])),
      onChange2(this.isSwiping, call([this.isSwiping], ([value]) => {
        const {
          keyboardDismissMode
        } = this.props;
        if (value === TRUE2) {
          if (keyboardDismissMode === "on-drag") {
            Keyboard_default.dismiss();
          }
          this.toggleStatusBar(true);
        } else {
          this.toggleStatusBar(this.currentOpenValue);
        }
      })),
      onChange2(this.gestureState, cond2(eq2(this.gestureState, GestureState2.ACTIVE), call([], this.handleStartInteraction))),
      cond2(eq2(this.gestureState, GestureState2.ACTIVE), [
        cond2(this.isSwiping, NOOP, [
          set2(this.isSwiping, TRUE2),
          set2(this.offsetX, this.position)
        ]),
        set2(this.position, add7(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)),
        stopClock(this.clock)
      ], [set2(this.isSwiping, FALSE2), set2(this.touchX, 0), this.transitionTo(cond2(this.manuallyTriggerSpring, this.isOpen, cond2(or2(and2(greaterThan3(abs2(this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan3(abs2(this.velocityX), this.swipeVelocityThreshold)), greaterThan3(abs2(this.gestureX), this.swipeDistanceThreshold)), cond2(eq2(this.drawerPosition, DIRECTION_LEFT), greaterThan3(cond2(eq2(this.velocityX, 0), this.gestureX, this.velocityX), 0), lessThan2(cond2(eq2(this.velocityX, 0), this.gestureX, this.velocityX), 0)), this.isOpen)))]),
      this.position
    ]));
    _defineProperty60(this, "translateX", cond2(eq2(this.drawerPosition, DIRECTION_RIGHT), min2(max2(multiply6(this.drawerWidth, -1), this.dragX), 0), max2(min2(this.drawerWidth, this.dragX), 0)));
    _defineProperty60(this, "progress", cond2(eq2(this.drawerWidth, 0), 0, abs2(divide4(this.translateX, this.drawerWidth))));
    _defineProperty60(this, "handleGestureEvent", event3([{
      nativeEvent: {
        x: this.touchX,
        translationX: this.gestureX,
        velocityX: this.velocityX
      }
    }]));
    _defineProperty60(this, "handleGestureStateChange", event3([{
      nativeEvent: {
        state: (s) => set2(this.gestureState, s)
      }
    }]));
    _defineProperty60(this, "handleTapStateChange", event3([{
      nativeEvent: {
        oldState: (s) => cond2(eq2(s, GestureState2.ACTIVE), set2(this.manuallyTriggerSpring, TRUE2))
      }
    }]));
    _defineProperty60(this, "handleContainerLayout", (e) => this.containerWidth.setValue(e.nativeEvent.layout.width));
    _defineProperty60(this, "handleDrawerLayout", (e) => {
      this.drawerWidth.setValue(e.nativeEvent.layout.width);
      this.toggleDrawer(this.props.open);
      requestAnimationFrame(() => requestAnimationFrame(() => this.drawerOpacity.setValue(1)));
    });
    _defineProperty60(this, "toggleDrawer", (open3) => {
      if (this.currentOpenValue !== open3) {
        this.nextIsOpen.setValue(open3 ? TRUE2 : FALSE2);
        this.currentOpenValue = open3;
      }
    });
    _defineProperty60(this, "toggleStatusBar", (hidden) => {
      const {
        hideStatusBar,
        statusBarAnimation
      } = this.props;
      if (hideStatusBar && this.isStatusBarHidden !== hidden) {
        this.isStatusBarHidden = hidden;
        StatusBar_default.setHidden(hidden, statusBarAnimation);
      }
    });
  }
  componentDidMount() {
    if (Platform_default.OS === "web") {
      var _document, _document$body, _document$body$addEve;
      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, "keyup", this.handleEscape);
    }
  }
  componentDidUpdate(prevProps) {
    const {
      open: open3,
      drawerPosition,
      drawerType,
      swipeDistanceThreshold,
      swipeVelocityThreshold,
      hideStatusBar
    } = this.props;
    if (typeof this.pendingOpenValue !== "boolean" || open3 !== this.pendingOpenValue) {
      this.toggleDrawer(open3);
    }
    this.pendingOpenValue = void 0;
    if (open3 !== prevProps.open && hideStatusBar) {
      this.toggleStatusBar(open3);
    }
    if (prevProps.drawerPosition !== drawerPosition) {
      this.drawerPosition.setValue(drawerPosition === "right" ? DIRECTION_RIGHT : DIRECTION_LEFT);
    }
    if (prevProps.drawerType !== drawerType) {
      this.isDrawerTypeFront.setValue(drawerType === "front" ? TRUE2 : FALSE2);
    }
    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {
      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== void 0 ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);
    }
    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {
      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);
    }
  }
  componentWillUnmount() {
    this.toggleStatusBar(false);
    this.handleEndInteraction();
    if (Platform_default.OS === "web") {
      var _document2, _document2$body, _document2$body$remov;
      (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, "keyup", this.handleEscape);
    }
  }
  render() {
    const {
      open: open3,
      gestureEnabled,
      swipeEnabled,
      drawerPosition,
      drawerType,
      swipeEdgeWidth,
      sceneContainerStyle,
      drawerStyle,
      overlayStyle: overlayStyle2,
      renderDrawerContent,
      renderSceneContent,
      gestureHandlerProps
    } = this.props;
    const isOpen = drawerType === "permanent" ? true : open3;
    const isRight = drawerPosition === "right";
    const contentTranslateX = drawerType === "front" || drawerType === "permanent" ? ANIMATED_ZERO : this.translateX;
    const drawerTranslateX = drawerType === "permanent" ? ANIMATED_ZERO : drawerType === "back" ? I18nManager_default.isRTL ? multiply6(sub2(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;
    const offset = drawerType === "back" ? 0 : I18nManager_default.isRTL ? "100%" : multiply6(this.drawerWidth, -1);
    const hitSlop = isRight ? {
      right: 0,
      width: isOpen ? void 0 : swipeEdgeWidth
    } : {
      left: 0,
      width: isOpen ? void 0 : swipeEdgeWidth
    };
    const progress = drawerType === "permanent" ? ANIMATED_ONE : this.progress;
    return /* @__PURE__ */ React234.createElement(PanGestureHandler2, _extends97({
      activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],
      failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],
      onGestureEvent: this.handleGestureEvent,
      onHandlerStateChange: this.handleGestureStateChange,
      hitSlop,
      enabled: drawerType !== "permanent" && gestureEnabled && swipeEnabled
    }, gestureHandlerProps), /* @__PURE__ */ React234.createElement(Animated_default2.View, {
      onLayout: this.handleContainerLayout,
      style: [styles116.main, {
        flexDirection: drawerType === "permanent" && !isRight ? "row-reverse" : "row"
      }]
    }, /* @__PURE__ */ React234.createElement(Animated_default2.View, {
      style: [styles116.content, {
        transform: [{
          translateX: contentTranslateX
        }]
      }, sceneContainerStyle]
    }, /* @__PURE__ */ React234.createElement(View_default, {
      accessibilityElementsHidden: isOpen && drawerType !== "permanent",
      importantForAccessibility: isOpen && drawerType !== "permanent" ? "no-hide-descendants" : "auto",
      style: styles116.content
    }, renderSceneContent({
      progress
    })), drawerType === "permanent" ? null : Platform_default.OS === "web" || Platform_default.OS === "windows" || Platform_default.OS === "macos" ? /* @__PURE__ */ React234.createElement(TouchableWithoutFeedback_default, {
      onPress: gestureEnabled ? () => this.toggleDrawer(false) : void 0
    }, /* @__PURE__ */ React234.createElement(Overlay_default, {
      progress,
      style: overlayStyle2
    })) : /* @__PURE__ */ React234.createElement(TapGestureHandler, {
      enabled: gestureEnabled,
      onHandlerStateChange: this.handleTapStateChange
    }, /* @__PURE__ */ React234.createElement(Overlay_default, {
      progress,
      style: overlayStyle2
    }))), /* @__PURE__ */ React234.createElement(Animated_default2.Code, {
      exec: this.containerWidth
    }), drawerType === "permanent" ? null : /* @__PURE__ */ React234.createElement(Animated_default2.Code, {
      exec: block([onChange2(this.manuallyTriggerSpring, [cond2(eq2(this.manuallyTriggerSpring, TRUE2), [set2(this.nextIsOpen, FALSE2), call([], () => this.currentOpenValue = false)])])])
    }), /* @__PURE__ */ React234.createElement(Animated_default2.View, {
      accessibilityViewIsModal: isOpen && drawerType !== "permanent",
      removeClippedSubviews: Platform_default.OS !== "ios",
      onLayout: this.handleDrawerLayout,
      style: [styles116.container, {
        transform: [{
          translateX: drawerTranslateX
        }],
        opacity: this.drawerOpacity
      }, drawerType === "permanent" ? isRight ? {
        right: 0
      } : {
        left: 0
      } : [styles116.nonPermanent, isRight ? {
        right: offset
      } : {
        left: offset
      }, {
        zIndex: drawerType === "back" ? -1 : 0
      }], drawerStyle]
    }, renderDrawerContent({
      progress
    }))));
  }
};
var Drawer_default = DrawerView;
_defineProperty60(DrawerView, "defaultProps", {
  drawerPosition: I18nManager_default.isRTL ? "left" : "right",
  drawerType: "front",
  gestureEnabled: true,
  swipeEnabled: Platform_default.OS !== "web" && Platform_default.OS !== "windows" && Platform_default.OS !== "macos",
  swipeEdgeWidth: 32,
  swipeVelocityThreshold: 500,
  keyboardDismissMode: "on-drag",
  hideStatusBar: false,
  statusBarAnimation: "slide"
});
var styles116 = StyleSheet_default2.create({
  container: {
    backgroundColor: "white",
    maxWidth: "100%"
  },
  nonPermanent: {
    position: "absolute",
    top: 0,
    bottom: 0,
    width: DEFAULT_DRAWER_WIDTH
  },
  content: {
    flex: 1
  },
  main: {
    flex: 1,
    ...Platform_default.select({
      web: null,
      default: {
        overflow: "hidden"
      }
    })
  }
});

// node_modules/@react-navigation/drawer/lib/module/utils/DrawerOpenContext.js
var React235 = __toModule(require_react());
var DrawerOpenContext = /* @__PURE__ */ React235.createContext(null);
var DrawerOpenContext_default = DrawerOpenContext;

// node_modules/@react-navigation/drawer/lib/module/utils/useWindowDimensions.js
var React236 = __toModule(require_react());
function useWindowDimensions() {
  const [dimensions2, setDimensions] = React236.useState(() => {
    const {
      height = 0,
      width = 0
    } = Dimensions.get("window");
    return {
      height,
      width
    };
  });
  React236.useEffect(() => {
    const onChange3 = ({
      window: window2
    }) => {
      const {
        width,
        height
      } = window2;
      setDimensions((d) => {
        if (width === d.width && height === d.height) {
          return d;
        }
        return {
          width,
          height
        };
      });
    };
    onChange3({
      window: Dimensions.get("window")
    });
    Dimensions.addEventListener("change", onChange3);
    return () => Dimensions.removeEventListener("change", onChange3);
  }, []);
  return dimensions2;
}

// node_modules/@react-navigation/drawer/lib/module/utils/getIsDrawerOpenFromState.js
function getIsDrawerOpenFromState(state) {
  if (state.history == null) {
    throw new Error("Couldn't find the drawer status in the state object. Is it a valid state object of drawer navigator?");
  }
  return state.history.some((it) => it.type === "drawer");
}

// node_modules/@react-navigation/drawer/lib/module/views/DrawerView.js
var getDefaultDrawerWidth = ({
  height,
  width
}) => {
  const smallerAxisSize = Math.min(height, width);
  const isLandscape = width > height;
  const isTablet = smallerAxisSize >= 600;
  const appBarHeight = Platform_default.OS === "ios" ? isLandscape ? 32 : 44 : 56;
  const maxWidth2 = isTablet ? 320 : 280;
  return Math.min(smallerAxisSize - appBarHeight, maxWidth2);
};
var GestureHandlerWrapper2 = GestureHandlerRootView2 !== null && GestureHandlerRootView2 !== void 0 ? GestureHandlerRootView2 : View_default;
function DrawerView2({
  state,
  navigation: navigation2,
  descriptors,
  lazy = true,
  drawerContent = (props) => /* @__PURE__ */ React237.createElement(DrawerContent, props),
  drawerPosition = I18nManager_default.isRTL ? "right" : "left",
  keyboardDismissMode = "on-drag",
  overlayColor = "rgba(0, 0, 0, 0.5)",
  drawerType = "front",
  hideStatusBar = false,
  statusBarAnimation = "slide",
  drawerContentOptions,
  drawerStyle,
  edgeWidth,
  gestureHandlerProps,
  minSwipeDistance,
  sceneContainerStyle,
  detachInactiveScreens = true
}) {
  const [loaded2, setLoaded] = React237.useState([state.routes[state.index].key]);
  const dimensions2 = useWindowDimensions();
  const {
    colors
  } = useTheme2();
  const isDrawerOpen2 = getIsDrawerOpenFromState(state);
  const handleDrawerOpen = React237.useCallback(() => {
    navigation2.dispatch({
      ...DrawerActions.openDrawer(),
      target: state.key
    });
  }, [navigation2, state.key]);
  const handleDrawerClose = React237.useCallback(() => {
    navigation2.dispatch({
      ...DrawerActions.closeDrawer(),
      target: state.key
    });
  }, [navigation2, state.key]);
  React237.useEffect(() => {
    if (isDrawerOpen2) {
      navigation2.emit({
        type: "drawerOpen"
      });
    } else {
      navigation2.emit({
        type: "drawerClose"
      });
    }
  }, [isDrawerOpen2, navigation2]);
  React237.useEffect(() => {
    let subscription;
    if (isDrawerOpen2) {
      subscription = BackHandler_default.addEventListener("hardwareBackPress", () => {
        handleDrawerClose();
        return true;
      });
    }
    return () => {
      var _subscription;
      return (_subscription = subscription) === null || _subscription === void 0 ? void 0 : _subscription.remove();
    };
  }, [handleDrawerClose, isDrawerOpen2, navigation2, state.key]);
  const focusedRouteKey = state.routes[state.index].key;
  if (!loaded2.includes(focusedRouteKey)) {
    setLoaded([...loaded2, focusedRouteKey]);
  }
  const renderNavigationView = ({
    progress
  }) => {
    return /* @__PURE__ */ React237.createElement(DrawerPositionContext_default.Provider, {
      value: drawerPosition
    }, drawerContent({
      ...drawerContentOptions,
      progress,
      state,
      navigation: navigation2,
      descriptors
    }));
  };
  const renderContent = () => {
    return /* @__PURE__ */ React237.createElement(import_react_native_screens2.ScreenContainer, {
      enabled: detachInactiveScreens,
      style: styles117.content
    }, state.routes.map((route, index) => {
      const descriptor = descriptors[route.key];
      const {
        unmountOnBlur
      } = descriptor.options;
      const isFocused = state.index === index;
      if (unmountOnBlur && !isFocused) {
        return null;
      }
      if (lazy && !loaded2.includes(route.key) && !isFocused) {
        return null;
      }
      const {
        header: header2 = (props) => /* @__PURE__ */ React237.createElement(HeaderSegment2, props),
        headerShown = false
      } = descriptor.options;
      return /* @__PURE__ */ React237.createElement(ResourceSavingScene, {
        key: route.key,
        style: [StyleSheet_default2.absoluteFill, {
          opacity: isFocused ? 1 : 0
        }],
        isVisible: isFocused,
        enabled: detachInactiveScreens
      }, headerShown ? /* @__PURE__ */ React237.createElement(NavigationContext_default.Provider, {
        value: descriptor.navigation
      }, /* @__PURE__ */ React237.createElement(NavigationRouteContext_default.Provider, {
        value: route
      }, header2({
        layout: dimensions2,
        scene: {
          route,
          descriptor
        }
      }))) : null, descriptor.render());
    }));
  };
  const activeKey = state.routes[state.index].key;
  const {
    gestureEnabled,
    swipeEnabled
  } = descriptors[activeKey].options;
  return /* @__PURE__ */ React237.createElement(NavigationHelpersContext_default.Provider, {
    value: navigation2
  }, /* @__PURE__ */ React237.createElement(GestureHandlerWrapper2, {
    style: styles117.content
  }, /* @__PURE__ */ React237.createElement(SafeAreaProviderCompat2, null, /* @__PURE__ */ React237.createElement(DrawerOpenContext_default.Provider, {
    value: isDrawerOpen2
  }, /* @__PURE__ */ React237.createElement(Drawer_default, {
    open: isDrawerOpen2,
    gestureEnabled,
    swipeEnabled,
    onOpen: handleDrawerOpen,
    onClose: handleDrawerClose,
    gestureHandlerProps,
    drawerType,
    drawerPosition,
    sceneContainerStyle: [{
      backgroundColor: colors.background
    }, sceneContainerStyle],
    drawerStyle: [{
      width: getDefaultDrawerWidth(dimensions2),
      backgroundColor: colors.card
    }, drawerType === "permanent" && (drawerPosition === "left" ? {
      borderRightColor: colors.border,
      borderRightWidth: StyleSheet_default2.hairlineWidth
    } : {
      borderLeftColor: colors.border,
      borderLeftWidth: StyleSheet_default2.hairlineWidth
    }), drawerStyle],
    overlayStyle: {
      backgroundColor: overlayColor
    },
    swipeEdgeWidth: edgeWidth,
    swipeDistanceThreshold: minSwipeDistance,
    hideStatusBar,
    statusBarAnimation,
    renderDrawerContent: renderNavigationView,
    renderSceneContent: renderContent,
    keyboardDismissMode,
    dimensions: dimensions2
  })))));
}
var styles117 = StyleSheet_default2.create({
  content: {
    flex: 1
  }
});

// node_modules/@react-navigation/drawer/lib/module/navigators/createDrawerNavigator.js
function _extends98() {
  _extends98 = Object.assign || function(target2) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target2[key3] = source[key3];
        }
      }
    }
    return target2;
  };
  return _extends98.apply(this, arguments);
}
function DrawerNavigator({
  initialRouteName,
  openByDefault,
  backBehavior,
  children,
  screenOptions,
  ...rest
}) {
  const {
    state,
    descriptors,
    navigation: navigation2
  } = useNavigationBuilder(DrawerRouter, {
    initialRouteName,
    openByDefault,
    backBehavior,
    children,
    screenOptions
  });
  return /* @__PURE__ */ React238.createElement(DrawerView2, _extends98({}, rest, {
    state,
    descriptors,
    navigation: navigation2
  }));
}
var createDrawerNavigator_default = createNavigatorFactory(DrawerNavigator);

// src/screens/DrawerContent.tsx
var import_react62 = __toModule(require_react());
function DrawerContent2(props) {
  const theme2 = useTheme();
  const {toggleTheme} = import_react62.default.useContext(ThemeContext2);
  const translateX = Animated_default2.interpolate(props.progress, {
    inputRange: [0, 0.5, 0.7, 0.8, 1],
    outputRange: [-100, -85, -70, -45, 0]
  });
  return /* @__PURE__ */ import_react62.default.createElement(DrawerContentScrollView, {
    ...props
  }, /* @__PURE__ */ import_react62.default.createElement(Animated_default2.View, {
    style: [
      styles118.drawerContent,
      {
        backgroundColor: theme2.colors.surface,
        transform: [{translateX}]
      }
    ]
  }, /* @__PURE__ */ import_react62.default.createElement(View_default, {
    style: styles118.userInfoSection
  }, /* @__PURE__ */ import_react62.default.createElement(Pressable_default, {
    style: ({pressed}) => [{marginLeft: 10, opacity: pressed ? 0.6 : 1}],
    onPress: () => {
      props.navigation.toggleDrawer();
    }
  }, /* @__PURE__ */ import_react62.default.createElement(Avatar_exports.Image, {
    source: {
      uri: "https://pbs.twimg.com/profile_images/952545910990495744/b59hSXUd_400x400.jpg"
    },
    size: 50
  })), /* @__PURE__ */ import_react62.default.createElement(Title_default, {
    style: styles118.title
  }, "Dawid Urbaniak"), /* @__PURE__ */ import_react62.default.createElement(Caption_default, {
    style: styles118.caption
  }, "@trensik"), /* @__PURE__ */ import_react62.default.createElement(View_default, {
    style: styles118.row
  }, /* @__PURE__ */ import_react62.default.createElement(View_default, {
    style: styles118.section
  }, /* @__PURE__ */ import_react62.default.createElement(Paragraph_default, {
    style: [styles118.paragraph, styles118.caption]
  }, "202"), /* @__PURE__ */ import_react62.default.createElement(Caption_default, {
    style: styles118.caption
  }, "Obserwuje")), /* @__PURE__ */ import_react62.default.createElement(View_default, {
    style: styles118.section
  }, /* @__PURE__ */ import_react62.default.createElement(Paragraph_default, {
    style: [styles118.paragraph, styles118.caption]
  }, "159"), /* @__PURE__ */ import_react62.default.createElement(Caption_default, {
    style: styles118.caption
  }, "Obserwuj\u0105cy")))), /* @__PURE__ */ import_react62.default.createElement(Drawer_exports.Section, {
    style: styles118.drawerSection
  }, /* @__PURE__ */ import_react62.default.createElement(DrawerItem2, {
    icon: ({color: color39, size}) => /* @__PURE__ */ import_react62.default.createElement(MaterialCommunityIcons_default3, {
      name: "account-outline",
      color: color39,
      size
    }),
    label: "Profile",
    onPress: () => {
    }
  }), /* @__PURE__ */ import_react62.default.createElement(DrawerItem2, {
    icon: ({color: color39, size}) => /* @__PURE__ */ import_react62.default.createElement(MaterialCommunityIcons_default3, {
      name: "tune",
      color: color39,
      size
    }),
    label: "Preferences",
    onPress: () => {
    }
  }), /* @__PURE__ */ import_react62.default.createElement(DrawerItem2, {
    icon: ({color: color39, size}) => /* @__PURE__ */ import_react62.default.createElement(MaterialCommunityIcons_default3, {
      name: "bookmark-outline",
      color: color39,
      size
    }),
    label: "Bookmarks",
    onPress: () => {
    }
  })), /* @__PURE__ */ import_react62.default.createElement(Drawer_exports.Section, {
    title: "Preferences"
  }, /* @__PURE__ */ import_react62.default.createElement(TouchableRipple_default, {
    onPress: toggleTheme
  }, /* @__PURE__ */ import_react62.default.createElement(View_default, {
    style: styles118.preference
  }, /* @__PURE__ */ import_react62.default.createElement(Text_default2, null, "Dark Theme"), /* @__PURE__ */ import_react62.default.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ import_react62.default.createElement(Switch_default2, {
    value: theme2.dark
  })))))));
}
var styles118 = StyleSheet_default2.create({
  drawerContent: {
    flex: 1
  },
  userInfoSection: {
    paddingLeft: 20
  },
  title: {
    marginTop: 20,
    fontWeight: "bold"
  },
  caption: {
    fontSize: 14,
    lineHeight: 14
  },
  row: {
    marginTop: 20,
    flexDirection: "row",
    alignItems: "center"
  },
  section: {
    flexDirection: "row",
    alignItems: "center",
    marginRight: 15
  },
  paragraph: {
    fontWeight: "bold",
    marginRight: 3
  },
  drawerSection: {
    marginTop: 15
  },
  preference: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingVertical: 12,
    paddingHorizontal: 16
  }
});

// src/navigators/Stack.tsx
var import_react63 = __toModule(require_react());
var Stack = createStackNavigator_default();
var StackNavigator2 = () => {
  const theme2 = useTheme();
  return /* @__PURE__ */ import_react63.default.createElement(Stack.Navigator, {
    initialRouteName: "FeedList",
    headerMode: "screen",
    screenOptions: {
      header: ({scene, previous, navigation: navigation2}) => {
        const {options} = scene.descriptor;
        const title = options.headerTitle !== void 0 ? options.headerTitle : options.title !== void 0 ? options.title : scene.route.name;
        return /* @__PURE__ */ import_react63.default.createElement(Appbar_default2.Header, {
          theme: {colors: {primary: theme2.colors.surface}}
        }, /* @__PURE__ */ import_react63.default.createElement(Pressable_default, {
          style: ({pressed}) => [{marginLeft: 10, opacity: pressed ? 0.6 : 1}],
          onPress: () => navigation2.openDrawer()
        }, /* @__PURE__ */ import_react63.default.createElement(Avatar_exports.Icon, {
          size: 40,
          icon: "menu"
        })), /* @__PURE__ */ import_react63.default.createElement(Appbar_default2.Content, {
          title,
          titleStyle: {
            fontSize: 18,
            fontWeight: "bold",
            color: theme2.colors.primary
          }
        }));
      }
    }
  }, /* @__PURE__ */ import_react63.default.createElement(Stack.Screen, {
    name: "Details",
    component: Dashboard_default,
    options: {headerTitle: "Dashboard!"}
  }));
};

// src/navigators/Drawer.tsx
var Drawer = createDrawerNavigator_default();
var DrawerNavigator2 = () => {
  return /* @__PURE__ */ import_react64.default.createElement(Drawer.Navigator, {
    drawerContent: (props) => /* @__PURE__ */ import_react64.default.createElement(DrawerContent2, {
      ...props
    })
  }, /* @__PURE__ */ import_react64.default.createElement(Drawer.Screen, {
    name: "Home",
    component: StackNavigator2
  }));
};

// src/navigators/Example.tsx
var React281 = __toModule(require_react());

// src/rnpex/ExampleList.tsx
var React280 = __toModule(require_react());

// src/rnpex/Examples/ActivityIndicatorExample.tsx
var React242 = __toModule(require_react());
var ActivityIndicatorExample = () => {
  const [animating, setAnimating] = React242.useState(true);
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React242.createElement(View_default, {
    style: [styles119.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React242.createElement(View_default, {
    style: styles119.row
  }, /* @__PURE__ */ React242.createElement(FAB_default2, {
    small: true,
    icon: animating ? "pause" : "play",
    onPress: () => setAnimating(!animating)
  })), /* @__PURE__ */ React242.createElement(View_default, {
    style: styles119.row
  }, /* @__PURE__ */ React242.createElement(ActivityIndicator_default2, {
    animating
  })), /* @__PURE__ */ React242.createElement(View_default, {
    style: styles119.row
  }, /* @__PURE__ */ React242.createElement(ActivityIndicator_default2, {
    animating,
    hidesWhenStopped: false
  })), /* @__PURE__ */ React242.createElement(View_default, {
    style: styles119.row
  }, /* @__PURE__ */ React242.createElement(ActivityIndicator_default2, {
    animating,
    size: "large"
  })), /* @__PURE__ */ React242.createElement(View_default, {
    style: styles119.row
  }, /* @__PURE__ */ React242.createElement(ActivityIndicator_default2, {
    animating,
    color: colors_exports.red500
  })));
};
ActivityIndicatorExample.title = "Activity Indicator";
var styles119 = StyleSheet_default2.create({
  container: {
    flex: 1,
    padding: 4
  },
  row: {
    justifyContent: "center",
    alignItems: "center",
    margin: 10
  }
});
var ActivityIndicatorExample_default = ActivityIndicatorExample;

// src/rnpex/Examples/AppbarExample.tsx
var React243 = __toModule(require_react());
var MORE_ICON = Platform_default.OS === "ios" ? "dots-horizontal" : "dots-vertical";
var AppbarExample = ({navigation: navigation2}) => {
  const {colors} = useTheme();
  const [showLeftIcon, setShowLeftIcon] = React243.useState(true);
  const [showSubtitle, setShowSubtitle] = React243.useState(true);
  const [showSearchIcon, setShowSearchIcon] = React243.useState(true);
  const [showMoreIcon, setShowMoreIcon] = React243.useState(true);
  const [showCustomColor, setShowCustomColor] = React243.useState(false);
  const [showExactTheme, setShowExactTheme] = React243.useState(false);
  React243.useLayoutEffect(() => {
    navigation2.setOptions({
      header: () => /* @__PURE__ */ React243.createElement(Appbar_default2.Header, {
        style: showCustomColor ? {backgroundColor: "#ffff00"} : null,
        theme: {
          mode: showExactTheme ? "exact" : "adaptive"
        }
      }, showLeftIcon && /* @__PURE__ */ React243.createElement(Appbar_default2.BackAction, {
        onPress: () => navigation2.goBack()
      }), /* @__PURE__ */ React243.createElement(Appbar_default2.Content, {
        title: "Title",
        subtitle: showSubtitle ? "Subtitle" : null
      }), showSearchIcon && /* @__PURE__ */ React243.createElement(Appbar_default2.Action, {
        icon: "magnify",
        onPress: () => {
        }
      }), showMoreIcon && /* @__PURE__ */ React243.createElement(Appbar_default2.Action, {
        icon: MORE_ICON,
        onPress: () => {
        }
      }))
    });
  }, [
    navigation2,
    showLeftIcon,
    showSubtitle,
    showSearchIcon,
    showMoreIcon,
    showCustomColor,
    showExactTheme
  ]);
  return /* @__PURE__ */ React243.createElement(View_default, {
    style: [styles120.container, {backgroundColor: colors.background}]
  }, /* @__PURE__ */ React243.createElement(View_default, {
    style: styles120.row
  }, /* @__PURE__ */ React243.createElement(Paragraph_default, null, "Left icon"), /* @__PURE__ */ React243.createElement(Switch_default2, {
    value: showLeftIcon,
    onValueChange: setShowLeftIcon
  })), /* @__PURE__ */ React243.createElement(View_default, {
    style: styles120.row
  }, /* @__PURE__ */ React243.createElement(Paragraph_default, null, "Subtitle"), /* @__PURE__ */ React243.createElement(Switch_default2, {
    value: showSubtitle,
    onValueChange: setShowSubtitle
  })), /* @__PURE__ */ React243.createElement(View_default, {
    style: styles120.row
  }, /* @__PURE__ */ React243.createElement(Paragraph_default, null, "Search icon"), /* @__PURE__ */ React243.createElement(Switch_default2, {
    value: showSearchIcon,
    onValueChange: setShowSearchIcon
  })), /* @__PURE__ */ React243.createElement(View_default, {
    style: styles120.row
  }, /* @__PURE__ */ React243.createElement(Paragraph_default, null, "More icon"), /* @__PURE__ */ React243.createElement(Switch_default2, {
    value: showMoreIcon,
    onValueChange: setShowMoreIcon
  })), /* @__PURE__ */ React243.createElement(View_default, {
    style: styles120.row
  }, /* @__PURE__ */ React243.createElement(Paragraph_default, null, "Custom Color"), /* @__PURE__ */ React243.createElement(Switch_default2, {
    value: showCustomColor,
    onValueChange: setShowCustomColor
  })), /* @__PURE__ */ React243.createElement(View_default, {
    style: styles120.row
  }, /* @__PURE__ */ React243.createElement(Paragraph_default, null, "Exact Dark Theme"), /* @__PURE__ */ React243.createElement(Switch_default2, {
    value: showExactTheme,
    onValueChange: setShowExactTheme
  })), /* @__PURE__ */ React243.createElement(Appbar_default2, {
    style: [styles120.bottom],
    theme: {mode: showExactTheme ? "exact" : "adaptive"}
  }, /* @__PURE__ */ React243.createElement(Appbar_default2.Action, {
    icon: "archive",
    onPress: () => {
    }
  }), /* @__PURE__ */ React243.createElement(Appbar_default2.Action, {
    icon: "email",
    onPress: () => {
    }
  }), /* @__PURE__ */ React243.createElement(Appbar_default2.Action, {
    icon: "label",
    onPress: () => {
    }
  }), /* @__PURE__ */ React243.createElement(Appbar_default2.Action, {
    icon: "delete",
    onPress: () => {
    }
  })), /* @__PURE__ */ React243.createElement(FAB_default2, {
    icon: "reply",
    onPress: () => {
    },
    style: styles120.fab
  }));
};
AppbarExample.title = "Appbar";
var AppbarExample_default = AppbarExample;
var styles120 = StyleSheet_default2.create({
  container: {
    flex: 1,
    backgroundColor: colors_exports.white,
    paddingVertical: 8
  },
  row: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingVertical: 8,
    paddingHorizontal: 16
  },
  bottom: {
    position: "absolute",
    left: 0,
    right: 0,
    bottom: 0
  },
  fab: {
    position: "absolute",
    right: 16,
    bottom: 28
  }
});

// src/rnpex/Examples/AvatarExample.tsx
var React244 = __toModule(require_react());
var AvatarExample = () => {
  const {colors} = useTheme();
  return /* @__PURE__ */ React244.createElement(ScrollView_default, {
    style: [styles121.container, {backgroundColor: colors.surface}]
  }, /* @__PURE__ */ React244.createElement(List_exports.Section, {
    title: "Text"
  }, /* @__PURE__ */ React244.createElement(View_default, {
    style: styles121.row
  }, /* @__PURE__ */ React244.createElement(Avatar_exports.Text, {
    style: [styles121.avatar, {backgroundColor: colors_exports.yellow500}],
    label: "XD",
    color: colors_exports.black
  }), /* @__PURE__ */ React244.createElement(Avatar_exports.Text, {
    style: styles121.avatar,
    label: "XD"
  }), /* @__PURE__ */ React244.createElement(Avatar_exports.Text, {
    style: styles121.avatar,
    label: "XD",
    size: 80
  }))), /* @__PURE__ */ React244.createElement(List_exports.Section, {
    title: "Icon"
  }, /* @__PURE__ */ React244.createElement(View_default, {
    style: styles121.row
  }, /* @__PURE__ */ React244.createElement(Avatar_exports.Icon, {
    style: [styles121.avatar, {backgroundColor: colors_exports.yellow500}],
    icon: "folder",
    color: colors_exports.black
  }), /* @__PURE__ */ React244.createElement(Avatar_exports.Icon, {
    style: styles121.avatar,
    icon: "folder"
  }), /* @__PURE__ */ React244.createElement(Avatar_exports.Icon, {
    style: styles121.avatar,
    icon: "folder",
    size: 80
  }))), /* @__PURE__ */ React244.createElement(List_exports.Section, {
    title: "Image"
  }, /* @__PURE__ */ React244.createElement(View_default, {
    style: styles121.row
  }, /* @__PURE__ */ React244.createElement(Avatar_exports.Image, {
    style: styles121.avatar,
    source: require_avatar()
  }), /* @__PURE__ */ React244.createElement(Avatar_exports.Image, {
    style: styles121.avatar,
    source: require_avatar(),
    size: 80
  }))));
};
AvatarExample.title = "Avatar";
var styles121 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  row: {
    flexDirection: "row",
    flexWrap: "wrap",
    alignItems: "center",
    margin: 8
  },
  avatar: {
    margin: 8
  }
});
var AvatarExample_default = AvatarExample;

// src/rnpex/Examples/BadgeExample.tsx
var React245 = __toModule(require_react());
var BadgeExample = () => {
  const [visible, setVisible] = React245.useState(true);
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React245.createElement(View_default, {
    style: [styles122.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React245.createElement(View_default, {
    style: [styles122.row, styles122.item]
  }, /* @__PURE__ */ React245.createElement(Paragraph_default, {
    style: styles122.label
  }, "Show badges"), /* @__PURE__ */ React245.createElement(Switch_default2, {
    value: visible,
    onValueChange: (visible2) => setVisible(visible2)
  })), /* @__PURE__ */ React245.createElement(List_exports.Section, {
    title: "Text"
  }, /* @__PURE__ */ React245.createElement(View_default, {
    style: styles122.row
  }, /* @__PURE__ */ React245.createElement(View_default, {
    style: styles122.item
  }, /* @__PURE__ */ React245.createElement(IconButton_default, {
    icon: "palette-swatch",
    size: 36,
    style: styles122.button
  }), /* @__PURE__ */ React245.createElement(Badge_default, {
    visible,
    style: styles122.badge
  }, "12")), /* @__PURE__ */ React245.createElement(View_default, {
    style: styles122.item
  }, /* @__PURE__ */ React245.createElement(IconButton_default, {
    icon: "inbox",
    size: 36,
    style: styles122.button
  }), /* @__PURE__ */ React245.createElement(Badge_default, {
    visible,
    style: [styles122.badge, {backgroundColor: colors_exports.blue500}]
  }, "999+")))), /* @__PURE__ */ React245.createElement(List_exports.Section, {
    title: "Dot"
  }, /* @__PURE__ */ React245.createElement(View_default, {
    style: styles122.row
  }, /* @__PURE__ */ React245.createElement(View_default, {
    style: styles122.item
  }, /* @__PURE__ */ React245.createElement(IconButton_default, {
    icon: "book-open",
    size: 36,
    style: styles122.button
  }), /* @__PURE__ */ React245.createElement(Badge_default, {
    visible,
    style: styles122.badge,
    size: 8
  })), /* @__PURE__ */ React245.createElement(View_default, {
    style: styles122.item
  }, /* @__PURE__ */ React245.createElement(IconButton_default, {
    icon: "receipt",
    size: 36,
    style: styles122.button
  }), /* @__PURE__ */ React245.createElement(Badge_default, {
    visible,
    style: styles122.badge,
    size: 8
  })))));
};
BadgeExample.title = "Badge";
var styles122 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  row: {
    flexDirection: "row",
    flexWrap: "wrap"
  },
  item: {
    margin: 16
  },
  button: {
    opacity: 0.6
  },
  badge: {
    position: "absolute",
    top: 4,
    right: 0
  },
  label: {
    flex: 1
  }
});
var BadgeExample_default = BadgeExample;

// src/rnpex/Examples/BannerExample.tsx
var React246 = __toModule(require_react());
var PHOTOS = Array.from({length: 24}).map((_, i) => `https://unsplash.it/300/300/?random&__id=${i}`);
var BannerExample = () => {
  const [visible, setVisible] = React246.useState(true);
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React246.createElement(View_default, {
    style: [styles123.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React246.createElement(ScrollView_default, null, /* @__PURE__ */ React246.createElement(Banner_default, {
    actions: [
      {
        label: "Fix it",
        onPress: () => setVisible(false)
      },
      {
        label: "Learn more",
        onPress: () => setVisible(false)
      }
    ],
    icon: require_email_icon(),
    visible
  }, "Two line text string with two actions. One to two lines is preferable on mobile."), /* @__PURE__ */ React246.createElement(View_default, {
    style: styles123.grid
  }, PHOTOS.map((uri) => /* @__PURE__ */ React246.createElement(View_default, {
    key: uri,
    style: styles123.item
  }, /* @__PURE__ */ React246.createElement(Image_default, {
    source: {uri},
    style: styles123.photo
  }))))), /* @__PURE__ */ React246.createElement(SafeAreaView_default, null, /* @__PURE__ */ React246.createElement(View_default, null, /* @__PURE__ */ React246.createElement(FAB_default2, {
    icon: "eye",
    label: visible ? "Hide banner" : "Show banner",
    style: styles123.fab,
    onPress: () => setVisible(!visible)
  }))));
};
BannerExample.title = "Banner";
var styles123 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  ...Platform_default.select({
    web: {
      grid: {
        display: "grid",
        gridTemplateColumns: "repeat(auto-fill, minmax(150px, 1fr))",
        gridRowGap: "8px",
        gridColumnGap: "8px",
        padding: 8
      },
      item: {
        width: "100%",
        height: 150
      }
    },
    default: {
      grid: {
        flexDirection: "row",
        flexWrap: "wrap",
        padding: 4
      },
      item: {
        height: Dimensions.get("window").width / 2,
        width: "50%",
        padding: 4
      }
    }
  }),
  photo: {
    flex: 1,
    resizeMode: "cover"
  },
  fab: {
    alignSelf: "center",
    position: "absolute",
    bottom: 0,
    margin: 16
  }
});
var BannerExample_default = BannerExample;

// src/rnpex/Examples/BottomNavigationExample.tsx
var React247 = __toModule(require_react());
var PhotoGallery = ({route}) => {
  const PHOTOS2 = Array.from({length: 24}).map((_, i) => `https://unsplash.it/300/300/?random&__id=${route.key}${i}`);
  return /* @__PURE__ */ React247.createElement(ScrollView_default, {
    contentContainerStyle: styles124.content
  }, PHOTOS2.map((uri) => /* @__PURE__ */ React247.createElement(View_default, {
    key: uri,
    style: styles124.item
  }, /* @__PURE__ */ React247.createElement(Image_default, {
    source: {uri},
    style: styles124.photo
  }))));
};
var BottomNavigationExample = () => {
  const [index, setIndex] = React247.useState(0);
  const [routes2] = React247.useState([
    {key: "album", title: "Album", icon: "image-album", color: "#6200ee"},
    {
      key: "library",
      title: "Library",
      icon: "inbox",
      color: "#2962ff",
      badge: true
    },
    {
      key: "favorites",
      title: "Favorites",
      icon: "heart",
      color: "#00796b"
    },
    {
      key: "purchased",
      title: "Purchased",
      icon: "shopping-music",
      color: "#c51162"
    }
  ]);
  return /* @__PURE__ */ React247.createElement(BottomNavigation_default, {
    navigationState: {index, routes: routes2},
    onIndexChange: setIndex,
    renderScene: BottomNavigation_default.SceneMap({
      album: PhotoGallery,
      library: PhotoGallery,
      favorites: PhotoGallery,
      purchased: PhotoGallery
    })
  });
};
BottomNavigationExample.title = "Bottom Navigation";
var BottomNavigationExample_default = BottomNavigationExample;
var styles124 = StyleSheet_default2.create({
  ...Platform_default.select({
    web: {
      content: {
        display: "grid",
        gridTemplateColumns: "repeat(auto-fill, minmax(150px, 1fr))",
        gridRowGap: "8px",
        gridColumnGap: "8px",
        padding: 8
      },
      item: {
        width: "100%",
        height: 150
      }
    },
    default: {
      content: {
        flexDirection: "row",
        flexWrap: "wrap",
        padding: 4
      },
      item: {
        height: Dimensions.get("window").width / 2,
        width: "50%",
        padding: 4
      }
    }
  }),
  photo: {
    flex: 1,
    resizeMode: "cover"
  }
});

// src/rnpex/Examples/ButtonExample.tsx
var React248 = __toModule(require_react());
var ButtonExample = () => {
  const {colors} = useTheme();
  return /* @__PURE__ */ React248.createElement(ScrollView_default, {
    style: [styles125.container, {backgroundColor: colors.background}]
  }, /* @__PURE__ */ React248.createElement(List_exports.Section, {
    title: "Text button"
  }, /* @__PURE__ */ React248.createElement(View_default, {
    style: styles125.row
  }, /* @__PURE__ */ React248.createElement(Button_default, {
    onPress: () => {
    },
    style: styles125.button
  }, "Default"), /* @__PURE__ */ React248.createElement(Button_default, {
    color: colors.accent,
    onPress: () => {
    },
    style: styles125.button
  }, "Custom"), /* @__PURE__ */ React248.createElement(Button_default, {
    disabled: true,
    onPress: () => {
    },
    style: styles125.button
  }, "Disabled"), /* @__PURE__ */ React248.createElement(Button_default, {
    icon: "camera",
    onPress: () => {
    },
    style: styles125.button
  }, "Icon"), /* @__PURE__ */ React248.createElement(Button_default, {
    loading: true,
    onPress: () => {
    },
    style: styles125.button
  }, "Loading"), /* @__PURE__ */ React248.createElement(Button_default, {
    icon: "camera",
    onPress: () => {
    },
    style: styles125.button,
    contentStyle: {flexDirection: "row-reverse"}
  }, "Icon right"))), /* @__PURE__ */ React248.createElement(List_exports.Section, {
    title: "Outlined button"
  }, /* @__PURE__ */ React248.createElement(View_default, {
    style: styles125.row
  }, /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "outlined",
    onPress: () => {
    },
    style: styles125.button
  }, "Default"), /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "outlined",
    color: colors.accent,
    onPress: () => {
    },
    style: styles125.button
  }, "Custom"), /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "outlined",
    disabled: true,
    onPress: () => {
    },
    style: styles125.button
  }, "Disabled"), /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "outlined",
    icon: "camera",
    onPress: () => {
    },
    style: styles125.button
  }, "Icon"), /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "outlined",
    loading: true,
    onPress: () => {
    },
    style: styles125.button
  }, "Loading"), /* @__PURE__ */ React248.createElement(Button_default, {
    icon: "heart",
    mode: "outlined",
    onPress: () => {
    },
    style: styles125.button,
    labelStyle: {
      fontWeight: "800",
      fontSize: 24
    }
  }, "Custom Font"))), /* @__PURE__ */ React248.createElement(List_exports.Section, {
    title: "Contained button"
  }, /* @__PURE__ */ React248.createElement(View_default, {
    style: styles125.row
  }, /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "contained",
    onPress: () => {
    },
    style: styles125.button
  }, "Default"), /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "contained",
    color: colors.accent,
    onPress: () => {
    },
    style: styles125.button
  }, "Custom"), /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "contained",
    disabled: true,
    onPress: () => {
    },
    style: styles125.button
  }, "Disabled"), /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "contained",
    icon: "camera",
    onPress: () => {
    },
    style: styles125.button
  }, "Icon"), /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "contained",
    loading: true,
    onPress: () => {
    },
    style: styles125.button
  }, "Loading"))), /* @__PURE__ */ React248.createElement(List_exports.Section, {
    title: "Custom icon"
  }, /* @__PURE__ */ React248.createElement(View_default, {
    style: styles125.row
  }, /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "outlined",
    icon: {
      uri: "https://avatars0.githubusercontent.com/u/17571969?v=3&s=400"
    },
    onPress: () => {
    },
    style: styles125.button
  }, "Remote image"), /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "outlined",
    icon: require_favorite(),
    onPress: () => {
    },
    style: styles125.button
  }, "Required asset"), /* @__PURE__ */ React248.createElement(Button_default, {
    mode: "outlined",
    icon: ({size}) => /* @__PURE__ */ React248.createElement(Image_default, {
      source: require_chameleon(),
      style: {width: size, height: size, borderRadius: size / 2}
    }),
    onPress: () => {
    },
    style: styles125.button
  }, "Custom component"))));
};
ButtonExample.title = "Button";
var styles125 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  row: {
    flexDirection: "row",
    flexWrap: "wrap",
    paddingHorizontal: 12
  },
  button: {
    margin: 4
  }
});
var ButtonExample_default = ButtonExample;

// src/rnpex/Examples/CardExample.tsx
var React249 = __toModule(require_react());
var CardExample = () => {
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React249.createElement(ScrollView_default, {
    style: [styles126.container, {backgroundColor: background}],
    contentContainerStyle: styles126.content
  }, /* @__PURE__ */ React249.createElement(Card_default, {
    style: styles126.card
  }, /* @__PURE__ */ React249.createElement(Card_default.Cover, {
    source: require_wrecked_ship()
  }), /* @__PURE__ */ React249.createElement(Card_default.Title, {
    title: "Abandoned Ship"
  }), /* @__PURE__ */ React249.createElement(Card_default.Content, null, /* @__PURE__ */ React249.createElement(Paragraph_default, null, "The Abandoned Ship is a wrecked ship located on Route 108 in Hoenn, originally being a ship named the S.S. Cactus. The second part of the ship can only be accessed by using Dive and contains the Scanner."))), /* @__PURE__ */ React249.createElement(Card_default, {
    style: styles126.card
  }, /* @__PURE__ */ React249.createElement(Card_default.Cover, {
    source: require_forest()
  }), /* @__PURE__ */ React249.createElement(Card_default.Actions, null, /* @__PURE__ */ React249.createElement(Button_default, {
    onPress: () => {
    }
  }, "Share"), /* @__PURE__ */ React249.createElement(Button_default, {
    onPress: () => {
    }
  }, "Explore"))), /* @__PURE__ */ React249.createElement(Card_default, {
    style: styles126.card
  }, /* @__PURE__ */ React249.createElement(Card_default.Title, {
    title: "Berries that are trimmed at the end",
    subtitle: "Omega Ruby",
    left: (props) => /* @__PURE__ */ React249.createElement(Avatar_exports.Icon, {
      ...props,
      icon: "folder"
    }),
    right: (props) => /* @__PURE__ */ React249.createElement(IconButton_default, {
      ...props,
      icon: "dots-vertical",
      onPress: () => {
      }
    })
  }), /* @__PURE__ */ React249.createElement(Card_default.Content, null, /* @__PURE__ */ React249.createElement(Paragraph_default, null, "Dotted around the Hoenn region, you will find loamy soil, many of which are housing berries. Once you have picked the berries, then you have the ability to use that loamy soil to grow your own berries. These can be any berry and will require attention to get the best crop."))), /* @__PURE__ */ React249.createElement(Card_default, {
    style: styles126.card
  }, /* @__PURE__ */ React249.createElement(Card_default.Cover, {
    source: require_strawberries()
  }), /* @__PURE__ */ React249.createElement(Card_default.Title, {
    title: "Just Strawberries",
    subtitle: "... and only Strawberries",
    right: (props) => /* @__PURE__ */ React249.createElement(IconButton_default, {
      ...props,
      icon: "chevron-down",
      onPress: () => {
      }
    })
  })), /* @__PURE__ */ React249.createElement(Card_default, {
    style: styles126.card,
    onPress: () => {
      Alert_default.alert("The Chameleon is Pressed");
    }
  }, /* @__PURE__ */ React249.createElement(Card_default.Cover, {
    source: require_chameleon()
  }), /* @__PURE__ */ React249.createElement(Card_default.Title, {
    title: "Pressable Chameleon"
  }), /* @__PURE__ */ React249.createElement(Card_default.Content, null, /* @__PURE__ */ React249.createElement(Paragraph_default, null, "This is a pressable chameleon. If you press me, I will alert."))), /* @__PURE__ */ React249.createElement(Card_default, {
    style: styles126.card,
    onLongPress: () => {
      Alert_default.alert("The City is Long Pressed");
    }
  }, /* @__PURE__ */ React249.createElement(Card_default.Cover, {
    source: require_city()
  }), /* @__PURE__ */ React249.createElement(Card_default.Title, {
    title: "Long Pressable City",
    left: (props) => /* @__PURE__ */ React249.createElement(Avatar_exports.Icon, {
      ...props,
      icon: "city"
    })
  }), /* @__PURE__ */ React249.createElement(Card_default.Content, null, /* @__PURE__ */ React249.createElement(Paragraph_default, null, "This is a long press only city. If you long press me, I will alert."))));
};
CardExample.title = "Card";
var styles126 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  content: {
    padding: 4
  },
  card: {
    margin: 4
  }
});
var CardExample_default = CardExample;

// src/rnpex/Examples/CheckboxExample.tsx
var React250 = __toModule(require_react());
var CheckboxExample = () => {
  const [checkedNormal, setCheckedNormal] = React250.useState(true);
  const [checkedCustom, setCheckedCustom] = React250.useState(true);
  const [indeterminate, setIndeterminate] = React250.useState(true);
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React250.createElement(View_default, {
    style: [
      styles127.container,
      {
        backgroundColor: background
      }
    ]
  }, /* @__PURE__ */ React250.createElement(TouchableRipple_default, {
    onPress: () => setCheckedNormal(!checkedNormal)
  }, /* @__PURE__ */ React250.createElement(View_default, {
    style: styles127.row
  }, /* @__PURE__ */ React250.createElement(Paragraph_default, null, "Normal"), /* @__PURE__ */ React250.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React250.createElement(Checkbox_default2, {
    status: checkedNormal ? "checked" : "unchecked"
  })))), /* @__PURE__ */ React250.createElement(TouchableRipple_default, {
    onPress: () => setCheckedCustom(!checkedCustom)
  }, /* @__PURE__ */ React250.createElement(View_default, {
    style: styles127.row
  }, /* @__PURE__ */ React250.createElement(Paragraph_default, null, "Custom"), /* @__PURE__ */ React250.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React250.createElement(Checkbox_default2, {
    color: colors_exports.blue500,
    status: checkedCustom ? "checked" : "unchecked"
  })))), /* @__PURE__ */ React250.createElement(TouchableRipple_default, {
    onPress: () => setIndeterminate(!indeterminate)
  }, /* @__PURE__ */ React250.createElement(View_default, {
    style: styles127.row
  }, /* @__PURE__ */ React250.createElement(Paragraph_default, null, "Indeterminate"), /* @__PURE__ */ React250.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React250.createElement(Checkbox_default2, {
    status: indeterminate ? "indeterminate" : "unchecked"
  })))), /* @__PURE__ */ React250.createElement(View_default, {
    style: styles127.row
  }, /* @__PURE__ */ React250.createElement(Paragraph_default, null, "Checked (Disabled)"), /* @__PURE__ */ React250.createElement(Checkbox_default2, {
    status: "checked",
    disabled: true
  })), /* @__PURE__ */ React250.createElement(View_default, {
    style: styles127.row
  }, /* @__PURE__ */ React250.createElement(Paragraph_default, null, "Unchecked (Disabled)"), /* @__PURE__ */ React250.createElement(Checkbox_default2, {
    status: "unchecked",
    disabled: true
  })), /* @__PURE__ */ React250.createElement(View_default, {
    style: styles127.row
  }, /* @__PURE__ */ React250.createElement(Paragraph_default, null, "Indeterminate (Disabled)"), /* @__PURE__ */ React250.createElement(Checkbox_default2, {
    status: "indeterminate",
    disabled: true
  })));
};
CheckboxExample.title = "Checkbox";
var styles127 = StyleSheet_default2.create({
  container: {
    flex: 1,
    backgroundColor: colors_exports.white,
    paddingVertical: 8
  },
  row: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingVertical: 8,
    paddingHorizontal: 16
  }
});
var CheckboxExample_default = CheckboxExample;

// src/rnpex/Examples/CheckboxItemExample.tsx
var React251 = __toModule(require_react());
var CheckboxExample2 = () => {
  const [checkedDefault, setCheckedDefault] = React251.useState(true);
  const [checkedAndroid, setCheckedAndroid] = React251.useState(true);
  const [checkedIOS, setCheckedIOS] = React251.useState(true);
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React251.createElement(View_default, {
    style: [
      styles128.container,
      {
        backgroundColor: background
      }
    ]
  }, /* @__PURE__ */ React251.createElement(Checkbox_default2.Item, {
    label: "Default (will look like whatever system this is running on)",
    status: checkedDefault ? "checked" : "unchecked",
    onPress: () => setCheckedDefault(!checkedDefault)
  }), /* @__PURE__ */ React251.createElement(Checkbox_default2.Item, {
    label: "Material Design",
    mode: "android",
    status: checkedAndroid ? "checked" : "unchecked",
    onPress: () => setCheckedAndroid(!checkedAndroid)
  }), /* @__PURE__ */ React251.createElement(Checkbox_default2.Item, {
    label: "iOS",
    mode: "ios",
    status: checkedIOS ? "checked" : "unchecked",
    onPress: () => setCheckedIOS(!checkedIOS)
  }));
};
CheckboxExample2.title = "Checkbox Item";
var styles128 = StyleSheet_default2.create({
  container: {
    flex: 1,
    backgroundColor: colors_exports.white,
    paddingVertical: 8
  }
});
var CheckboxItemExample_default = CheckboxExample2;

// src/rnpex/Examples/ChipExample.tsx
var React252 = __toModule(require_react());
var import_color43 = __toModule(require_color());
var ChipExample = () => {
  const [visible, setVisible] = React252.useState(false);
  const {colors} = useTheme();
  return /* @__PURE__ */ React252.createElement(React252.Fragment, null, /* @__PURE__ */ React252.createElement(ScrollView_default, {
    style: [styles129.container, {backgroundColor: colors.surface}]
  }, /* @__PURE__ */ React252.createElement(List_exports.Section, {
    title: "Flat chip"
  }, /* @__PURE__ */ React252.createElement(View_default, {
    style: styles129.row
  }, /* @__PURE__ */ React252.createElement(Chip_default, {
    selected: true,
    onPress: () => {
    },
    style: styles129.chip
  }, "Simple"), /* @__PURE__ */ React252.createElement(Chip_default, {
    onPress: () => {
    },
    onClose: () => {
    },
    style: styles129.chip,
    closeIconAccessibilityLabel: "Close icon accessibility label"
  }, "Close button"), /* @__PURE__ */ React252.createElement(Chip_default, {
    icon: "heart",
    onPress: () => {
    },
    onClose: () => {
    },
    style: styles129.chip
  }, "Icon"), /* @__PURE__ */ React252.createElement(Chip_default, {
    avatar: /* @__PURE__ */ React252.createElement(Image_default, {
      source: require_avatar()
    }),
    onPress: () => {
    },
    onClose: () => {
    },
    style: styles129.chip
  }, "Avatar"), /* @__PURE__ */ React252.createElement(Chip_default, {
    selected: true,
    avatar: /* @__PURE__ */ React252.createElement(Image_default, {
      source: require_avatar()
    }),
    onPress: () => {
    },
    style: styles129.chip
  }, "Avatar (selected)"), /* @__PURE__ */ React252.createElement(Chip_default, {
    disabled: true,
    icon: "heart",
    onClose: () => {
    },
    style: styles129.chip
  }, "Icon (disabled)"), /* @__PURE__ */ React252.createElement(Chip_default, {
    disabled: true,
    avatar: /* @__PURE__ */ React252.createElement(Image_default, {
      source: require_avatar()
    }),
    style: styles129.chip
  }, "Avatar (disabled)"))), /* @__PURE__ */ React252.createElement(List_exports.Section, {
    title: "Outlined chip"
  }, /* @__PURE__ */ React252.createElement(View_default, {
    style: styles129.row
  }, /* @__PURE__ */ React252.createElement(Chip_default, {
    mode: "outlined",
    onPress: () => {
    },
    style: styles129.chip
  }, "Simple"), /* @__PURE__ */ React252.createElement(Chip_default, {
    mode: "outlined",
    onPress: () => {
    },
    onClose: () => {
    },
    style: styles129.chip
  }, "Close button"), /* @__PURE__ */ React252.createElement(Chip_default, {
    mode: "outlined",
    icon: "heart",
    onPress: () => {
    },
    onClose: () => {
    },
    style: styles129.chip
  }, "Icon"), /* @__PURE__ */ React252.createElement(Chip_default, {
    mode: "outlined",
    avatar: /* @__PURE__ */ React252.createElement(Image_default, {
      source: require_avatar()
    }),
    onPress: () => {
    },
    style: styles129.chip
  }, "Avatar"), /* @__PURE__ */ React252.createElement(Chip_default, {
    selected: true,
    mode: "outlined",
    avatar: /* @__PURE__ */ React252.createElement(Image_default, {
      source: require_avatar()
    }),
    onPress: () => {
    },
    style: styles129.chip
  }, "Avatar (selected)"), /* @__PURE__ */ React252.createElement(Chip_default, {
    disabled: true,
    mode: "outlined",
    icon: "heart",
    onClose: () => {
    },
    style: styles129.chip
  }, "Icon (disabled)"), /* @__PURE__ */ React252.createElement(Chip_default, {
    disabled: true,
    mode: "outlined",
    avatar: /* @__PURE__ */ React252.createElement(Image_default, {
      source: require_avatar()
    }),
    style: styles129.chip
  }, "Avatar (disabled)"))), /* @__PURE__ */ React252.createElement(List_exports.Section, {
    title: "Custom chip"
  }, /* @__PURE__ */ React252.createElement(View_default, {
    style: styles129.row
  }, /* @__PURE__ */ React252.createElement(Chip_default, {
    mode: "outlined",
    onPress: () => {
    },
    onLongPress: () => setVisible(true),
    style: styles129.chip
  }, "With onLongPress"), /* @__PURE__ */ React252.createElement(Chip_default, {
    selected: true,
    onPress: () => {
    },
    style: [
      styles129.chip,
      {
        backgroundColor: (0, import_color43.default)(colors.primary).alpha(0.2).rgb().string()
      }
    ],
    selectedColor: colors.primary
  }, "Flat selected chip with custom color"), /* @__PURE__ */ React252.createElement(Chip_default, {
    onPress: () => {
    },
    style: styles129.chip,
    selectedColor: colors.primary
  }, "Flat unselected chip with custom color"), /* @__PURE__ */ React252.createElement(Chip_default, {
    selected: true,
    mode: "outlined",
    onPress: () => {
    },
    style: [
      styles129.chip,
      {
        backgroundColor: (0, import_color43.default)(colors.primary).alpha(0.2).rgb().string()
      }
    ],
    selectedColor: colors.primary
  }, "Outlined selected chip with custom color"), /* @__PURE__ */ React252.createElement(Chip_default, {
    mode: "outlined",
    onPress: () => {
    },
    style: styles129.chip,
    selectedColor: colors.primary
  }, "Outlined unselected chip with custom color"), /* @__PURE__ */ React252.createElement(Chip_default, {
    onPress: () => {
    },
    style: styles129.chip,
    textStyle: styles129.tiny
  }, "With custom size"), /* @__PURE__ */ React252.createElement(Chip_default, {
    onPress: () => {
    },
    onClose: () => {
    },
    style: {flex: 1},
    textStyle: {flex: -1},
    ellipsizeMode: "middle"
  }, "With a very big text: React Native Paper is a high-quality, standard-compliant Material Design library that has you covered in all major use-cases.")))), /* @__PURE__ */ React252.createElement(Snackbar_default, {
    visible,
    onDismiss: () => setVisible(false),
    duration: Snackbar_default.DURATION_SHORT
  }, "onLongPress activated!"));
};
ChipExample.title = "Chip";
var styles129 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  row: {
    flexDirection: "row",
    flexWrap: "wrap",
    paddingHorizontal: 12
  },
  chip: {
    margin: 4
  },
  tiny: {
    marginVertical: 2,
    marginRight: 2,
    marginLeft: 2,
    minHeight: 19,
    lineHeight: 19
  }
});
var ChipExample_default = ChipExample;

// src/rnpex/Examples/DataTableExample.tsx
var React253 = __toModule(require_react());
var DataTableExample = () => {
  const [sortAscending, setSortAscending] = React253.useState(true);
  const [page, setPage] = React253.useState(0);
  const [items2] = React253.useState([
    {
      key: 1,
      name: "Cupcake",
      calories: 356,
      fat: 16
    },
    {
      key: 2,
      name: "Eclair",
      calories: 262,
      fat: 16
    },
    {
      key: 3,
      name: "Frozen yogurt",
      calories: 159,
      fat: 6
    },
    {
      key: 4,
      name: "Gingerbread",
      calories: 305,
      fat: 3.7
    },
    {
      key: 5,
      name: "Ice cream sandwich",
      calories: 237,
      fat: 9
    },
    {
      key: 6,
      name: "Jelly Bean",
      calories: 375,
      fat: 0
    }
  ]);
  const {
    colors: {background}
  } = useTheme();
  const sortedItems = items2.slice().sort((item1, item2) => (sortAscending ? item1.name < item2.name : item2.name < item1.name) ? 1 : -1);
  const itemsPerPage = 2;
  const from = page * itemsPerPage;
  const to = (page + 1) * itemsPerPage;
  return /* @__PURE__ */ React253.createElement(ScrollView_default, {
    style: [styles130.container, {backgroundColor: background}],
    contentContainerStyle: styles130.content
  }, /* @__PURE__ */ React253.createElement(Card_default, null, /* @__PURE__ */ React253.createElement(DataTable_default, null, /* @__PURE__ */ React253.createElement(DataTable_default.Header, null, /* @__PURE__ */ React253.createElement(DataTable_default.Title, {
    sortDirection: sortAscending ? "ascending" : "descending",
    onPress: () => setSortAscending(!sortAscending),
    style: styles130.first
  }, "Dessert"), /* @__PURE__ */ React253.createElement(DataTable_default.Title, {
    numeric: true
  }, "Calories"), /* @__PURE__ */ React253.createElement(DataTable_default.Title, {
    numeric: true
  }, "Fat (g)")), sortedItems.slice(from, to).map((item) => /* @__PURE__ */ React253.createElement(DataTable_default.Row, {
    key: item.key
  }, /* @__PURE__ */ React253.createElement(DataTable_default.Cell, {
    style: styles130.first
  }, item.name), /* @__PURE__ */ React253.createElement(DataTable_default.Cell, {
    numeric: true
  }, item.calories), /* @__PURE__ */ React253.createElement(DataTable_default.Cell, {
    numeric: true
  }, item.fat))), /* @__PURE__ */ React253.createElement(DataTable_default.Pagination, {
    page,
    numberOfPages: Math.floor(sortedItems.length / itemsPerPage),
    onPageChange: (page2) => setPage(page2),
    label: `${from + 1}-${to} of ${sortedItems.length}`
  }))));
};
DataTableExample.title = "Data Table";
var styles130 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  content: {
    padding: 8
  },
  first: {
    flex: 2
  }
});
var DataTableExample_default = DataTableExample;

// src/rnpex/Examples/DialogExample.tsx
var React259 = __toModule(require_react());

// src/rnpex/Examples/Dialogs/DialogWithCustomColors.tsx
var React254 = __toModule(require_react());
var DialogWithCustomColors = ({
  visible,
  close: close3
}) => /* @__PURE__ */ React254.createElement(Portal_default, null, /* @__PURE__ */ React254.createElement(Dialog_default, {
  onDismiss: close3,
  style: {backgroundColor: colors_exports.purple900},
  visible
}, /* @__PURE__ */ React254.createElement(Dialog_default.Title, {
  style: {color: colors_exports.white}
}, "Alert"), /* @__PURE__ */ React254.createElement(Dialog_default.Content, null, /* @__PURE__ */ React254.createElement(Paragraph_default, {
  style: {color: colors_exports.white}
}, "This is a dialog with custom colors")), /* @__PURE__ */ React254.createElement(Dialog_default.Actions, null, /* @__PURE__ */ React254.createElement(Button_default, {
  color: colors_exports.white,
  onPress: close3
}, "OK"))));
var DialogWithCustomColors_default = DialogWithCustomColors;

// src/rnpex/Examples/Dialogs/DialogWithLoadingIndicator.tsx
var React255 = __toModule(require_react());
var isIOS = Platform_default.OS === "ios";
var DialogWithLoadingIndicator = ({
  visible,
  close: close3
}) => /* @__PURE__ */ React255.createElement(Portal_default, null, /* @__PURE__ */ React255.createElement(Dialog_default, {
  onDismiss: close3,
  visible
}, /* @__PURE__ */ React255.createElement(Dialog_default.Title, null, "Progress Dialog"), /* @__PURE__ */ React255.createElement(Dialog_default.Content, null, /* @__PURE__ */ React255.createElement(View_default, {
  style: {flexDirection: "row", alignItems: "center"}
}, /* @__PURE__ */ React255.createElement(ActivityIndicator_default, {
  color: colors_exports.indigo500,
  size: isIOS ? "large" : 48,
  style: {marginRight: 16}
}), /* @__PURE__ */ React255.createElement(Paragraph_default, null, "Loading.....")))));
var DialogWithLoadingIndicator_default = DialogWithLoadingIndicator;

// src/rnpex/Examples/Dialogs/DialogWithLongText.tsx
var React256 = __toModule(require_react());
var DialogWithLongText = ({
  visible,
  close: close3
}) => /* @__PURE__ */ React256.createElement(Portal_default, null, /* @__PURE__ */ React256.createElement(Dialog_default, {
  onDismiss: close3,
  visible,
  style: {maxHeight: 0.6 * Dimensions.get("window").height}
}, /* @__PURE__ */ React256.createElement(Dialog_default.Title, null, "Alert"), /* @__PURE__ */ React256.createElement(Dialog_default.ScrollArea, {
  style: {paddingHorizontal: 0}
}, /* @__PURE__ */ React256.createElement(ScrollView_default, {
  contentContainerStyle: {paddingHorizontal: 24}
}, /* @__PURE__ */ React256.createElement(Paragraph_default, null, "Material is the metaphor", "\n", "\n", "A material metaphor is the unifying theory of a rationalized space and a system of motion. The material is grounded in tactile reality, inspired by the study of paper and ink, yet technologically advanced and open to imagination and magic.", "\n", "\n", "Surfaces and edges of the material provide visual cues that are grounded in reality. The use of familiar tactile attributes helps users quickly understand affordances. Yet the flexibility of the material creates new affordances that supersede those in the physical world, without breaking the rules of physics.", "\n", "\n", "The fundamentals of light, surface, and movement are key to conveying how objects move, interact, and exist in space and in relation to each other. Realistic lighting shows seams, divides space, and indicates moving parts.", "\n", "\n", "A material metaphor is the unifying theory of a rationalized space and a system of motion. The material is grounded in tactile reality, inspired by the study of paper and ink, yet technologically advanced and open to imagination and magic.", "\n", "\n", "Surfaces and edges of the material provide visual cues that are grounded in reality. The use of familiar tactile attributes helps users quickly understand affordances. Yet the flexibility of the material creates new affordances that supersede those in the physical world, without breaking the rules of physics.", "\n", "\n", "The fundamentals of light, surface, and movement are key to conveying how objects move, interact, and exist in space and in relation to each other. Realistic lighting shows seams, divides space, and indicates moving parts."))), /* @__PURE__ */ React256.createElement(Dialog_default.Actions, null, /* @__PURE__ */ React256.createElement(Button_default, {
  onPress: close3
}, "OK"))));
var DialogWithLongText_default = DialogWithLongText;

// src/rnpex/Examples/Dialogs/DialogWithRadioBtns.tsx
var React257 = __toModule(require_react());
var DialogWithRadioBtns = ({visible, close: close3}) => {
  const [checked, setChecked] = React257.useState("normal");
  return /* @__PURE__ */ React257.createElement(Portal_default, null, /* @__PURE__ */ React257.createElement(Dialog_default, {
    onDismiss: close3,
    visible
  }, /* @__PURE__ */ React257.createElement(Dialog_default.Title, null, "Choose an option"), /* @__PURE__ */ React257.createElement(Dialog_default.ScrollArea, {
    style: {maxHeight: 170, paddingHorizontal: 0}
  }, /* @__PURE__ */ React257.createElement(ScrollView_default, null, /* @__PURE__ */ React257.createElement(View_default, null, /* @__PURE__ */ React257.createElement(TouchableRipple_default, {
    onPress: () => setChecked("normal")
  }, /* @__PURE__ */ React257.createElement(View_default, {
    style: styles131.row
  }, /* @__PURE__ */ React257.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React257.createElement(RadioButton_default2, {
    value: "normal",
    status: checked === "normal" ? "checked" : "unchecked"
  })), /* @__PURE__ */ React257.createElement(Subheading_default, {
    style: styles131.text
  }, "Option 1"))), /* @__PURE__ */ React257.createElement(TouchableRipple_default, {
    onPress: () => setChecked("second")
  }, /* @__PURE__ */ React257.createElement(View_default, {
    style: styles131.row
  }, /* @__PURE__ */ React257.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React257.createElement(RadioButton_default2, {
    value: "second",
    status: checked === "second" ? "checked" : "unchecked"
  })), /* @__PURE__ */ React257.createElement(Subheading_default, {
    style: styles131.text
  }, "Option 2"))), /* @__PURE__ */ React257.createElement(TouchableRipple_default, {
    onPress: () => setChecked("third")
  }, /* @__PURE__ */ React257.createElement(View_default, {
    style: styles131.row
  }, /* @__PURE__ */ React257.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React257.createElement(RadioButton_default2, {
    value: "third",
    status: checked === "third" ? "checked" : "unchecked"
  })), /* @__PURE__ */ React257.createElement(Subheading_default, {
    style: styles131.text
  }, "Option 3"))), /* @__PURE__ */ React257.createElement(TouchableRipple_default, {
    onPress: () => setChecked("fourth")
  }, /* @__PURE__ */ React257.createElement(View_default, {
    style: styles131.row
  }, /* @__PURE__ */ React257.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React257.createElement(RadioButton_default2, {
    value: "fourth",
    status: checked === "fourth" ? "checked" : "unchecked"
  })), /* @__PURE__ */ React257.createElement(Subheading_default, {
    style: styles131.text
  }, "Option 4")))))), /* @__PURE__ */ React257.createElement(Dialog_default.Actions, null, /* @__PURE__ */ React257.createElement(Button_default, {
    onPress: close3
  }, "Cancel"), /* @__PURE__ */ React257.createElement(Button_default, {
    onPress: close3
  }, "Ok"))));
};
var DialogWithRadioBtns_default = DialogWithRadioBtns;
var styles131 = StyleSheet_default2.create({
  row: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 16,
    paddingVertical: 8
  },
  text: {
    paddingLeft: 8
  }
});

// src/rnpex/Examples/Dialogs/UndismissableDialog.tsx
var React258 = __toModule(require_react());
var DialogWithLongText2 = ({
  visible,
  close: close3
}) => /* @__PURE__ */ React258.createElement(Portal_default, null, /* @__PURE__ */ React258.createElement(Dialog_default, {
  onDismiss: close3,
  visible,
  dismissable: false
}, /* @__PURE__ */ React258.createElement(Dialog_default.Title, null, "Alert"), /* @__PURE__ */ React258.createElement(Dialog_default.Content, null, /* @__PURE__ */ React258.createElement(Paragraph_default, null, "This is an undismissable dialog!!")), /* @__PURE__ */ React258.createElement(Dialog_default.Actions, null, /* @__PURE__ */ React258.createElement(Button_default, {
  color: colors_exports.teal500,
  disabled: true
}, "Disagree"), /* @__PURE__ */ React258.createElement(Button_default, {
  onPress: close3
}, "Agree"))));
var UndismissableDialog_default = DialogWithLongText2;

// src/rnpex/Examples/DialogExample.tsx
var DialogExample = () => {
  const [visible, setVisible] = React259.useState({});
  const _toggleDialog = (name) => () => setVisible({...visible, [name]: !visible[name]});
  const _getVisible = (name) => !!visible[name];
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React259.createElement(View_default, {
    style: [styles132.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React259.createElement(Button_default, {
    mode: "outlined",
    onPress: _toggleDialog("dialog1"),
    style: styles132.button
  }, "Long text"), /* @__PURE__ */ React259.createElement(Button_default, {
    mode: "outlined",
    onPress: _toggleDialog("dialog2"),
    style: styles132.button
  }, "Radio buttons"), /* @__PURE__ */ React259.createElement(Button_default, {
    mode: "outlined",
    onPress: _toggleDialog("dialog3"),
    style: styles132.button
  }, "Progress indicator"), /* @__PURE__ */ React259.createElement(Button_default, {
    mode: "outlined",
    onPress: _toggleDialog("dialog4"),
    style: styles132.button
  }, "Undismissable Dialog"), /* @__PURE__ */ React259.createElement(Button_default, {
    mode: "outlined",
    onPress: _toggleDialog("dialog5"),
    style: styles132.button
  }, "Custom colors"), /* @__PURE__ */ React259.createElement(DialogWithLongText_default, {
    visible: _getVisible("dialog1"),
    close: _toggleDialog("dialog1")
  }), /* @__PURE__ */ React259.createElement(DialogWithRadioBtns_default, {
    visible: _getVisible("dialog2"),
    close: _toggleDialog("dialog2")
  }), /* @__PURE__ */ React259.createElement(DialogWithLoadingIndicator_default, {
    visible: _getVisible("dialog3"),
    close: _toggleDialog("dialog3")
  }), /* @__PURE__ */ React259.createElement(UndismissableDialog_default, {
    visible: _getVisible("dialog4"),
    close: _toggleDialog("dialog4")
  }), /* @__PURE__ */ React259.createElement(DialogWithCustomColors_default, {
    visible: _getVisible("dialog5"),
    close: _toggleDialog("dialog5")
  }));
};
DialogExample.title = "Dialog";
var styles132 = StyleSheet_default2.create({
  container: {
    flex: 1,
    backgroundColor: colors_exports.grey200,
    padding: 12
  },
  button: {
    margin: 4
  }
});
var DialogExample_default = DialogExample;

// src/rnpex/Examples/DividerExample.tsx
var React260 = __toModule(require_react());
var items = ["Apple", "Banana", "Coconut", "Lemon", "Mango", "Peach"];
var DividerExample = () => {
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React260.createElement(FlatList_default2, {
    style: {backgroundColor: background},
    renderItem: ({item}) => /* @__PURE__ */ React260.createElement(List_exports.Item, {
      title: item
    }),
    keyExtractor: (item) => item,
    ItemSeparatorComponent: Divider_default,
    data: items
  });
};
DividerExample.title = "Divider";
var DividerExample_default = DividerExample;

// src/rnpex/Examples/FABExample.tsx
var React261 = __toModule(require_react());
var ButtonExample2 = () => {
  const [visible, setVisible] = React261.useState(true);
  const [open3, setOpen] = React261.useState(false);
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React261.createElement(View_default, {
    style: [styles133.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React261.createElement(View_default, {
    style: styles133.row
  }, /* @__PURE__ */ React261.createElement(FAB_default2, {
    small: true,
    icon: visible ? "eye-off" : "eye",
    style: styles133.fab,
    onPress: () => setVisible(!visible)
  })), /* @__PURE__ */ React261.createElement(View_default, {
    style: styles133.row
  }, /* @__PURE__ */ React261.createElement(FAB_default2, {
    icon: "heart",
    style: styles133.fab,
    onPress: () => {
    },
    visible
  }), /* @__PURE__ */ React261.createElement(FAB_default2, {
    icon: "check",
    label: "Extended FAB",
    style: styles133.fab,
    onPress: () => {
    },
    visible
  }), /* @__PURE__ */ React261.createElement(FAB_default2, {
    icon: "cancel",
    label: "Disabled FAB",
    style: styles133.fab,
    onPress: () => {
    },
    visible,
    disabled: true
  }), /* @__PURE__ */ React261.createElement(FAB_default2, {
    icon: "format-letter-case",
    label: "Mixed case",
    style: styles133.fab,
    onPress: () => {
    },
    visible,
    uppercase: false
  }), /* @__PURE__ */ React261.createElement(FAB_default2, {
    icon: "cancel",
    label: "Loading FAB",
    style: styles133.fab,
    onPress: () => {
    },
    visible,
    loading: true
  }), /* @__PURE__ */ React261.createElement(Portal_default, null, /* @__PURE__ */ React261.createElement(FAB_default2.Group, {
    open: open3,
    icon: open3 ? "calendar-today" : "plus",
    actions: [
      {icon: "plus", onPress: () => {
      }},
      {icon: "star", label: "Star", onPress: () => {
      }},
      {icon: "email", label: "Email", onPress: () => {
      }},
      {
        icon: "bell",
        label: "Remind",
        onPress: () => {
        },
        small: false
      }
    ],
    onStateChange: ({open: open4}) => setOpen(open4),
    onPress: () => {
      if (open3) {
      }
    },
    visible
  }))));
};
ButtonExample2.title = "Floating Action Button";
var styles133 = StyleSheet_default2.create({
  container: {
    flex: 1,
    backgroundColor: colors_exports.grey200,
    padding: 4
  },
  row: {
    justifyContent: "center",
    alignItems: "center"
  },
  fab: {
    margin: 8
  }
});
var FABExample_default = ButtonExample2;

// src/rnpex/Examples/IconButtonExample.tsx
var React262 = __toModule(require_react());
var ButtonExample3 = () => {
  const {colors} = useTheme();
  return /* @__PURE__ */ React262.createElement(ScrollView_default, {
    style: styles134.container,
    contentContainerStyle: [{backgroundColor: colors.background}]
  }, /* @__PURE__ */ React262.createElement(View_default, {
    style: styles134.row
  }, /* @__PURE__ */ React262.createElement(IconButton_default, {
    icon: "camera",
    size: 24,
    onPress: () => {
    }
  }), /* @__PURE__ */ React262.createElement(Text_default, {
    style: {padding: 10}
  }, "Camera")), /* @__PURE__ */ React262.createElement(IconButton_default, {
    icon: "lock",
    size: 24,
    color: colors_exports.green500,
    onPress: () => {
    }
  }), /* @__PURE__ */ React262.createElement(IconButton_default, {
    icon: "camera",
    size: 36,
    onPress: () => {
    }
  }), /* @__PURE__ */ React262.createElement(IconButton_default, {
    icon: "lock",
    size: 36,
    onPress: () => {
    },
    style: {backgroundColor: colors_exports.lightGreen200}
  }), /* @__PURE__ */ React262.createElement(IconButton_default, {
    icon: "heart",
    size: 60,
    onPress: () => {
    }
  }), /* @__PURE__ */ React262.createElement(View_default, null, icons.map((name) => /* @__PURE__ */ React262.createElement(LigthIcon, {
    name,
    key: name
  }))));
};
var LigthIcon = ({name}) => /* @__PURE__ */ React262.createElement(View_default, {
  style: styles134.row
}, /* @__PURE__ */ React262.createElement(IconButton_default, {
  icon: name,
  size: 24,
  onPress: () => {
  }
}), /* @__PURE__ */ React262.createElement(Text_default, {
  style: {padding: 10}
}, name));
ButtonExample3.title = "Icon Button";
var styles134 = StyleSheet_default2.create({
  container: {
    padding: 8
  },
  row: {
    flexDirection: "row"
  }
});
var IconButtonExample_default = ButtonExample3;
var icons = [
  ...new Set([
    "camera",
    "menu",
    "account-outline",
    "tune",
    "bookmark-outline",
    "pause",
    "arrow-left",
    "archive",
    "email",
    "label",
    "delete",
    "reply",
    "magnify",
    "dots-vertical",
    "folder",
    "eye",
    "image-album",
    "inbox",
    "heart",
    "shopping-music",
    "camera",
    "chevron-down",
    "city",
    "checkbox-marked",
    "minus-box",
    "checkbox-blank-outline",
    "check",
    "close-circle",
    "arrow-up",
    "chevron-left",
    "chevron-right",
    "eye-off",
    "cancel",
    "format-letter-case",
    "plus",
    "star",
    "bell",
    "lock",
    "chevron-up",
    "calendar",
    "wallet-giftcard",
    "equal",
    "information",
    "star-outline",
    "file-pdf",
    "undo",
    "redo",
    "content-cut",
    "content-copy",
    "content-paste",
    "close",
    "menu",
    "android",
    "format-italic",
    "format-bold",
    "format-underline",
    "format-color-text",
    "heart-outline"
  ])
];

// src/rnpex/Examples/ListAccordionExample.tsx
var React263 = __toModule(require_react());
var ListAccordionExample = () => {
  const [expanded, setExpanded] = React263.useState(true);
  const _handlePress = () => {
    setExpanded(!expanded);
  };
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React263.createElement(ScrollView_default, {
    style: [styles135.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React263.createElement(List_exports.Section, {
    title: "Expandable list item"
  }, /* @__PURE__ */ React263.createElement(List_exports.Accordion, {
    left: (props) => /* @__PURE__ */ React263.createElement(List_exports.Icon, {
      ...props,
      icon: "folder"
    }),
    title: "Expandable list item"
  }, /* @__PURE__ */ React263.createElement(List_exports.Item, {
    title: "List item 1"
  }), /* @__PURE__ */ React263.createElement(List_exports.Item, {
    title: "List item 2"
  })), /* @__PURE__ */ React263.createElement(List_exports.Accordion, {
    left: (props) => /* @__PURE__ */ React263.createElement(List_exports.Icon, {
      ...props,
      icon: "folder"
    }),
    title: "Start expanded",
    expanded,
    onPress: _handlePress
  }, /* @__PURE__ */ React263.createElement(List_exports.Item, {
    title: "List item 1"
  }))), /* @__PURE__ */ React263.createElement(Divider_default, null), /* @__PURE__ */ React263.createElement(List_exports.Section, {
    title: "Expandable & multiline list item"
  }, /* @__PURE__ */ React263.createElement(List_exports.Accordion, {
    title: "Expandable list item",
    description: "Describes the expandable list item"
  }, /* @__PURE__ */ React263.createElement(List_exports.Item, {
    title: "List item 1"
  }), /* @__PURE__ */ React263.createElement(List_exports.Item, {
    title: "List item 2"
  }))), /* @__PURE__ */ React263.createElement(Divider_default, null), /* @__PURE__ */ React263.createElement(List_exports.Section, {
    title: "Expandable list with icons"
  }, /* @__PURE__ */ React263.createElement(List_exports.Accordion, {
    left: (props) => /* @__PURE__ */ React263.createElement(List_exports.Icon, {
      ...props,
      icon: "star"
    }),
    title: "Accordion item 1"
  }, /* @__PURE__ */ React263.createElement(List_exports.Item, {
    left: (props) => /* @__PURE__ */ React263.createElement(List_exports.Icon, {
      ...props,
      icon: "thumb-up"
    }),
    title: "List item 1"
  }), /* @__PURE__ */ React263.createElement(List_exports.Item, {
    left: (props) => /* @__PURE__ */ React263.createElement(List_exports.Icon, {
      ...props,
      icon: "thumb-down"
    }),
    title: "List item 2"
  }))));
};
ListAccordionExample.title = "List.Accordion";
var styles135 = StyleSheet_default2.create({
  container: {
    flex: 1
  }
});
var ListAccordionExample_default = ListAccordionExample;

// src/rnpex/Examples/ListAccordionGroupExample.tsx
var React264 = __toModule(require_react());
var ListAccordionGroupExample = () => {
  const [expandedId, setExpandedId] = React264.useState(void 0);
  const _onAccordionPress = (newExpandedId) => expandedId === newExpandedId ? setExpandedId(void 0) : setExpandedId(newExpandedId);
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React264.createElement(ScrollView_default, {
    style: [styles136.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React264.createElement(List_exports.AccordionGroup, null, /* @__PURE__ */ React264.createElement(List_exports.Section, {
    title: "Uncontrolled Accordion Group example"
  }, /* @__PURE__ */ React264.createElement(List_exports.Accordion, {
    left: (props) => /* @__PURE__ */ React264.createElement(List_exports.Icon, {
      ...props,
      icon: "folder"
    }),
    title: "Expandable list item",
    id: "1"
  }, /* @__PURE__ */ React264.createElement(List_exports.Item, {
    title: "List item 1"
  }), /* @__PURE__ */ React264.createElement(List_exports.Item, {
    title: "List item 2"
  })), /* @__PURE__ */ React264.createElement(List_exports.Accordion, {
    left: (props) => /* @__PURE__ */ React264.createElement(List_exports.Icon, {
      ...props,
      icon: "folder"
    }),
    title: "Expandable list item 2",
    id: "2"
  }, /* @__PURE__ */ React264.createElement(List_exports.Item, {
    title: "List item 1"
  })), /* @__PURE__ */ React264.createElement(List_exports.Accordion, {
    left: (props) => /* @__PURE__ */ React264.createElement(List_exports.Icon, {
      ...props,
      icon: "folder"
    }),
    title: "Expandable list item 2",
    id: "3"
  }, /* @__PURE__ */ React264.createElement(List_exports.Item, {
    title: "Another item"
  })))), /* @__PURE__ */ React264.createElement(List_exports.AccordionGroup, {
    expandedId,
    onAccordionPress: _onAccordionPress
  }, /* @__PURE__ */ React264.createElement(List_exports.Section, {
    title: "Controlled Accordion Group example"
  }, /* @__PURE__ */ React264.createElement(List_exports.Accordion, {
    left: (props) => /* @__PURE__ */ React264.createElement(List_exports.Icon, {
      ...props,
      icon: "folder"
    }),
    title: "Expandable list item",
    id: "1"
  }, /* @__PURE__ */ React264.createElement(List_exports.Item, {
    title: "List item 1"
  }), /* @__PURE__ */ React264.createElement(List_exports.Item, {
    title: "List item 2"
  })), /* @__PURE__ */ React264.createElement(List_exports.Accordion, {
    left: (props) => /* @__PURE__ */ React264.createElement(List_exports.Icon, {
      ...props,
      icon: "folder"
    }),
    title: "Expandable list item 2",
    id: "2"
  }, /* @__PURE__ */ React264.createElement(List_exports.Item, {
    title: "List item 1"
  })), /* @__PURE__ */ React264.createElement(List_exports.Accordion, {
    left: (props) => /* @__PURE__ */ React264.createElement(List_exports.Icon, {
      ...props,
      icon: "folder"
    }),
    title: "Expandable list item 2",
    id: "3"
  }, /* @__PURE__ */ React264.createElement(List_exports.Item, {
    title: "Another item"
  })))));
};
ListAccordionGroupExample.title = "List.AccordionGroup";
var styles136 = StyleSheet_default2.create({
  container: {
    flex: 1
  }
});
var ListAccordionGroupExample_default = ListAccordionGroupExample;

// src/rnpex/Examples/ListSectionExample.tsx
var React265 = __toModule(require_react());
var ListSectionExample = () => {
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React265.createElement(ScrollView_default, {
    style: [styles137.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React265.createElement(List_exports.Section, null, /* @__PURE__ */ React265.createElement(List_exports.Subheader, null, "Single line"), /* @__PURE__ */ React265.createElement(List_exports.Item, {
    left: (props) => /* @__PURE__ */ React265.createElement(List_exports.Icon, {
      ...props,
      icon: "calendar"
    }),
    title: "List item 1"
  }), /* @__PURE__ */ React265.createElement(List_exports.Item, {
    left: (props) => /* @__PURE__ */ React265.createElement(List_exports.Icon, {
      ...props,
      icon: "wallet-giftcard"
    }),
    title: "List item 2"
  }), /* @__PURE__ */ React265.createElement(List_exports.Item, {
    title: "List item 3",
    left: (props) => /* @__PURE__ */ React265.createElement(List_exports.Icon, {
      ...props,
      icon: "folder"
    }),
    right: (props) => /* @__PURE__ */ React265.createElement(List_exports.Icon, {
      ...props,
      icon: "equal"
    })
  })), /* @__PURE__ */ React265.createElement(Divider_default, null), /* @__PURE__ */ React265.createElement(List_exports.Section, null, /* @__PURE__ */ React265.createElement(List_exports.Subheader, null, "Two line"), /* @__PURE__ */ React265.createElement(List_exports.Item, {
    left: () => /* @__PURE__ */ React265.createElement(Image_default, {
      source: require_email_icon(),
      style: styles137.image
    }),
    title: "List item 1",
    description: "Describes item 1"
  }), /* @__PURE__ */ React265.createElement(List_exports.Item, {
    left: () => /* @__PURE__ */ React265.createElement(Image_default, {
      source: require_email_icon(),
      style: styles137.image
    }),
    right: (props) => /* @__PURE__ */ React265.createElement(List_exports.Icon, {
      ...props,
      icon: "information"
    }),
    title: "List item 2",
    description: "Describes item 2"
  })), /* @__PURE__ */ React265.createElement(Divider_default, null), /* @__PURE__ */ React265.createElement(List_exports.Section, null, /* @__PURE__ */ React265.createElement(List_exports.Subheader, null, "Three line"), /* @__PURE__ */ React265.createElement(List_exports.Item, {
    left: () => /* @__PURE__ */ React265.createElement(Image_default, {
      source: require_email_icon(),
      style: styles137.image
    }),
    title: "List item 1",
    description: "Describes item 1. Example of a very very long description."
  }), /* @__PURE__ */ React265.createElement(List_exports.Item, {
    left: () => /* @__PURE__ */ React265.createElement(Image_default, {
      source: require_email_icon(),
      style: styles137.image
    }),
    right: (props) => /* @__PURE__ */ React265.createElement(List_exports.Icon, {
      ...props,
      icon: "star-outline"
    }),
    title: "List item 2",
    description: "Describes item 2. Example of a very very long description."
  })), /* @__PURE__ */ React265.createElement(Divider_default, null), /* @__PURE__ */ React265.createElement(List_exports.Section, null, /* @__PURE__ */ React265.createElement(List_exports.Subheader, null, "Custom description"), /* @__PURE__ */ React265.createElement(List_exports.Item, {
    left: () => /* @__PURE__ */ React265.createElement(Image_default, {
      source: require_email_icon(),
      style: styles137.image
    }),
    right: (props) => /* @__PURE__ */ React265.createElement(List_exports.Icon, {
      ...props,
      icon: "star-outline"
    }),
    title: "List Item 1",
    description: ({ellipsizeMode, color: descriptionColor, fontSize}) => /* @__PURE__ */ React265.createElement(View_default, {
      style: [styles137.container, styles137.column]
    }, /* @__PURE__ */ React265.createElement(Text_default2, {
      numberOfLines: 2,
      ellipsizeMode,
      style: {color: descriptionColor, fontSize}
    }, "React Native Paper is a high-quality, standard-compliant Material Design library that has you covered in all major use-cases."), /* @__PURE__ */ React265.createElement(View_default, {
      style: [styles137.container, styles137.row, {paddingTop: 8}]
    }, /* @__PURE__ */ React265.createElement(Chip_default, {
      icon: "file-pdf",
      onPress: () => {
      }
    }, "DOCS.pdf")))
  })));
};
ListSectionExample.title = "List.Section";
var styles137 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  image: {
    height: 40,
    width: 40,
    margin: 8
  },
  row: {
    flexDirection: "row"
  },
  column: {
    flexDirection: "column"
  }
});
var ListSectionExample_default = ListSectionExample;

// src/rnpex/Examples/MenuExample.tsx
var React266 = __toModule(require_react());
var MORE_ICON2 = Platform_default.OS === "ios" ? "dots-horizontal" : "dots-vertical";
var MenuExample = ({navigation: navigation2}) => {
  const [visible, setVisible] = React266.useState({});
  const [contextualMenuCoord, setContextualMenuCoor] = React266.useState({x: 0, y: 0});
  const _toggleMenu = (name) => () => setVisible({...visible, [name]: !visible[name]});
  const _getVisible = (name) => !!visible[name];
  const _handleLongPress = (event4) => {
    const {nativeEvent} = event4;
    setContextualMenuCoor({
      x: nativeEvent.pageX,
      y: nativeEvent.pageY
    });
    setVisible({menu3: true});
  };
  const {
    colors: {background}
  } = useTheme();
  React266.useLayoutEffect(() => {
    navigation2.setOptions({
      headerShown: false
    });
  }, [navigation2]);
  return /* @__PURE__ */ React266.createElement(View_default, {
    style: styles138.screen
  }, /* @__PURE__ */ React266.createElement(Appbar_default2.Header, null, /* @__PURE__ */ React266.createElement(Appbar_default2.BackAction, {
    onPress: () => navigation2.goBack()
  }), /* @__PURE__ */ React266.createElement(Appbar_default2.Content, {
    title: "Menu"
  }), /* @__PURE__ */ React266.createElement(Menu_default, {
    visible: _getVisible("menu1"),
    onDismiss: _toggleMenu("menu1"),
    anchor: /* @__PURE__ */ React266.createElement(Appbar_default2.Action, {
      icon: MORE_ICON2,
      color: "white",
      onPress: _toggleMenu("menu1")
    })
  }, /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    onPress: () => {
    },
    title: "Undo"
  }), /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    onPress: () => {
    },
    title: "Redo"
  }), /* @__PURE__ */ React266.createElement(Divider_default, null), /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    onPress: () => {
    },
    title: "Cut",
    disabled: true
  }), /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    onPress: () => {
    },
    title: "Copy",
    disabled: true
  }), /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    onPress: () => {
    },
    title: "Paste"
  }))), /* @__PURE__ */ React266.createElement(View_default, {
    style: [styles138.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React266.createElement(View_default, {
    style: styles138.alignCenter
  }, /* @__PURE__ */ React266.createElement(Menu_default, {
    visible: _getVisible("menu2"),
    onDismiss: _toggleMenu("menu2"),
    anchor: /* @__PURE__ */ React266.createElement(Button_default, {
      mode: "outlined",
      onPress: _toggleMenu("menu2")
    }, "Menu with icons")
  }, /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    icon: "undo",
    onPress: () => {
    },
    title: "Undo"
  }), /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    icon: "redo",
    onPress: () => {
    },
    title: "Redo"
  }), /* @__PURE__ */ React266.createElement(Divider_default, null), /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    icon: "content-cut",
    onPress: () => {
    },
    title: "Cut",
    disabled: true
  }), /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    icon: "content-copy",
    onPress: () => {
    },
    title: "Copy",
    disabled: true
  }), /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    icon: "content-paste",
    onPress: () => {
    },
    title: "Paste"
  }))), /* @__PURE__ */ React266.createElement(Menu_default, {
    visible: _getVisible("menu3"),
    onDismiss: _toggleMenu("menu3"),
    anchor: contextualMenuCoord
  }, /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    onPress: () => {
    },
    title: "Item 1"
  }), /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    onPress: () => {
    },
    title: "Item 2"
  }), /* @__PURE__ */ React266.createElement(Divider_default, null), /* @__PURE__ */ React266.createElement(Menu_default.Item, {
    onPress: () => {
    },
    title: "Item 3",
    disabled: true
  })), /* @__PURE__ */ React266.createElement(List_exports.Section, {
    style: styles138.list,
    title: "Contextual menu"
  }, /* @__PURE__ */ React266.createElement(TouchableRipple_default, {
    onPress: () => {
    },
    onLongPress: _handleLongPress
  }, /* @__PURE__ */ React266.createElement(List_exports.Item, {
    title: "List item",
    description: "Long press me to open contextual menu"
  })))));
};
MenuExample.title = "Menu";
var styles138 = StyleSheet_default2.create({
  screen: {
    flex: 1
  },
  container: {
    flex: 1,
    paddingTop: 48
  },
  list: {
    marginTop: 48
  },
  alignCenter: {
    alignItems: "center"
  }
});
var MenuExample_default = MenuExample;

// src/rnpex/Examples/ProgressBarExample.tsx
var React267 = __toModule(require_react());
var ProgressBarExample = () => {
  const [visible, setVisible] = React267.useState(true);
  const [progress, setProgress] = React267.useState(0.3);
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React267.createElement(View_default, {
    style: [styles139.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React267.createElement(Button_default, {
    onPress: () => setVisible(!visible)
  }, "Toggle visible"), /* @__PURE__ */ React267.createElement(Button_default, {
    onPress: () => setProgress(Math.random())
  }, "Random progress"), /* @__PURE__ */ React267.createElement(View_default, {
    style: styles139.row
  }, /* @__PURE__ */ React267.createElement(Paragraph_default, null, "Default ProgressBar "), /* @__PURE__ */ React267.createElement(ProgressBar_default, {
    progress,
    visible
  })), /* @__PURE__ */ React267.createElement(View_default, {
    style: styles139.row
  }, /* @__PURE__ */ React267.createElement(Paragraph_default, null, "Indeterminate ProgressBar"), /* @__PURE__ */ React267.createElement(ProgressBar_default, {
    indeterminate: true,
    visible
  })), /* @__PURE__ */ React267.createElement(View_default, {
    style: styles139.row
  }, /* @__PURE__ */ React267.createElement(Paragraph_default, null, "ProgressBar with custom color"), /* @__PURE__ */ React267.createElement(ProgressBar_default, {
    progress,
    visible,
    color: colors_exports.red800
  })), /* @__PURE__ */ React267.createElement(View_default, {
    style: styles139.row
  }, /* @__PURE__ */ React267.createElement(Paragraph_default, null, "ProgressBar with custom background color"), /* @__PURE__ */ React267.createElement(ProgressBar_default, {
    progress,
    visible,
    color: colors_exports.red800,
    style: {backgroundColor: colors_exports.teal500}
  })), /* @__PURE__ */ React267.createElement(View_default, {
    style: styles139.row
  }, /* @__PURE__ */ React267.createElement(Paragraph_default, null, "ProgressBar with custom height"), /* @__PURE__ */ React267.createElement(ProgressBar_default, {
    progress,
    visible,
    style: {height: 20}
  })));
};
ProgressBarExample.title = "Progress Bar";
var styles139 = StyleSheet_default2.create({
  container: {
    flex: 1,
    padding: 16
  },
  row: {
    marginVertical: 10
  }
});
var ProgressBarExample_default = ProgressBarExample;

// src/rnpex/Examples/RadioButtonExample.tsx
var React268 = __toModule(require_react());
var RadioButtonExample = () => {
  const [checked, setChecked] = React268.useState("normal");
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React268.createElement(View_default, {
    style: [
      styles140.container,
      {
        backgroundColor: background
      }
    ]
  }, /* @__PURE__ */ React268.createElement(TouchableRipple_default, {
    onPress: () => setChecked("normal")
  }, /* @__PURE__ */ React268.createElement(View_default, {
    style: styles140.row
  }, /* @__PURE__ */ React268.createElement(Paragraph_default, null, "Normal - Material Design"), /* @__PURE__ */ React268.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React268.createElement(RadioButton_default2.Android, {
    value: "normal",
    status: checked === "normal" ? "checked" : "unchecked"
  })))), /* @__PURE__ */ React268.createElement(TouchableRipple_default, {
    onPress: () => setChecked("normal-ios")
  }, /* @__PURE__ */ React268.createElement(View_default, {
    style: styles140.row
  }, /* @__PURE__ */ React268.createElement(Paragraph_default, null, "Normal 2 - IOS"), /* @__PURE__ */ React268.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React268.createElement(RadioButton_default2.IOS, {
    value: "normal-ios",
    status: checked === "normal-ios" ? "checked" : "unchecked"
  })))), /* @__PURE__ */ React268.createElement(TouchableRipple_default, {
    onPress: () => setChecked("custom")
  }, /* @__PURE__ */ React268.createElement(View_default, {
    style: styles140.row
  }, /* @__PURE__ */ React268.createElement(Paragraph_default, null, "Custom"), /* @__PURE__ */ React268.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React268.createElement(RadioButton_default2, {
    value: "custom",
    color: colors_exports.blue500,
    status: checked === "custom" ? "checked" : "unchecked"
  })))), /* @__PURE__ */ React268.createElement(RadioButton_default2.Item, {
    label: "Normal 3 - Item",
    value: "normal-item",
    status: checked === "normal-item" ? "checked" : "unchecked",
    onPress: () => setChecked("normal-item")
  }), /* @__PURE__ */ React268.createElement(View_default, {
    style: styles140.row
  }, /* @__PURE__ */ React268.createElement(Paragraph_default, null, "Checked (Disabled)"), /* @__PURE__ */ React268.createElement(RadioButton_default2, {
    value: "first",
    status: "checked",
    disabled: true
  })), /* @__PURE__ */ React268.createElement(View_default, {
    style: styles140.row
  }, /* @__PURE__ */ React268.createElement(Paragraph_default, null, "Unchecked (Disabled)"), /* @__PURE__ */ React268.createElement(RadioButton_default2, {
    value: "second",
    status: "unchecked",
    disabled: true
  })), /* @__PURE__ */ React268.createElement(RadioButton_default2.Item, {
    label: "Checked - Item (Disabled)",
    value: "third",
    status: "checked",
    disabled: true
  }), /* @__PURE__ */ React268.createElement(RadioButton_default2.Item, {
    label: "Unchecked - Item (Disabled)",
    value: "fourth",
    status: "unchecked",
    disabled: true
  }));
};
RadioButtonExample.title = "Radio Button";
var styles140 = StyleSheet_default2.create({
  container: {
    flex: 1,
    backgroundColor: colors_exports.white,
    paddingVertical: 8
  },
  row: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingVertical: 8,
    paddingHorizontal: 16
  }
});
var RadioButtonExample_default = RadioButtonExample;

// src/rnpex/Examples/RadioButtonGroupExample.tsx
var React269 = __toModule(require_react());
var RadioButtonGroupExample = () => {
  const [value, setValue] = React269.useState("first");
  const [value2, setValue2] = React269.useState("first");
  const {
    colors: {background, primary}
  } = useTheme();
  return /* @__PURE__ */ React269.createElement(View_default, {
    style: [
      styles141.container,
      {
        backgroundColor: background
      }
    ]
  }, /* @__PURE__ */ React269.createElement(List_exports.Section, {
    title: "With RadioButton"
  }, /* @__PURE__ */ React269.createElement(RadioButton_default2.Group, {
    value,
    onValueChange: (value3) => setValue(value3)
  }, /* @__PURE__ */ React269.createElement(View_default, {
    style: styles141.row
  }, /* @__PURE__ */ React269.createElement(Paragraph_default, null, "First"), /* @__PURE__ */ React269.createElement(RadioButton_default2, {
    value: "first"
  })), /* @__PURE__ */ React269.createElement(View_default, {
    style: styles141.row
  }, /* @__PURE__ */ React269.createElement(Paragraph_default, null, "Second"), /* @__PURE__ */ React269.createElement(RadioButton_default2.Android, {
    value: "second"
  })), /* @__PURE__ */ React269.createElement(View_default, {
    style: styles141.row
  }, /* @__PURE__ */ React269.createElement(Paragraph_default, null, "Third"), /* @__PURE__ */ React269.createElement(RadioButton_default2.IOS, {
    value: "third"
  })))), /* @__PURE__ */ React269.createElement(List_exports.Section, {
    title: "With RadioButton.Item"
  }, /* @__PURE__ */ React269.createElement(RadioButton_default2.Group, {
    value: value2,
    onValueChange: (value3) => setValue2(value3)
  }, /* @__PURE__ */ React269.createElement(RadioButton_default2.Item, {
    label: "First item",
    value: "first"
  }), /* @__PURE__ */ React269.createElement(RadioButton_default2.Item, {
    label: "Second item",
    value: "second"
  }), /* @__PURE__ */ React269.createElement(RadioButton_default2.Item, {
    label: "Third item",
    value: "third",
    labelStyle: {color: primary}
  }))));
};
RadioButtonGroupExample.title = "Radio Button Group";
var styles141 = StyleSheet_default2.create({
  container: {
    flex: 1,
    backgroundColor: colors_exports.white,
    padding: 8
  },
  row: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingVertical: 8,
    paddingHorizontal: 16
  }
});
var RadioButtonGroupExample_default = RadioButtonGroupExample;

// src/rnpex/Examples/SearchbarExample.tsx
var React270 = __toModule(require_react());
var SearchExample = ({navigation: navigation2}) => {
  const [firstQuery, setFirstQuery] = React270.useState("");
  const [secondQuery, setSecondQuery] = React270.useState("");
  const [thirdQuery, setThirdQuery] = React270.useState("");
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React270.createElement(View_default, {
    style: [styles142.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React270.createElement(Searchbar_default, {
    placeholder: "Search",
    onChangeText: (query2) => setFirstQuery(query2),
    value: firstQuery,
    style: styles142.searchbar
  }), /* @__PURE__ */ React270.createElement(Caption_default, {
    style: styles142.caption
  }, "Clickable icon"), /* @__PURE__ */ React270.createElement(Searchbar_default, {
    placeholder: "Search",
    onChangeText: (query2) => setSecondQuery(query2),
    value: secondQuery,
    onIconPress: () => navigation2.goBack(),
    icon: {source: "arrow-left", direction: "auto"},
    style: styles142.searchbar
  }), /* @__PURE__ */ React270.createElement(Searchbar_default, {
    placeholder: "Search",
    onChangeText: (query2) => setThirdQuery(query2),
    value: thirdQuery,
    onIconPress: () => {
    },
    icon: "menu",
    style: styles142.searchbar
  }));
};
SearchExample.title = "Searchbar";
var styles142 = StyleSheet_default2.create({
  container: {
    flex: 1,
    backgroundColor: colors_exports.grey200
  },
  caption: {
    paddingHorizontal: 16,
    paddingVertical: 8
  },
  searchbar: {
    margin: 4
  }
});
var SearchbarExample_default = SearchExample;

// src/rnpex/Examples/SnackbarExample.tsx
var React271 = __toModule(require_react());
var SnackbarExample = () => {
  const [visible, setVisible] = React271.useState(false);
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React271.createElement(View_default, {
    style: [styles143.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React271.createElement(Button_default, {
    mode: "outlined",
    onPress: () => setVisible(!visible)
  }, visible ? "Hide" : "Show"), /* @__PURE__ */ React271.createElement(Snackbar_default, {
    visible,
    onDismiss: () => setVisible(false),
    action: {
      label: "Undo",
      onPress: () => {
      }
    },
    duration: Snackbar_default.DURATION_MEDIUM
  }, "Hey there! I'm a Snackbar."));
};
SnackbarExample.title = "Snackbar";
var styles143 = StyleSheet_default2.create({
  container: {
    flex: 1,
    backgroundColor: colors_exports.grey200,
    alignItems: "center",
    justifyContent: "center"
  }
});
var SnackbarExample_default = SnackbarExample;

// src/rnpex/Examples/SurfaceExample.tsx
var React272 = __toModule(require_react());
var SurfaceExample = () => {
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React272.createElement(ScrollView_default, {
    style: [styles144.container, {backgroundColor: background}],
    contentContainerStyle: styles144.content
  }, [1, 2, 4, 6, 12].map((i) => /* @__PURE__ */ React272.createElement(Surface_default, {
    key: i,
    style: [styles144.surface, {elevation: i}]
  }, /* @__PURE__ */ React272.createElement(Text_default2, null, i))));
};
SurfaceExample.title = "Surface";
var styles144 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  content: {
    padding: 24,
    alignItems: "center"
  },
  surface: {
    margin: 24,
    height: 80,
    width: 80,
    alignItems: "center",
    justifyContent: "center"
  }
});
var SurfaceExample_default = SurfaceExample;

// src/rnpex/Examples/SwitchExample.tsx
var React273 = __toModule(require_react());
var SwitchExample = () => {
  const [valueNormal, setNormalValue] = React273.useState(true);
  const [valueCustom, setCustomValue] = React273.useState(true);
  const {
    colors: {background}
  } = useTheme();
  const switchValueNormalLabel = `switch ${valueNormal === true ? "on" : "off"}`;
  const switchValueCustomlLabel = `switch ${valueCustom === true ? "on" : "off"}`;
  return Platform_default.OS === "android" ? /* @__PURE__ */ React273.createElement(View_default, {
    style: [
      styles145.container,
      {
        backgroundColor: background
      }
    ]
  }, /* @__PURE__ */ React273.createElement(TouchableRipple_default, {
    onPress: () => setNormalValue(!valueNormal)
  }, /* @__PURE__ */ React273.createElement(View_default, {
    style: styles145.row
  }, /* @__PURE__ */ React273.createElement(Paragraph_default, null, "Normal ", switchValueNormalLabel), /* @__PURE__ */ React273.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React273.createElement(Switch_default2, {
    value: valueNormal
  })))), /* @__PURE__ */ React273.createElement(TouchableRipple_default, {
    onPress: () => setCustomValue(!valueCustom)
  }, /* @__PURE__ */ React273.createElement(View_default, {
    style: styles145.row
  }, /* @__PURE__ */ React273.createElement(Paragraph_default, null, "Custom ", switchValueCustomlLabel), /* @__PURE__ */ React273.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React273.createElement(Switch_default2, {
    value: valueCustom,
    color: colors_exports.blue500
  })))), /* @__PURE__ */ React273.createElement(View_default, {
    style: styles145.row
  }, /* @__PURE__ */ React273.createElement(Paragraph_default, null, "Switch on (disabled)"), /* @__PURE__ */ React273.createElement(Switch_default2, {
    disabled: true,
    value: true
  })), /* @__PURE__ */ React273.createElement(View_default, {
    style: styles145.row
  }, /* @__PURE__ */ React273.createElement(Paragraph_default, null, "Switch off (disabled)"), /* @__PURE__ */ React273.createElement(Switch_default2, {
    disabled: true
  }))) : /* @__PURE__ */ React273.createElement(View_default, {
    style: [
      styles145.container,
      {
        backgroundColor: background
      }
    ]
  }, /* @__PURE__ */ React273.createElement(View_default, {
    style: styles145.row
  }, /* @__PURE__ */ React273.createElement(Paragraph_default, null, "Normal ", switchValueNormalLabel), /* @__PURE__ */ React273.createElement(Switch_default2, {
    value: valueNormal,
    onValueChange: () => setNormalValue(!valueNormal)
  })), /* @__PURE__ */ React273.createElement(View_default, {
    style: styles145.row
  }, /* @__PURE__ */ React273.createElement(Paragraph_default, null, "Custom ", switchValueCustomlLabel), /* @__PURE__ */ React273.createElement(Switch_default2, {
    value: valueCustom,
    onValueChange: () => setCustomValue(!valueCustom),
    color: colors_exports.blue500
  })), /* @__PURE__ */ React273.createElement(View_default, {
    style: styles145.row
  }, /* @__PURE__ */ React273.createElement(Paragraph_default, null, "Switch on (disabled)"), /* @__PURE__ */ React273.createElement(Switch_default2, {
    value: true,
    disabled: true
  })), /* @__PURE__ */ React273.createElement(View_default, {
    style: styles145.row
  }, /* @__PURE__ */ React273.createElement(Paragraph_default, null, "Switch off (disabled)"), /* @__PURE__ */ React273.createElement(Switch_default2, {
    value: false,
    disabled: true
  })));
};
SwitchExample.title = "Switch";
var styles145 = StyleSheet_default2.create({
  container: {
    flex: 1,
    backgroundColor: colors_exports.white,
    paddingVertical: 8
  },
  row: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingVertical: 8,
    paddingHorizontal: 16
  }
});
var SwitchExample_default = SwitchExample;

// src/rnpex/Examples/TextExample.tsx
var React274 = __toModule(require_react());
var TextExample = () => {
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React274.createElement(View_default, {
    style: [styles146.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React274.createElement(Caption_default, {
    style: styles146.text
  }, "Caption"), /* @__PURE__ */ React274.createElement(Paragraph_default, {
    style: styles146.text
  }, "Paragraph"), /* @__PURE__ */ React274.createElement(Subheading_default, {
    style: styles146.text
  }, "Subheading"), /* @__PURE__ */ React274.createElement(Title_default, {
    style: styles146.text
  }, "Title"), /* @__PURE__ */ React274.createElement(Title_default, {
    style: [{fontWeight: "bold"}, styles146.text]
  }, "Title"), /* @__PURE__ */ React274.createElement(Title_default, {
    style: [{fontStyle: "italic"}, styles146.text]
  }, "Title"), /* @__PURE__ */ React274.createElement(Headline_default, {
    style: styles146.text
  }, "Headline"));
};
TextExample.title = "Typography";
var styles146 = StyleSheet_default2.create({
  container: {
    padding: 16,
    flex: 1
  },
  text: {
    marginVertical: 4
  }
});
var TextExample_default = TextExample;

// src/rnpex/Examples/TextInputExample.tsx
var React275 = __toModule(require_react());

// node_modules/@expo/vector-icons/FontAwesome.js
var FontAwesome_default4 = FontAwesome_default3;

// src/rnpex/utils.ts
function inputReducer(state, action) {
  switch (action.type) {
    case action.type:
      state[action.type] = action.payload;
      return {...state};
    default:
      return {...state};
  }
}

// src/rnpex/Examples/TextInputExample.tsx
var MAX_LENGTH = 20;
var initialState = {
  text: "",
  customIconText: "",
  name: "",
  outlinedText: "",
  largeText: "",
  flatTextPassword: "Password",
  outlinedLargeText: "",
  outlinedTextPassword: "",
  nameNoPadding: "",
  flatDenseText: "",
  flatDense: "",
  outlinedDenseText: "",
  outlinedDense: "",
  flatMultiline: "",
  flatTextArea: "",
  outlinedMultiline: "",
  outlinedTextArea: "",
  maxLengthName: "",
  flatTextSecureEntry: true,
  outlineTextSecureEntry: true,
  iconsColor: {
    flatLeftIcon: void 0,
    flatRightIcon: void 0,
    outlineLeftIcon: void 0,
    outlineRightIcon: void 0,
    customIcon: void 0
  }
};
var TextInputAvoidingView = ({children}) => {
  return Platform_default.OS === "ios" ? /* @__PURE__ */ React275.createElement(KeyboardAvoidingView_default, {
    style: styles147.wrapper,
    behavior: "padding",
    keyboardVerticalOffset: 80
  }, children) : /* @__PURE__ */ React275.createElement(React275.Fragment, null, children);
};
var TextInputExample = () => {
  const [state, dispatch] = React275.useReducer(inputReducer, initialState);
  const {
    text: text2,
    customIconText,
    name,
    outlinedText,
    largeText,
    flatTextPassword,
    outlinedLargeText,
    outlinedTextPassword,
    nameNoPadding,
    flatDenseText,
    flatDense,
    outlinedDenseText,
    outlinedDense,
    flatMultiline,
    flatTextArea,
    outlinedMultiline,
    outlinedTextArea,
    maxLengthName,
    flatTextSecureEntry,
    outlineTextSecureEntry,
    iconsColor: {flatLeftIcon, flatRightIcon, outlineLeftIcon, outlineRightIcon, customIcon}
  } = state;
  const _isUsernameValid = (name2) => /^[a-zA-Z]*$/.test(name2);
  const {
    colors: {background, accent}
  } = useTheme();
  const inputActionHandler = (type, payload) => dispatch({
    type,
    payload
  });
  const changeIconColor = (name2) => {
    const color39 = state.iconsColor[name2];
    const colors = {
      ...state.iconsColor,
      [name2]: !color39 ? accent : void 0
    };
    dispatch({
      type: "iconsColor",
      payload: colors
    });
  };
  return /* @__PURE__ */ React275.createElement(TextInputAvoidingView, null, /* @__PURE__ */ React275.createElement(ScrollView_default, {
    style: [styles147.container, {backgroundColor: background}],
    keyboardShouldPersistTaps: "always",
    removeClippedSubviews: false
  }, /* @__PURE__ */ React275.createElement(TextInput_default2, {
    style: styles147.inputContainerStyle,
    label: "Flat input",
    placeholder: "Type something",
    value: text2,
    onChangeText: (text3) => inputActionHandler("text", text3),
    left: /* @__PURE__ */ React275.createElement(TextInput_default2.Icon, {
      name: "heart",
      color: flatLeftIcon,
      onPress: () => {
        changeIconColor("flatLeftIcon");
      }
    }),
    right: /* @__PURE__ */ React275.createElement(TextInput_default2.Affix, {
      text: "/100"
    })
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    style: [styles147.inputContainerStyle, styles147.fontSize],
    label: "Flat input large font",
    placeholder: "Type something",
    value: largeText,
    onChangeText: (largeText2) => inputActionHandler("largeText", largeText2),
    left: /* @__PURE__ */ React275.createElement(TextInput_default2.Affix, {
      text: "#"
    }),
    right: /* @__PURE__ */ React275.createElement(TextInput_default2.Icon, {
      name: "heart",
      color: flatRightIcon,
      onPress: () => {
        changeIconColor("flatRightIcon");
      }
    })
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    style: [styles147.inputContainerStyle, styles147.fontSize],
    label: "Flat input large font",
    placeholder: "Type something",
    value: flatTextPassword,
    onChangeText: (flatTextPassword2) => inputActionHandler("flatTextPassword", flatTextPassword2),
    secureTextEntry: flatTextSecureEntry,
    right: /* @__PURE__ */ React275.createElement(TextInput_default2.Icon, {
      name: flatTextSecureEntry ? "eye" : "eye-off",
      onPress: () => dispatch({
        type: "flatTextSecureEntry",
        payload: !flatTextSecureEntry
      }),
      forceTextInputFocus: false
    })
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    style: styles147.inputContainerStyle,
    label: "Flat input with custom icon",
    placeholder: "Type something",
    value: customIconText,
    onChangeText: (text3) => inputActionHandler("customIconText", text3),
    right: /* @__PURE__ */ React275.createElement(TextInput_default2.Affix, {
      text: "/100"
    }),
    left: /* @__PURE__ */ React275.createElement(TextInput_default2.Icon, {
      name: () => /* @__PURE__ */ React275.createElement(FontAwesome_default4, {
        name: "heart",
        size: 24,
        color: customIcon,
        onPress: () => {
          changeIconColor("customIcon");
        }
      })
    })
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    style: styles147.inputContainerStyle,
    dense: true,
    label: "Dense flat input",
    placeholder: "Type something",
    value: flatDenseText,
    onChangeText: (flatDenseText2) => inputActionHandler("flatDenseText", flatDenseText2),
    left: /* @__PURE__ */ React275.createElement(TextInput_default2.Affix, {
      text: "#"
    })
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    style: styles147.inputContainerStyle,
    dense: true,
    placeholder: "Dense flat input without label",
    value: flatDense,
    onChangeText: (flatDense2) => inputActionHandler("flatDense", flatDense2)
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    style: styles147.inputContainerStyle,
    label: "Flat input multiline",
    multiline: true,
    placeholder: "Type something",
    value: flatMultiline,
    onChangeText: (flatMultiline2) => inputActionHandler("flatMultiline", flatMultiline2)
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    style: [styles147.inputContainerStyle, styles147.textArea],
    label: "Flat input text area",
    multiline: true,
    placeholder: "Type something",
    value: flatTextArea,
    onChangeText: (flatTextArea2) => inputActionHandler("flatTextArea", flatTextArea2)
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    disabled: true,
    style: styles147.inputContainerStyle,
    label: "Disabled flat input"
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    mode: "outlined",
    style: styles147.inputContainerStyle,
    label: "Outlined input",
    placeholder: "Type something",
    value: outlinedText,
    onChangeText: (outlinedText2) => inputActionHandler("outlinedText", outlinedText2),
    left: /* @__PURE__ */ React275.createElement(TextInput_default2.Icon, {
      name: "heart",
      color: outlineLeftIcon,
      onPress: () => {
        changeIconColor("outlineLeftIcon");
      }
    }),
    right: /* @__PURE__ */ React275.createElement(TextInput_default2.Affix, {
      text: "/100"
    })
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    mode: "outlined",
    style: [styles147.inputContainerStyle, styles147.fontSize],
    label: "Outlined large font",
    placeholder: "Type something",
    value: outlinedLargeText,
    onChangeText: (outlinedLargeText2) => inputActionHandler("outlinedLargeText", outlinedLargeText2),
    left: /* @__PURE__ */ React275.createElement(TextInput_default2.Affix, {
      text: "$"
    }),
    right: /* @__PURE__ */ React275.createElement(TextInput_default2.Icon, {
      name: "heart",
      color: outlineRightIcon,
      onPress: () => {
        changeIconColor("outlineRightIcon");
      }
    })
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    mode: "outlined",
    style: [styles147.inputContainerStyle, styles147.fontSize],
    label: "Outlined large font",
    placeholder: "Type something",
    value: outlinedTextPassword,
    onChangeText: (outlinedTextPassword2) => inputActionHandler("outlinedTextPassword", outlinedTextPassword2),
    secureTextEntry: outlineTextSecureEntry,
    right: /* @__PURE__ */ React275.createElement(TextInput_default2.Icon, {
      name: outlineTextSecureEntry ? "eye" : "eye-off",
      onPress: () => dispatch({
        type: "outlineTextSecureEntry",
        payload: !outlineTextSecureEntry
      })
    })
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    mode: "outlined",
    style: styles147.inputContainerStyle,
    dense: true,
    label: "Dense outlined input",
    placeholder: "Type something",
    value: outlinedDenseText,
    onChangeText: (outlinedDenseText2) => inputActionHandler("outlinedDenseText", outlinedDenseText2),
    left: /* @__PURE__ */ React275.createElement(TextInput_default2.Affix, {
      text: "$"
    })
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    mode: "outlined",
    style: styles147.inputContainerStyle,
    dense: true,
    placeholder: "Dense outlined input without label",
    value: outlinedDense,
    onChangeText: (outlinedDense2) => inputActionHandler("outlinedDense", outlinedDense2)
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    mode: "outlined",
    style: styles147.inputContainerStyle,
    label: "Outlined input multiline",
    multiline: true,
    placeholder: "Type something",
    value: outlinedMultiline,
    onChangeText: (outlinedMultiline2) => inputActionHandler("outlinedMultiline", outlinedMultiline2)
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    mode: "outlined",
    style: [styles147.inputContainerStyle, styles147.textArea],
    label: "Outlined input text area",
    multiline: true,
    placeholder: "Type something",
    value: outlinedTextArea,
    onChangeText: (outlinedTextArea2) => inputActionHandler("outlinedTextArea", outlinedTextArea2)
  }), /* @__PURE__ */ React275.createElement(TextInput_default2, {
    mode: "outlined",
    disabled: true,
    style: styles147.inputContainerStyle,
    label: "Disabled outlined input"
  }), /* @__PURE__ */ React275.createElement(View_default, {
    style: styles147.inputContainerStyle
  }, /* @__PURE__ */ React275.createElement(TextInput_default2, {
    label: "Input with helper text",
    placeholder: "Enter username, only letters",
    value: name,
    error: !_isUsernameValid(name),
    onChangeText: (name2) => inputActionHandler("name", name2)
  }), /* @__PURE__ */ React275.createElement(HelperText_default, {
    type: "error",
    visible: !_isUsernameValid(name)
  }, "Error: Only letters are allowed")), /* @__PURE__ */ React275.createElement(View_default, {
    style: styles147.inputContainerStyle
  }, /* @__PURE__ */ React275.createElement(TextInput_default2, {
    label: "Input with helper text and character counter",
    placeholder: "Enter username, only letters",
    value: maxLengthName,
    error: !_isUsernameValid(maxLengthName),
    onChangeText: (maxLengthName2) => inputActionHandler("maxLengthName", maxLengthName2),
    maxLength: MAX_LENGTH
  }), /* @__PURE__ */ React275.createElement(View_default, {
    style: styles147.helpersWrapper
  }, /* @__PURE__ */ React275.createElement(HelperText_default, {
    type: "error",
    visible: !_isUsernameValid(maxLengthName),
    style: styles147.helper
  }, "Error: Numbers and special characters are not allowed"), /* @__PURE__ */ React275.createElement(HelperText_default, {
    type: "info",
    visible: true,
    style: styles147.counterHelper
  }, maxLengthName.length, " / ", MAX_LENGTH))), /* @__PURE__ */ React275.createElement(View_default, {
    style: styles147.inputContainerStyle
  }, /* @__PURE__ */ React275.createElement(TextInput_default2, {
    label: "Input with no padding",
    style: {backgroundColor: "transparent", paddingHorizontal: 0},
    placeholder: "Enter username, only letters",
    value: nameNoPadding,
    error: !_isUsernameValid(nameNoPadding),
    onChangeText: (nameNoPadding2) => inputActionHandler("nameNoPadding", nameNoPadding2)
  }), /* @__PURE__ */ React275.createElement(HelperText_default, {
    type: "error",
    padding: "none",
    visible: !_isUsernameValid(nameNoPadding)
  }, "Error: Only letters are allowed")), /* @__PURE__ */ React275.createElement(View_default, {
    style: styles147.inputContainerStyle
  }, /* @__PURE__ */ React275.createElement(TextInput_default2, {
    label: "Input with text align center",
    style: {
      textAlign: "center"
    }
  })), /* @__PURE__ */ React275.createElement(View_default, {
    style: styles147.inputContainerStyle
  }, /* @__PURE__ */ React275.createElement(TextInput_default2, {
    mode: "outlined",
    label: "Outlined input with text align center",
    style: {
      textAlign: "center"
    }
  }))));
};
TextInputExample.title = "TextInput";
var styles147 = StyleSheet_default2.create({
  container: {
    flex: 1,
    padding: 8
  },
  helpersWrapper: {
    flexDirection: "row",
    justifyContent: "space-between"
  },
  wrapper: {
    flex: 1
  },
  helper: {
    flexShrink: 1
  },
  counterHelper: {
    textAlign: "right"
  },
  inputContainerStyle: {
    margin: 8
  },
  fontSize: {
    fontSize: 32
  },
  textArea: {
    height: 80
  }
});
var TextInputExample_default = TextInputExample;

// src/rnpex/Examples/ToggleButtonExample.tsx
var React276 = __toModule(require_react());
var ToggleButtonExample = () => {
  const [first, setFirst] = React276.useState("bold");
  const [fruit, setFruit] = React276.useState("watermelon");
  const [status, setStatus] = React276.useState("checked");
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React276.createElement(View_default, {
    style: [styles148.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React276.createElement(List_exports.Section, {
    title: "Single"
  }, /* @__PURE__ */ React276.createElement(View_default, {
    style: styles148.padding
  }, /* @__PURE__ */ React276.createElement(ToggleButton_default2, {
    icon: "android",
    value: "android",
    status,
    onPress: (status2) => setStatus(status2 === "checked" ? "unchecked" : "checked")
  }))), /* @__PURE__ */ React276.createElement(List_exports.Section, {
    title: "Group"
  }, /* @__PURE__ */ React276.createElement(ToggleButton_default2.Row, {
    value: first,
    onValueChange: (value) => setFirst(value),
    style: styles148.padding
  }, /* @__PURE__ */ React276.createElement(ToggleButton_default2, {
    disabled: true,
    icon: "format-italic",
    value: "italic"
  }), /* @__PURE__ */ React276.createElement(ToggleButton_default2, {
    icon: "format-bold",
    value: "bold"
  }), /* @__PURE__ */ React276.createElement(ToggleButton_default2, {
    icon: "format-underline",
    value: "underlined"
  }), /* @__PURE__ */ React276.createElement(ToggleButton_default2, {
    icon: "format-color-text",
    value: "format-color"
  }))), /* @__PURE__ */ React276.createElement(List_exports.Section, {
    title: "Custom"
  }, /* @__PURE__ */ React276.createElement(View_default, {
    style: [styles148.padding, styles148.row]
  }, /* @__PURE__ */ React276.createElement(ToggleButton_default2.Group, {
    value: fruit,
    onValueChange: (value) => setFruit(value)
  }, /* @__PURE__ */ React276.createElement(ImageBackground_default, {
    style: {
      width: 143,
      height: 153,
      margin: 2
    },
    source: {
      uri: "https://images.pexels.com/photos/1068534/pexels-photo-1068534.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260"
    }
  }, /* @__PURE__ */ React276.createElement(ToggleButton_default2, {
    value: "watermelon",
    size: 24,
    style: {
      position: "absolute",
      right: 0
    },
    color: "white",
    icon: fruit === "watermelon" ? "heart" : "heart-outline"
  })), /* @__PURE__ */ React276.createElement(ImageBackground_default, {
    style: {
      width: 143,
      height: 153,
      margin: 2
    },
    source: {
      uri: "https://images.pexels.com/photos/46174/strawberries-berries-fruit-freshness-46174.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260"
    }
  }, /* @__PURE__ */ React276.createElement(ToggleButton_default2, {
    value: "strawberries",
    size: 24,
    style: {
      position: "absolute",
      right: 0
    },
    color: "white",
    icon: fruit === "strawberries" ? "heart" : "heart-outline"
  }))))));
};
ToggleButtonExample.title = "Toggle Button";
var styles148 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  padding: {
    paddingHorizontal: 16
  },
  row: {
    flexDirection: "row"
  }
});
var ToggleButtonExample_default = ToggleButtonExample;

// src/rnpex/Examples/TouchableRippleExample.tsx
var React277 = __toModule(require_react());
var RippleExample = () => {
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React277.createElement(View_default, {
    style: [styles149.container, {backgroundColor: background}]
  }, /* @__PURE__ */ React277.createElement(TouchableRipple_default, {
    style: styles149.ripple,
    onPress: () => {
    },
    rippleColor: "rgba(0, 0, 0, .32)"
  }, /* @__PURE__ */ React277.createElement(View_default, {
    pointerEvents: "none"
  }, /* @__PURE__ */ React277.createElement(Paragraph_default, null, "Press anywhere"))));
};
RippleExample.title = "TouchableRipple";
var styles149 = StyleSheet_default2.create({
  container: {
    flex: 1
  },
  ripple: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center"
  }
});
var TouchableRippleExample_default = RippleExample;

// src/rnpex/Examples/ThemeExample.tsx
var React278 = __toModule(require_react());
var Content = () => {
  const theme2 = useTheme();
  return /* @__PURE__ */ React278.createElement(View_default, {
    style: [styles150.container, {backgroundColor: theme2.colors.background}]
  }, /* @__PURE__ */ React278.createElement(Paragraph_default, {
    style: styles150.paragraph
  }, "React Native Paper automatically adapts theme based on system preferences"), /* @__PURE__ */ React278.createElement(Paragraph_default, {
    style: styles150.paragraph
  }, "Please change system theme to dark/light to see the effect"));
};
var ThemeExample = () => {
  return /* @__PURE__ */ React278.createElement(Provider_default, null, /* @__PURE__ */ React278.createElement(Content, null));
};
ThemeExample.title = "Theme";
var styles150 = StyleSheet_default2.create({
  container: {
    flex: 1,
    justifyContent: "center"
  },
  paragraph: {
    textAlign: "center",
    marginHorizontal: 16,
    marginVertical: 16
  }
});
var ThemeExample_default = ThemeExample;

// src/rnpex/Examples/RadioButtonItemExample.tsx
var React279 = __toModule(require_react());
var RadioButtonItemExample = () => {
  const [checkedDefault, setCheckedDefault] = React279.useState(true);
  const [checkedAndroid, setCheckedAndroid] = React279.useState(true);
  const [checkedIOS, setCheckedIOS] = React279.useState(true);
  const {
    colors: {background}
  } = useTheme();
  return /* @__PURE__ */ React279.createElement(View_default, {
    style: [
      styles151.container,
      {
        backgroundColor: background
      }
    ]
  }, /* @__PURE__ */ React279.createElement(RadioButton_default2.Item, {
    label: "Default (will look like whatever system this is running on)",
    status: checkedDefault ? "checked" : "unchecked",
    onPress: () => setCheckedDefault(!checkedDefault),
    value: "default"
  }), /* @__PURE__ */ React279.createElement(RadioButton_default2.Item, {
    label: "Material Design",
    mode: "android",
    status: checkedAndroid ? "checked" : "unchecked",
    onPress: () => setCheckedAndroid(!checkedAndroid),
    value: "android"
  }), /* @__PURE__ */ React279.createElement(RadioButton_default2.Item, {
    label: "iOS",
    mode: "ios",
    status: checkedIOS ? "checked" : "unchecked",
    onPress: () => setCheckedIOS(!checkedIOS),
    value: "iOS"
  }));
};
RadioButtonItemExample.title = "Radio Button Item";
var styles151 = StyleSheet_default2.create({
  container: {
    flex: 1,
    backgroundColor: colors_exports.white,
    paddingVertical: 8
  }
});
var RadioButtonItemExample_default = RadioButtonItemExample;

// src/rnpex/ExampleList.tsx
var examples = {
  activityIndicator: ActivityIndicatorExample_default,
  appbar: AppbarExample_default,
  avatar: AvatarExample_default,
  badge: BadgeExample_default,
  banner: BannerExample_default,
  bottomNavigation: BottomNavigationExample_default,
  button: ButtonExample_default,
  card: CardExample_default,
  checkbox: CheckboxExample_default,
  checkboxItem: CheckboxItemExample_default,
  chip: ChipExample_default,
  dataTable: DataTableExample_default,
  dialog: DialogExample_default,
  divider: DividerExample_default,
  fab: FABExample_default,
  iconButton: IconButtonExample_default,
  listAccordion: ListAccordionExample_default,
  listAccordionGroup: ListAccordionGroupExample_default,
  listSection: ListSectionExample_default,
  menu: MenuExample_default,
  progressbar: ProgressBarExample_default,
  radio: RadioButtonExample_default,
  radioGroup: RadioButtonGroupExample_default,
  radioItem: RadioButtonItemExample_default,
  searchbar: SearchbarExample_default,
  snackbar: SnackbarExample_default,
  surface: SurfaceExample_default,
  switch: SwitchExample_default,
  text: TextExample_default,
  textInput: TextInputExample_default,
  toggleButton: ToggleButtonExample_default,
  touchableRipple: TouchableRippleExample_default,
  theme: ThemeExample_default
};
var data = Object.keys(examples).map((id2) => ({id: id2, data: examples[id2]}));
function ExampleList({navigation: navigation2}) {
  const renderItem = ({item}) => /* @__PURE__ */ React280.createElement(List_exports.Item, {
    title: item.data.title,
    onPress: () => navigation2.navigate(item.id)
  });
  const keyExtractor2 = (item) => item.id;
  const {colors} = useTheme();
  const safeArea = useSafeArea();
  return /* @__PURE__ */ React280.createElement(FlatList_default2, {
    contentContainerStyle: {
      backgroundColor: colors.background,
      paddingBottom: safeArea.bottom
    },
    ItemSeparatorComponent: Divider_default,
    renderItem,
    keyExtractor: keyExtractor2,
    data
  });
}

// src/navigators/Example.tsx
var Stack2 = createStackNavigator_default();
function Examples() {
  return /* @__PURE__ */ React281.createElement(Stack2.Navigator, {
    headerMode: "screen",
    screenOptions: {
      header: ({navigation: navigation2, scene, previous}) => /* @__PURE__ */ React281.createElement(Appbar_default2.Header, null, previous ? /* @__PURE__ */ React281.createElement(Appbar_default2.BackAction, {
        onPress: () => navigation2.goBack()
      }) : navigation2.openDrawer ? /* @__PURE__ */ React281.createElement(Appbar_default2.Action, {
        icon: "menu",
        onPress: () => navigation2.openDrawer()
      }) : null, /* @__PURE__ */ React281.createElement(Appbar_default2.Content, {
        title: scene.descriptor.options.title
      }))
    }
  }, /* @__PURE__ */ React281.createElement(Stack2.Screen, {
    name: "Home",
    component: ExampleList,
    options: {title: "Examples"}
  }), Object.keys(examples).map((id2) => /* @__PURE__ */ React281.createElement(Stack2.Screen, {
    key: id2,
    name: id2,
    component: examples[id2],
    options: {title: examples[id2].title}
  })));
}

// src/navigators/Root.tsx
var RootStack = createStackNavigator_default();
var RootStackScreen = () => {
  return /* @__PURE__ */ import_react65.default.createElement(RootStack.Navigator, {
    headerMode: "none"
  }, /* @__PURE__ */ import_react65.default.createElement(RootStack.Screen, {
    name: "Dashboard",
    component: DrawerNavigator2
  }), /* @__PURE__ */ import_react65.default.createElement(RootStack.Screen, {
    name: "HomeScreen",
    component: HomeScreen_default
  }), /* @__PURE__ */ import_react65.default.createElement(RootStack.Screen, {
    name: "LoginScreen",
    component: LoginScreen_default
  }), /* @__PURE__ */ import_react65.default.createElement(RootStack.Screen, {
    name: "RegisterScreen",
    component: RegisterScreen_default
  }), /* @__PURE__ */ import_react65.default.createElement(RootStack.Screen, {
    name: "ForgotPasswordScreen",
    component: ForgotPasswordScreen_default
  }), /* @__PURE__ */ import_react65.default.createElement(RootStack.Screen, {
    name: "Examples",
    component: Examples
  }), /* @__PURE__ */ import_react65.default.createElement(RootStack.Screen, {
    name: "MDX",
    component: MDXComp
  }));
};
var Root_default = RootStackScreen;

// node_modules/@expo-google-fonts/roboto/useFonts.js
var import_react66 = __toModule(require_react());
function useFonts(map3) {
  let [loaded2, setLoaded] = (0, import_react66.useState)(false);
  let [error2, setError] = (0, import_react66.useState)(null);
  (0, import_react66.useEffect)(() => {
    loadAsync(map3).then(() => setLoaded(true)).catch(setError);
  }, []);
  return [loaded2, error2];
}

// node_modules/@expo-google-fonts/roboto/index.js
var Roboto_100Thin = require_Roboto_100Thin();
var Roboto_100Thin_Italic = require_Roboto_100Thin_Italic();
var Roboto_300Light = require_Roboto_300Light();
var Roboto_300Light_Italic = require_Roboto_300Light_Italic();
var Roboto_400Regular = require_Roboto_400Regular();
var Roboto_400Regular_Italic = require_Roboto_400Regular_Italic();
var Roboto_500Medium = require_Roboto_500Medium();
var Roboto_500Medium_Italic = require_Roboto_500Medium_Italic();
var Roboto_700Bold = require_Roboto_700Bold();
var Roboto_700Bold_Italic = require_Roboto_700Bold_Italic();
var Roboto_900Black = require_Roboto_900Black();
var Roboto_900Black_Italic = require_Roboto_900Black_Italic();

// src/App.tsx
var Main = () => {
  let [fontsLoaded] = useFonts({
    Roboto: Roboto_400Regular
  });
  return /* @__PURE__ */ import_react67.default.createElement(ThemeProvider3, null, /* @__PURE__ */ import_react67.default.createElement(ThemeContext2.Consumer, null, ({toggleTheme, isThemeDark, theme: theme2}) => /* @__PURE__ */ import_react67.default.createElement(Provider_default, {
    theme: theme2
  }, /* @__PURE__ */ import_react67.default.createElement(NavigationContainer_default, {
    linking: {enabled: true, prefixes: ["http://127.0.0.1:5501/public"]},
    theme: theme2
  }, /* @__PURE__ */ import_react67.default.createElement(Root_default, null)))));
};
var App_default = Main;

// src/index.tsx
registerRootComponent(App_default);
//# sourceMappingURL=/.//bundle.js.map
